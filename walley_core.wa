;; walley_core.wa 
;; walley language 
;; created by Yiyi Wang 
;; Copyright (c) Yiyi Wang. All rights reserved.
(def walley-core-author 'Yiyi-Wang)
(def walley-core-version "0.00029")
(def walley-language-version "0.3.8483")

(def break 'break)          ;; for foreach function
(def continue 'continue)

;; check data type
(def int? (lambda [v] (eq? (typeof v) 'integer)))
(def integer? int?)
(def float? (lambda [v] (eq? (typeof v) 'float)))
(def pair? (lambda [v] (eq? (typeof v) 'pair)))
(def list? pair?)
;(defn ratio? [v] (eq? (typeof v) 'ratio))
(def null? (lambda [v] (eq? v ())))
(def vector? (lambda [v] (eq? (typeof v) 'vector)))
(def lambda? (lambda [v] (eq? (typeof v) 'lambda)))
(def table? (lambda [v] (eq? (typeof v) 'table)))
(def string? (lambda [v] (eq? (typeof v) 'string)))
(def fn? lambda?)

;; append and reverse functions.
;; which will be used for macro expansion
(def append 
     (lambda (a b)
       (if (null? a)
     b
   (cons (car a)
         (append (cdr a)
           b)))))
;; reverse the list
(def reverse 
  (fn [a]
    (def reverse_iter 
      (fn (a result)
              (if (null? a)
                result
                (reverse_iter (cdr a)
                              (cons (car a)
                                    result)))))
    (reverse_iter a ())))


(def error (lambda [s] (print "ERROR: ") (print s)))

;; defn macro
;; like clojure
;; (defn func-name args . body)
(defmacro defn
  [(func_name args . body)
  `(def ~func_name (lambda ~args ~@body))
  ]
  )


;; list macro
;(defmacro List 
;  [() ()]
;  [(a) `(cons ~a ())]
;  [(a . b) `(cons ~a (List ~@b))])

; I decide to use a fn instead of maco to represent List
(def List (fn [. args] args))


;; cond macro
(defmacro cond 
  [() ()]
  [(#else body)
   body]
  [(#else body . rest)
   (print "ERROR: cond invalid statements.\n")]
  [(test body)
  `(if ~test ~body '())]
  [(test body . rest)
   `(if ~test ~body (cond ~@rest))])

;; and
(defmacro and 
  [() 'true]
  [(a) a]
  [(a . b) `(if ~a (and ~@b) ())]
  )  

;; or
(defmacro or
  [() ()]
  [(a) a]
  [(a . b) `(if ~a ~a (or ~@b))]
  )
    
;; test cond
;(print (cond (= 0 1) (display "Hi1")
;               (= 2 3) (display "Hi2")
;               else    (display "else")
;               1
;               ))
(defmacro defm 
    [(macro-name args pattern)
     `(defmacro ~macro-name (~args ~pattern))])

;; get the length of the list
(def list-length
  (lambda [n]
          (def list-length-iter
            (lambda [n r]
                    (if (null? n)
                      r
                      (list-length-iter (cdr n)
                                        (+ r 1)))))
          (list-length-iter n 0)))
;; list-slice-helper
(defn list-slice-helper [l end]
  (if (= end 0)
    ()
    (cons (car l)
          (list-slice-helper (cdr l)
                             (- end 1)))))
(defn list-slice-remove-head [l start]
  (if (= start 0)
    l
    (list-slice-remove-head (cdr l)
                            (- start 1))))
;; list-slice
(defn list-slice  [l start end]
          (set! end (or end (list-length l)))
          (list-slice-helper (list-slice-remove-head l start)
                             (- end start)))
;; str
;; eg (str "Hello " "World") -> "Hello World"
(defn str [. b]
  (defn str-iter [b]
    (if (null? b)
    ""
    (string-append (car b)
                   (str-iter (cdr b)))))
  (str-iter b))


;; get length of several data types
(defn len [b] 
  (if (null? b)
    0
    (if (string? b)
      (string-length b)
      (if (pair? b)
        (list-length b)
        (if (vector? b)
          (vector-length b)
          (error "Function len invalid data type"))))))


;; string=?
;; string>?
;; string<?
;; string>=?
;; string<=?
(defn string=? [a b] (= (strcmp a b) 0))
(defn string>? [a b] (> (strcmp a b) 0))
(defn string<? [a b] (< (strcmp a b) 0))
(defn string>=? [a b] (>= (strcmp a b) 0))
(defn string<=? [a b] (<= (strcmp a b) 0))

;; **
(def ** math-pow)
;; ########################### LIST ############################
;; some functions for list

(defn caar [x] (car (car x)))
(defn cadr [x] (car (cdr x)))
(defn cddr [x] (cdr (cdr x)))
(defn caddr [x] (car (cdr (cdr x))))
(defn cdddr [x] (cdr (cdr (cdr x))))
(defn cadddr [x] (car (cdr (cdr (cdr x)))))

(def list-reverse reverse)
(defn list-ref [l i]
  (if (= i 0)
    (car l)
    (list-ref (cdr l)
              (- i 1))))

;; list-append
;; eg (list-append '(1 2) '(4 5)) => '(1 2 4 5)
;; eg (list-append '(1 2) 4) => '(1 2 4)
(defn list-append [l0 l1]
  (defn list-append-iter0 [l0]
    (if (null? l0)
      l1
      (cons (car l0) 
            (list-append-iter0 (cdr l0)))))
  (if (pair? l1)
    (list-append-iter0 l0)
    (begin (set! l1 (cons l1 '()))
           (list-append-iter0 l0))))
;; list->vector
(defn list->vector [l]
  (defn list->vector-iter [l output]
    (if (null? l)
      output
      (list->vector-iter (cdr l) 
                         (vector-push! output (car l)))))
  (list->vector-iter l #[]))

;; (list-for-each '(1 2 3 4) (lambda [n] (print n)))
(defn list-foreach [l f]
  (if (null? l)
    ()
    (if (eq? (f (car l)) 'break)
      ()
      (list-foreach (cdr l)
                     f))
    ))

;; ############## VECTOR ########################
;; vector->list
(defn vector->list [v]
  (def length (vector-length v))
  (defn vector->list-iter [v i]
    (if (= i length)
      '()
      (cons v[i]
            (vector->list-iter v
                               (+ i 1)))))
  (vector->list-iter v 0))

;; vector-find
;; find element in vector and return its index
(defn vector-find [v o start-index]
  (set! start-index (or start-index 0))
  (def length (vector-length v))
  (defn vector-find-iter [i]
    (if (= i length)
      -1 ;; didn't find
      (if (eq? v[i]
               o)
        i
        (vector-find-iter (+ i 1))))) 
  (vector-find-iter start-index))

;; vector-foreach
;; eg (vector-foreach #[1,2,3,4] (lambda [i] (if (= i 3) break (print i))))
;; will print 1 2
(defn vector-foreach [v f]
  (def v-length (vector-length v))
  (defn vector-foreach-iter [count]
    (if (= count v-length)
      ()
      (if (eq? (f count v[count]) 'break) ;; break
        ()
        (vector-foreach-iter (+ count 1)))))
  (vector-foreach-iter 0))

;; table-foreach
(defn table-foreach [t f]
  (def keys (table-keys t))
  (defn table-foreach-iter [keys]
    (if (null? keys)
      ()
      (if (eq? (f (car keys)
                   t[(car keys)])
               'break)
        ()
        (table-foreach-iter (cdr keys)))))
  (table-foreach-iter keys))


;; foreach together
;; pair       => list-foreach
;; vector     => vector-foreach
;; dictionary => dictionary-foreach
(defn foreach [value func]
  (def t (typeof value))
  (cond (eq? t 'pair)   (list-foreach value func)
        (eq? t 'vector) (vector-foreach value func)
        (eq? t 'table)  (table-foreach value func)
        else (print "ERROR: Function foreach invalid param type")))

;; slice
(defn slice [v start end]
  (def t (typeof v))
  (set! end (or end (cond (eq? t 'pair) (list-length v)
                          (eq? t 'string) (string-length v)
                          (eq? t 'vector) (vector-length v))))
  (cond (eq? t 'pair) (list-slice v start end)
        (eq? t 'string) (string-slice v start end)
        (eq? t 'vector) (vector-slice v start end)
        else ()))

;; times function
;; eg 
;; (times 5 (lambda [n] (print n))) => 0 1 2 3 4
(defn times [n f]
  (defn times-iter [c]
    (if (= c n)
      ()
      (begin (f c)
             (times-iter (+ c 1)))))
  (times-iter 0)) 

;; (for 0 5 1 (lambda [i] (print i))) => 0, 1, 2, 3, 4
;; (for 0 4 (lambda [i] (print i)))   => 0 1 2 3
;; (for 10 0 -1 (lambda [i] (print i))) => 10987654321
;; (for 3 (lambda [i] (print i))) => 0 1 2
;; only support integer param
(defn for_fn [start end step f]
  (def judge-sign (if (> step 0) >= <=))
  (defn for-iter [i]
    (if (judge-sign i end)
      ()
      (if (eq? (f i) 'break)
        ()
        (for-iter (+ i step)))))
  (for-iter start))
;; macro for for function
;;  (for 0 1 (lambda [i] (for 0 i (lambda [j] (print "j")))))
;; (lambda (i) ((0 0 109) 0 i (lambda (j) ((0 0 35) "j"))))
;; so macro doesn't work at this point
;; so I changed for function to for_fn function
(defmacro for 
  [(start end step fn) `(for_fn ~start ~end ~step ~fn)]
  [(start end fn) `(for_fn ~start ~end 1 ~fn)]
  [(end fn) `(for_fn 0 ~end 1 ~fn)])


;; some fundamental functions are here

;;##################### map #####################
;; map one parameters
;; (map1 square '(3 4)) => (9 16)
(defn map1 [f p]
  (if (null? p)
    '()
    (cons (f (car p))
          (map1 f (cdr p)))))
;; map variadic parameters
;; (map + '(3 4) '(5 6)) => '(8 10)
(defn map [f p0 . p]
  ;(print p)
  ;(print (apply f (map1 car (cons p0 p))))
  (if (null? p0)
    '()
    (cons (apply f (map1 car (cons p0 p)))
          (apply map (cons f (map1 cdr (cons p0 p)))))))



(defn apply-test [f p0 . p]
  (apply f (map1 car (cons p0 p))))

;; ##################### filter ##################
;; filter function
;; eg (filter is-even '(3 4 5 6)) => '(4 6)
;; where is-even return true or false
;; (filter f l)
;; where f must return true or false

(def filter
  (fn [func l]
    (if (null? l)	       
      '()
      (if (func (car l))
        (cons (car l)
              (filter func (cdr l)))
        (filter func (cdr l))))))
;; test filter function
;; (print (filter (lambda [n] (if (> n 0) 'true '())) '(-1 2 -3 4 -5 6))) => (2 4 6)
;; pass

;; ##################### reduce ##################
;; reduce function
;; eg (reduce + '(3 4 5)) => (+ (+ 3 4) 5)
;; (reduce f l)
;; where f has to have two parameters
(defn reduce [f l param-num]
  (set! param-num (if param-num param-num 2)) ;; default is 2
  (defn get-num-element-list [l num] ;; eg '(3 4 5) 2 => '(3 4)
    (if (= num 0)
      '()
      (if (null? l)
        (print "ERROR: reduce function invalid parameters list")
        (cons (car l)
            (get-num-element-list (cdr l)
                                  (- num 1))))))
  (defn cdrn [l num] ;; eg '(3 4 5) 2 => '(5)
    (if (= num 0)
      l
      (cdrn (cdr l) (- num 1))))
  (defn reduce-iter [f l param-num-1 acc]
    (if (null? l)
      acc
      (reduce-iter f 
                 (cdrn l param-num-1)
                 param-num-1
                 (apply f (cons acc (get-num-element-list l param-num-1))))))
  (if (null? l)
    '()
    (reduce-iter f (cdr l) (- param-num 1) (car l))))

;; #################### curry #####################
;; curry function
;; eg (((curry + 1) 2) 3) => 6
(defn curry [func . arg]
  (fn [. another-arg]
    (apply func (list-append arg another-arg))))

;; ################## Prototype based OOP #########
(def Object {:type 'Object  ;;;; define base Object
             :clone (fn [self]
                      (def new-object {})
                      (add-proto new-object self)
                      new-object)}) 
(add-proto Object ()) ;; whose proto is ()


;; modules
(def vector 
  {:length vector-length
   :push! vector-push!
   :pop! vector-pop!
   :slice vector-slice
   :->list vector->list
   :find vector-find
   :foreach vector-foreach
   })
(def list 
  {:length list-length
   :slice list-slice
   :reverse list-reverse
   :ref list-ref
   :append list-append
   :->vector list->vector
   :foreach list-foreach
   })
(def table
  {:keys table-keys
   :delete table-delete
   :foreach table-foreach
   :length table-length})
(def string
  {:slice string-slice
   :length string-length
   :append string-append
   :->int string->int
   :->float string->float
   :find string-find
   :replace string-replace
   :char-code-at string-char-code-at
   :from-char-code string-from-char-code
   })

(def math 
  {:cos math-cos
   :sin math-sin
   :tan math-tan
   :acos math-acos
   :asin math-asin
   :atan math-atan
   :cosh math-cosh
   :sinh math-sinh
   :tanh math-tanh
   :log math-log
   :exp math-exp
   :log10 math-log10
   :pow math-pow
   :sqrt math-sqrt
   :ceil math-ceil
   :floor math-floor
   })
(def int 
  {:->string int->string
   })

(def float
  {:->string float->string
   :->int64 float->int64
   })

(def ratio 
  {:numer ratio-numer
   :denom ratio-denom
   })

(def file
  {:read file-read
   :write file-write
   :abs-path file-abs-path
   })

(def sys
  {:argv sys-argv
   :cmd sys-cmd
   }
)

