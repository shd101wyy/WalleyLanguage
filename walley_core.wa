;; walley_core.wa
;; walley language
;; created by Yiyi Wang
;; Copyright (c) Yiyi Wang. All rights reserved.
(def walley-core-author 'Yiyi-Wang)
(def walley-core-version "0.00035")
(def walley-language-version "0.3.8497")
(def walley {
     :author 'Yiyi-Wang
     :core-author 'Yiyi-Wang
     :core-version walley-core-version
     :language-version walley-language-version
     })
;(def println (. args) (apply print args) (print "\n"))
(defmacro println (. args) `(print ~@args "\n"))

(def break 'break)          ;; for foreach function
(def continue 'continue)

;; check data type
(def int? (v) (eq? (typeof v) 'integer))
(def integer? int?)
(def float? (v) (eq? (typeof v) 'float))
(def pair? (v) (eq? (typeof v) 'pair))
(def list? pair?)
(def ratio? (v) (eq? (typeof v) 'ratio))
;(def null? (lambda (v) (eq? v ())))
(def vector? (v) (eq? (typeof v) 'vector))
(def lambda? (v) (eq? (typeof v) 'lambda))
(def table?  (v) (eq? (typeof v) 'table))
(def string? (v) (eq? (typeof v) 'string))
(def fn? lambda?)
(def object? (v) (eq? (typeof v) 'object))

(def not (a) (if a () 1))

;; append and reverse functions.
;; which will be used for macro expansion
(def append (a b)
  (if (null? a)
    b
    (cons (car a)
          (append (cdr a)
                  b))))
;; reverse the list
(def list-reverse (a)
    (def reverse_iter (a result)
              (if (null? a)
                result
                (reverse_iter (cdr a)
                              (cons (car a)
                                    result))))
    (reverse_iter a ()))

(def error (s) (print "ERROR: ") (print s))

;; list macro
;(defmacro List
;  () ()
;  (a) `(cons ~a ())
;  (a . b) `(cons ~a (List ~@b)))

; I decide to use a fn instead of maco to represent List
(def List (. args) args)


;; let macro
;; eg
;; (let x 1
;;      y 2
;;      (+ x y))

;; parse-let fn is used to parse arguments
;; eg (x 12 y 13 (+ x y)) => ((fn () (def x 12) (def y 13) (+ x y)))
(def parse-let (args-list)
    (def var-name-list {}) ;; used to save var names
    (def parse-let-helper (args)
        (if (null? args)
            (print "ERROR: wrong let statement: " (cons 'let args-list))
            (if (null? (cdr args))
                args
                (if (var-name-list (car args)) ;; var-name already defined
                    (cons (List 'set! (car args) (car (cdr args)))
                    (parse-let-helper (cdr (cdr args))))
                    (begin (var-name-list (car args) 'true) ;; save this var-name to var-name-list
                        (cons (List 'def (car args) (car (cdr args)))
                        (parse-let-helper (cdr (cdr args)))))))))
    (def parse-result (parse-let-helper args-list))
    `((fn () ~@parse-result)))
(defmacro let
    (. rest) (parse-let rest))

;; cond macro
(defmacro cond
  () ()
  (#else body)    body
  (#else body . rest)   (print "ERROR: cond invalid statements.\n")
  (test body)  `(if ~test ~body '())
  (test body . rest)    `(if ~test ~body (cond ~@rest))
  )

;; and
(defmacro and
  () 'true
  (a) a
  (a . b) `(if ~a (and ~@b) ())
  )

;; or
(defmacro or
  () ()
  (a) a
  (a . b) `(if ~a ~a (or ~@b))
  )

;; get the length of the list
(def list-length (n)
    (def list-length-iter (n r)
        (if (null? n)
            r
            (list-length-iter (cdr n)
                              (+ r 1))))
    (list-length-iter n 0))
;; list-slice-helper
(def list-slice-helper (l end)
  (if (= end 0)
    ()
    (cons (car l)
          (list-slice-helper (cdr l)
                             (- end 1)))))
(def list-slice-remove-head (l start)
  (if (= start 0)
    l
    (list-slice-remove-head (cdr l)
                            (- start 1))))
;; list-slice
(def list-slice  (l start end)
    (set! end (or end (list-length l)))
    (list-slice-helper (list-slice-remove-head l start)
                       (- end start)))


;; str
;; eg (String "Hello " "World") -> "Hello World"
(def String (. b)
  (def str-iter (b)
    (if (null? b)
        ""
        (string-append (car b)
                       (str-iter (cdr b)))))
  (str-iter b))


;; get length of several data types
(def len (b)
  (if (null? b)
    0
    (if (string? b)
      (string-length b)
      (if (pair? b)
        (list-length b)
        (if (vector? b)
          (vector-length b)
          (error "Function len invalid data type"))))))


;; string=?
;; string>?
;; string<?
;; string>=?
;; string<=?
(def string=? (a b) (= (strcmp a b) 0))
(def string>? (a b) (> (strcmp a b) 0))
(def string<? (a b) (< (strcmp a b) 0))
(def string>=? (a b) (>= (strcmp a b) 0))
(def string<=? (a b) (<= (strcmp a b) 0))

;; **
(def ** math-pow)
;; ########################### LIST ############################
;; some functions for list

(def caar (x) (car (car x)))
(def cadr (x) (car (cdr x)))
(def cddr (x) (cdr (cdr x)))
(def caddr (x) (car (cdr (cdr x))))
(def cdddr (x) (cdr (cdr (cdr x))))
(def cadddr (x) (car (cdr (cdr (cdr x)))))

(def list-ref (l i)
  (if (= i 0)
    (car l)
    (list-ref (cdr l)
              (- i 1))))

;; list-append
;; eg (list-append '(1 2) '(4 5)) => '(1 2 4 5)
;; eg (list-append '(1 2) 4) => '(1 2 4)
(def list-append (l0 l1)
  (def list-append-iter0 (l0)
    (if (null? l0)
      l1
      (cons (car l0)
            (list-append-iter0 (cdr l0)))))
  (if (pair? l1)
    (list-append-iter0 l0)
    (begin (set! l1 (cons l1 '()))
           (list-append-iter0 l0))))
;; list->vector
(def list->vector (l)
  (def list->vector-iter (l output)
    (if (null? l)
      output
      (list->vector-iter (cdr l)
                         (vector-push! output (car l)))))
  (list->vector-iter l []))

;; (list-for-each '(1 2 3 4) (lambda (n) (print n)))
(def list-foreach (l f)
  (if (null? l)
    ()
    (if (eq? (f (car l)) 'break)
      ()
      (list-foreach (cdr l)
                     f))))
;;
;; '((a . 12) (b . 20)) like list made table
;;
(def list-assoc (l key)
    (if (null? l)
      ()
      (if (eq? key (car (car l)))
        (cdr (car l))
        (list-assoc (cdr l)
               key))))


;; ############## VECTOR ########################
;; vector->list
(def vector->list (v)
  (def length (vector-length v))
  (def vector->list-iter (v i)
    (if (= i length)
      '()
      (cons v[i]
            (vector->list-iter v
                               (+ i 1)))))
  (vector->list-iter v 0))

;; vector-find
;; find element in vector and return its index
(def vector-find (v o start-index)
  (set! start-index (or start-index 0))
  (def length (vector-length v))
  (def vector-find-iter (i)
    (if (= i length)
      -1 ;; didn't find
      (if (eq? v[i]
               o)
        i
        (vector-find-iter (+ i 1)))))
  (vector-find-iter start-index))

;; vector-foreach
;; eg (vector-foreach [1,2,3,4] (lambda (i) (if (= i 3) break (print i))))
;; will print 1 2
(def vector-foreach (v f)
  (def v-length (vector-length v))
  (def vector-foreach-iter (count)
    (if (= count v-length)
      ()
      (if (eq? (f v[count] count) 'break) ;; break
        ()
        (vector-foreach-iter (+ count 1)))))
  (vector-foreach-iter 0))

;; table-foreach
(def table-foreach (t f)
  (def keys (table-keys t))
  (def table-foreach-iter (keys)
    (if (null? keys)
      ()
      (if (eq? (f (car keys)
                   t[(car keys)])
               'break)
        ()
        (table-foreach-iter (cdr keys)))))
  (table-foreach-iter keys))


;; foreach together
;; pair       => list-foreach
;; vector     => vector-foreach
;; dictionary => dictionary-foreach
(def foreach (value func)
  (def t (typeof value))
  (cond (eq? t 'pair)   (list-foreach value func)
        (eq? t 'vector) (vector-foreach value func)
        (eq? t 'table)  (table-foreach value func)
        else (print "ERROR: Function foreach invalid param type")))

;; slice
(def slice (v start end)
  (def t (typeof v))
  (set! end (or end (cond (eq? t 'pair) (list-length v)
                          (eq? t 'string) (string-length v)
                          (eq? t 'vector) (vector-length v))))
  (cond (eq? t 'pair) (list-slice v start end)
        (eq? t 'string) (string-slice v start end)
        (eq? t 'vector) (vector-slice v start end)
        else ()))

;; times function
;; eg
;; (times 5 (lambda (n) (print n))) => 0 1 2 3 4
(def times (n f)
  (def times-iter (c)
    (if (= c n)
      ()
      (begin (f c)
             (times-iter (+ c 1)))))
  (times-iter 0))

;; (for 0 5 1 (fn (i) (print i))) => 0, 1, 2, 3, 4
;; (for 0 4 (fn (i) (print i)))   => 0 1 2 3
;; (for 10 0 -1 (fn (i) (print i))) => 10987654321
;; (for 3 (fn (i) (print i))) => 0 1 2
;; only support integer param
(def for_fn (start end step f)
  (def judge-sign (if (> step 0) >= <=))
  (def for-iter (i)
    (if (judge-sign i end)
      ()
      (if (eq? (f i) 'break)
        ()
        (for-iter (+ i step)))))
  (for-iter start))
;; macro for for function
;;  (for 0 1 (fn (i) (for 0 i (fn (j) (print "j")))))
;; (fn (i) ((0 0 109) 0 i (fn (j) ((0 0 35) "j"))))
;; so macro doesn't work at this point
;; so I changed for function to for_fn function
(defmacro for
  (start end step fn) `(for_fn ~start ~end ~step ~fn)
  (start end fn) `(for_fn ~start ~end 1 ~fn)
  (end fn) `(for_fn 0 ~end 1 ~fn))


;; some fundamental functions are here

;;##################### list map #####################
;; map one parameters
;; (list-map1 square '(3 4)) => (9 16)
(def list-map1 (f p)
  (if (null? p)
    '()
    (cons (f (car p))
          (list-map1 f (cdr p)))))
;; map variadic parameters
;; (list-map + '(3 4) '(5 6)) => '(8 10)
(def list-map (f p0 . p)
  ;(print p)
  ;(print (apply f (list-map1 car (cons p0 p))))
  (if (null? p0)
    '()
    (cons (apply f (list-map1 car (cons p0 p)))
          (apply list-map (cons f (list-map1 cdr (cons p0 p)))))))

;; list-zip
;; (list:zip '(1 2 3) '(4 5 6)) => '((1 4) (2 5) (3 6))
(def list-zip (. args) (apply list-map (cons List args)))

;(def apply-test (f p0 . p)
;  (apply f (list-map1 car (cons p0 p))))

;; ##################### vector-map ##############
;; (vector-map1 square [1 2]) => (1 4)
(def vector-map1 (f p count result length-of-vector)
     (if (= count length-of-vector)
     	 result
     	 (vector-map1 f p (+ count 1) (vector-push! result (f p[count])) length-of-vector)))
;; (vector-get-nth-arguments 0 '([1,2] [4,5])) => '(1, 4)
(def vector-get-nth-arguments (n args)
     (if (null? args)
     	 ()
	 (cons ((car args) n)
	       (vector-get-nth-arguments n (cdr args)))))
(def vector-map-helper (f count result length-of-1st-vector p)
     (if (= count length-of-1st-vector)
     	 result
	 (begin	(vector-push! result
			      (apply f (vector-get-nth-arguments count p)))
		(vector-map-helper f (+ count 1) result length-of-1st-vector p))))
;; eg (vector-map + [1,2] [3,4]) => [4, 6]
(def vector-map (f p . args)
     (vector-map-helper f 0 [] (vector-length p) (cons p args)))

;; vector-zip
;; eg (vector:zip #(1 2) #(3 4)) => [[1 3] [2 4]]
(def vector-zip (. args) (apply vector-map (cons Vector! args)))

;; ##################### filter ##################
;; filter function
;; eg (list-filter is-even '(3 4 5 6)) => '(4 6)
;; where is-even return true or false
;; (list-filter f l)
;; where f must return true or false

(def list-filter
  (fn (func l)
    (if (null? l)
      '()
      (if (func (car l))
        (cons (car l)
              (list-filter func (cdr l)))
        (list-filter func (cdr l))))))
;; test filter function
;; (print (list-filter (fn (n) (if (> n 0) 'true '())) '(-1 2 -3 4 -5 6))) => (2 4 6)
;; pass

;; (vector:filter (fn (x) (> x 0)) #(-1 2 3)) => (2 3) remove x that is <= 0
(def vector-filter (func v)
     (def v-length (vector-length v))
     (def helper (count result)
	  (if (= count v-length)
	      result
	    (begin (if (func v[count])
		       (vector-push! result v[count]))
		   (helper (+ count 1)
			   result))))
     (helper 0 []))

;; ##################### reduce ##################
;; reduce function
;; eg (reduce + '(3 4 5)) => (+ (+ 3 4) 5)
;; (reduce f l)
;; where f has to have two parameters
(def reduce (f l param-num)
  (set! param-num (if param-num param-num 2)) ;; default is 2
  (def get-num-element-list (l num) ;; eg '(3 4 5) 2 => '(3 4)
    (if (= num 0)
      '()
      (if (null? l)
        (print "ERROR: reduce function invalid parameters list")
        (cons (car l)
            (get-num-element-list (cdr l)
                                  (- num 1))))))
  (def cdrn (l num) ;; eg '(3 4 5) 2 => '(5)
    (if (= num 0)
      l
      (cdrn (cdr l) (- num 1))))
  (def reduce-iter (f l param-num-1 acc)
    (if (null? l)
      acc
      (reduce-iter f
                 (cdrn l param-num-1)
                 param-num-1
                 (apply f (cons acc (get-num-element-list l param-num-1))))))
  (if (null? l)
    '()
    (reduce-iter f (cdr l) (- param-num 1) (car l))))

;; #################### curry #####################
;; curry function
;; eg (((curry + 1) 2) 3) => 6
(def curry (func . arg)
  (fn (. another-arg)
    (apply func (list-append arg another-arg))))

;; ################## Prototype based OOP #########
(def Object {:type 'Object  ;;;; define base Object
             :clone (fn (self new-object)
		                (if new-object
                            (add-proto new-object self)
                            (add-proto {} self)))
            })
(add-proto Object ()) ;; whose proto is ()

;; ################## Builtin Functions ###########
(def abs (x) (if (> x 0) x (- x))) ;; abs function
(def chr (x) (string-from-char-code x)) ;; chr function
(def ord (x) (string-char-code-at x 0)) ;; ord function

;; ################# While statement ##############
;; eg (def x 1)
;;    (while-func (fn () (< x 10))
;;      	  (fn () (print x) (set! x (+ x 1))))
(def while-func	(test body)
     (if (test)
	 (if (eq? (body) 'break)
	     ()
	     (while-func test body))
       ()))
;; abbreviate fn
(defmacro while
    (test . body) `(while-func (fn () ~test) (fn () ~@body))
    )

;; multi methods
;; eg:
;; (def map (multi (fn (f x . y) (typeof x))))
;; (defmethod map :vector vector-map)
;; (defmethod map :pair vector-map)
;; (map (fn (i) (+ i 1)) '(1 2 3))
;;
;;
(def multi-table {})
(def multi (judge-fn dispatch-object)
     ;; init dispatch-object if necessary
     (if (null? dispatch-object) (set! dispatch-object {}))
     (def r (fn (. args)
	      (apply (dispatch-object (apply judge-fn args))
	      	     args)))
     ;; add r to multi-table
     (multi-table r dispatch-object)
     r)
(def defmethod (var judge func)
     ((multi-table var) judge func))

;; defmethod for map
(def map (multi (fn (f x . y) (typeof x))
     	 	{:vector vector-map
		     :pair list-map}))
(def filter (multi (fn (f x) (typeof x))
     	    	   {:vector vector-filter
		            :pair list-filter}
		    ))

;(defmethod filter 'vector vector-filter)
;(defmethod filter 'pair list-filter)

;; series actions
;; like js, ajax({}).success(function(){}).fail(function(){})
;; eg
;;       (-> (ajax {:data {:x 12}})
;;           (:success (fn (data) (print "Success")))
;;           (:fail)   (fn (data) (print "Fail")) )
;;

(defmacro ->
    (f (property . args))  `((~f ~property) ~@args)
    (f (property . args) . rest) `(-> ((~f ~property) ~@args) ~@rest)
        )

;; loop macro
;; eg
;; (loop n 10 acc 1
;;   (if (= n 0)
;;      acc
;;      (recur (- n 1) (* acc 1))))
;; will calculate 1*2*3*...*10
;; =>
;; ((fn (n acc) (if (= n 0) acc (recur (- n 1) (* acc 1)))) n 0)
(def parse-loop (args)
    (def parse-loop-helper (a var-names var-vals)
        (cond (null? a) (print "ERROR: loop invalid statement: " args "\n")
              (null? (cdr a)) [(car a), var-names, var-vals]
              else (parse-loop-helper (cdr (cdr a))
                                      (cons (car a) var-names)
                                      (cons (car (cdr a)) var-vals))))
    (def parse-result (parse-loop-helper args '() '()))
    (def body parse-result[0])
    (def var-names (list-reverse parse-result[1]))
    (def var-vals (list-reverse parse-result[2]))
    (cons `(fn ~var-names ~body) var-vals))
(defmacro loop
    (. args) (parse-loop args))


;; modules
(def vector
  {:length vector-length
   :push! vector-push!
   :pop! vector-pop!
   :slice vector-slice
   :->list vector->list
   :find vector-find
   :foreach vector-foreach
   :map vector-map
   :filter vector-filter
   :zip vector-zip
   })
(def vec vector)
(def list
  {:length list-length
   :slice list-slice
   :reverse list-reverse
   :ref list-ref
   :append list-append
   :->vector list->vector
   :foreach list-foreach
   :assoc list-assoc
   :map list-map
   :filter list-filter
   :zip list-zip
   })
(def table
  {:keys table-keys
   :delete! table-delete
   :foreach table-foreach
   :length table-length})
(def string
  {:slice string-slice
   :length string-length
   :append string-append
   :->int string->int
   :->float string->float
   :find string-find
   :replace string-replace
   :char-code-at string-char-code-at
   :from-char-code string-from-char-code
   })

(def math
  {:cos math-cos
   :sin math-sin
   :tan math-tan
   :acos math-acos
   :asin math-asin
   :atan math-atan
   :cosh math-cosh
   :sinh math-sinh
   :tanh math-tanh
   :log math-log
   :exp math-exp
   :log10 math-log10
   :pow math-pow
   :sqrt math-sqrt
   :ceil math-ceil
   :floor math-floor
   })
(def int
  {:->string int->string
   })

(def float
  {:->string float->string
   :->int64 float->int64
   })

(def ratio
  {:numer ratio-numer
   :denom ratio-denom
   })

(def file
  {:read file-read
   :write file-write
   :abs-path file-abs-path
   :close file-close
   :open File
   :readlines file-readlines
   :seek file-seek
   :SEEK_SET 1
   :SEEK_END 2
   :SEEK_CUR 3
})

(def sys
  {:argv sys-argv
   :cmd sys-cmd
   })

(def os
  {:fork os-fork
   :getpid os-getpid
   :getppid os-getppid
   :waitpid os-waitpid
   :getenv os-getenv})


(def walley-modules {
     :vector vector
     :list list
     :table table
     :string string
     :math math
     :int int
     :float float
     :ratio ratio
     :file file
     :sys sys
     :os os })
