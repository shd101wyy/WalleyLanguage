;; walley_core.wa 
;; walley language 
;; created by Yiyi Wang 
;; Copyright (c) Yiyi Wang. All rights reserved.
(def walley-core-author 'Yiyi-Wang)
(def walley-core-version "0.00021")
(def walley-language-version "0.3.8469")

(def break 'break)          ;; for foreach function
(def continue 'continue)

;; check data type
(def int? (lambda [v] (eq? (typeof v) 'integer)))
(def integer? int?)
(def float? (lambda [v] (eq? (typeof v) 'float)))
(def pair? (lambda [v] (eq? (typeof v) 'pair)))
(def list? pair?)
;(defn ratio? [v] (eq? (typeof v) 'ratio))
(def null? (lambda [v] (eq? v ())))
(def vector? (lambda [v] (eq? (typeof v) 'vector)))
(def lambda? (lambda [v] (eq? (typeof v) 'lambda)))
(def table? (lambda [v] (eq? (typeof v) 'table)))
(def string? (lambda [v] (eq? (typeof v) 'string)))

;; append and reverse functions.
;; which will be used for macro expansion
(def append 
     (lambda (a b)
       (if (null? a)
	   b
	 (cons (car a)
	       (append (cdr a)
		       b)))))


(def error (lambda [s] (display "ERROR: ") (display s)))

;; defn macro
;; like clojure
;; (defn func-name args . body)
(defmacro defn
  [(func_name args . body)
  `(def ~func_name (lambda ~args ~@body))
  ]
  )


;; list macro
(defmacro list 
  [() ()]
  [(a) `(cons ~a ())]
  [(a . b) `(cons ~a (list ~@b))])

;; cond macro
(defmacro cond 
  [() ()]
  [(#else body)
   body]
  [(#else body . rest)
   (display "ERROR: cond invalid statements.\n")]
  [(test body)
  `(if ~test ~body '())]
  [(test body . rest)
   `(if ~test ~body (cond ~@rest))])

;; and
(defmacro and 
  [() 'true]
  [(a) a]
  [(a . b) `(if ~a (and ~@b) ())]
  )	 

;; or
(defmacro or
  [() ()]
  [(a) a]
  [(a . b) `(if ~a ~a (or ~@b))]
  )
	  
;; test cond
;(display (cond (= 0 1) (display "Hi1")
;               (= 2 3) (display "Hi2")
;               else    (display "else")
;               1
;               ))

(defmacro defm 
	  [(macro-name args pattern)
	   `(defmacro ~macro-name (~args ~pattern))])



;; ########################### LIST ############################
;; some functions for list

(defn caar [x] (car (car x)))
(defn cadr [x] (car (cdr x)))
(defn cddr [x] (cdr (cdr x)))
(defn caddr [x] (car (cdr (cdr x))))
(defn cdddr [x] (cdr (cdr (cdr x))))
(defn cadddr [x] (car (cdr (cdr (cdr x)))))

(load 'list as 'list) ;; load list module

;; ########################### VECTOR ##########################
(load 'vector as 'vector)

;; ########################### TABLE ###########################
(load 'table as 'table)

;; str
;; eg (str "Hello " "World") -> "Hello World"
(defn str [. b]
  (defn str-iter [b]
    (if (null? b)
    ""
    (string/append (car b)
                   (str-iter (cdr b)))))
  (str-iter b))


;; get length of several data types
(defn len [b] 
  (if (null? b)
    0
    (if (string? b)
      (string/length b)
      (if (pair? b)
        (list/length b)
        (if (vector? b)
          (vector/length b)
          (error "Function len invalid data type"))))))


;; string=?
;; string>?
;; string<?
;; string>=?
;; string<=?
(defn string=? [a b] (= (strcmp a b) 0))
(defn string>? [a b] (> (strcmp a b) 0))
(defn string<? [a b] (< (strcmp a b) 0))
(defn string>=? [a b] (>= (strcmp a b) 0))
(defn string<=? [a b] (<= (strcmp a b) 0))

;; **
(def ** math/pow)


;; foreach together
;; pair       => list/foreach
;; vector     => vector/foreach
;; dictionary => dictionary/foreach
(defn foreach [value func]
  (def t (typeof value))
  (cond (eq? t 'pair)   (list/foreach value func)
        (eq? t 'vector) (vector/foreach value func)
        (eq? t 'table)  (table/foreach value func)
        else (display "ERROR: Function foreach invalid param type")))

;; slice
(defn slice [v start end]
  (def t (typeof v))
  (set! end (or end (cond (eq? t 'pair) (list/length v)
                          (eq? t 'string) (string/length v)
                          (eq? t 'vector) (vector/length v))))
  (cond (eq? t 'pair) (list/slice v start end)
        (eq? t 'string) (string/slice v start end)
        (eq? t 'vector) (vector/slice v start end)
        else ()))

;; times function
;; eg 
;; (times 5 (lambda [n] (display n))) => 0 1 2 3 4
(defn times [n fn]
  (defn times-iter [c]
    (if (= c n)
      ()
      (begin (fn c)
             (times-iter (+ c 1)))))
  (times-iter 0)) 

;; (for 0 5 1 (lambda [i] (display i))) => 0, 1, 2, 3, 4
;; (for 0 4 (lambda [i] (display i)))   => 0 1 2 3
;; (for 10 0 -1 (lambda [i] (display i))) => 10987654321
;; (for 3 (lambda [i] (display i))) => 0 1 2
;; only support integer param
(defn for_fn [start end step fn]
  (def judge-sign (if (> step 0) >= <=))
  (defn for-iter [i]
    (if (judge-sign i end)
      ()
      (if (eq? (fn i) 'break)
        ()
        (for-iter (+ i step)))))
  (for-iter start))
;; macro for for function
;;  (for 0 1 (lambda [i] (for 0 i (lambda [j] (display "j")))))
;; (lambda (i) ((0 0 109) 0 i (lambda (j) ((0 0 35) "j"))))
;; so macro doesn't work at this point
;; so I changed for function to for_fn function
(defmacro for 
  [(start end step fn) `(for_fn ~start ~end ~step ~fn)]
  [(start end fn) `(for_fn ~start ~end 1 ~fn)]
  [(end fn) `(for_fn 0 ~end 1 ~fn)])


;; some fundamental functions are here

;;##################### map #####################
;; map one parameters
;; (map1 square '(3 4)) => (9 16)
(defn map1 [f p]
  (if (null? p)
    '()
    (cons (f (car p))
          (map1 f (cdr p)))))
;; map variadic parameters
;; (map + '(3 4) '(5 6)) => '(8 10)
(defn map [f p0 . p]
  ;(display p)
  ;(display (apply f (map1 car (cons p0 p))))
  (if (null? p0)
    '()
    (cons (apply f (map1 car (cons p0 p)))
          (apply map (cons f (map1 cdr (cons p0 p)))))))



(defn apply-test [f p0 . p]
  (apply f (map1 car (cons p0 p))))

;; ##################### filter ##################
;; filter function
;; eg (filter is-even '(3 4 5 6)) => '(4 6)
;; where is-even return true or false
;; (filter fn l)
;; where fn must return true or false

(defn filter [fn l]
  (if (null? l)
    '()
    (if (fn (car l))
      (cons (car l)
            (filter fn (cdr l)))
      (filter fn (cdr l)))))
;; test filter function
;; (display (filter (lambda [n] (if (> n 0) 'true '())) '(-1 2 -3 4 -5 6))) => (2 4 6)
;; pass

;; ##################### reduce ##################
;; reduce function
;; eg (reduce + '(3 4 5)) => (+ (+ 3 4) 5)
;; (reduce fn l)
;; where fn has to have two parameters
(defn reduce [fn l param-num]
  (set! param-num (if param-num param-num 2)) ;; default is 2
  (defn get-num-element-list [l num] ;; eg '(3 4 5) 2 => '(3 4)
    (if (= num 0)
      '()
      (if (null? l)
        (display "ERROR: reduce function invalid parameters list")
        (cons (car l)
            (get-num-element-list (cdr l)
                                  (- num 1))))))
  (defn cdrn [l num] ;; eg '(3 4 5) 2 => '(5)
    (if (= num 0)
      l
      (cdrn (cdr l) (- num 1))))
  (defn reduce-iter [fn l param-num-1 acc]
    (if (null? l)
      acc
      (reduce-iter fn 
                 (cdrn l param-num-1)
                 param-num-1
                 (apply fn (cons acc (get-num-element-list l param-num-1))))))
  (if (null? l)
    '()
    (reduce-iter fn (cdr l) (- param-num 1) (car l))))


