;; vector module
;; ############## VECTOR ########################
;; ->list
(defn ->list [v]
  (def length (vector/length v))
  (defn vector->list-iter [v i]
    (if (= i length)
      '()
      (cons v[i]
            (vector->list-iter v
                               (+ i 1)))))
  (vector->list-iter v 0))

;; find
;; find element in vector and return its index
(defn find [v o start-index]
  (set! start-index (or start-index 0))
  (def length (vector/length v))
  (defn vector-find-iter [i]
    (if (= i length)
      -1 ;; didn't find
      (if (eq? v[i]
               o)
        i
        (vector-find-iter (+ i 1))))) 
  (vector-find-iter start-index))

;; vector-foreach
;; eg (foreach #[1,2,3,4] (lambda [i] (if (= i 3) break (display i))))
;; will print 1 2
(defn foreach [v fn]
  (def v-length (vector/length v))
  (defn vector-foreach-iter [count]
    (if (= count v-length)
      ()
      (if (eq? (fn v[count]) 'break) ;; break
        ()
        (vector-foreach-iter (+ count 1)))))
  (vector-foreach-iter 0))
