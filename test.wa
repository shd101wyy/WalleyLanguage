;;(car (car (quote ((x)) )  ) )
;(def append 
;     (lambda (a b)
;       (if (null? a)
;	   b
;	 (cons (car a)
;	       (append (cdr a)
;		       b)))))
;(defmacro defn
;  [(var_name args . body)
;  `(def ~var_name (lambda ~args ~@body))
;  ]
;  )

;(def f (lambda [n] (if (= n 0) 1 (begin (display "Hi\n") (f (- n 1))))))
;(f 1000000)
;(display "Hello World")
;(def x 12)
;(times 1000000 (lambda [i] (display "Hi\n")))

(def make-person 
     (lambda []
       (def self {})
       (self :age 12)
       (self :print-age (lambda [] (display self:age)))
       (self :set-age (lambda [s] (self :age s)))
       self))
(def x (make-person))
(x:print-age)
(x:set-age 15)
(x:print-age)
(def y (make-person))
(y:print-age)