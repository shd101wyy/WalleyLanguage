;;(car (car (quote ((x)) )  ) )
;(def append 
;     (lambda (a b)
;       (if (null? a)
;	   b
;	 (cons (car a)
;	       (append (cdr a)
;		       b)))))
;(defmacro defn
;  [(var_name args . body)
;  `(def ~var_name (lambda ~args ~@body))
;  ]
;  )

;(def f (lambda [n] (if (= n 0) 1 (begin (display "Hi\n") (f (- n 1))))))
;(f 1000000)
;(display "Hello World")
;(def x 12)
;(times 1000000 (lambda [i] (print "Hi\n")))
;(def result 0)
;(def f 
;  (lambda [n r]
;          (if (= n 0)
;            r
;            (f (- n 1) (+ r (math/pow n (/ 1 3)))))))



;(def make-person 
;     (lambda []
;       (def self {})
;       (self :age 12)
;       (self :print-age (lambda [] (display self:age)))
;       (self :set-age (lambda [s] (self :age s)))
;       self))
;(def x (make-person))
;(x:print-age)
;(x:set-age 15)
;(x:print-age)
;(def y (make-person))
;(y:print-age)

;(f 999999999 0);

;(def x 12)
;(def y 20)


;(defn test [n] (print n:type))
;(def x {:type 'Object})
;(test x)

(def math {})
(set! math.sin math/sin)
(times 10000000 (fn [n] 
	 (math.sin n)))

(def Dog (Object::clone))
(set! x::age 12)
(set! x::print-age 
      (fn [] 
        (print self::age)))

(def Dog (Object::clone))
(def Dog (Object::clone))
(def Dog|age 12)




(def Dog (Object/clone))
(def Dog/age 12)



