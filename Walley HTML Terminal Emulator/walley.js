// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var final = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    final = parse();
  } catch(e) {
    final += '?';
  }
  if (final.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return final;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(10243);
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,69,82,82,79,82,58,79,117,116,32,111,102,32,109,101,109,111,114,121,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,108,108,100,0,0,0,0,37,108,102,0,0,0,0,0,45,37,108,108,100,47,37,108,108,100,0,0,0,0,0,0,37,108,108,100,47,37,108,108,100,0,0,0,0,0,0,0,40,41,0,0,0,0,0,0,34,0,0,0,0,0,0,0,92,110,0,0,0,0,0,0,92,116,0,0,0,0,0,0,92,97,0,0,0,0,0,0,40,0,0,0,0,0,0,0,46,32,0,0,0,0,0,0,35,60,117,115,101,114,45,100,101,102,105,110,101,100,45,108,97,109,98,100,97,32,40,0,95,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,32,46,32,95,0,0,0,0,41,62,0,0,0,0,0,0,35,60,98,117,105,108,116,105,110,45,108,97,109,98,100,97,62,0,0,0,0,0,0,0,69,82,82,79,82,58,32,115,116,100,111,117,116,0,0,0,41,0,0,0,0,0,0,0,35,91,0,0,0,0,0,0,35,40,0,0,0,0,0,0,93,0,0,0,0,0,0,0,123,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,44,32,0,0,0,0,0,0,125,0,0,0,0,0,0,0,60,70,105,108,101,32,0,0,62,0,0,0,0,0,0,0,69,82,82,79,82,58,32,73,110,118,97,108,105,100,32,83,116,114,105,110,103,32,83,108,97,115,104,10,0,0,0,0,69,82,82,79,82,58,32,43,32,105,110,118,97,108,105,100,32,100,97,116,97,32,116,121,112,101,0,0,0,0,0,0,69,82,82,79,82,58,32,45,32,105,110,118,97,108,105,100,32,100,97,116,97,32,116,121,112,101,0,0,0,0,0,0,69,82,82,79,82,58,32,42,32,105,110,118,97,108,105,100,32,100,97,116,97,32,116,121,112,101,0,0,0,0,0,0,69,82,82,79,82,58,32,47,32,105,110,118,97,108,105,100,32,100,97,116,97,32,116,121,112,101,0,0,0,0,0,0,69,82,82,79,82,58,32,67,97,110,110,111,116,32,99,104,97,110,103,101,32,115,105,122,101,32,111,102,32,118,101,99,116,111,114,10,0,0,0,0,69,82,82,79,82,58,32,61,32,105,110,118,97,108,105,100,32,100,97,116,97,32,116,121,112,101,10,0,0,0,0,0,32,32,32,32,32,58,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,82,82,79,82,58,32,60,32,105,110,118,97,108,105,100,32,100,97,116,97,32,116,121,112,101,10,0,0,0,0,0,69,82,82,79,82,58,32,60,61,32,105,110,118,97,108,105,100,32,100,97,116,97,32,116,121,112,101,10,0,0,0,0,48,10,0,0,0,0,0,0,37,115,10,0,0,0,0,0,69,82,82,79,82,58,32,112,97,114,101,110,116,104,101,115,101,115,32,40,41,32,110,117,109,32,100,111,101,115,110,39,116,32,109,97,116,99,104,0,69,82,82,79,82,58,32,105,110,116,45,62,115,116,114,105,110,103,32,105,110,118,97,108,105,100,32,97,114,103,115,10,0,0,0,0,0,0,0,0,37,46,50,48,102,0,0,0,69,82,82,79,82,58,32,102,108,111,97,116,45,62,115,116,114,105,110,103,32,105,110,118,97,108,105,100,32,97,114,103,115,10,0,0,0,0,0,0,37,115,0,0,0,0,0,0,69,82,82,79,82,58,32,70,117,110,99,116,105,111,110,32,110,117,109,101,114,32,105,110,118,97,108,105,100,32,112,97,114,97,109,101,116,101,114,0,69,82,82,79,82,58,32,70,117,110,99,116,105,111,110,32,100,101,110,111,109,32,105,110,118,97,108,105,100,32,112,97,114,97,109,101,116,101,114,0,95,95,116,111,121,95,95,37,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,82,82,79,82,58,32,70,117,110,99,116,105,111,110,32,109,97,116,104,45,99,111,115,32,105,110,118,97,108,105,100,32,112,97,114,97,109,32,116,121,112,101,0,0,0,0,0,69,82,82,79,82,58,32,70,117,110,99,116,105,111,110,32,109,97,116,104,45,115,105,110,32,105,110,118,97,108,105,100,32,112,97,114,97,109,32,116,121,112,101,0,0,0,0,0,69,82,82,79,82,58,32,70,117,110,99,116,105,111,110,32,109,97,116,104,45,116,97,110,32,105,110,118,97,108,105,100,32,112,97,114,97,109,32,116,121,112,101,0,0,0,0,0,69,82,82,79,82,58,32,70,117,110,99,116,105,111,110,32,109,97,116,104,45,97,99,111,115,32,105,110,118,97,108,105,100,32,112,97,114,97,109,32,116,121,112,101,0,0,0,0,69,82,82,79,82,58,32,70,117,110,99,116,105,111,110,32,109,97,116,104,45,97,115,105,110,32,105,110,118,97,108,105,100,32,112,97,114,97,109,32,116,121,112,101,0,0,0,0,69,82,82,79,82,58,32,70,117,110,99,116,105,111,110,32,109,97,116,104,45,97,116,97,110,32,105,110,118,97,108,105,100,32,112,97,114,97,109,32,116,121,112,101,0,0,0,0,69,82,82,79,82,58,32,70,117,110,99,116,105,111,110,32,109,97,116,104,45,99,111,115,104,32,105,110,118,97,108,105,100,32,112,97,114,97,109,32,116,121,112,101,0,0,0,0,69,82,82,79,82,58,32,70,117,110,99,116,105,111,110,32,109,97,116,104,45,115,105,110,104,32,105,110,118,97,108,105,100,32,112,97,114,97,109,32,116,121,112,101,0,0,0,0,69,82,82,79,82,58,32,70,117,110,99,116,105,111,110,32,109,97,116,104,45,116,97,110,104,32,105,110,118,97,108,105,100,32,112,97,114,97,109,32,116,121,112,101,0,0,0,0,69,82,82,79,82,58,32,70,117,110,99,116,105,111,110,32,109,97,116,104,45,108,111,103,32,105,110,118,97,108,105,100,32,112,97,114,97,109,32,116,121,112,101,0,0,0,0,0,69,82,82,79,82,58,32,70,117,110,99,116,105,111,110,32,109,97,116,104,45,101,120,112,32,105,110,118,97,108,105,100,32,112,97,114,97,109,32,116,121,112,101,0,0,0,0,0,69,82,82,79,82,58,32,70,117,110,99,116,105,111,110,32,109,97,116,104,45,108,111,103,49,48,32,105,110,118,97,108,105,100,32,112,97,114,97,109,32,116,121,112,101,0,0,0,69,82,82,79,82,58,32,70,117,110,99,116,105,111,110,32,109,97,116,104,45,112,111,119,32,105,110,118,97,108,105,100,32,112,97,114,97,109,32,116,121,112,101,0,0,0,0,0,69,82,82,79,82,58,32,70,117,110,99,116,105,111,110,32,109,97,116,104,45,115,113,114,116,32,105,110,118,97,108,105,100,32,112,97,114,97,109,32,116,121,112,101,0,0,0,0,69,82,82,79,82,58,32,70,117,110,99,116,105,111,110,32,109,97,116,104,45,99,101,105,108,32,105,110,118,97,108,105,100,32,112,97,114,97,109,32,116,121,112,101,0,0,0,0,69,82,82,79,82,58,32,70,117,110,99,116,105,111,110,32,109,97,116,104,45,102,108,111,111,114,32,105,110,118,97,108,105,100,32,112,97,114,97,109,32,116,121,112,101,0,0,0,69,82,82,79,82,58,32,70,117,110,99,116,105,111,110,32,118,101,99,116,111,114,45,115,108,105,99,101,32,105,110,118,97,108,105,100,32,112,97,114,97,109,32,110,117,109,10,0,69,82,82,79,82,58,32,37,37,32,119,114,111,110,103,32,116,121,112,101,32,112,97,114,97,109,115,10,0,0,0,0,69,82,82,80,82,58,32,73,110,116,32,102,117,110,99,116,105,111,110,32,105,110,118,97,108,105,100,32,112,97,114,97,109,10,0,0,0,0,0,0,69,82,82,80,82,58,32,70,108,111,97,116,32,102,117,110,99,116,105,111,110,32,105,110,118,97,108,105,100,32,112,97,114,97,109,10,0,0,0,0,86,101,99,116,111,114,0,0,86,101,99,116,111,114,33,0,84,97,98,108,101,0,0,0,126,64,0,0,0,0,0,0,39,0,0,0,0,0,0,0,96,0,0,0,0,0,0,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,111,110,115,0,0,0,0,99,97,114,0,0,0,0,0,99,100,114,0,0,0,0,0,43,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,118,101,99,116,111,114,45,108,101,110,103,116,104,0,0,0,118,101,99,116,111,114,45,112,117,115,104,33,0,0,0,0,118,101,99,116,111,114,45,112,111,112,33,0,0,0,0,0,61,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,60,61,0,0,0,0,0,0,101,113,63,0,0,0,0,0,101,118,97,108,0,0,0,0,101,120,105,116,0,0,0,0,62,61,0,0,0,0,0,0,112,97,114,115,101,0,0,0,114,97,110,100,111,109,0,0,115,116,114,99,109,112,0,0,115,116,114,105,110,103,45,115,108,105,99,101,0,0,0,0,115,116,114,105,110,103,45,108,101,110,103,116,104,0,0,0,115,116,114,105,110,103,45,97,112,112,101,110,100,0,0,0,116,97,98,108,101,45,107,101,121,115,0,0,0,0,0,0,116,97,98,108,101,45,100,101,108,101,116,101,0,0,0,0,102,105,108,101,45,114,101,97,100,0,0,0,0,0,0,0,102,105,108,101,45,119,114,105,116,101,0,0,0,0,0,0,115,121,115,45,97,114,103,118,0,0,0,0,0,0,0,0,105,110,116,45,62,115,116,114,105,110,103,0,0,0,0,0,102,108,111,97,116,45,62,115,116,114,105,110,103,0,0,0,105,110,112,117,116,0,0,0,112,114,105,110,116,0,0,0,115,116,114,105,110,103,45,62,105,110,116,0,0,0,0,0,115,116,114,105,110,103,45,62,102,108,111,97,116,0,0,0,110,117,108,108,63,0,0,0,114,97,116,105,111,45,110,117,109,101,114,0,0,0,0,0,114,97,116,105,111,45,100,101,110,111,109,0,0,0,0,0,103,101,110,115,121,109,0,0,97,100,100,45,112,114,111,116,111,0,0,0,0,0,0,0,112,114,111,116,111,0,0,0,116,121,112,101,111,102,0,0,109,97,116,104,45,99,111,115,0,0,0,0,0,0,0,0,109,97,116,104,45,115,105,110,0,0,0,0,0,0,0,0,109,97,116,104,45,116,97,110,0,0,0,0,0,0,0,0,109,97,116,104,45,97,99,111,115,0,0,0,0,0,0,0,109,97,116,104,45,97,115,105,110,0,0,0,0,0,0,0,109,97,116,104,45,97,116,97,110,0,0,0,0,0,0,0,109,97,116,104,45,99,111,115,104,0,0,0,0,0,0,0,109,97,116,104,45,115,105,110,104,0,0,0,0,0,0,0,109,97,116,104,45,116,97,110,104,0,0,0,0,0,0,0,109,97,116,104,45,108,111,103,0,0,0,0,0,0,0,0,109,97,116,104,45,101,120,112,0,0,0,0,0,0,0,0,109,97,116,104,45,108,111,103,49,48,0,0,0,0,0,0,109,97,116,104,45,112,111,119,0,0,0,0,0,0,0,0,109,97,116,104,45,115,113,114,116,0,0,0,0,0,0,0,109,97,116,104,45,99,101,105,108,0,0,0,0,0,0,0,109,97,116,104,45,102,108,111,111,114,0,0,0,0,0,0,115,116,114,105,110,103,45,102,105,110,100,0,0,0,0,0,115,116,114,105,110,103,45,114,101,112,108,97,99,101,0,0,97,112,112,108,121,0,0,0,118,101,99,116,111,114,45,115,108,105,99,101,0,0,0,0,115,101,116,45,99,97,114,33,0,0,0,0,0,0,0,0,115,101,116,45,99,100,114,33,0,0,0,0,0,0,0,0,115,121,115,45,99,109,100,0,60,60,0,0,0,0,0,0,62,62,0,0,0,0,0,0,62,62,62,0,0,0,0,0,38,0,0,0,0,0,0,0,124,0,0,0,0,0,0,0,102,105,108,101,45,97,98,115,45,112,97,116,104,0,0,0,102,108,111,97,116,45,62,105,110,116,54,52,0,0,0,0,116,97,98,108,101,45,108,101,110,103,116,104,0,0,0,0,115,116,114,105,110,103,45,99,104,97,114,45,99,111,100,101,45,97,116,0,0,0,0,0,115,116,114,105,110,103,45,102,114,111,109,45,99,104,97,114,45,99,111,100,101,0,0,0,111,115,45,102,111,114,107,0,111,115,45,103,101,116,112,105,100,0,0,0,0,0,0,0,111,115,45,103,101,116,112,112,105,100,0,0,0,0,0,0,111,115,45,119,97,105,116,112,105,100,0,0,0,0,0,0,111,115,45,103,101,116,101,110,118,0,0,0,0,0,0,0,115,108,101,101,112,0,0,0,37,0,0,0,0,0,0,0,73,110,116,0,0,0,0,0,70,108,111,97,116,0,0,0,70,105,108,101,0,0,0,0,102,105,108,101,45,99,108,111,115,101,0,0,0,0,0,0,102,105,108,101,45,114,101,97,100,108,105,110,101,115,0,0,102,105,108,101,45,115,101,101,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,117,111,116,101,0,0,0,117,110,113,117,111,116,101,0,117,110,113,117,111,116,101,45,115,112,108,105,99,101,0,0,113,117,97,115,105,113,117,111,116,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,101,102,0,0,0,0,0,0,0,0,0,0,0,0,0,115,101,116,33,0,0,0,0,0,0,0,0,0,0,0,0,108,97,109,98,100,97,0,0,116,114,117,101,0,0,0,0,105,110,116,101,103,101,114,0,102,108,111,97,116,0,0,0,114,97,116,105,111,0,0,0,115,116,114,105,110,103,0,0,112,97,105,114,0,0,0,0,118,101,99,116,111,114,0,0,116,97,98,108,101,0,0,0,99,108,111,110,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,121,112,101,0,0,0,0,0,0,0,0,0,0,0,0,111,98,106,101,99,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,97,112,112,101,110,100,0,0,69,82,82,79,82,58,32,77,97,99,114,111,32,101,120,112,97,110,115,105,111,110,32,102,97,105,108,101,100,46,32,73,110,118,97,108,105,100,32,68,97,116,97,32,84,121,112,101,10,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,69,82,82,79,82,58,32,77,97,99,114,111,58,32,37,115,32,101,120,112,97,110,115,105,111,110,32,102,97,105,108,101,100,10,0,0,0,0,0,0,69,82,82,79,82,58,32,117,110,100,101,102,105,110,101,100,32,118,97,114,105,97,98,108,101,32,37,115,10,0,0,0,98,114,101,97,107,0,0,0,99,111,110,116,105,110,117,101,0,0,0,0,0,0,0,0,102,110,0,0,0,0,0,0,68,69,70,73,78,73,84,73,79,78,32,69,82,82,79,82,58,32,73,110,118,97,108,105,100,32,118,97,114,105,97,98,108,101,32,110,97,109,101,32,37,115,10,0,0,0,0,0,68,69,70,73,78,73,84,73,79,78,32,69,82,82,79,82,58,32,118,97,114,105,97,98,108,101,58,32,37,115,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,10,0,32,32,32,32,32,32,32,32,32,32,32,69,88,80,58,32,37,115,10,0,0,0,0,0,83,69,84,33,32,69,82,82,79,82,58,32,117,110,100,101,102,105,110,101,100,32,118,97,114,105,97,98,108,101,32,37,115,32,10,0,0,0,0,0,32,32,32,32,32,32,32,69,88,80,58,32,37,115,10,0,108,111,97,100,0,0,0,0,46,119,97,0,0,0,0,0,114,0,0,0,0,0,0,0,69,82,82,79,82,58,32,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,37,115,10,0,0,0,0,0,0,0,32,32,69,88,80,58,32,37,115,10,0,0,0,0,0,0,114,101,113,117,105,114,101,0,69,82,82,79,82,58,32,114,101,113,117,105,114,101,32,97,116,32,105,110,118,97,108,105,100,32,115,99,111,112,101,10,0,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,119,97,108,108,101,121,47,0,0,69,82,82,79,82,58,32,70,97,105,108,101,100,32,116,111,32,114,101,113,117,105,114,101,32,37,115,10,0,0,0,0,105,102,0,0,0,0,0,0,98,101,103,105,110,0,0,0,108,101,116,0,0,0,0,0,69,82,82,79,82,58,32,73,110,118,97,108,105,100,32,70,117,110,99,116,105,111,110,32,80,97,114,97,109,101,116,101,114,32,116,121,112,101,10,0,100,101,102,109,97,99,114,111,0,0,0,0,0,0,0,0,69,82,82,79,82,58,32,73,110,118,97,108,105,100,32,68,97,116,97,10,0,0,0,0,69,82,82,79,82,58,32,79,98,106,101,99,116,95,102,114,101,101,32,105,110,118,97,108,105,100,32,100,97,116,97,32,116,121,112,101,10,0,0,0,69,82,82,79,82,58,32,73,110,118,97,108,105,100,32,111,112,99,111,100,101,32,102,111,114,32,99,111,110,115,116,97,110,116,32,116,97,98,108,101,0,0,0,0,0,0,0,0,86,77,32,69,82,82,79,82,58,32,83,69,84,32,73,78,68,69,88,32,69,82,82,79,82,44,32,112,108,122,32,114,101,112,111,114,116,32,116,104,105,115,32,101,114,114,111,114,32,97,110,100,32,115,101,110,100,32,117,114,32,99,111,100,101,32,116,111,32,97,117,116,104,111,114,32,116,104,114,111,117,103,104,32,103,105,116,104,117,98,46,46,46,10,0,0,118,97,108,117,101,32,105,110,100,101,120,32,37,100,44,32,102,114,97,109,101,32,108,101,110,103,116,104,32,37,100,10,0,0,0,0,0,0,0,0,69,82,82,79,82,58,32,73,110,118,97,108,105,100,32,99,111,110,115,116,97,110,116,10,0,0,0,0,0,0,0,0,69,82,82,79,82,58,32,78,69,87,70,82,65,77,69,32,101,114,114,111,114,0,0,0,69,82,82,79,82,58,32,73,110,118,97,108,105,100,32,118,101,99,116,111,114,32,111,112,101,114,97,116,105,111,110,10,0,0,0,0,0,0,0,0,69,82,82,79,82,58,32,73,110,118,97,108,105,100,32,116,97,98,108,101,32,111,112,101,114,97,116,105,111,110,10,0,69,82,82,79,82,58,32,84,111,111,32,109,97,110,121,32,112,97,114,97,109,101,116,101,114,115,32,112,114,111,118,105,100,101,100,10,0,0,0,0,69,82,82,79,82,58,32,101,118,97,108,32,102,117,110,99,116,105,111,110,32,105,115,32,111,110,108,121,32,114,117,110,32,116,105,109,101,32,115,117,112,112,111,114,116,101,100,0,69,82,82,79,82,49,58,32,73,110,118,97,108,105,100,32,108,97,109,98,100,97,10,0,69,82,82,79,82,50,58,32,73,110,118,97,108,105,100,32,76,97,109,98,100,97,10,0,69,82,82,79,82,51,58,32,73,110,118,97,108,105,100,32,76,97,109,98,100,97,10,0,69,82,82,79,82,58,32,73,110,118,97,108,105,100,32,111,112,99,111,100,101,32,37,100,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


   
  Module["_i64Subtract"] = _i64Subtract;

  var _DtoILow=true;

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (node.contents && node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _realpath(file_name, resolved_name) {
      // char *realpath(const char *restrict file_name, char *restrict resolved_name);
      // http://pubs.opengroup.org/onlinepubs/009604499/functions/realpath.html
      var absolute = FS.analyzePath(Pointer_stringify(file_name));
      if (absolute.error) {
        ___setErrNo(absolute.error);
        return 0;
      } else {
        var size = Math.min(4095, absolute.path.length);  // PATH_MAX - 1.
        if (resolved_name === 0) resolved_name = _malloc(size+1);
        for (var i = 0; i < size; i++) {
          HEAP8[(((resolved_name)+(i))>>0)]=absolute.path.charCodeAt(i);
        }
        HEAP8[(((resolved_name)+(size))>>0)]=0;
        return resolved_name;
      }
    }

  var _SItoD=true;

   
  Module["_memset"] = _memset;

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
   
  Module["_strlen"] = _strlen; 
  Module["_strcat"] = _strcat;

  function _cosh(x) {
      var p = Math.pow(Math.E, x);
      return (p + (1 / p)) / 2;
    }

  var _DtoIHigh=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if (ENVIRONMENT_IS_WEB && window['performance'] && window['performance']['now']) {
        var start = window['performance']['now']();
        while (window['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }function _sleep(seconds) {
      // unsigned sleep(unsigned seconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/sleep.html
      return _usleep(seconds * 1e6);
    }

  
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  var _tan=Math_tan;

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }


  var _asin=Math_asin;

   
  Module["_i64Add"] = _i64Add;

  var _fabs=Math_abs;

  var _floor=Math_floor;

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }function _copysignl() {
  return _copysign.apply(null, arguments)
  }

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  function _system(command) {
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }

  var _sqrt=Math_sqrt;

  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  
  var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};function _getpid() {  return PROCINFO.pid;  }

  function _rewind(stream) {
      // void rewind(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rewind.html
      _fseek(stream, 0, 0);  // SEEK_SET.
      var streamObj = FS.getStreamFromPtr(stream);
      if (streamObj) streamObj.error = false;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  var _UItoD=true;

  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }

  function _getline() {
  Module['printErr']('missing function: getline'); abort(-1);
  }

  
  function _fmod(x, y) {
      return x % y;
    }function _fmodl() {
  return _fmod.apply(null, arguments)
  }

  function _fork() {
      // pid_t fork(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fork.html
      // We don't support multiple processes.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }

   
  Module["_bitshift64Ashr"] = _bitshift64Ashr;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }

  var _atan=Math_atan;

  var _BDtoILow=true;

  var _BDtoIHigh=true;

  function _getppid() { return PROCINFO.ppid; }

  var _ceil=Math_ceil;

  function _sinh(x) {
      var p = Math.pow(Math.E, x);
      return (p - (1 / p)) / 2;
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _log=Math_log;

  var _cos=Math_cos;

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _tanh(x) {
      return _sinh(x) / _cosh(x);
    }

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  
  function _wait(stat_loc) {
      // pid_t wait(int *stat_loc);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/wait.html
      // Makes no sense in a single-process environment.
      ___setErrNo(ERRNO_CODES.ECHILD);
      return -1;
    }function _waitpid() {
  return _wait.apply(null, arguments)
  }

   
  Module["_strcpy"] = _strcpy;

  var _exp=Math_exp;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var _sin=Math_sin;

  var _acos=Math_acos;

___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

  var Math_min = Math.min;
function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

  // EMSCRIPTEN_START_ASM
  var asm = (function(global, env, buffer) {
    'almost asm';
    
    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);

  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stdin=env._stdin|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iii=env.nullFunc_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iii=env.invoke_iii;
  var _fabs=env._fabs;
  var _sin=env._sin;
  var _exp=env._exp;
  var _fork=env._fork;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _acos=env._acos;
  var _cosh=env._cosh;
  var _fread=env._fread;
  var _fmod=env._fmod;
  var _lseek=env._lseek;
  var __reallyNegative=env.__reallyNegative;
  var _sleep=env._sleep;
  var _realpath=env._realpath;
  var _usleep=env._usleep;
  var _asin=env._asin;
  var _fsync=env._fsync;
  var _floor=env._floor;
  var _system=env._system;
  var _fflush=env._fflush;
  var _cos=env._cos;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _wait=env._wait;
  var _open=env._open;
  var _getpid=env._getpid;
  var _sbrk=env._sbrk;
  var _send=env._send;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _sinh=env._sinh;
  var _fprintf=env._fprintf;
  var _sysconf=env._sysconf;
  var ___setErrNo=env.___setErrNo;
  var _rewind=env._rewind;
  var ___buildEnvironment=env.___buildEnvironment;
  var _atan=env._atan;
  var _fseek=env._fseek;
  var _getline=env._getline;
  var _tanh=env._tanh;
  var _pread=env._pread;
  var _getenv=env._getenv;
  var _fclose=env._fclose;
  var _getppid=env._getppid;
  var _log=env._log;
  var _write=env._write;
  var _ftell=env._ftell;
  var ___errno_location=env.___errno_location;
  var _recv=env._recv;
  var _tan=env._tan;
  var _copysign=env._copysign;
  var _printf=env._printf;
  var __exit=env.__exit;
  var _read=env._read;
  var _copysignl=env._copysignl;
  var _fmodl=env._fmodl;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _mkport=env._mkport;
  var _strerror=env._strerror;
  var _ceil=env._ceil;
  var __formatString=env.__formatString;
  var _log10=env._log10;
  var _sqrt=env._sqrt;
  var _fopen=env._fopen;
  var _exit=env._exit;
  var _close=env._close;
  var _fputs=env._fputs;
  var _waitpid=env._waitpid;
  var tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
  function stackAlloc(size) {
    size = size|0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

    return ret|0;
  }
  function stackSave() {
    return STACKTOP|0;
  }
  function stackRestore(top) {
    top = top|0;
    STACKTOP = top;
  }

  function setThrew(threw, value) {
    threw = threw|0;
    value = value|0;
    if ((__THREW__|0) == 0) {
      __THREW__ = threw;
      threwValue = value;
    }
  }
  function copyTempFloat(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  }
  function copyTempDouble(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
    HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
    HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
    HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
    HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
  }
  function setTempRet0(value) {
    value = value|0;
    tempRet0 = value;
  }
  function getTempRet0() {
    return tempRet0|0;
  }
  
function _allocateObject() {
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $cmp = 0, $o = 0, $use_count = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $call = (_malloc(40)|0);
 $o = $call;
 $0 = $o;
 $cmp = ($0|0)==(0|0);
 if ($cmp) {
  (_printf((16|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 } else {
  $1 = $o;
  $use_count = (($1) + 4|0);
  HEAP32[$use_count>>2] = 0;
  $2 = $o;
  STACKTOP = sp;return ($2|0);
 }
 return 0|0;
}
function _Object_initInteger($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $data = 0, $o = 0;
 var $v$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$addr = sp;
 $2 = $v$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $call = (_allocateObject()|0);
 $o = $call;
 $6 = $o;
 HEAP32[$6>>2] = 1;
 $7 = $v$addr;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $o;
 $data = (($13) + 8|0);
 $14 = $data;
 $15 = $14;
 HEAP32[$15>>2] = $9;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = $o;
 STACKTOP = sp;return ($18|0);
}
function _Object_initDouble($v) {
 $v = +$v;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $call = 0, $data = 0, $o = 0, $v$addr = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$addr = $v;
 $call = (_allocateObject()|0);
 $o = $call;
 $0 = $o;
 HEAP32[$0>>2] = 2;
 $1 = $v$addr;
 $2 = $o;
 $data = (($2) + 8|0);
 HEAPF64[$data>>3] = $1;
 $3 = $o;
 STACKTOP = sp;return ($3|0);
}
function _Object_initString($v,$0,$1) {
 $v = $v|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $cmp = 0, $data = 0, $data12 = 0, $data3 = 0, $data8 = 0;
 var $length = 0, $o = 0, $string_length$addr = 0, $v$addr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $string_length$addr = sp;
 $v$addr = $v;
 $2 = $string_length$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $call = (_allocateObject()|0);
 $o = $call;
 $6 = $o;
 HEAP32[$6>>2] = 4;
 $7 = $string_length$addr;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (_i64Add(($9|0),($12|0),1,0)|0);
 $14 = tempRet0;
 $15 = (___muldi3(1,0,($13|0),($14|0))|0);
 $16 = tempRet0;
 $call1 = (_malloc($15)|0);
 $17 = $o;
 $data = (($17) + 8|0);
 HEAP32[$data>>2] = $call1;
 $18 = $o;
 $data3 = (($18) + 8|0);
 $19 = HEAP32[$data3>>2]|0;
 $cmp = ($19|0)==(0|0);
 if ($cmp) {
  (_printf((16|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 } else {
  $20 = $o;
  $data8 = (($20) + 8|0);
  $21 = HEAP32[$data8>>2]|0;
  $22 = $v$addr;
  (_strcpy(($21|0),($22|0))|0);
  $23 = $string_length$addr;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = $o;
  $data12 = (($29) + 8|0);
  $length = (($data12) + 8|0);
  $30 = $length;
  $31 = $30;
  HEAP32[$31>>2] = $25;
  $32 = (($30) + 4)|0;
  $33 = $32;
  HEAP32[$33>>2] = $28;
  $34 = $o;
  STACKTOP = sp;return ($34|0);
 }
 return 0|0;
}
function _Object_initVector($resizable,$0,$1) {
 $resizable = $resizable|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bf$clear = 0, $bf$load = 0, $bf$set = 0, $bf$value = 0, $call = 0;
 var $call7 = 0, $cmp = 0, $data = 0, $data10 = 0, $data2 = 0, $data4 = 0, $data8 = 0, $length = 0, $o = 0, $resizable$addr = 0, $resizable6 = 0, $size$addr = 0, $size1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $size$addr = sp;
 $resizable$addr = $resizable;
 $2 = $size$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $call = (_allocateObject()|0);
 $o = $call;
 $6 = $o;
 HEAP32[$6>>2] = 8;
 $7 = $size$addr;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $o;
 $data = (($13) + 8|0);
 $size1 = (($data) + 8|0);
 $14 = $size1;
 $15 = $14;
 HEAP32[$15>>2] = $9;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = $o;
 $data2 = (($18) + 8|0);
 $length = (($data2) + 16|0);
 $19 = $length;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = 0;
 $23 = $resizable$addr;
 $24 = $o;
 $data4 = (($24) + 8|0);
 $resizable6 = (($data4) + 24|0);
 $bf$load = HEAP8[$resizable6>>0]|0;
 $bf$value = $23 & 1;
 $bf$clear = $bf$load & -2;
 $bf$set = $bf$clear | $bf$value;
 HEAP8[$resizable6>>0] = $bf$set;
 $25 = $size$addr;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (___muldi3(4,0,($27|0),($30|0))|0);
 $32 = tempRet0;
 $call7 = (_malloc($31)|0);
 $33 = $o;
 $data8 = (($33) + 8|0);
 HEAP32[$data8>>2] = $call7;
 $34 = $o;
 $data10 = (($34) + 8|0);
 $35 = HEAP32[$data10>>2]|0;
 $cmp = ($35|0)==(0|0);
 if ($cmp) {
  (_printf((16|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 } else {
  $36 = $o;
  STACKTOP = sp;return ($36|0);
 }
 return 0|0;
}
function _Object_initNull() {
 var $0 = 0, $1 = 0, $call = 0, $o = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $call = (_allocateObject()|0);
 $o = $call;
 $0 = $o;
 HEAP32[$0>>2] = 0;
 $1 = $o;
 STACKTOP = sp;return ($1|0);
}
function _Object_initUserDefinedLambda($param_num,$variadic_place,$0,$1,$env,$frame_length) {
 $param_num = $param_num|0;
 $variadic_place = $variadic_place|0;
 $0 = $0|0;
 $1 = $1|0;
 $env = $env|0;
 $frame_length = $frame_length|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $data = 0, $data11 = 0, $data2 = 0, $data5 = 0, $data8 = 0, $env$addr = 0, $env10 = 0, $frame_length$addr = 0, $frame_size = 0, $o = 0, $param_num$addr = 0, $start_pc$addr = 0, $start_pc7 = 0, $variadic_place$addr = 0;
 var $variadic_place4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $start_pc$addr = sp;
 $param_num$addr = $param_num;
 $variadic_place$addr = $variadic_place;
 $2 = $start_pc$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $env$addr = $env;
 $frame_length$addr = $frame_length;
 $call = (_allocateObject()|0);
 $o = $call;
 $6 = $o;
 HEAP32[$6>>2] = 6;
 $7 = $param_num$addr;
 $8 = $o;
 $data = (($8) + 8|0);
 HEAP8[$data>>0] = $7;
 $9 = $variadic_place$addr;
 $10 = $o;
 $data2 = (($10) + 8|0);
 $variadic_place4 = (($data2) + 1|0);
 HEAP8[$variadic_place4>>0] = $9;
 $11 = $start_pc$addr;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = $o;
 $data5 = (($17) + 8|0);
 $start_pc7 = (($data5) + 8|0);
 $18 = $start_pc7;
 $19 = $18;
 HEAP32[$19>>2] = $13;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $16;
 $22 = $env$addr;
 $23 = $o;
 $data8 = (($23) + 8|0);
 $env10 = (($data8) + 16|0);
 HEAP32[$env10>>2] = $22;
 $24 = $frame_length$addr;
 $25 = $o;
 $data11 = (($25) + 8|0);
 $frame_size = (($data11) + 20|0);
 HEAP8[$frame_size>>0] = $24;
 $26 = $o;
 STACKTOP = sp;return ($26|0);
}
function _Object_initBuiltinLambda($func_ptr) {
 $func_ptr = $func_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $data = 0, $func_ptr$addr = 0, $o = 0, $use_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $func_ptr$addr = $func_ptr;
 $call = (_allocateObject()|0);
 $o = $call;
 $0 = $o;
 HEAP32[$0>>2] = 7;
 $1 = $func_ptr$addr;
 $2 = $o;
 $data = (($2) + 8|0);
 HEAP32[$data>>2] = $1;
 $3 = $o;
 $use_count = (($3) + 4|0);
 HEAP32[$use_count>>2] = 1;
 $4 = $o;
 STACKTOP = sp;return ($4|0);
}
function _cons($car,$cdr) {
 $car = $car|0;
 $cdr = $cdr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add2 = 0, $call = 0, $car$addr = 0, $cdr$addr = 0, $cdr6 = 0, $data = 0, $data4 = 0, $o = 0, $use_count = 0;
 var $use_count1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $car$addr = $car;
 $cdr$addr = $cdr;
 $call = (_allocateObject()|0);
 $o = $call;
 $0 = $car$addr;
 $use_count = (($0) + 4|0);
 $1 = HEAP32[$use_count>>2]|0;
 $add = (($1) + 1)|0;
 HEAP32[$use_count>>2] = $add;
 $2 = $cdr$addr;
 $use_count1 = (($2) + 4|0);
 $3 = HEAP32[$use_count1>>2]|0;
 $add2 = (($3) + 1)|0;
 HEAP32[$use_count1>>2] = $add2;
 $4 = $o;
 HEAP32[$4>>2] = 5;
 $5 = $car$addr;
 $6 = $o;
 $data = (($6) + 8|0);
 HEAP32[$data>>2] = $5;
 $7 = $cdr$addr;
 $8 = $o;
 $data4 = (($8) + 8|0);
 $cdr6 = (($data4) + 4|0);
 HEAP32[$cdr6>>2] = $7;
 $9 = $o;
 STACKTOP = sp;return ($9|0);
}
function _Object_initTable($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call4 = 0, $data = 0, $data1 = 0, $data5 = 0, $data7 = 0, $length = 0, $o = 0, $proto = 0;
 var $size$addr = 0, $use_count = 0, $vec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size$addr = sp;
 $2 = $size$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $call = (_allocateObject()|0);
 $o = $call;
 $6 = $o;
 HEAP32[$6>>2] = 9;
 $7 = $o;
 $data = (($7) + 8|0);
 $length = (($data) + 8|0);
 $8 = $length;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 $12 = $size$addr;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = $o;
 $data1 = (($18) + 8|0);
 $19 = $data1;
 $20 = $19;
 HEAP32[$20>>2] = $14;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $17;
 $23 = $size$addr;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $call4 = (_calloc($25,4)|0);
 $29 = $o;
 $data5 = (($29) + 8|0);
 $vec = (($data5) + 16|0);
 HEAP32[$vec>>2] = $call4;
 $30 = $o;
 $data7 = (($30) + 8|0);
 $proto = (($data7) + 20|0);
 HEAP32[$proto>>2] = 0;
 $31 = $o;
 $use_count = (($31) + 4|0);
 HEAP32[$use_count>>2] = 0;
 $32 = $o;
 STACKTOP = sp;return ($32|0);
}
function _hash($str,$0,$1) {
 $str = $str|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $hash = 0, $incdec$ptr = 0, $retval = 0, $size$addr = 0, $str$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $retval = sp + 16|0;
 $size$addr = sp + 8|0;
 $hash = sp;
 $str$addr = $str;
 $2 = $size$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = $hash;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 while(1) {
  $10 = $str$addr;
  $11 = HEAP8[$10>>0]|0;
  $tobool = ($11<<24>>24)!=(0);
  if (!($tobool)) {
   break;
  }
  $12 = $hash;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (_bitshift64Shl(($14|0),($17|0),5)|0);
  $19 = tempRet0;
  $20 = $hash;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (_i64Add(($18|0),($19|0),($22|0),($25|0))|0);
  $27 = tempRet0;
  $28 = $str$addr;
  $29 = HEAP8[$28>>0]|0;
  $30 = $29 << 24 >> 24;
  $31 = ($30|0)<(0);
  $32 = $31 << 31 >> 31;
  $33 = (_i64Add(($26|0),($27|0),($30|0),($32|0))|0);
  $34 = tempRet0;
  $35 = $hash;
  $36 = $35;
  HEAP32[$36>>2] = $33;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $34;
  $39 = $str$addr;
  $incdec$ptr = (($39) + 1|0);
  $str$addr = $incdec$ptr;
 }
 $40 = $hash;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + 4)|0;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = $size$addr;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 4)|0;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = ($45>>>0)>($51>>>0);
 $53 = ($45|0)==($51|0);
 $54 = ($42>>>0)>=($48>>>0);
 $55 = $53 & $54;
 $56 = $52 | $55;
 if ($56) {
  $57 = $hash;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = (($57) + 4)|0;
  $61 = $60;
  $62 = HEAP32[$61>>2]|0;
  $63 = $size$addr;
  $64 = $63;
  $65 = HEAP32[$64>>2]|0;
  $66 = (($63) + 4)|0;
  $67 = $66;
  $68 = HEAP32[$67>>2]|0;
  $69 = (___uremdi3(($59|0),($62|0),($65|0),($68|0))|0);
  $70 = tempRet0;
  $71 = $retval;
  $72 = $71;
  HEAP32[$72>>2] = $69;
  $73 = (($71) + 4)|0;
  $74 = $73;
  HEAP32[$74>>2] = $70;
  $85 = $retval;
  $86 = $85;
  $87 = HEAP32[$86>>2]|0;
  $88 = (($85) + 4)|0;
  $89 = $88;
  $90 = HEAP32[$89>>2]|0;
  tempRet0 = $90;
  STACKTOP = sp;return ($87|0);
 } else {
  $75 = $hash;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $78 = (($75) + 4)|0;
  $79 = $78;
  $80 = HEAP32[$79>>2]|0;
  $81 = $retval;
  $82 = $81;
  HEAP32[$82>>2] = $77;
  $83 = (($81) + 4)|0;
  $84 = $83;
  HEAP32[$84>>2] = $80;
  $85 = $retval;
  $86 = $85;
  $87 = HEAP32[$86>>2]|0;
  $88 = (($85) + 4)|0;
  $89 = $88;
  $90 = HEAP32[$89>>2]|0;
  tempRet0 = $90;
  STACKTOP = sp;return ($87|0);
 }
 return 0|0;
}
function _rehash($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx14 = 0, $arrayidx39 = 0, $arrayidx41 = 0, $arrayidx54 = 0, $arrayidx62 = 0, $arrayidx68 = 0, $arrayidx74 = 0, $call = 0, $call3 = 0, $call30 = 0, $call42 = 0, $cmp55 = 0, $cmp7 = 0;
 var $data = 0, $data16 = 0, $data19 = 0, $data23 = 0, $data26 = 0, $data31 = 0, $data45 = 0, $data46 = 0, $data5 = 0, $data51 = 0, $data59 = 0, $data65 = 0, $data71 = 0, $hash_value = 0, $i = 0, $j = 0, $key = 0, $keys = 0, $new_Table_Pair = 0, $next = 0;
 var $next63 = 0, $next69 = 0, $original_size = 0, $p = 0, $t$addr = 0, $temp = 0, $tobool = 0, $value = 0, $value12 = 0, $value44 = 0, $values = 0, $vec = 0, $vec18 = 0, $vec33 = 0, $vec53 = 0, $vec61 = 0, $vec67 = 0, $vec73 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp + 24|0;
 $j = sp + 16|0;
 $original_size = sp + 8|0;
 $hash_value = sp;
 $t$addr = $t;
 $0 = $i;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = $j;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = $t$addr;
 $data = (($8) + 8|0);
 $9 = $data;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $original_size;
 $16 = $15;
 HEAP32[$16>>2] = $11;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $14;
 $19 = $original_size;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (___muldi3(40,0,($21|0),($24|0))|0);
 $26 = tempRet0;
 $call = (_malloc($25)|0);
 $keys = $call;
 $27 = $original_size;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (___muldi3(40,0,($29|0),($32|0))|0);
 $34 = tempRet0;
 $call3 = (_malloc($33)|0);
 $values = $call3;
 $35 = $i;
 $36 = $35;
 HEAP32[$36>>2] = 0;
 $37 = (($35) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = 0;
 while(1) {
  $39 = $i;
  $40 = $39;
  $41 = HEAP32[$40>>2]|0;
  $42 = (($39) + 4)|0;
  $43 = $42;
  $44 = HEAP32[$43>>2]|0;
  $45 = $original_size;
  $46 = $45;
  $47 = HEAP32[$46>>2]|0;
  $48 = (($45) + 4)|0;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = ($44>>>0)<($50>>>0);
  $52 = ($44|0)==($50|0);
  $53 = ($41>>>0)<($47>>>0);
  $54 = $52 & $53;
  $55 = $51 | $54;
  if (!($55)) {
   break;
  }
  $56 = $i;
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  $59 = (($56) + 4)|0;
  $60 = $59;
  $61 = HEAP32[$60>>2]|0;
  $62 = $t$addr;
  $data5 = (($62) + 8|0);
  $vec = (($data5) + 16|0);
  $63 = HEAP32[$vec>>2]|0;
  $arrayidx = (($63) + ($58<<2)|0);
  $64 = HEAP32[$arrayidx>>2]|0;
  $p = $64;
  $65 = $p;
  $tobool = ($65|0)!=(0|0);
  if ($tobool) {
   while(1) {
    $66 = $p;
    $cmp7 = ($66|0)!=(0|0);
    if (!($cmp7)) {
     break;
    }
    $67 = $p;
    $68 = HEAP32[$67>>2]|0;
    $69 = $j;
    $70 = $69;
    $71 = HEAP32[$70>>2]|0;
    $72 = (($69) + 4)|0;
    $73 = $72;
    $74 = HEAP32[$73>>2]|0;
    $75 = $keys;
    $arrayidx11 = (($75) + ($71<<2)|0);
    HEAP32[$arrayidx11>>2] = $68;
    $76 = $p;
    $value12 = (($76) + 4|0);
    $77 = HEAP32[$value12>>2]|0;
    $78 = $j;
    $79 = $78;
    $80 = HEAP32[$79>>2]|0;
    $81 = (($78) + 4)|0;
    $82 = $81;
    $83 = HEAP32[$82>>2]|0;
    $84 = $values;
    $arrayidx14 = (($84) + ($80<<2)|0);
    HEAP32[$arrayidx14>>2] = $77;
    $85 = $p;
    $temp = $85;
    $86 = $p;
    $next = (($86) + 8|0);
    $87 = HEAP32[$next>>2]|0;
    $p = $87;
    $88 = $temp;
    _free($88);
    $89 = $j;
    $90 = $89;
    $91 = HEAP32[$90>>2]|0;
    $92 = (($89) + 4)|0;
    $93 = $92;
    $94 = HEAP32[$93>>2]|0;
    $95 = (_i64Add(($91|0),($94|0),1,0)|0);
    $96 = tempRet0;
    $97 = $j;
    $98 = $97;
    HEAP32[$98>>2] = $95;
    $99 = (($97) + 4)|0;
    $100 = $99;
    HEAP32[$100>>2] = $96;
   }
  }
  $101 = $i;
  $102 = $101;
  $103 = HEAP32[$102>>2]|0;
  $104 = (($101) + 4)|0;
  $105 = $104;
  $106 = HEAP32[$105>>2]|0;
  $107 = (_i64Add(($103|0),($106|0),1,0)|0);
  $108 = tempRet0;
  $109 = $i;
  $110 = $109;
  HEAP32[$110>>2] = $107;
  $111 = (($109) + 4)|0;
  $112 = $111;
  HEAP32[$112>>2] = $108;
 }
 $113 = $t$addr;
 $data16 = (($113) + 8|0);
 $vec18 = (($data16) + 16|0);
 $114 = HEAP32[$vec18>>2]|0;
 _free($114);
 $115 = $t$addr;
 $data19 = (($115) + 8|0);
 $116 = $data19;
 $117 = $116;
 $118 = HEAP32[$117>>2]|0;
 $119 = (($116) + 4)|0;
 $120 = $119;
 $121 = HEAP32[$120>>2]|0;
 $122 = (___muldi3(($118|0),($121|0),2,0)|0);
 $123 = tempRet0;
 $124 = $t$addr;
 $data23 = (($124) + 8|0);
 $125 = $data23;
 $126 = $125;
 HEAP32[$126>>2] = $122;
 $127 = (($125) + 4)|0;
 $128 = $127;
 HEAP32[$128>>2] = $123;
 $129 = $t$addr;
 $data26 = (($129) + 8|0);
 $130 = $data26;
 $131 = $130;
 $132 = HEAP32[$131>>2]|0;
 $133 = (($130) + 4)|0;
 $134 = $133;
 $135 = HEAP32[$134>>2]|0;
 $call30 = (_calloc($132,4)|0);
 $136 = $t$addr;
 $data31 = (($136) + 8|0);
 $vec33 = (($data31) + 16|0);
 HEAP32[$vec33>>2] = $call30;
 $137 = $i;
 $138 = $137;
 HEAP32[$138>>2] = 0;
 $139 = (($137) + 4)|0;
 $140 = $139;
 HEAP32[$140>>2] = 0;
 while(1) {
  $141 = $i;
  $142 = $141;
  $143 = HEAP32[$142>>2]|0;
  $144 = (($141) + 4)|0;
  $145 = $144;
  $146 = HEAP32[$145>>2]|0;
  $147 = $j;
  $148 = $147;
  $149 = HEAP32[$148>>2]|0;
  $150 = (($147) + 4)|0;
  $151 = $150;
  $152 = HEAP32[$151>>2]|0;
  $153 = ($146>>>0)<($152>>>0);
  $154 = ($146|0)==($152|0);
  $155 = ($143>>>0)<($149>>>0);
  $156 = $154 & $155;
  $157 = $153 | $156;
  if (!($157)) {
   break;
  }
  $158 = $i;
  $159 = $158;
  $160 = HEAP32[$159>>2]|0;
  $161 = (($158) + 4)|0;
  $162 = $161;
  $163 = HEAP32[$162>>2]|0;
  $164 = $keys;
  $arrayidx39 = (($164) + ($160<<2)|0);
  $165 = HEAP32[$arrayidx39>>2]|0;
  $key = $165;
  $166 = $i;
  $167 = $166;
  $168 = HEAP32[$167>>2]|0;
  $169 = (($166) + 4)|0;
  $170 = $169;
  $171 = HEAP32[$170>>2]|0;
  $172 = $values;
  $arrayidx41 = (($172) + ($168<<2)|0);
  $173 = HEAP32[$arrayidx41>>2]|0;
  $value = $173;
  $call42 = (_malloc(12)|0);
  $new_Table_Pair = $call42;
  $174 = $key;
  $175 = $new_Table_Pair;
  HEAP32[$175>>2] = $174;
  $176 = $value;
  $177 = $new_Table_Pair;
  $value44 = (($177) + 4|0);
  HEAP32[$value44>>2] = $176;
  $178 = $key;
  $data45 = (($178) + 8|0);
  $179 = HEAP32[$data45>>2]|0;
  $180 = $t$addr;
  $data46 = (($180) + 8|0);
  $181 = $data46;
  $182 = $181;
  $183 = HEAP32[$182>>2]|0;
  $184 = (($181) + 4)|0;
  $185 = $184;
  $186 = HEAP32[$185>>2]|0;
  $187 = (_hash($179,$183,$186)|0);
  $188 = tempRet0;
  $189 = $hash_value;
  $190 = $189;
  HEAP32[$190>>2] = $187;
  $191 = (($189) + 4)|0;
  $192 = $191;
  HEAP32[$192>>2] = $188;
  $193 = $hash_value;
  $194 = $193;
  $195 = HEAP32[$194>>2]|0;
  $196 = (($193) + 4)|0;
  $197 = $196;
  $198 = HEAP32[$197>>2]|0;
  $199 = $t$addr;
  $data51 = (($199) + 8|0);
  $vec53 = (($data51) + 16|0);
  $200 = HEAP32[$vec53>>2]|0;
  $arrayidx54 = (($200) + ($195<<2)|0);
  $201 = HEAP32[$arrayidx54>>2]|0;
  $cmp55 = ($201|0)!=(0|0);
  if ($cmp55) {
   $202 = $hash_value;
   $203 = $202;
   $204 = HEAP32[$203>>2]|0;
   $205 = (($202) + 4)|0;
   $206 = $205;
   $207 = HEAP32[$206>>2]|0;
   $208 = $t$addr;
   $data59 = (($208) + 8|0);
   $vec61 = (($data59) + 16|0);
   $209 = HEAP32[$vec61>>2]|0;
   $arrayidx62 = (($209) + ($204<<2)|0);
   $210 = HEAP32[$arrayidx62>>2]|0;
   $211 = $new_Table_Pair;
   $next63 = (($211) + 8|0);
   HEAP32[$next63>>2] = $210;
   $212 = $new_Table_Pair;
   $213 = $hash_value;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = (($213) + 4)|0;
   $217 = $216;
   $218 = HEAP32[$217>>2]|0;
   $219 = $t$addr;
   $data65 = (($219) + 8|0);
   $vec67 = (($data65) + 16|0);
   $220 = HEAP32[$vec67>>2]|0;
   $arrayidx68 = (($220) + ($215<<2)|0);
   HEAP32[$arrayidx68>>2] = $212;
  } else {
   $221 = $new_Table_Pair;
   $next69 = (($221) + 8|0);
   HEAP32[$next69>>2] = 0;
   $222 = $new_Table_Pair;
   $223 = $hash_value;
   $224 = $223;
   $225 = HEAP32[$224>>2]|0;
   $226 = (($223) + 4)|0;
   $227 = $226;
   $228 = HEAP32[$227>>2]|0;
   $229 = $t$addr;
   $data71 = (($229) + 8|0);
   $vec73 = (($data71) + 16|0);
   $230 = HEAP32[$vec73>>2]|0;
   $arrayidx74 = (($230) + ($225<<2)|0);
   HEAP32[$arrayidx74>>2] = $222;
  }
  $231 = $i;
  $232 = $231;
  $233 = HEAP32[$232>>2]|0;
  $234 = (($231) + 4)|0;
  $235 = $234;
  $236 = HEAP32[$235>>2]|0;
  $237 = (_i64Add(($233|0),($236|0),1,0)|0);
  $238 = tempRet0;
  $239 = $i;
  $240 = $239;
  HEAP32[$240>>2] = $237;
  $241 = (($239) + 4)|0;
  $242 = $241;
  HEAP32[$242>>2] = $238;
 }
 $243 = $keys;
 _free($243);
 $244 = $values;
 _free($244);
 STACKTOP = sp;return;
}
function _Table_getval($t,$key) {
 $t = $t|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0;
 var $call13 = 0, $cmp = 0, $cmp14 = 0, $cmp5 = 0, $data = 0, $data1 = 0, $data10 = 0, $data2 = 0, $data6 = 0, $hash_value = 0, $key$addr = 0, $next = 0, $retval = 0, $t$addr = 0, $table_pairs = 0, $value = 0, $vec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $hash_value = sp;
 $t$addr = $t;
 $key$addr = $key;
 $0 = $key$addr;
 $data = (($0) + 8|0);
 $1 = HEAP32[$data>>2]|0;
 $2 = $t$addr;
 $data1 = (($2) + 8|0);
 $3 = $data1;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_hash($1,$5,$8)|0);
 $10 = tempRet0;
 $11 = $hash_value;
 $12 = $11;
 HEAP32[$12>>2] = $9;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $15 = $hash_value;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = $t$addr;
 $data2 = (($21) + 8|0);
 $vec = (($data2) + 16|0);
 $22 = HEAP32[$vec>>2]|0;
 $arrayidx = (($22) + ($17<<2)|0);
 $23 = HEAP32[$arrayidx>>2]|0;
 $table_pairs = $23;
 while(1) {
  $24 = $table_pairs;
  $cmp = ($24|0)!=(0|0);
  if (!($cmp)) {
   label = 7;
   break;
  }
  $25 = $table_pairs;
  $26 = HEAP32[$25>>2]|0;
  $27 = $key$addr;
  $cmp5 = ($26|0)==($27|0);
  if ($cmp5) {
   label = 5;
   break;
  }
  $28 = $key$addr;
  $data6 = (($28) + 8|0);
  $29 = HEAP32[$data6>>2]|0;
  $30 = $table_pairs;
  $31 = HEAP32[$30>>2]|0;
  $data10 = (($31) + 8|0);
  $32 = HEAP32[$data10>>2]|0;
  $call13 = (_strcmp($29,$32)|0);
  $cmp14 = ($call13|0)==(0);
  if ($cmp14) {
   label = 5;
   break;
  }
  $35 = $table_pairs;
  $next = (($35) + 8|0);
  $36 = HEAP32[$next>>2]|0;
  $table_pairs = $36;
 }
 if ((label|0) == 5) {
  $33 = $table_pairs;
  $value = (($33) + 4|0);
  $34 = HEAP32[$value>>2]|0;
  $retval = $34;
  $38 = $retval;
  STACKTOP = sp;return ($38|0);
 }
 else if ((label|0) == 7) {
  $37 = HEAP32[40>>2]|0;
  $retval = $37;
  $38 = $retval;
  STACKTOP = sp;return ($38|0);
 }
 return 0|0;
}
function _Table_setval($t,$key,$value) {
 $t = $t|0;
 $key = $key|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arrayidx = 0, $arrayidx44 = 0, $arrayidx50 = 0, $call11 = 0, $call28 = 0, $cmp = 0, $cmp19 = 0, $cmp29 = 0, $data = 0, $data1 = 0, $data22 = 0, $data25 = 0, $data41 = 0, $data47 = 0, $data5 = 0;
 var $data52 = 0, $data6 = 0, $data9 = 0, $dec = 0, $div = 0.0, $hash_value = 0, $inc = 0, $inc15 = 0, $inc37 = 0, $key$addr = 0, $length = 0, $length54 = 0, $new_table_pair = 0, $next = 0, $next39 = 0, $next45 = 0, $t$addr = 0, $table_pairs = 0, $temp_table_pair = 0, $tobool = 0;
 var $tobool17 = 0, $use_count = 0, $use_count14 = 0, $use_count33 = 0, $use_count36 = 0, $value$addr = 0, $value13 = 0, $value32 = 0, $value34 = 0, $value35 = 0, $vec = 0, $vec43 = 0, $vec49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $hash_value = sp;
 $t$addr = $t;
 $key$addr = $key;
 $value$addr = $value;
 $0 = $t$addr;
 $data = (($0) + 8|0);
 $length = (($data) + 8|0);
 $1 = $length;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (+($3>>>0)) + (4294967296.0*(+($6>>>0)));
 $8 = $t$addr;
 $data1 = (($8) + 8|0);
 $9 = $data1;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($11>>>0)) + (4294967296.0*(+($14>>>0)));
 $div = $7 / $15;
 $cmp = $div >= 0.699999999999999955591;
 if ($cmp) {
  $16 = $t$addr;
  _rehash($16);
 }
 $17 = $key$addr;
 $data5 = (($17) + 8|0);
 $18 = HEAP32[$data5>>2]|0;
 $19 = $t$addr;
 $data6 = (($19) + 8|0);
 $20 = $data6;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (_hash($18,$22,$25)|0);
 $27 = tempRet0;
 $28 = $hash_value;
 $29 = $28;
 HEAP32[$29>>2] = $26;
 $30 = (($28) + 4)|0;
 $31 = $30;
 HEAP32[$31>>2] = $27;
 $32 = $hash_value;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + 4)|0;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = $t$addr;
 $data9 = (($38) + 8|0);
 $vec = (($data9) + 16|0);
 $39 = HEAP32[$vec>>2]|0;
 $arrayidx = (($39) + ($34<<2)|0);
 $40 = HEAP32[$arrayidx>>2]|0;
 $table_pairs = $40;
 $call11 = (_malloc(12)|0);
 $new_table_pair = $call11;
 $41 = $key$addr;
 $42 = $new_table_pair;
 HEAP32[$42>>2] = $41;
 $43 = $value$addr;
 $44 = $new_table_pair;
 $value13 = (($44) + 4|0);
 HEAP32[$value13>>2] = $43;
 $45 = $key$addr;
 $use_count = (($45) + 4|0);
 $46 = HEAP32[$use_count>>2]|0;
 $inc = (($46) + 1)|0;
 HEAP32[$use_count>>2] = $inc;
 $47 = $value$addr;
 $use_count14 = (($47) + 4|0);
 $48 = HEAP32[$use_count14>>2]|0;
 $inc15 = (($48) + 1)|0;
 HEAP32[$use_count14>>2] = $inc15;
 $49 = $table_pairs;
 $tobool = ($49|0)!=(0|0);
 do {
  if ($tobool) {
   $50 = $table_pairs;
   $temp_table_pair = $50;
   while(1) {
    $51 = $temp_table_pair;
    $tobool17 = ($51|0)!=(0|0);
    if (!($tobool17)) {
     label = 10;
     break;
    }
    $52 = $temp_table_pair;
    $53 = HEAP32[$52>>2]|0;
    $54 = $key$addr;
    $cmp19 = ($53|0)==($54|0);
    if ($cmp19) {
     break;
    }
    $55 = $temp_table_pair;
    $56 = HEAP32[$55>>2]|0;
    $data22 = (($56) + 8|0);
    $57 = HEAP32[$data22>>2]|0;
    $58 = $key$addr;
    $data25 = (($58) + 8|0);
    $59 = HEAP32[$data25>>2]|0;
    $call28 = (_strcmp($57,$59)|0);
    $cmp29 = ($call28|0)==(0);
    if ($cmp29) {
     break;
    }
    $69 = $temp_table_pair;
    $next = (($69) + 8|0);
    $70 = HEAP32[$next>>2]|0;
    $temp_table_pair = $70;
   }
   if ((label|0) == 10) {
    $71 = $table_pairs;
    $72 = $new_table_pair;
    $next39 = (($72) + 8|0);
    HEAP32[$next39>>2] = $71;
    $73 = $new_table_pair;
    $74 = $hash_value;
    $75 = $74;
    $76 = HEAP32[$75>>2]|0;
    $77 = (($74) + 4)|0;
    $78 = $77;
    $79 = HEAP32[$78>>2]|0;
    $80 = $t$addr;
    $data41 = (($80) + 8|0);
    $vec43 = (($data41) + 16|0);
    $81 = HEAP32[$vec43>>2]|0;
    $arrayidx44 = (($81) + ($76<<2)|0);
    HEAP32[$arrayidx44>>2] = $73;
    break;
   }
   $60 = $temp_table_pair;
   $value32 = (($60) + 4|0);
   $61 = HEAP32[$value32>>2]|0;
   $use_count33 = (($61) + 4|0);
   $62 = HEAP32[$use_count33>>2]|0;
   $dec = (($62) + -1)|0;
   HEAP32[$use_count33>>2] = $dec;
   $63 = $temp_table_pair;
   $value34 = (($63) + 4|0);
   $64 = HEAP32[$value34>>2]|0;
   _Object_free($64);
   $65 = $value$addr;
   $66 = $temp_table_pair;
   $value35 = (($66) + 4|0);
   HEAP32[$value35>>2] = $65;
   $67 = $value$addr;
   $use_count36 = (($67) + 4|0);
   $68 = HEAP32[$use_count36>>2]|0;
   $inc37 = (($68) + 1)|0;
   HEAP32[$use_count36>>2] = $inc37;
   STACKTOP = sp;return;
  } else {
   $82 = $new_table_pair;
   $next45 = (($82) + 8|0);
   HEAP32[$next45>>2] = 0;
   $83 = $new_table_pair;
   $84 = $hash_value;
   $85 = $84;
   $86 = HEAP32[$85>>2]|0;
   $87 = (($84) + 4)|0;
   $88 = $87;
   $89 = HEAP32[$88>>2]|0;
   $90 = $t$addr;
   $data47 = (($90) + 8|0);
   $vec49 = (($data47) + 16|0);
   $91 = HEAP32[$vec49>>2]|0;
   $arrayidx50 = (($91) + ($86<<2)|0);
   HEAP32[$arrayidx50>>2] = $83;
  }
 } while(0);
 $92 = $t$addr;
 $data52 = (($92) + 8|0);
 $length54 = (($data52) + 8|0);
 $93 = $length54;
 $94 = $93;
 $95 = HEAP32[$94>>2]|0;
 $96 = (($93) + 4)|0;
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = (_i64Add(($95|0),($98|0),1,0)|0);
 $100 = tempRet0;
 $101 = $length54;
 $102 = $101;
 HEAP32[$102>>2] = $99;
 $103 = (($101) + 4)|0;
 $104 = $103;
 HEAP32[$104>>2] = $100;
 STACKTOP = sp;return;
}
function _Object_free($o) {
 $o = $o|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $arrayidx = 0, $arrayidx24 = 0, $arrayidx37 = 0, $arrayidx40 = 0, $arrayidx57 = 0, $arrayidx62 = 0, $arrayidx89 = 0, $arrayidx95 = 0, $cdr = 0, $cdr16 = 0, $cmp = 0, $cmp21 = 0, $cmp34 = 0, $cmp52 = 0, $cmp63 = 0, $cmp83 = 0, $cmp97 = 0, $data = 0, $data11 = 0;
 var $data114 = 0, $data118 = 0, $data121 = 0, $data125 = 0, $data14 = 0, $data18 = 0, $data28 = 0, $data30 = 0, $data44 = 0, $data48 = 0, $data5 = 0, $data55 = 0, $data59 = 0, $data7 = 0, $data74 = 0, $data78 = 0, $data86 = 0, $data92 = 0, $dec = 0, $dec102 = 0;
 var $dec106 = 0, $dec117 = 0, $dec39 = 0, $dec66 = 0, $dec69 = 0, $env = 0, $env19 = 0, $i = 0, $inc = 0, $inc112 = 0, $inc42 = 0, $inc72 = 0, $length = 0, $length20 = 0, $length29 = 0, $next = 0, $next108 = 0, $o$addr = 0, $p = 0, $proto = 0;
 var $proto120 = 0, $size = 0, $sub = 0, $sub10 = 0, $temp = 0, $tobool = 0, $tobool90 = 0, $use_count = 0, $use_count101 = 0, $use_count105 = 0, $use_count116 = 0, $use_count22 = 0, $use_count38 = 0, $use_count6 = 0, $use_count65 = 0, $use_count68 = 0, $use_count9 = 0, $v = 0, $value = 0, $value104 = 0;
 var $value107 = 0, $value70 = 0, $vararg_buffer = 0, $vec = 0, $vec123 = 0, $vec61 = 0, $vec76 = 0, $vec88 = 0, $vec94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $o$addr = $o;
 $0 = $o$addr;
 $use_count = (($0) + 4|0);
 $1 = HEAP32[$use_count>>2]|0;
 $cmp = ($1|0)==(0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $2 = $o$addr;
 $3 = HEAP32[$2>>2]|0;
 do {
  switch ($3|0) {
  case 7:  {
   STACKTOP = sp;return;
   break;
  }
  case 0:  {
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $5 = $o$addr;
   $data = (($5) + 8|0);
   $6 = HEAP32[$data>>2]|0;
   _free($6);
   $7 = $o$addr;
   _free($7);
   STACKTOP = sp;return;
   break;
  }
  case 3: case 2: case 1:  {
   $4 = $o$addr;
   _free($4);
   STACKTOP = sp;return;
   break;
  }
  case 6:  {
   $19 = $o$addr;
   $data18 = (($19) + 8|0);
   $env19 = (($data18) + 16|0);
   $20 = HEAP32[$env19>>2]|0;
   $env = $20;
   $21 = $env;
   $length20 = (($21) + 4|0);
   $22 = HEAP32[$length20>>2]|0;
   $length = $22;
   $i = 0;
   while(1) {
    $23 = $i;
    $24 = $length;
    $cmp21 = ($23>>>0)<($24>>>0);
    if (!($cmp21)) {
     break;
    }
    $25 = $i;
    $26 = $env;
    $27 = HEAP32[$26>>2]|0;
    $arrayidx = (($27) + ($25<<2)|0);
    $28 = HEAP32[$arrayidx>>2]|0;
    $use_count22 = (($28) + 8|0);
    $29 = HEAP32[$use_count22>>2]|0;
    $dec = (($29) + -1)|0;
    HEAP32[$use_count22>>2] = $dec;
    $30 = $i;
    $31 = $env;
    $32 = HEAP32[$31>>2]|0;
    $arrayidx24 = (($32) + ($30<<2)|0);
    $33 = HEAP32[$arrayidx24>>2]|0;
    _EF_free($33);
    $34 = $i;
    $inc = (($34) + 1)|0;
    $i = $inc;
   }
   $35 = $env;
   $36 = HEAP32[$35>>2]|0;
   _free($36);
   $37 = $env;
   _free($37);
   $38 = $o$addr;
   _free($38);
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $8 = $o$addr;
   $data5 = (($8) + 8|0);
   $9 = HEAP32[$data5>>2]|0;
   $use_count6 = (($9) + 4|0);
   $10 = HEAP32[$use_count6>>2]|0;
   $sub = (($10) - 1)|0;
   HEAP32[$use_count6>>2] = $sub;
   $11 = $o$addr;
   $data7 = (($11) + 8|0);
   $cdr = (($data7) + 4|0);
   $12 = HEAP32[$cdr>>2]|0;
   $use_count9 = (($12) + 4|0);
   $13 = HEAP32[$use_count9>>2]|0;
   $sub10 = (($13) - 1)|0;
   HEAP32[$use_count9>>2] = $sub10;
   $14 = $o$addr;
   $data11 = (($14) + 8|0);
   $15 = HEAP32[$data11>>2]|0;
   _Object_free($15);
   $16 = $o$addr;
   $data14 = (($16) + 8|0);
   $cdr16 = (($data14) + 4|0);
   $17 = HEAP32[$cdr16>>2]|0;
   _Object_free($17);
   $18 = $o$addr;
   _free($18);
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $39 = $o$addr;
   $data28 = (($39) + 8|0);
   $length29 = (($data28) + 16|0);
   $40 = $length29;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = (($40) + 4)|0;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $length = $42;
   $46 = $o$addr;
   $data30 = (($46) + 8|0);
   $47 = HEAP32[$data30>>2]|0;
   $v = $47;
   $i = 0;
   while(1) {
    $48 = $i;
    $49 = $length;
    $cmp34 = ($48>>>0)<($49>>>0);
    if (!($cmp34)) {
     break;
    }
    $50 = $i;
    $51 = $v;
    $arrayidx37 = (($51) + ($50<<2)|0);
    $52 = HEAP32[$arrayidx37>>2]|0;
    $use_count38 = (($52) + 4|0);
    $53 = HEAP32[$use_count38>>2]|0;
    $dec39 = (($53) + -1)|0;
    HEAP32[$use_count38>>2] = $dec39;
    $54 = $i;
    $55 = $v;
    $arrayidx40 = (($55) + ($54<<2)|0);
    $56 = HEAP32[$arrayidx40>>2]|0;
    _Object_free($56);
    $57 = $i;
    $inc42 = (($57) + 1)|0;
    $i = $inc42;
   }
   $58 = $o$addr;
   $data44 = (($58) + 8|0);
   $59 = HEAP32[$data44>>2]|0;
   _free($59);
   $60 = $o$addr;
   _free($60);
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   $61 = $o$addr;
   $data48 = (($61) + 8|0);
   $62 = $data48;
   $63 = $62;
   $64 = HEAP32[$63>>2]|0;
   $65 = (($62) + 4)|0;
   $66 = $65;
   $67 = HEAP32[$66>>2]|0;
   $size = $64;
   $i = 0;
   while(1) {
    $68 = $i;
    $69 = $size;
    $cmp52 = ($68>>>0)<($69>>>0);
    if (!($cmp52)) {
     break;
    }
    $70 = $i;
    $71 = $o$addr;
    $data55 = (($71) + 8|0);
    $vec = (($data55) + 16|0);
    $72 = HEAP32[$vec>>2]|0;
    $arrayidx57 = (($72) + ($70<<2)|0);
    $73 = HEAP32[$arrayidx57>>2]|0;
    $tobool = ($73|0)!=(0|0);
    if ($tobool) {
     $74 = $i;
     $75 = $o$addr;
     $data59 = (($75) + 8|0);
     $vec61 = (($data59) + 16|0);
     $76 = HEAP32[$vec61>>2]|0;
     $arrayidx62 = (($76) + ($74<<2)|0);
     $77 = HEAP32[$arrayidx62>>2]|0;
     $p = $77;
     while(1) {
      $78 = $p;
      $cmp63 = ($78|0)!=(0|0);
      if (!($cmp63)) {
       break;
      }
      $79 = $p;
      $80 = HEAP32[$79>>2]|0;
      $use_count65 = (($80) + 4|0);
      $81 = HEAP32[$use_count65>>2]|0;
      $dec66 = (($81) + -1)|0;
      HEAP32[$use_count65>>2] = $dec66;
      $82 = $p;
      $83 = HEAP32[$82>>2]|0;
      _Object_free($83);
      $84 = $p;
      $value = (($84) + 4|0);
      $85 = HEAP32[$value>>2]|0;
      $use_count68 = (($85) + 4|0);
      $86 = HEAP32[$use_count68>>2]|0;
      $dec69 = (($86) + -1)|0;
      HEAP32[$use_count68>>2] = $dec69;
      $87 = $p;
      $value70 = (($87) + 4|0);
      $88 = HEAP32[$value70>>2]|0;
      _Object_free($88);
      $89 = $p;
      $temp = $89;
      $90 = $p;
      $next = (($90) + 8|0);
      $91 = HEAP32[$next>>2]|0;
      $p = $91;
      $92 = $temp;
      _free($92);
     }
    }
    $93 = $i;
    $inc72 = (($93) + 1)|0;
    $i = $inc72;
   }
   $94 = $o$addr;
   $data74 = (($94) + 8|0);
   $vec76 = (($data74) + 16|0);
   $95 = HEAP32[$vec76>>2]|0;
   _free($95);
   $96 = $o$addr;
   _free($96);
   STACKTOP = sp;return;
   break;
  }
  case 10:  {
   $97 = $o$addr;
   $data78 = (($97) + 8|0);
   $98 = $data78;
   $99 = $98;
   $100 = HEAP32[$99>>2]|0;
   $101 = (($98) + 4)|0;
   $102 = $101;
   $103 = HEAP32[$102>>2]|0;
   $size = $100;
   $i = 0;
   while(1) {
    $104 = $i;
    $105 = $size;
    $cmp83 = ($104>>>0)<($105>>>0);
    if (!($cmp83)) {
     break;
    }
    $106 = $i;
    $107 = $o$addr;
    $data86 = (($107) + 8|0);
    $vec88 = (($data86) + 16|0);
    $108 = HEAP32[$vec88>>2]|0;
    $arrayidx89 = (($108) + ($106<<2)|0);
    $109 = HEAP32[$arrayidx89>>2]|0;
    $tobool90 = ($109|0)!=(0|0);
    if ($tobool90) {
     $110 = $i;
     $111 = $o$addr;
     $data92 = (($111) + 8|0);
     $vec94 = (($data92) + 16|0);
     $112 = HEAP32[$vec94>>2]|0;
     $arrayidx95 = (($112) + ($110<<2)|0);
     $113 = HEAP32[$arrayidx95>>2]|0;
     $p = $113;
     while(1) {
      $114 = $p;
      $cmp97 = ($114|0)!=(0|0);
      if (!($cmp97)) {
       break;
      }
      $115 = $p;
      $116 = HEAP32[$115>>2]|0;
      $use_count101 = (($116) + 4|0);
      $117 = HEAP32[$use_count101>>2]|0;
      $dec102 = (($117) + -1)|0;
      HEAP32[$use_count101>>2] = $dec102;
      $118 = $p;
      $119 = HEAP32[$118>>2]|0;
      _Object_free($119);
      $120 = $p;
      $value104 = (($120) + 4|0);
      $121 = HEAP32[$value104>>2]|0;
      $use_count105 = (($121) + 4|0);
      $122 = HEAP32[$use_count105>>2]|0;
      $dec106 = (($122) + -1)|0;
      HEAP32[$use_count105>>2] = $dec106;
      $123 = $p;
      $value107 = (($123) + 4|0);
      $124 = HEAP32[$value107>>2]|0;
      _Object_free($124);
      $125 = $p;
      $temp = $125;
      $126 = $p;
      $next108 = (($126) + 8|0);
      $127 = HEAP32[$next108>>2]|0;
      $p = $127;
      $128 = $temp;
      _free($128);
     }
    }
    $129 = $i;
    $inc112 = (($129) + 1)|0;
    $i = $inc112;
   }
   $130 = $o$addr;
   $data114 = (($130) + 8|0);
   $proto = (($data114) + 20|0);
   $131 = HEAP32[$proto>>2]|0;
   $use_count116 = (($131) + 4|0);
   $132 = HEAP32[$use_count116>>2]|0;
   $dec117 = (($132) + -1)|0;
   HEAP32[$use_count116>>2] = $dec117;
   $133 = $o$addr;
   $data118 = (($133) + 8|0);
   $proto120 = (($data118) + 20|0);
   $134 = HEAP32[$proto120>>2]|0;
   _Object_free($134);
   $135 = $o$addr;
   $data121 = (($135) + 8|0);
   $vec123 = (($data121) + 16|0);
   $136 = HEAP32[$vec123>>2]|0;
   _free($136);
   $137 = $o$addr;
   _free($137);
   STACKTOP = sp;return;
   break;
  }
  case 11:  {
   $138 = $o$addr;
   $data125 = (($138) + 8|0);
   $139 = HEAP32[$data125>>2]|0;
   (_fclose(($139|0))|0);
   $140 = $o$addr;
   _free($140);
   STACKTOP = sp;return;
   break;
  }
  default: {
   (_printf((8176|0),($vararg_buffer|0))|0);
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _table_getKeys($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $cmp4 = 0, $data = 0, $data2 = 0, $i = 0, $inc = 0, $inc7 = 0, $keys = 0, $next = 0;
 var $p = 0, $t$addr = 0, $tobool = 0, $use_count = 0, $vec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t$addr = $t;
 $0 = HEAP32[40>>2]|0;
 $keys = $0;
 $i = 0;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = $t$addr;
  $data = (($2) + 8|0);
  $3 = $data;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (0)<($8>>>0);
  $10 = (0)==($8|0);
  $11 = ($1>>>0)<($5>>>0);
  $12 = $10 & $11;
  $13 = $9 | $12;
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = $t$addr;
  $data2 = (($15) + 8|0);
  $vec = (($data2) + 16|0);
  $16 = HEAP32[$vec>>2]|0;
  $arrayidx = (($16) + ($14<<2)|0);
  $17 = HEAP32[$arrayidx>>2]|0;
  $p = $17;
  $18 = $p;
  $tobool = ($18|0)!=(0|0);
  if ($tobool) {
   while(1) {
    $19 = $p;
    $cmp4 = ($19|0)!=(0|0);
    if (!($cmp4)) {
     break;
    }
    $20 = $p;
    $21 = HEAP32[$20>>2]|0;
    $22 = $keys;
    $call = (_cons($21,$22)|0);
    $keys = $call;
    $23 = $p;
    $24 = HEAP32[$23>>2]|0;
    $use_count = (($24) + 4|0);
    $25 = HEAP32[$use_count>>2]|0;
    $inc = (($25) + 1)|0;
    HEAP32[$use_count>>2] = $inc;
    $26 = $p;
    $next = (($26) + 8|0);
    $27 = HEAP32[$next>>2]|0;
    $p = $27;
   }
  }
  $28 = $i;
  $inc7 = (($28) + 1)|0;
  $i = $inc7;
 }
 $29 = $keys;
 STACKTOP = sp;return ($29|0);
}
function _gcd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $a$addr = 0, $b$addr = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a$addr = sp + 16|0;
 $b$addr = sp + 8|0;
 $temp = sp;
 $4 = $a$addr;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $b$addr;
 $9 = $8;
 HEAP32[$9>>2] = $2;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $3;
 while(1) {
  $12 = $b$addr;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)!=(0);
  $19 = ($17|0)!=(0);
  $20 = $18 | $19;
  if (!($20)) {
   break;
  }
  $21 = $a$addr;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = $temp;
  $28 = $27;
  HEAP32[$28>>2] = $23;
  $29 = (($27) + 4)|0;
  $30 = $29;
  HEAP32[$30>>2] = $26;
  $31 = $b$addr;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($31) + 4)|0;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = $a$addr;
  $38 = $37;
  HEAP32[$38>>2] = $33;
  $39 = (($37) + 4)|0;
  $40 = $39;
  HEAP32[$40>>2] = $36;
  $41 = $temp;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = $b$addr;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = (($47) + 4)|0;
  $51 = $50;
  $52 = HEAP32[$51>>2]|0;
  $53 = (___remdi3(($43|0),($46|0),($49|0),($52|0))|0);
  $54 = tempRet0;
  $55 = $b$addr;
  $56 = $55;
  HEAP32[$56>>2] = $53;
  $57 = (($55) + 4)|0;
  $58 = $57;
  HEAP32[$58>>2] = $54;
 }
 $59 = $a$addr;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (($59) + 4)|0;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 tempRet0 = $64;
 STACKTOP = sp;return ($61|0);
}
function _Object_initRatio($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $call = 0, $call5 = 0;
 var $data = 0, $data7 = 0, $data9 = 0, $denom$addr = 0, $g = 0, $numer$addr = 0, $numer8 = 0, $o = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $numer$addr = sp + 16|0;
 $denom$addr = sp + 8|0;
 $g = sp;
 $4 = $numer$addr;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $denom$addr;
 $9 = $8;
 HEAP32[$9>>2] = $2;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $3;
 $12 = $denom$addr;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14|0)==(1);
 $19 = ($17|0)==(0);
 $20 = $18 & $19;
 do {
  if ($20) {
  } else {
   $34 = $numer$addr;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $37 = (($34) + 4)|0;
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = $denom$addr;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = (($40) + 4)|0;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = (_gcd($36,$39,$42,$45)|0);
   $47 = tempRet0;
   $48 = $g;
   $49 = $48;
   HEAP32[$49>>2] = $46;
   $50 = (($48) + 4)|0;
   $51 = $50;
   HEAP32[$51>>2] = $47;
   $52 = $numer$addr;
   $53 = $52;
   $54 = HEAP32[$53>>2]|0;
   $55 = (($52) + 4)|0;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   $58 = $g;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = (($58) + 4)|0;
   $62 = $61;
   $63 = HEAP32[$62>>2]|0;
   $64 = (___divdi3(($54|0),($57|0),($60|0),($63|0))|0);
   $65 = tempRet0;
   $66 = $numer$addr;
   $67 = $66;
   HEAP32[$67>>2] = $64;
   $68 = (($66) + 4)|0;
   $69 = $68;
   HEAP32[$69>>2] = $65;
   $70 = $denom$addr;
   $71 = $70;
   $72 = HEAP32[$71>>2]|0;
   $73 = (($70) + 4)|0;
   $74 = $73;
   $75 = HEAP32[$74>>2]|0;
   $76 = $g;
   $77 = $76;
   $78 = HEAP32[$77>>2]|0;
   $79 = (($76) + 4)|0;
   $80 = $79;
   $81 = HEAP32[$80>>2]|0;
   $82 = (___divdi3(($72|0),($75|0),($78|0),($81|0))|0);
   $83 = tempRet0;
   $84 = $denom$addr;
   $85 = $84;
   HEAP32[$85>>2] = $82;
   $86 = (($84) + 4)|0;
   $87 = $86;
   HEAP32[$87>>2] = $83;
   $88 = $denom$addr;
   $89 = $88;
   $90 = HEAP32[$89>>2]|0;
   $91 = (($88) + 4)|0;
   $92 = $91;
   $93 = HEAP32[$92>>2]|0;
   $94 = ($90|0)==(1);
   $95 = ($93|0)==(0);
   $96 = $94 & $95;
   if ($96) {
    break;
   }
   $call5 = (_allocateObject()|0);
   $o = $call5;
   $97 = $o;
   HEAP32[$97>>2] = 3;
   $98 = $numer$addr;
   $99 = $98;
   $100 = HEAP32[$99>>2]|0;
   $101 = (($98) + 4)|0;
   $102 = $101;
   $103 = HEAP32[$102>>2]|0;
   $104 = $o;
   $data7 = (($104) + 8|0);
   $numer8 = (($data7) + 8|0);
   $105 = $numer8;
   $106 = $105;
   HEAP32[$106>>2] = $100;
   $107 = (($105) + 4)|0;
   $108 = $107;
   HEAP32[$108>>2] = $103;
   $109 = $denom$addr;
   $110 = $109;
   $111 = HEAP32[$110>>2]|0;
   $112 = (($109) + 4)|0;
   $113 = $112;
   $114 = HEAP32[$113>>2]|0;
   $115 = $o;
   $data9 = (($115) + 8|0);
   $116 = $data9;
   $117 = $116;
   HEAP32[$117>>2] = $111;
   $118 = (($116) + 4)|0;
   $119 = $118;
   HEAP32[$119>>2] = $114;
   $120 = $o;
   $retval = $120;
   $121 = $retval;
   STACKTOP = sp;return ($121|0);
  }
 } while(0);
 $call = (_allocateObject()|0);
 $o = $call;
 $21 = $o;
 HEAP32[$21>>2] = 1;
 $22 = $numer$addr;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 4)|0;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = $o;
 $data = (($28) + 8|0);
 $29 = $data;
 $30 = $29;
 HEAP32[$30>>2] = $24;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $27;
 $33 = $o;
 $retval = $33;
 $121 = $retval;
 STACKTOP = sp;return ($121|0);
}
function _add_rat($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $8 = 0;
 var $9 = 0, $denom_x$addr = 0, $denom_y$addr = 0, $numer_x$addr = 0, $numer_y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $numer_x$addr = sp + 24|0;
 $denom_x$addr = sp + 16|0;
 $numer_y$addr = sp + 8|0;
 $denom_y$addr = sp;
 $8 = $numer_x$addr;
 $9 = $8;
 HEAP32[$9>>2] = $0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $1;
 $12 = $denom_x$addr;
 $13 = $12;
 HEAP32[$13>>2] = $2;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $3;
 $16 = $numer_y$addr;
 $17 = $16;
 HEAP32[$17>>2] = $4;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $5;
 $20 = $denom_y$addr;
 $21 = $20;
 HEAP32[$21>>2] = $6;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $7;
 $24 = $numer_x$addr;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = $denom_y$addr;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (___muldi3(($26|0),($29|0),($32|0),($35|0))|0);
 $37 = tempRet0;
 $38 = $numer_y$addr;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = $denom_x$addr;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + 4)|0;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = (___muldi3(($40|0),($43|0),($46|0),($49|0))|0);
 $51 = tempRet0;
 $52 = (_i64Add(($36|0),($37|0),($50|0),($51|0))|0);
 $53 = tempRet0;
 $54 = $denom_x$addr;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = (($54) + 4)|0;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $60 = $denom_y$addr;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($60) + 4)|0;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 $66 = (___muldi3(($56|0),($59|0),($62|0),($65|0))|0);
 $67 = tempRet0;
 $68 = (_Object_initRatio($52,$53,$66,$67)|0);
 STACKTOP = sp;return ($68|0);
}
function _sub_rat($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $8 = 0;
 var $9 = 0, $denom_x$addr = 0, $denom_y$addr = 0, $numer_x$addr = 0, $numer_y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $numer_x$addr = sp + 24|0;
 $denom_x$addr = sp + 16|0;
 $numer_y$addr = sp + 8|0;
 $denom_y$addr = sp;
 $8 = $numer_x$addr;
 $9 = $8;
 HEAP32[$9>>2] = $0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $1;
 $12 = $denom_x$addr;
 $13 = $12;
 HEAP32[$13>>2] = $2;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $3;
 $16 = $numer_y$addr;
 $17 = $16;
 HEAP32[$17>>2] = $4;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $5;
 $20 = $denom_y$addr;
 $21 = $20;
 HEAP32[$21>>2] = $6;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $7;
 $24 = $numer_x$addr;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = $denom_y$addr;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (___muldi3(($26|0),($29|0),($32|0),($35|0))|0);
 $37 = tempRet0;
 $38 = $numer_y$addr;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = $denom_x$addr;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + 4)|0;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = (___muldi3(($40|0),($43|0),($46|0),($49|0))|0);
 $51 = tempRet0;
 $52 = (_i64Subtract(($36|0),($37|0),($50|0),($51|0))|0);
 $53 = tempRet0;
 $54 = $denom_x$addr;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = (($54) + 4)|0;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $60 = $denom_y$addr;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($60) + 4)|0;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 $66 = (___muldi3(($56|0),($59|0),($62|0),($65|0))|0);
 $67 = tempRet0;
 $68 = (_Object_initRatio($52,$53,$66,$67)|0);
 STACKTOP = sp;return ($68|0);
}
function _mul_rat($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $8 = 0, $9 = 0, $denom_x$addr = 0, $denom_y$addr = 0, $numer_x$addr = 0, $numer_y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $numer_x$addr = sp + 24|0;
 $denom_x$addr = sp + 16|0;
 $numer_y$addr = sp + 8|0;
 $denom_y$addr = sp;
 $8 = $numer_x$addr;
 $9 = $8;
 HEAP32[$9>>2] = $0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $1;
 $12 = $denom_x$addr;
 $13 = $12;
 HEAP32[$13>>2] = $2;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $3;
 $16 = $numer_y$addr;
 $17 = $16;
 HEAP32[$17>>2] = $4;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $5;
 $20 = $denom_y$addr;
 $21 = $20;
 HEAP32[$21>>2] = $6;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $7;
 $24 = $numer_x$addr;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = $numer_y$addr;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (___muldi3(($26|0),($29|0),($32|0),($35|0))|0);
 $37 = tempRet0;
 $38 = $denom_x$addr;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = $denom_y$addr;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + 4)|0;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = (___muldi3(($40|0),($43|0),($46|0),($49|0))|0);
 $51 = tempRet0;
 $52 = (_Object_initRatio($36,$37,$50,$51)|0);
 STACKTOP = sp;return ($52|0);
}
function _div_rat($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $8 = 0, $9 = 0, $denom_x$addr = 0, $denom_y$addr = 0, $numer_x$addr = 0, $numer_y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $numer_x$addr = sp + 24|0;
 $denom_x$addr = sp + 16|0;
 $numer_y$addr = sp + 8|0;
 $denom_y$addr = sp;
 $8 = $numer_x$addr;
 $9 = $8;
 HEAP32[$9>>2] = $0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $1;
 $12 = $denom_x$addr;
 $13 = $12;
 HEAP32[$13>>2] = $2;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $3;
 $16 = $numer_y$addr;
 $17 = $16;
 HEAP32[$17>>2] = $4;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $5;
 $20 = $denom_y$addr;
 $21 = $20;
 HEAP32[$21>>2] = $6;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $7;
 $24 = $numer_x$addr;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = $denom_y$addr;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (___muldi3(($26|0),($29|0),($32|0),($35|0))|0);
 $37 = tempRet0;
 $38 = $denom_x$addr;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = $numer_y$addr;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + 4)|0;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = (___muldi3(($40|0),($43|0),($46|0),($49|0))|0);
 $51 = tempRet0;
 $52 = (_Object_initRatio($36,$37,$50,$51)|0);
 STACKTOP = sp;return ($52|0);
}
function _number_to_string($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $add = 0, $buffer = 0, $call26 = 0, $call27 = 0, $data = 0, $data11 = 0, $data13 = 0, $data18 = 0;
 var $data21 = 0, $data5 = 0, $data9 = 0, $mul = 0, $numer = 0, $numer20 = 0, $output = 0, $retval = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr7 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $buffer = sp + 60|0;
 $x$addr = $x;
 (_strcpy(($buffer|0),(48|0))|0);
 $0 = $x$addr;
 $1 = HEAP32[$0>>2]|0;
 if ((($1|0) == 1)) {
  $2 = $x$addr;
  $data = (($2) + 8|0);
  $3 = $data;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = $vararg_buffer;
  $10 = $9;
  HEAP32[$10>>2] = $5;
  $11 = (($9) + 4)|0;
  $12 = $11;
  HEAP32[$12>>2] = $8;
  (_sprintf($buffer,56,$vararg_buffer)|0);
 } else if ((($1|0) == 2)) {
  $13 = $x$addr;
  $data5 = (($13) + 8|0);
  $14 = +HEAPF64[$data5>>3];
  HEAPF64[tempDoublePtr>>3]=$14;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sprintf($buffer,64,$vararg_buffer1)|0);
 } else if ((($1|0) == 3)) {
  $15 = $x$addr;
  $data9 = (($15) + 8|0);
  $16 = $data9;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)<(0);
  if ($22) {
   $23 = $x$addr;
   $data11 = (($23) + 8|0);
   $numer = (($data11) + 8|0);
   $24 = $numer;
   $25 = $24;
   $26 = HEAP32[$25>>2]|0;
   $27 = (($24) + 4)|0;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   $30 = $x$addr;
   $data13 = (($30) + 8|0);
   $31 = $data13;
   $32 = $31;
   $33 = HEAP32[$32>>2]|0;
   $34 = (($31) + 4)|0;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $37 = (_i64Subtract(0,0,($33|0),($36|0))|0);
   $38 = tempRet0;
   $39 = $vararg_buffer4;
   $40 = $39;
   HEAP32[$40>>2] = $26;
   $41 = (($39) + 4)|0;
   $42 = $41;
   HEAP32[$42>>2] = $29;
   $vararg_ptr7 = (($vararg_buffer4) + 8|0);
   $43 = $vararg_ptr7;
   $44 = $43;
   HEAP32[$44>>2] = $37;
   $45 = (($43) + 4)|0;
   $46 = $45;
   HEAP32[$46>>2] = $38;
   (_sprintf($buffer,72,$vararg_buffer4)|0);
  } else {
   $47 = $x$addr;
   $data18 = (($47) + 8|0);
   $numer20 = (($data18) + 8|0);
   $48 = $numer20;
   $49 = $48;
   $50 = HEAP32[$49>>2]|0;
   $51 = (($48) + 4)|0;
   $52 = $51;
   $53 = HEAP32[$52>>2]|0;
   $54 = $x$addr;
   $data21 = (($54) + 8|0);
   $55 = $data21;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + 4)|0;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = $vararg_buffer8;
   $62 = $61;
   HEAP32[$62>>2] = $50;
   $63 = (($61) + 4)|0;
   $64 = $63;
   HEAP32[$64>>2] = $53;
   $vararg_ptr11 = (($vararg_buffer8) + 8|0);
   $65 = $vararg_ptr11;
   $66 = $65;
   HEAP32[$66>>2] = $57;
   $67 = (($65) + 4)|0;
   $68 = $67;
   HEAP32[$68>>2] = $60;
   (_sprintf($buffer,88,$vararg_buffer8)|0);
  }
 } else {
  $retval = 104;
  $71 = $retval;
  STACKTOP = sp;return ($71|0);
 }
 $call26 = (_strlen(($buffer|0))|0);
 $add = (($call26) + 1)|0;
 $mul = $add;
 $call27 = (_malloc($mul)|0);
 $output = $call27;
 $69 = $output;
 (_strcpy(($69|0),($buffer|0))|0);
 $70 = $output;
 $retval = $70;
 $71 = $retval;
 STACKTOP = sp;return ($71|0);
}
function _clean_string($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $arrayidx = 0, $arrayidx27 = 0, $arrayidx4 = 0, $buffer = 0, $c = 0, $call53 = 0, $call54 = 0, $cmp12 = 0, $cmp16 = 0;
 var $cmp5 = 0, $cmp8 = 0, $conv = 0, $conv11 = 0, $conv15 = 0, $conv28 = 0, $conv7 = 0, $data = 0, $data2 = 0, $data24 = 0, $data47 = 0, $has_space = 0, $i = 0, $length = 0, $length1 = 0, $mul = 0, $return_s = 0, $s$addr = 0, $temp_buffer = 0, $tobool = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 28|0;
 $i = sp + 8|0;
 $length = sp;
 $temp_buffer = sp + 4126|0;
 $s$addr = $s;
 _memset(($buffer|0),0,4098)|0;
 $0 = $i;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = $s$addr;
 $data = (($4) + 8|0);
 $length1 = (($data) + 8|0);
 $5 = $length1;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $length;
 $12 = $11;
 HEAP32[$12>>2] = $7;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $has_space = 0;
 $arrayidx = (($temp_buffer) + 1|0);
 HEAP8[$arrayidx>>0] = 0;
 $15 = $i;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 while(1) {
  $19 = $i;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = $length;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = ($24>>>0)<($30>>>0);
  $32 = ($24|0)==($30|0);
  $33 = ($21>>>0)<($27>>>0);
  $34 = $32 & $33;
  $35 = $31 | $34;
  if (!($35)) {
   break;
  }
  $36 = $i;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($36) + 4)|0;
  $40 = $39;
  $41 = HEAP32[$40>>2]|0;
  $42 = $s$addr;
  $data2 = (($42) + 8|0);
  $43 = HEAP32[$data2>>2]|0;
  $arrayidx4 = (($43) + ($38)|0);
  $44 = HEAP8[$arrayidx4>>0]|0;
  $c = $44;
  $45 = $c;
  $conv = $45 << 24 >> 24;
  $cmp5 = ($conv|0)==(32);
  if ($cmp5) {
   label = 7;
   break;
  }
  $46 = $c;
  $conv7 = $46 << 24 >> 24;
  $cmp8 = ($conv7|0)==(10);
  if ($cmp8) {
   label = 7;
   break;
  }
  $47 = $c;
  $conv11 = $47 << 24 >> 24;
  $cmp12 = ($conv11|0)==(9);
  if ($cmp12) {
   label = 7;
   break;
  }
  $48 = $c;
  $conv15 = $48 << 24 >> 24;
  $cmp16 = ($conv15|0)==(7);
  if ($cmp16) {
   label = 7;
   break;
  }
  $49 = $i;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4)|0;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = (_i64Add(($51|0),($54|0),1,0)|0);
  $56 = tempRet0;
  $57 = $i;
  $58 = $57;
  HEAP32[$58>>2] = $55;
  $59 = (($57) + 4)|0;
  $60 = $59;
  HEAP32[$60>>2] = $56;
 }
 if ((label|0) == 7) {
  $has_space = 1;
 }
 $61 = $has_space;
 $tobool = ($61|0)!=(0);
 if (!($tobool)) {
  $106 = $s$addr;
  $data47 = (($106) + 8|0);
  $107 = HEAP32[$data47>>2]|0;
  (_strcat(($buffer|0),($107|0))|0);
  $call53 = (_strlen(($buffer|0))|0);
  $add = (($call53) + 1)|0;
  $mul = $add;
  $call54 = (_malloc($mul)|0);
  $return_s = $call54;
  $108 = $return_s;
  (_strcpy(($108|0),($buffer|0))|0);
  $109 = $return_s;
  STACKTOP = sp;return ($109|0);
 }
 (_strcat(($buffer|0),(112|0))|0);
 $62 = $i;
 $63 = $62;
 HEAP32[$63>>2] = 0;
 $64 = (($62) + 4)|0;
 $65 = $64;
 HEAP32[$65>>2] = 0;
 while(1) {
  $66 = $i;
  $67 = $66;
  $68 = HEAP32[$67>>2]|0;
  $69 = (($66) + 4)|0;
  $70 = $69;
  $71 = HEAP32[$70>>2]|0;
  $72 = $length;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = (($72) + 4)|0;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($71>>>0)<($77>>>0);
  $79 = ($71|0)==($77|0);
  $80 = ($68>>>0)<($74>>>0);
  $81 = $79 & $80;
  $82 = $78 | $81;
  if (!($82)) {
   break;
  }
  $83 = $i;
  $84 = $83;
  $85 = HEAP32[$84>>2]|0;
  $86 = (($83) + 4)|0;
  $87 = $86;
  $88 = HEAP32[$87>>2]|0;
  $89 = $s$addr;
  $data24 = (($89) + 8|0);
  $90 = HEAP32[$data24>>2]|0;
  $arrayidx27 = (($90) + ($85)|0);
  $91 = HEAP8[$arrayidx27>>0]|0;
  $c = $91;
  $92 = $c;
  $conv28 = $92 << 24 >> 24;
  if ((($conv28|0) == 10)) {
   (_strcat(($buffer|0),(120|0))|0);
  } else if ((($conv28|0) == 9)) {
   (_strcat(($buffer|0),(128|0))|0);
  } else if ((($conv28|0) == 7)) {
   (_strcat(($buffer|0),(136|0))|0);
  } else {
   $93 = $c;
   HEAP8[$temp_buffer>>0] = $93;
   (_strcat(($buffer|0),($temp_buffer|0))|0);
  }
  $94 = $i;
  $95 = $94;
  $96 = HEAP32[$95>>2]|0;
  $97 = (($94) + 4)|0;
  $98 = $97;
  $99 = HEAP32[$98>>2]|0;
  $100 = (_i64Add(($96|0),($99|0),1,0)|0);
  $101 = tempRet0;
  $102 = $i;
  $103 = $102;
  HEAP32[$103>>2] = $100;
  $104 = (($102) + 4)|0;
  $105 = $104;
  HEAP32[$105>>2] = $101;
 }
 (_strcat(($buffer|0),(112|0))|0);
 $call53 = (_strlen(($buffer|0))|0);
 $add = (($call53) + 1)|0;
 $mul = $add;
 $call54 = (_malloc($mul)|0);
 $return_s = $call54;
 $108 = $return_s;
 (_strcpy(($108|0),($buffer|0))|0);
 $109 = $return_s;
 STACKTOP = sp;return ($109|0);
}
function _list_to_string($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $add = 0, $buffer = 0, $call13 = 0, $call17 = 0, $call4 = 0, $call65 = 0, $call69 = 0, $call84 = 0, $call85 = 0, $call9 = 0, $cdr = 0, $cmp = 0, $cmp1 = 0;
 var $cmp24 = 0, $cmp36 = 0, $cmp43 = 0, $cmp53 = 0, $cmp75 = 0, $cond = 0, $conv = 0, $conv28 = 0, $conv32 = 0, $conv33 = 0, $conv34 = 0, $conv35 = 0, $conv40 = 0, $conv41 = 0, $conv52 = 0, $data = 0, $data23 = 0, $data26 = 0, $data29 = 0, $data49 = 0;
 var $data73 = 0, $end_ = 0, $inc = 0, $l$addr = 0, $mul = 0, $p = 0, $return_s = 0, $s = 0, $sub = 0, $sub42 = 0, $v = 0, $vararg_buffer = 0, $variadic_place = 0, $variadic_place51 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buffer = sp + 28|0;
 $l$addr = $l;
 (_strcpy(($buffer|0),(144|0))|0);
 $0 = $l$addr;
 $p = $0;
 while(1) {
  $1 = $p;
  $2 = HEAP32[40>>2]|0;
  $cmp = ($1|0)!=($2|0);
  if (!($cmp)) {
   break;
  }
  $3 = $p;
  $4 = HEAP32[$3>>2]|0;
  $cmp1 = ($4|0)!=(5);
  if ($cmp1) {
   $5 = $p;
   $v = $5;
   (_strcat(($buffer|0),(152|0))|0);
   $6 = $p;
   $7 = HEAP32[40>>2]|0;
   $call4 = (_cons($6,$7)|0);
   $p = $call4;
  } else {
   $8 = $p;
   $data = (($8) + 8|0);
   $9 = HEAP32[$data>>2]|0;
   $v = $9;
  }
  $10 = $v;
  $11 = HEAP32[$10>>2]|0;
  switch ($11|0) {
  case 5:  {
   $18 = $v;
   $call17 = (_list_to_string($18)|0);
   $s = $call17;
   $19 = $s;
   (_strcat(($buffer|0),($19|0))|0);
   $20 = $s;
   _free($20);
   break;
  }
  case 0:  {
   (_strcat(($buffer|0),(104|0))|0);
   break;
  }
  case 4:  {
   $15 = $v;
   $call13 = (_clean_string($15)|0);
   $s = $call13;
   $16 = $s;
   (_strcat(($buffer|0),($16|0))|0);
   $17 = $s;
   _free($17);
   break;
  }
  case 6:  {
   (_strcat(($buffer|0),(160|0))|0);
   $21 = $v;
   $data23 = (($21) + 8|0);
   $variadic_place = (($data23) + 1|0);
   $22 = HEAP8[$variadic_place>>0]|0;
   $conv = $22 << 24 >> 24;
   $cmp24 = ($conv|0)>=(0);
   if ($cmp24) {
    $23 = $v;
    $data26 = (($23) + 8|0);
    $24 = HEAP8[$data26>>0]|0;
    $conv28 = $24&255;
    $sub = (($conv28) - 1)|0;
    $cond = $sub;
   } else {
    $25 = $v;
    $data29 = (($25) + 8|0);
    $26 = HEAP8[$data29>>0]|0;
    $conv32 = $26&255;
    $cond = $conv32;
   }
   $conv33 = $cond&65535;
   $end_ = $conv33;
   $a = 0;
   while(1) {
    $27 = $a;
    $conv34 = $27&65535;
    $28 = $end_;
    $conv35 = $28&65535;
    $cmp36 = ($conv34|0)<($conv35|0);
    if (!($cmp36)) {
     break;
    }
    (_strcat(($buffer|0),(184|0))|0);
    $29 = $a;
    $conv40 = $29&65535;
    $30 = $end_;
    $conv41 = $30&65535;
    $sub42 = (($conv41) - 1)|0;
    $cmp43 = ($conv40|0)!=($sub42|0);
    if ($cmp43) {
     (_strcat(($buffer|0),(192|0))|0);
    }
    $31 = $a;
    $inc = (($31) + 1)<<16>>16;
    $a = $inc;
   }
   $32 = $v;
   $data49 = (($32) + 8|0);
   $variadic_place51 = (($data49) + 1|0);
   $33 = HEAP8[$variadic_place51>>0]|0;
   $conv52 = $33 << 24 >> 24;
   $cmp53 = ($conv52|0)>=(0);
   if ($cmp53) {
    (_strcat(($buffer|0),(200|0))|0);
   }
   (_strcat(($buffer|0),(208|0))|0);
   break;
  }
  case 3: case 2: case 1:  {
   $12 = $v;
   $call9 = (_number_to_string($12)|0);
   $s = $call9;
   $13 = $s;
   (_strcat(($buffer|0),($13|0))|0);
   $14 = $s;
   _free($14);
   break;
  }
  case 7:  {
   (_strcat(($buffer|0),(216|0))|0);
   break;
  }
  case 8:  {
   $34 = $v;
   $call65 = (_vector_to_string($34)|0);
   $s = $call65;
   $35 = $s;
   (_strcat(($buffer|0),($35|0))|0);
   $36 = $s;
   _free($36);
   break;
  }
  case 10: case 9:  {
   $37 = $v;
   $call69 = (_table_to_string($37)|0);
   $s = $call69;
   $38 = $s;
   (_strcat(($buffer|0),($38|0))|0);
   $39 = $s;
   _free($39);
   break;
  }
  default: {
   (_printf((240|0),($vararg_buffer|0))|0);
  }
  }
  $40 = $p;
  $data73 = (($40) + 8|0);
  $cdr = (($data73) + 4|0);
  $41 = HEAP32[$cdr>>2]|0;
  $p = $41;
  $42 = $p;
  $43 = HEAP32[40>>2]|0;
  $cmp75 = ($42|0)!=($43|0);
  if ($cmp75) {
   (_strcat(($buffer|0),(192|0))|0);
  }
 }
 (_strcat(($buffer|0),(256|0))|0);
 $call84 = (_strlen(($buffer|0))|0);
 $add = (($call84) + 1)|0;
 $mul = $add;
 $call85 = (_malloc($mul)|0);
 $return_s = $call85;
 $44 = $return_s;
 (_strcpy(($44|0),($buffer|0))|0);
 $45 = $return_s;
 STACKTOP = sp;return ($45|0);
}
function _vector_to_string($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $add = 0, $arrayidx = 0, $bf$clear = 0, $bf$clear94 = 0, $bf$load = 0, $bf$load93 = 0, $buffer = 0, $call104 = 0, $call105 = 0, $call14 = 0, $call18 = 0, $call22 = 0, $call72 = 0, $call76 = 0, $cmp29 = 0;
 var $cmp42 = 0, $cmp50 = 0, $cmp60 = 0, $cond = 0, $conv = 0, $conv33 = 0, $conv37 = 0, $conv38 = 0, $conv40 = 0, $conv41 = 0, $conv47 = 0, $conv48 = 0, $conv59 = 0, $data = 0, $data2 = 0, $data28 = 0, $data31 = 0, $data34 = 0, $data56 = 0, $data8 = 0;
 var $data90 = 0, $end_ = 0, $i = 0, $inc = 0, $l$addr = 0, $length = 0, $length1 = 0, $mul = 0, $resizable = 0, $resizable92 = 0, $return_s = 0, $s = 0, $sub = 0, $sub49 = 0, $tobool = 0, $tobool95 = 0, $v = 0, $vararg_buffer = 0, $variadic_place = 0, $variadic_place58 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 16|0;
 $buffer = sp + 40|0;
 $length = sp + 8|0;
 $i = sp;
 $l$addr = $l;
 (_strcpy(($buffer|0),(48|0))|0);
 $0 = $l$addr;
 $data = (($0) + 8|0);
 $length1 = (($data) + 16|0);
 $1 = $length1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $length;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = $l$addr;
 $data2 = (($11) + 8|0);
 $resizable = (($data2) + 24|0);
 $bf$load = HEAP8[$resizable>>0]|0;
 $bf$clear = $bf$load & 1;
 $tobool = ($bf$clear<<24>>24)!=(0);
 if ($tobool) {
  (_strcat(($buffer|0),(264|0))|0);
 } else {
  (_strcat(($buffer|0),(272|0))|0);
 }
 $12 = $i;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 while(1) {
  $16 = $i;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = $length;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = ($21>>>0)<($27>>>0);
  $29 = ($21|0)==($27|0);
  $30 = ($18>>>0)<($24>>>0);
  $31 = $29 & $30;
  $32 = $28 | $31;
  if (!($32)) {
   break;
  }
  $33 = $i;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($33) + 4)|0;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = $l$addr;
  $data8 = (($39) + 8|0);
  $40 = HEAP32[$data8>>2]|0;
  $arrayidx = (($40) + ($35<<2)|0);
  $41 = HEAP32[$arrayidx>>2]|0;
  $v = $41;
  $42 = $v;
  $43 = HEAP32[$42>>2]|0;
  switch ($43|0) {
  case 3: case 2: case 1:  {
   $44 = $v;
   $call14 = (_number_to_string($44)|0);
   $s = $call14;
   $45 = $s;
   (_strcat(($buffer|0),($45|0))|0);
   $46 = $s;
   _free($46);
   break;
  }
  case 5:  {
   $50 = $v;
   $call22 = (_list_to_string($50)|0);
   $s = $call22;
   $51 = $s;
   (_strcat(($buffer|0),($51|0))|0);
   $52 = $s;
   _free($52);
   break;
  }
  case 0:  {
   (_strcat(($buffer|0),(104|0))|0);
   break;
  }
  case 4:  {
   $47 = $v;
   $call18 = (_clean_string($47)|0);
   $s = $call18;
   $48 = $s;
   (_strcat(($buffer|0),($48|0))|0);
   $49 = $s;
   _free($49);
   break;
  }
  case 6:  {
   (_strcat(($buffer|0),(160|0))|0);
   $53 = $v;
   $data28 = (($53) + 8|0);
   $variadic_place = (($data28) + 1|0);
   $54 = HEAP8[$variadic_place>>0]|0;
   $conv = $54 << 24 >> 24;
   $cmp29 = ($conv|0)>=(0);
   if ($cmp29) {
    $55 = $v;
    $data31 = (($55) + 8|0);
    $56 = HEAP8[$data31>>0]|0;
    $conv33 = $56&255;
    $sub = (($conv33) - 1)|0;
    $cond = $sub;
   } else {
    $57 = $v;
    $data34 = (($57) + 8|0);
    $58 = HEAP8[$data34>>0]|0;
    $conv37 = $58&255;
    $cond = $conv37;
   }
   $conv38 = $cond&65535;
   $end_ = $conv38;
   $a = 0;
   while(1) {
    $59 = $a;
    $conv40 = $59&65535;
    $60 = $end_;
    $conv41 = $60&65535;
    $cmp42 = ($conv40|0)<($conv41|0);
    if (!($cmp42)) {
     break;
    }
    (_strcat(($buffer|0),(184|0))|0);
    $61 = $a;
    $conv47 = $61&65535;
    $62 = $end_;
    $conv48 = $62&65535;
    $sub49 = (($conv48) - 1)|0;
    $cmp50 = ($conv47|0)!=($sub49|0);
    if ($cmp50) {
     (_strcat(($buffer|0),(192|0))|0);
    }
    $63 = $a;
    $inc = (($63) + 1)<<16>>16;
    $a = $inc;
   }
   $64 = $v;
   $data56 = (($64) + 8|0);
   $variadic_place58 = (($data56) + 1|0);
   $65 = HEAP8[$variadic_place58>>0]|0;
   $conv59 = $65 << 24 >> 24;
   $cmp60 = ($conv59|0)>=(0);
   if ($cmp60) {
    (_strcat(($buffer|0),(200|0))|0);
   }
   (_strcat(($buffer|0),(208|0))|0);
   break;
  }
  case 7:  {
   (_strcat(($buffer|0),(216|0))|0);
   break;
  }
  case 8:  {
   $66 = $v;
   $call72 = (_vector_to_string($66)|0);
   $s = $call72;
   $67 = $s;
   (_strcat(($buffer|0),($67|0))|0);
   $68 = $s;
   _free($68);
   break;
  }
  case 10: case 9:  {
   $69 = $v;
   $call76 = (_table_to_string($69)|0);
   $s = $call76;
   $70 = $s;
   (_strcat(($buffer|0),($70|0))|0);
   $71 = $s;
   _free($71);
   break;
  }
  default: {
   (_printf((240|0),($vararg_buffer|0))|0);
  }
  }
  $72 = $i;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = (($72) + 4)|0;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $78 = $length;
  $79 = $78;
  $80 = HEAP32[$79>>2]|0;
  $81 = (($78) + 4)|0;
  $82 = $81;
  $83 = HEAP32[$82>>2]|0;
  $84 = (_i64Subtract(($80|0),($83|0),1,0)|0);
  $85 = tempRet0;
  $86 = ($74|0)!=($84|0);
  $87 = ($77|0)!=($85|0);
  $88 = $86 | $87;
  if ($88) {
   (_strcat(($buffer|0),(192|0))|0);
  }
  $89 = $i;
  $90 = $89;
  $91 = HEAP32[$90>>2]|0;
  $92 = (($89) + 4)|0;
  $93 = $92;
  $94 = HEAP32[$93>>2]|0;
  $95 = (_i64Add(($91|0),($94|0),1,0)|0);
  $96 = tempRet0;
  $97 = $i;
  $98 = $97;
  HEAP32[$98>>2] = $95;
  $99 = (($97) + 4)|0;
  $100 = $99;
  HEAP32[$100>>2] = $96;
 }
 $101 = $l$addr;
 $data90 = (($101) + 8|0);
 $resizable92 = (($data90) + 24|0);
 $bf$load93 = HEAP8[$resizable92>>0]|0;
 $bf$clear94 = $bf$load93 & 1;
 $tobool95 = ($bf$clear94<<24>>24)!=(0);
 if ($tobool95) {
  (_strcat(($buffer|0),(280|0))|0);
  $call104 = (_strlen(($buffer|0))|0);
  $add = (($call104) + 1)|0;
  $mul = $add;
  $call105 = (_malloc($mul)|0);
  $return_s = $call105;
  $102 = $return_s;
  (_strcpy(($102|0),($buffer|0))|0);
  $103 = $return_s;
  STACKTOP = sp;return ($103|0);
 } else {
  (_strcat(($buffer|0),(256|0))|0);
  $call104 = (_strlen(($buffer|0))|0);
  $add = (($call104) + 1)|0;
  $mul = $add;
  $call105 = (_malloc($mul)|0);
  $return_s = $call105;
  $102 = $return_s;
  (_strcpy(($102|0),($buffer|0))|0);
  $103 = $return_s;
  STACKTOP = sp;return ($103|0);
 }
 return 0|0;
}
function _table_to_string($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $add = 0, $buffer = 0, $call1 = 0, $call11 = 0, $call18 = 0, $call22 = 0, $call26 = 0, $call4 = 0, $call72 = 0, $call76 = 0, $call91 = 0, $call92 = 0, $cdr = 0, $cmp = 0, $cmp33 = 0;
 var $cmp45 = 0, $cmp52 = 0, $cmp60 = 0, $cmp82 = 0, $cond = 0, $conv = 0, $conv37 = 0, $conv41 = 0, $conv42 = 0, $conv43 = 0, $conv44 = 0, $conv49 = 0, $conv50 = 0, $conv59 = 0, $data = 0, $data32 = 0, $data35 = 0, $data38 = 0, $data56 = 0, $data8 = 0;
 var $data80 = 0, $end_ = 0, $inc = 0, $keys = 0, $l$addr = 0, $mul = 0, $return_s = 0, $s = 0, $sub = 0, $sub51 = 0, $v = 0, $vararg_buffer = 0, $variadic_place = 0, $variadic_place58 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buffer = sp + 28|0;
 $l$addr = $l;
 (_strcpy(($buffer|0),(48|0))|0);
 $0 = $l$addr;
 $call1 = (_table_getKeys($0)|0);
 $keys = $call1;
 (_strcat(($buffer|0),(288|0))|0);
 while(1) {
  $1 = $keys;
  $2 = HEAP32[40>>2]|0;
  $cmp = ($1|0)!=($2|0);
  if (!($cmp)) {
   break;
  }
  $3 = $l$addr;
  $4 = $keys;
  $data = (($4) + 8|0);
  $5 = HEAP32[$data>>2]|0;
  $call4 = (_Table_getval($3,$5)|0);
  $v = $call4;
  (_strcat(($buffer|0),(296|0))|0);
  $6 = $keys;
  $data8 = (($6) + 8|0);
  $7 = HEAP32[$data8>>2]|0;
  $call11 = (_clean_string($7)|0);
  (_strcat(($buffer|0),($call11|0))|0);
  (_strcat(($buffer|0),(192|0))|0);
  $8 = $v;
  $9 = HEAP32[$8>>2]|0;
  switch ($9|0) {
  case 4:  {
   $13 = $v;
   $call22 = (_clean_string($13)|0);
   $s = $call22;
   $14 = $s;
   (_strcat(($buffer|0),($14|0))|0);
   $15 = $s;
   _free($15);
   break;
  }
  case 5:  {
   $16 = $v;
   $call26 = (_list_to_string($16)|0);
   $s = $call26;
   $17 = $s;
   (_strcat(($buffer|0),($17|0))|0);
   $18 = $s;
   _free($18);
   break;
  }
  case 6:  {
   (_strcat(($buffer|0),(160|0))|0);
   $19 = $v;
   $data32 = (($19) + 8|0);
   $variadic_place = (($data32) + 1|0);
   $20 = HEAP8[$variadic_place>>0]|0;
   $conv = $20 << 24 >> 24;
   $cmp33 = ($conv|0)>=(0);
   if ($cmp33) {
    $21 = $v;
    $data35 = (($21) + 8|0);
    $22 = HEAP8[$data35>>0]|0;
    $conv37 = $22&255;
    $sub = (($conv37) - 1)|0;
    $cond = $sub;
   } else {
    $23 = $v;
    $data38 = (($23) + 8|0);
    $24 = HEAP8[$data38>>0]|0;
    $conv41 = $24&255;
    $cond = $conv41;
   }
   $conv42 = $cond&65535;
   $end_ = $conv42;
   $a = 0;
   while(1) {
    $25 = $a;
    $conv43 = $25&65535;
    $26 = $end_;
    $conv44 = $26&65535;
    $cmp45 = ($conv43|0)<($conv44|0);
    if (!($cmp45)) {
     break;
    }
    (_strcat(($buffer|0),(184|0))|0);
    $27 = $a;
    $conv49 = $27&65535;
    $28 = $end_;
    $conv50 = $28&65535;
    $sub51 = (($conv50) - 1)|0;
    $cmp52 = ($conv49|0)!=($sub51|0);
    if ($cmp52) {
     (_strcat(($buffer|0),(192|0))|0);
    }
    $29 = $a;
    $inc = (($29) + 1)<<16>>16;
    $a = $inc;
   }
   $30 = $v;
   $data56 = (($30) + 8|0);
   $variadic_place58 = (($data56) + 1|0);
   $31 = HEAP8[$variadic_place58>>0]|0;
   $conv59 = $31 << 24 >> 24;
   $cmp60 = ($conv59|0)>=(0);
   if ($cmp60) {
    (_strcat(($buffer|0),(200|0))|0);
   }
   (_strcat(($buffer|0),(208|0))|0);
   break;
  }
  case 0:  {
   (_strcat(($buffer|0),(104|0))|0);
   break;
  }
  case 3: case 2: case 1:  {
   $10 = $v;
   $call18 = (_number_to_string($10)|0);
   $s = $call18;
   $11 = $s;
   (_strcat(($buffer|0),($11|0))|0);
   $12 = $s;
   _free($12);
   break;
  }
  case 7:  {
   (_strcat(($buffer|0),(216|0))|0);
   break;
  }
  case 8:  {
   $32 = $v;
   $call72 = (_vector_to_string($32)|0);
   $s = $call72;
   $33 = $s;
   (_strcat(($buffer|0),($33|0))|0);
   $34 = $s;
   _free($34);
   break;
  }
  case 10: case 9:  {
   $35 = $v;
   $call76 = (_table_to_string($35)|0);
   $s = $call76;
   $36 = $s;
   (_strcat(($buffer|0),($36|0))|0);
   $37 = $s;
   _free($37);
   break;
  }
  default: {
   (_printf((240|0),($vararg_buffer|0))|0);
  }
  }
  $38 = $keys;
  $data80 = (($38) + 8|0);
  $cdr = (($data80) + 4|0);
  $39 = HEAP32[$cdr>>2]|0;
  $keys = $39;
  $40 = $keys;
  $41 = HEAP32[40>>2]|0;
  $cmp82 = ($40|0)!=($41|0);
  if ($cmp82) {
   (_strcat(($buffer|0),(304|0))|0);
  }
 }
 (_strcat(($buffer|0),(312|0))|0);
 $call91 = (_strlen(($buffer|0))|0);
 $add = (($call91) + 1)|0;
 $mul = $add;
 $call92 = (_malloc($mul)|0);
 $return_s = $call92;
 $42 = $return_s;
 (_strcpy(($42|0),($buffer|0))|0);
 $43 = $return_s;
 STACKTOP = sp;return ($43|0);
}
function _to_string($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $add = 0, $buffer = 0, $call12 = 0, $call4 = 0, $call57 = 0, $call61 = 0, $call71 = 0, $call72 = 0;
 var $cmp = 0, $cmp30 = 0, $cmp37 = 0, $cmp45 = 0, $cond = 0, $conv = 0, $conv22 = 0, $conv26 = 0, $conv27 = 0, $conv28 = 0, $conv29 = 0, $conv34 = 0, $conv35 = 0, $conv44 = 0, $data = 0, $data18 = 0, $data20 = 0, $data23 = 0, $data41 = 0, $end_ = 0;
 var $inc = 0, $mul = 0, $return_s = 0, $s = 0, $sub = 0, $sub36 = 0, $v$addr = 0, $vararg_buffer = 0, $variadic_place = 0, $variadic_place43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buffer = sp + 20|0;
 $v$addr = $v;
 (_strcpy(($buffer|0),(48|0))|0);
 $0 = $v$addr;
 $1 = HEAP32[$0>>2]|0;
 do {
  switch ($1|0) {
  case 10: case 9:  {
   $26 = $v$addr;
   $call61 = (_table_to_string($26)|0);
   $s = $call61;
   $27 = $s;
   (_strcat(($buffer|0),($27|0))|0);
   $28 = $s;
   _free($28);
   break;
  }
  case 4:  {
   $5 = $v$addr;
   $data = (($5) + 8|0);
   $6 = HEAP32[$data>>2]|0;
   (_strcat(($buffer|0),($6|0))|0);
   break;
  }
  case 0:  {
   (_strcat(($buffer|0),(104|0))|0);
   break;
  }
  case 8:  {
   $23 = $v$addr;
   $call57 = (_vector_to_string($23)|0);
   $s = $call57;
   $24 = $s;
   (_strcat(($buffer|0),($24|0))|0);
   $25 = $s;
   _free($25);
   break;
  }
  case 3: case 2: case 1:  {
   $2 = $v$addr;
   $call4 = (_number_to_string($2)|0);
   $s = $call4;
   $3 = $s;
   (_strcat(($buffer|0),($3|0))|0);
   $4 = $s;
   _free($4);
   break;
  }
  case 5:  {
   $7 = $v$addr;
   $call12 = (_list_to_string($7)|0);
   $s = $call12;
   $8 = $s;
   (_strcat(($buffer|0),($8|0))|0);
   $9 = $s;
   _free($9);
   break;
  }
  case 6:  {
   (_strcat(($buffer|0),(160|0))|0);
   $10 = $v$addr;
   $data18 = (($10) + 8|0);
   $variadic_place = (($data18) + 1|0);
   $11 = HEAP8[$variadic_place>>0]|0;
   $conv = $11 << 24 >> 24;
   $cmp = ($conv|0)>=(0);
   if ($cmp) {
    $12 = $v$addr;
    $data20 = (($12) + 8|0);
    $13 = HEAP8[$data20>>0]|0;
    $conv22 = $13&255;
    $sub = (($conv22) - 1)|0;
    $cond = $sub;
   } else {
    $14 = $v$addr;
    $data23 = (($14) + 8|0);
    $15 = HEAP8[$data23>>0]|0;
    $conv26 = $15&255;
    $cond = $conv26;
   }
   $conv27 = $cond&65535;
   $end_ = $conv27;
   $a = 0;
   while(1) {
    $16 = $a;
    $conv28 = $16&65535;
    $17 = $end_;
    $conv29 = $17&65535;
    $cmp30 = ($conv28|0)<($conv29|0);
    if (!($cmp30)) {
     break;
    }
    (_strcat(($buffer|0),(184|0))|0);
    $18 = $a;
    $conv34 = $18&65535;
    $19 = $end_;
    $conv35 = $19&65535;
    $sub36 = (($conv35) - 1)|0;
    $cmp37 = ($conv34|0)!=($sub36|0);
    if ($cmp37) {
     (_strcat(($buffer|0),(192|0))|0);
    }
    $20 = $a;
    $inc = (($20) + 1)<<16>>16;
    $a = $inc;
   }
   $21 = $v$addr;
   $data41 = (($21) + 8|0);
   $variadic_place43 = (($data41) + 1|0);
   $22 = HEAP8[$variadic_place43>>0]|0;
   $conv44 = $22 << 24 >> 24;
   $cmp45 = ($conv44|0)>=(0);
   if ($cmp45) {
    (_strcat(($buffer|0),(200|0))|0);
   }
   (_strcat(($buffer|0),(208|0))|0);
   break;
  }
  case 7:  {
   (_strcat(($buffer|0),(216|0))|0);
   break;
  }
  case 11:  {
   (_strcat(($buffer|0),(320|0))|0);
   (_strcat(($buffer|0),(328|0))|0);
   break;
  }
  default: {
   (_printf((240|0),($vararg_buffer|0))|0);
  }
  }
 } while(0);
 $call71 = (_strlen(($buffer|0))|0);
 $add = (($call71) + 1)|0;
 $mul = $add;
 $call72 = (_malloc($mul)|0);
 $return_s = $call72;
 $29 = $return_s;
 (_strcpy(($29|0),($buffer|0))|0);
 $30 = $return_s;
 STACKTOP = sp;return ($30|0);
}
function _format_string($input_str) {
 $input_str = $input_str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add5 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx12 = 0, $arrayidx14 = 0, $arrayidx16 = 0, $arrayidx18 = 0, $arrayidx19 = 0, $arrayidx22 = 0;
 var $arrayidx6 = 0, $arrayidx8 = 0, $call = 0, $call1 = 0, $call2 = 0, $cmp = 0, $cmp3 = 0, $conv = 0, $conv7 = 0, $i = 0, $inc = 0, $inc20 = 0, $inc21 = 0, $input_str$addr = 0, $j = 0, $mul = 0, $s = 0, $sub = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $input_str$addr = $input_str;
 $0 = $input_str$addr;
 $call = (_strlen(($0|0))|0);
 $add = (($call) + 1)|0;
 $mul = $add;
 $call1 = (_malloc($mul)|0);
 $s = $call1;
 $j = 0;
 $i = 1;
 while(1) {
  $1 = $i;
  $2 = $input_str$addr;
  $call2 = (_strlen(($2|0))|0);
  $sub = (($call2) - 1)|0;
  $cmp = ($1>>>0)<($sub>>>0);
  if (!($cmp)) {
   break;
  }
  $3 = $i;
  $4 = $input_str$addr;
  $arrayidx = (($4) + ($3)|0);
  $5 = HEAP8[$arrayidx>>0]|0;
  $conv = $5 << 24 >> 24;
  $cmp3 = ($conv|0)==(92);
  if ($cmp3) {
   $6 = $i;
   $add5 = (($6) + 1)|0;
   $7 = $input_str$addr;
   $arrayidx6 = (($7) + ($add5)|0);
   $8 = HEAP8[$arrayidx6>>0]|0;
   $conv7 = $8 << 24 >> 24;
   switch ($conv7|0) {
   case 110:  {
    $13 = $j;
    $14 = $s;
    $arrayidx12 = (($14) + ($13)|0);
    HEAP8[$arrayidx12>>0] = 10;
    break;
   }
   case 92:  {
    $15 = $j;
    $16 = $s;
    $arrayidx14 = (($16) + ($15)|0);
    HEAP8[$arrayidx14>>0] = 92;
    break;
   }
   case 97:  {
    $9 = $j;
    $10 = $s;
    $arrayidx8 = (($10) + ($9)|0);
    HEAP8[$arrayidx8>>0] = 7;
    break;
   }
   case 34:  {
    $17 = $j;
    $18 = $s;
    $arrayidx16 = (($18) + ($17)|0);
    HEAP8[$arrayidx16>>0] = 34;
    break;
   }
   case 116:  {
    $11 = $j;
    $12 = $s;
    $arrayidx10 = (($12) + ($11)|0);
    HEAP8[$arrayidx10>>0] = 9;
    break;
   }
   default: {
    (_printf((336|0),($vararg_buffer|0))|0);
   }
   }
   $19 = $i;
   $inc = (($19) + 1)|0;
   $i = $inc;
  } else {
   $20 = $i;
   $21 = $input_str$addr;
   $arrayidx18 = (($21) + ($20)|0);
   $22 = HEAP8[$arrayidx18>>0]|0;
   $23 = $j;
   $24 = $s;
   $arrayidx19 = (($24) + ($23)|0);
   HEAP8[$arrayidx19>>0] = $22;
  }
  $25 = $j;
  $inc20 = (($25) + 1)|0;
  $j = $inc20;
  $26 = $i;
  $inc21 = (($26) + 1)|0;
  $i = $inc21;
 }
 $27 = $j;
 $28 = $s;
 $arrayidx22 = (($28) + ($27)|0);
 HEAP8[$arrayidx22>>0] = 0;
 $29 = $s;
 STACKTOP = sp;return ($29|0);
}
function _builtin_cons($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0, $call = 0, $car = 0, $cdr = 0, $cdr5 = 0;
 var $data = 0, $data3 = 0, $inc = 0, $inc8 = 0, $o = 0, $param_num$addr = 0, $params$addr = 0, $use_count = 0, $use_count6 = 0, $use_count7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $call = (_allocateObject()|0);
 $o = $call;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $car = $1;
 $2 = $params$addr;
 $arrayidx1 = (($2) + 4|0);
 $3 = HEAP32[$arrayidx1>>2]|0;
 $cdr = $3;
 $4 = $o;
 $use_count = (($4) + 4|0);
 HEAP32[$use_count>>2] = 0;
 $5 = $o;
 HEAP32[$5>>2] = 5;
 $6 = $car;
 $7 = $o;
 $data = (($7) + 8|0);
 HEAP32[$data>>2] = $6;
 $8 = $cdr;
 $9 = $o;
 $data3 = (($9) + 8|0);
 $cdr5 = (($data3) + 4|0);
 HEAP32[$cdr5>>2] = $8;
 $10 = $car;
 $use_count6 = (($10) + 4|0);
 $11 = HEAP32[$use_count6>>2]|0;
 $inc = (($11) + 1)|0;
 HEAP32[$use_count6>>2] = $inc;
 $12 = $cdr;
 $use_count7 = (($12) + 4|0);
 $13 = HEAP32[$use_count7>>2]|0;
 $inc8 = (($13) + 1)|0;
 HEAP32[$use_count7>>2] = $inc8;
 $14 = $o;
 STACKTOP = sp;return ($14|0);
}
function _builtin_car($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $data = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = HEAP32[$data>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function _builtin_cdr($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $cdr = 0, $data = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $cdr = (($data) + 4|0);
 $2 = HEAP32[$cdr>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function _add_2($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add12 = 0.0, $add33 = 0.0, $add42 = 0.0, $add55 = 0.0, $add84 = 0.0, $call13 = 0, $call34 = 0, $call43 = 0, $call56 = 0, $call85 = 0, $data = 0, $data10 = 0, $data15 = 0, $data18 = 0, $data19 = 0;
 var $data26 = 0, $data29 = 0, $data3 = 0, $data36 = 0, $data39 = 0, $data45 = 0, $data48 = 0, $data51 = 0, $data62 = 0, $data65 = 0, $data68 = 0, $data7 = 0, $data73 = 0, $data76 = 0, $data81 = 0, $data87 = 0, $data90 = 0, $data93 = 0, $data96 = 0, $numer = 0;
 var $numer50 = 0, $numer64 = 0, $numer75 = 0, $numer89 = 0, $numer95 = 0, $p1$addr = 0, $p2$addr = 0, $retval = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $p1$addr = $p1;
 $p2$addr = $p2;
 $0 = $p1$addr;
 $1 = HEAP32[$0>>2]|0;
 if ((($1|0) == 1)) {
  $2 = $p2$addr;
  $3 = HEAP32[$2>>2]|0;
  if ((($3|0) == 3)) {
   $31 = $p1$addr;
   $data15 = (($31) + 8|0);
   $32 = $data15;
   $33 = $32;
   $34 = HEAP32[$33>>2]|0;
   $35 = (($32) + 4)|0;
   $36 = $35;
   $37 = HEAP32[$36>>2]|0;
   $38 = $p2$addr;
   $data18 = (($38) + 8|0);
   $numer = (($data18) + 8|0);
   $39 = $numer;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) + 4)|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = $p2$addr;
   $data19 = (($45) + 8|0);
   $46 = $data19;
   $47 = $46;
   $48 = HEAP32[$47>>2]|0;
   $49 = (($46) + 4)|0;
   $50 = $49;
   $51 = HEAP32[$50>>2]|0;
   $52 = (_add_rat($34,$37,1,0,$41,$44,$48,$51)|0);
   $retval = $52;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  } else if ((($3|0) == 2)) {
   $21 = $p1$addr;
   $data7 = (($21) + 8|0);
   $22 = $data7;
   $23 = $22;
   $24 = HEAP32[$23>>2]|0;
   $25 = (($22) + 4)|0;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   $28 = (+($24>>>0)) + (4294967296.0*(+($27|0)));
   $29 = $p2$addr;
   $data10 = (($29) + 8|0);
   $30 = +HEAPF64[$data10>>3];
   $add12 = $28 + $30;
   $call13 = (_Object_initDouble($add12)|0);
   $retval = $call13;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  } else if ((($3|0) == 1)) {
   $4 = $p1$addr;
   $data = (($4) + 8|0);
   $5 = $data;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $p2$addr;
   $data3 = (($11) + 8|0);
   $12 = $data3;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($12) + 4)|0;
   $16 = $15;
   $17 = HEAP32[$16>>2]|0;
   $18 = (_i64Add(($7|0),($10|0),($14|0),($17|0))|0);
   $19 = tempRet0;
   $20 = (_Object_initInteger($18,$19)|0);
   $retval = $20;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  } else {
   (_printf((368|0),($vararg_buffer|0))|0);
   $53 = HEAP32[40>>2]|0;
   $retval = $53;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  }
 } else if ((($1|0) == 2)) {
  $54 = $p2$addr;
  $55 = HEAP32[$54>>2]|0;
  if ((($55|0) == 1)) {
   $56 = $p1$addr;
   $data26 = (($56) + 8|0);
   $57 = +HEAPF64[$data26>>3];
   $58 = $p2$addr;
   $data29 = (($58) + 8|0);
   $59 = $data29;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $62 = (($59) + 4)|0;
   $63 = $62;
   $64 = HEAP32[$63>>2]|0;
   $65 = (+($61>>>0)) + (4294967296.0*(+($64|0)));
   $add33 = $57 + $65;
   $call34 = (_Object_initDouble($add33)|0);
   $retval = $call34;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  } else if ((($55|0) == 2)) {
   $66 = $p1$addr;
   $data36 = (($66) + 8|0);
   $67 = +HEAPF64[$data36>>3];
   $68 = $p2$addr;
   $data39 = (($68) + 8|0);
   $69 = +HEAPF64[$data39>>3];
   $add42 = $67 + $69;
   $call43 = (_Object_initDouble($add42)|0);
   $retval = $call43;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  } else if ((($55|0) == 3)) {
   $70 = $p1$addr;
   $data45 = (($70) + 8|0);
   $71 = +HEAPF64[$data45>>3];
   $72 = $p2$addr;
   $data48 = (($72) + 8|0);
   $numer50 = (($data48) + 8|0);
   $73 = $numer50;
   $74 = $73;
   $75 = HEAP32[$74>>2]|0;
   $76 = (($73) + 4)|0;
   $77 = $76;
   $78 = HEAP32[$77>>2]|0;
   $79 = $p2$addr;
   $data51 = (($79) + 8|0);
   $80 = $data51;
   $81 = $80;
   $82 = HEAP32[$81>>2]|0;
   $83 = (($80) + 4)|0;
   $84 = $83;
   $85 = HEAP32[$84>>2]|0;
   $86 = (___divdi3(($75|0),($78|0),($82|0),($85|0))|0);
   $87 = tempRet0;
   $88 = (+($86>>>0)) + (4294967296.0*(+($87|0)));
   $add55 = $71 + $88;
   $call56 = (_Object_initDouble($add55)|0);
   $retval = $call56;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  } else {
   (_printf((368|0),($vararg_buffer1|0))|0);
   $89 = HEAP32[40>>2]|0;
   $retval = $89;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  }
 } else if ((($1|0) == 3)) {
  $90 = $p2$addr;
  $91 = HEAP32[$90>>2]|0;
  if ((($91|0) == 1)) {
   $92 = $p1$addr;
   $data62 = (($92) + 8|0);
   $numer64 = (($data62) + 8|0);
   $93 = $numer64;
   $94 = $93;
   $95 = HEAP32[$94>>2]|0;
   $96 = (($93) + 4)|0;
   $97 = $96;
   $98 = HEAP32[$97>>2]|0;
   $99 = $p1$addr;
   $data65 = (($99) + 8|0);
   $100 = $data65;
   $101 = $100;
   $102 = HEAP32[$101>>2]|0;
   $103 = (($100) + 4)|0;
   $104 = $103;
   $105 = HEAP32[$104>>2]|0;
   $106 = $p2$addr;
   $data68 = (($106) + 8|0);
   $107 = $data68;
   $108 = $107;
   $109 = HEAP32[$108>>2]|0;
   $110 = (($107) + 4)|0;
   $111 = $110;
   $112 = HEAP32[$111>>2]|0;
   $113 = (_add_rat($95,$98,$102,$105,$109,$112,1,0)|0);
   $retval = $113;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  } else if ((($91|0) == 2)) {
   $114 = $p1$addr;
   $data73 = (($114) + 8|0);
   $numer75 = (($data73) + 8|0);
   $115 = $numer75;
   $116 = $115;
   $117 = HEAP32[$116>>2]|0;
   $118 = (($115) + 4)|0;
   $119 = $118;
   $120 = HEAP32[$119>>2]|0;
   $121 = $p1$addr;
   $data76 = (($121) + 8|0);
   $122 = $data76;
   $123 = $122;
   $124 = HEAP32[$123>>2]|0;
   $125 = (($122) + 4)|0;
   $126 = $125;
   $127 = HEAP32[$126>>2]|0;
   $128 = (___divdi3(($117|0),($120|0),($124|0),($127|0))|0);
   $129 = tempRet0;
   $130 = (+($128>>>0)) + (4294967296.0*(+($129|0)));
   $131 = $p2$addr;
   $data81 = (($131) + 8|0);
   $132 = +HEAPF64[$data81>>3];
   $add84 = $130 + $132;
   $call85 = (_Object_initDouble($add84)|0);
   $retval = $call85;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  } else if ((($91|0) == 3)) {
   $133 = $p1$addr;
   $data87 = (($133) + 8|0);
   $numer89 = (($data87) + 8|0);
   $134 = $numer89;
   $135 = $134;
   $136 = HEAP32[$135>>2]|0;
   $137 = (($134) + 4)|0;
   $138 = $137;
   $139 = HEAP32[$138>>2]|0;
   $140 = $p1$addr;
   $data90 = (($140) + 8|0);
   $141 = $data90;
   $142 = $141;
   $143 = HEAP32[$142>>2]|0;
   $144 = (($141) + 4)|0;
   $145 = $144;
   $146 = HEAP32[$145>>2]|0;
   $147 = $p2$addr;
   $data93 = (($147) + 8|0);
   $numer95 = (($data93) + 8|0);
   $148 = $numer95;
   $149 = $148;
   $150 = HEAP32[$149>>2]|0;
   $151 = (($148) + 4)|0;
   $152 = $151;
   $153 = HEAP32[$152>>2]|0;
   $154 = $p2$addr;
   $data96 = (($154) + 8|0);
   $155 = $data96;
   $156 = $155;
   $157 = HEAP32[$156>>2]|0;
   $158 = (($155) + 4)|0;
   $159 = $158;
   $160 = HEAP32[$159>>2]|0;
   $161 = (_add_rat($136,$139,$143,$146,$150,$153,$157,$160)|0);
   $retval = $161;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  } else {
   (_printf((368|0),($vararg_buffer3|0))|0);
   $162 = HEAP32[40>>2]|0;
   $retval = $162;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  }
 } else {
  (_printf((368|0),($vararg_buffer5|0))|0);
  $163 = HEAP32[40>>2]|0;
  $retval = $163;
  $164 = $retval;
  STACKTOP = sp;return ($164|0);
 }
 return 0|0;
}
function _builtin_add($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0, $call = 0, $cmp = 0, $i = 0, $inc = 0, $p1 = 0, $p2 = 0;
 var $param_num$addr = 0, $params$addr = 0, $return_val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $return_val = $1;
 $i = 1;
 while(1) {
  $2 = $i;
  $3 = $param_num$addr;
  $cmp = ($2>>>0)<($3>>>0);
  if (!($cmp)) {
   break;
  }
  $4 = $i;
  $5 = $params$addr;
  $arrayidx1 = (($5) + ($4<<2)|0);
  $6 = HEAP32[$arrayidx1>>2]|0;
  $p2 = $6;
  $7 = $return_val;
  $p1 = $7;
  $8 = $return_val;
  $9 = $p2;
  $call = (_add_2($8,$9)|0);
  $return_val = $call;
  $10 = $p1;
  _Object_free($10);
  $11 = $i;
  $inc = (($11) + 1)|0;
  $i = $inc;
 }
 $12 = $return_val;
 STACKTOP = sp;return ($12|0);
}
function _sub_2($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $call13 = 0, $call34 = 0, $call43 = 0, $call56 = 0, $call85 = 0, $data = 0, $data10 = 0, $data15 = 0, $data18 = 0, $data19 = 0, $data26 = 0, $data29 = 0, $data3 = 0, $data36 = 0, $data39 = 0;
 var $data45 = 0, $data48 = 0, $data51 = 0, $data62 = 0, $data65 = 0, $data68 = 0, $data7 = 0, $data73 = 0, $data76 = 0, $data81 = 0, $data87 = 0, $data90 = 0, $data93 = 0, $data96 = 0, $numer = 0, $numer50 = 0, $numer64 = 0, $numer75 = 0, $numer89 = 0, $numer95 = 0;
 var $p1$addr = 0, $p2$addr = 0, $retval = 0, $sub12 = 0.0, $sub33 = 0.0, $sub42 = 0.0, $sub55 = 0.0, $sub84 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $p1$addr = $p1;
 $p2$addr = $p2;
 $0 = $p1$addr;
 $1 = HEAP32[$0>>2]|0;
 if ((($1|0) == 2)) {
  $54 = $p2$addr;
  $55 = HEAP32[$54>>2]|0;
  if ((($55|0) == 1)) {
   $56 = $p1$addr;
   $data26 = (($56) + 8|0);
   $57 = +HEAPF64[$data26>>3];
   $58 = $p2$addr;
   $data29 = (($58) + 8|0);
   $59 = $data29;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $62 = (($59) + 4)|0;
   $63 = $62;
   $64 = HEAP32[$63>>2]|0;
   $65 = (+($61>>>0)) + (4294967296.0*(+($64|0)));
   $sub33 = $57 - $65;
   $call34 = (_Object_initDouble($sub33)|0);
   $retval = $call34;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  } else if ((($55|0) == 2)) {
   $66 = $p1$addr;
   $data36 = (($66) + 8|0);
   $67 = +HEAPF64[$data36>>3];
   $68 = $p2$addr;
   $data39 = (($68) + 8|0);
   $69 = +HEAPF64[$data39>>3];
   $sub42 = $67 - $69;
   $call43 = (_Object_initDouble($sub42)|0);
   $retval = $call43;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  } else if ((($55|0) == 3)) {
   $70 = $p1$addr;
   $data45 = (($70) + 8|0);
   $71 = +HEAPF64[$data45>>3];
   $72 = $p2$addr;
   $data48 = (($72) + 8|0);
   $numer50 = (($data48) + 8|0);
   $73 = $numer50;
   $74 = $73;
   $75 = HEAP32[$74>>2]|0;
   $76 = (($73) + 4)|0;
   $77 = $76;
   $78 = HEAP32[$77>>2]|0;
   $79 = $p2$addr;
   $data51 = (($79) + 8|0);
   $80 = $data51;
   $81 = $80;
   $82 = HEAP32[$81>>2]|0;
   $83 = (($80) + 4)|0;
   $84 = $83;
   $85 = HEAP32[$84>>2]|0;
   $86 = (___divdi3(($75|0),($78|0),($82|0),($85|0))|0);
   $87 = tempRet0;
   $88 = (+($86>>>0)) + (4294967296.0*(+($87|0)));
   $sub55 = $71 - $88;
   $call56 = (_Object_initDouble($sub55)|0);
   $retval = $call56;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  } else {
   (_printf((400|0),($vararg_buffer1|0))|0);
   $89 = HEAP32[40>>2]|0;
   $retval = $89;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  }
 } else if ((($1|0) == 1)) {
  $2 = $p2$addr;
  $3 = HEAP32[$2>>2]|0;
  if ((($3|0) == 2)) {
   $21 = $p1$addr;
   $data7 = (($21) + 8|0);
   $22 = $data7;
   $23 = $22;
   $24 = HEAP32[$23>>2]|0;
   $25 = (($22) + 4)|0;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   $28 = (+($24>>>0)) + (4294967296.0*(+($27|0)));
   $29 = $p2$addr;
   $data10 = (($29) + 8|0);
   $30 = +HEAPF64[$data10>>3];
   $sub12 = $28 - $30;
   $call13 = (_Object_initDouble($sub12)|0);
   $retval = $call13;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  } else if ((($3|0) == 1)) {
   $4 = $p1$addr;
   $data = (($4) + 8|0);
   $5 = $data;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $p2$addr;
   $data3 = (($11) + 8|0);
   $12 = $data3;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($12) + 4)|0;
   $16 = $15;
   $17 = HEAP32[$16>>2]|0;
   $18 = (_i64Subtract(($7|0),($10|0),($14|0),($17|0))|0);
   $19 = tempRet0;
   $20 = (_Object_initInteger($18,$19)|0);
   $retval = $20;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  } else if ((($3|0) == 3)) {
   $31 = $p1$addr;
   $data15 = (($31) + 8|0);
   $32 = $data15;
   $33 = $32;
   $34 = HEAP32[$33>>2]|0;
   $35 = (($32) + 4)|0;
   $36 = $35;
   $37 = HEAP32[$36>>2]|0;
   $38 = $p2$addr;
   $data18 = (($38) + 8|0);
   $numer = (($data18) + 8|0);
   $39 = $numer;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) + 4)|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = $p2$addr;
   $data19 = (($45) + 8|0);
   $46 = $data19;
   $47 = $46;
   $48 = HEAP32[$47>>2]|0;
   $49 = (($46) + 4)|0;
   $50 = $49;
   $51 = HEAP32[$50>>2]|0;
   $52 = (_sub_rat($34,$37,1,0,$41,$44,$48,$51)|0);
   $retval = $52;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  } else {
   (_printf((400|0),($vararg_buffer|0))|0);
   $53 = HEAP32[40>>2]|0;
   $retval = $53;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  }
 } else if ((($1|0) == 3)) {
  $90 = $p2$addr;
  $91 = HEAP32[$90>>2]|0;
  if ((($91|0) == 1)) {
   $92 = $p1$addr;
   $data62 = (($92) + 8|0);
   $numer64 = (($data62) + 8|0);
   $93 = $numer64;
   $94 = $93;
   $95 = HEAP32[$94>>2]|0;
   $96 = (($93) + 4)|0;
   $97 = $96;
   $98 = HEAP32[$97>>2]|0;
   $99 = $p1$addr;
   $data65 = (($99) + 8|0);
   $100 = $data65;
   $101 = $100;
   $102 = HEAP32[$101>>2]|0;
   $103 = (($100) + 4)|0;
   $104 = $103;
   $105 = HEAP32[$104>>2]|0;
   $106 = $p2$addr;
   $data68 = (($106) + 8|0);
   $107 = $data68;
   $108 = $107;
   $109 = HEAP32[$108>>2]|0;
   $110 = (($107) + 4)|0;
   $111 = $110;
   $112 = HEAP32[$111>>2]|0;
   $113 = (_sub_rat($95,$98,$102,$105,$109,$112,1,0)|0);
   $retval = $113;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  } else if ((($91|0) == 2)) {
   $114 = $p1$addr;
   $data73 = (($114) + 8|0);
   $numer75 = (($data73) + 8|0);
   $115 = $numer75;
   $116 = $115;
   $117 = HEAP32[$116>>2]|0;
   $118 = (($115) + 4)|0;
   $119 = $118;
   $120 = HEAP32[$119>>2]|0;
   $121 = $p1$addr;
   $data76 = (($121) + 8|0);
   $122 = $data76;
   $123 = $122;
   $124 = HEAP32[$123>>2]|0;
   $125 = (($122) + 4)|0;
   $126 = $125;
   $127 = HEAP32[$126>>2]|0;
   $128 = (___divdi3(($117|0),($120|0),($124|0),($127|0))|0);
   $129 = tempRet0;
   $130 = (+($128>>>0)) + (4294967296.0*(+($129|0)));
   $131 = $p2$addr;
   $data81 = (($131) + 8|0);
   $132 = +HEAPF64[$data81>>3];
   $sub84 = $130 - $132;
   $call85 = (_Object_initDouble($sub84)|0);
   $retval = $call85;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  } else if ((($91|0) == 3)) {
   $133 = $p1$addr;
   $data87 = (($133) + 8|0);
   $numer89 = (($data87) + 8|0);
   $134 = $numer89;
   $135 = $134;
   $136 = HEAP32[$135>>2]|0;
   $137 = (($134) + 4)|0;
   $138 = $137;
   $139 = HEAP32[$138>>2]|0;
   $140 = $p1$addr;
   $data90 = (($140) + 8|0);
   $141 = $data90;
   $142 = $141;
   $143 = HEAP32[$142>>2]|0;
   $144 = (($141) + 4)|0;
   $145 = $144;
   $146 = HEAP32[$145>>2]|0;
   $147 = $p2$addr;
   $data93 = (($147) + 8|0);
   $numer95 = (($data93) + 8|0);
   $148 = $numer95;
   $149 = $148;
   $150 = HEAP32[$149>>2]|0;
   $151 = (($148) + 4)|0;
   $152 = $151;
   $153 = HEAP32[$152>>2]|0;
   $154 = $p2$addr;
   $data96 = (($154) + 8|0);
   $155 = $data96;
   $156 = $155;
   $157 = HEAP32[$156>>2]|0;
   $158 = (($155) + 4)|0;
   $159 = $158;
   $160 = HEAP32[$159>>2]|0;
   $161 = (_sub_rat($136,$139,$143,$146,$150,$153,$157,$160)|0);
   $retval = $161;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  } else {
   (_printf((400|0),($vararg_buffer3|0))|0);
   $162 = HEAP32[40>>2]|0;
   $retval = $162;
   $164 = $retval;
   STACKTOP = sp;return ($164|0);
  }
 } else {
  (_printf((400|0),($vararg_buffer5|0))|0);
  $163 = HEAP32[40>>2]|0;
  $retval = $163;
  $164 = $retval;
  STACKTOP = sp;return ($164|0);
 }
 return 0|0;
}
function _builtin_sub($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx14 = 0, $call15 = 0, $call5 = 0, $cmp = 0, $cmp13 = 0, $data = 0, $data2 = 0, $data7 = 0, $data9 = 0, $i = 0, $inc = 0, $numer = 0, $p1 = 0;
 var $p2 = 0, $param_num$addr = 0, $params$addr = 0, $return_val = 0, $retval = 0, $sub4 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $return_val = $1;
 $2 = $param_num$addr;
 $cmp = ($2|0)==(1);
 if (!($cmp)) {
  $i = 1;
  while(1) {
   $35 = $i;
   $36 = $param_num$addr;
   $cmp13 = ($35>>>0)<($36>>>0);
   if (!($cmp13)) {
    break;
   }
   $37 = $i;
   $38 = $params$addr;
   $arrayidx14 = (($38) + ($37<<2)|0);
   $39 = HEAP32[$arrayidx14>>2]|0;
   $p2 = $39;
   $40 = $return_val;
   $p1 = $40;
   $41 = $return_val;
   $42 = $p2;
   $call15 = (_sub_2($41,$42)|0);
   $return_val = $call15;
   $43 = $p1;
   _Object_free($43);
   $44 = $i;
   $inc = (($44) + 1)|0;
   $i = $inc;
  }
  $45 = $return_val;
  $retval = $45;
  $46 = $retval;
  STACKTOP = sp;return ($46|0);
 }
 $3 = $return_val;
 $4 = HEAP32[$3>>2]|0;
 if ((($4|0) == 2)) {
  $15 = $return_val;
  $data2 = (($15) + 8|0);
  $16 = +HEAPF64[$data2>>3];
  $sub4 = -$16;
  $call5 = (_Object_initDouble($sub4)|0);
  $retval = $call5;
  $46 = $retval;
  STACKTOP = sp;return ($46|0);
 } else if ((($4|0) == 3)) {
  $17 = $return_val;
  $data7 = (($17) + 8|0);
  $numer = (($data7) + 8|0);
  $18 = $numer;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (_i64Subtract(0,0,($20|0),($23|0))|0);
  $25 = tempRet0;
  $26 = $return_val;
  $data9 = (($26) + 8|0);
  $27 = $data9;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 4)|0;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = (_Object_initRatio($24,$25,$29,$32)|0);
  $retval = $33;
  $46 = $retval;
  STACKTOP = sp;return ($46|0);
 } else if ((($4|0) == 1)) {
  $5 = $return_val;
  $data = (($5) + 8|0);
  $6 = $data;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + 4)|0;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = (_i64Subtract(0,0,($8|0),($11|0))|0);
  $13 = tempRet0;
  $14 = (_Object_initInteger($12,$13)|0);
  $retval = $14;
  $46 = $retval;
  STACKTOP = sp;return ($46|0);
 } else {
  (_printf((400|0),($vararg_buffer|0))|0);
  $34 = HEAP32[40>>2]|0;
  $retval = $34;
  $46 = $retval;
  STACKTOP = sp;return ($46|0);
 }
 return 0|0;
}
function _mul_2($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $call13 = 0, $call34 = 0, $call43 = 0, $call57 = 0, $call86 = 0, $data = 0, $data10 = 0, $data15 = 0, $data18 = 0, $data19 = 0, $data26 = 0, $data29 = 0, $data3 = 0, $data36 = 0, $data39 = 0, $data45 = 0;
 var $data48 = 0, $data53 = 0, $data63 = 0, $data66 = 0, $data69 = 0, $data7 = 0, $data74 = 0, $data77 = 0, $data82 = 0, $data88 = 0, $data91 = 0, $data94 = 0, $data97 = 0, $div = 0.0, $mul12 = 0.0, $mul33 = 0.0, $mul42 = 0.0, $mul52 = 0.0, $mul85 = 0.0, $numer = 0;
 var $numer50 = 0, $numer65 = 0, $numer76 = 0, $numer90 = 0, $numer96 = 0, $p1$addr = 0, $p2$addr = 0, $retval = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $p1$addr = $p1;
 $p2$addr = $p2;
 $0 = $p1$addr;
 $1 = HEAP32[$0>>2]|0;
 if ((($1|0) == 2)) {
  $54 = $p2$addr;
  $55 = HEAP32[$54>>2]|0;
  if ((($55|0) == 1)) {
   $56 = $p1$addr;
   $data26 = (($56) + 8|0);
   $57 = +HEAPF64[$data26>>3];
   $58 = $p2$addr;
   $data29 = (($58) + 8|0);
   $59 = $data29;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $62 = (($59) + 4)|0;
   $63 = $62;
   $64 = HEAP32[$63>>2]|0;
   $65 = (+($61>>>0)) + (4294967296.0*(+($64|0)));
   $mul33 = $57 * $65;
   $call34 = (_Object_initDouble($mul33)|0);
   $retval = $call34;
   $163 = $retval;
   STACKTOP = sp;return ($163|0);
  } else if ((($55|0) == 2)) {
   $66 = $p1$addr;
   $data36 = (($66) + 8|0);
   $67 = +HEAPF64[$data36>>3];
   $68 = $p2$addr;
   $data39 = (($68) + 8|0);
   $69 = +HEAPF64[$data39>>3];
   $mul42 = $67 * $69;
   $call43 = (_Object_initDouble($mul42)|0);
   $retval = $call43;
   $163 = $retval;
   STACKTOP = sp;return ($163|0);
  } else if ((($55|0) == 3)) {
   $70 = $p1$addr;
   $data45 = (($70) + 8|0);
   $71 = +HEAPF64[$data45>>3];
   $72 = $p2$addr;
   $data48 = (($72) + 8|0);
   $numer50 = (($data48) + 8|0);
   $73 = $numer50;
   $74 = $73;
   $75 = HEAP32[$74>>2]|0;
   $76 = (($73) + 4)|0;
   $77 = $76;
   $78 = HEAP32[$77>>2]|0;
   $79 = (+($75>>>0)) + (4294967296.0*(+($78|0)));
   $mul52 = $71 * $79;
   $80 = $p2$addr;
   $data53 = (($80) + 8|0);
   $81 = $data53;
   $82 = $81;
   $83 = HEAP32[$82>>2]|0;
   $84 = (($81) + 4)|0;
   $85 = $84;
   $86 = HEAP32[$85>>2]|0;
   $87 = (+($83>>>0)) + (4294967296.0*(+($86|0)));
   $div = $mul52 / $87;
   $call57 = (_Object_initDouble($div)|0);
   $retval = $call57;
   $163 = $retval;
   STACKTOP = sp;return ($163|0);
  } else {
   (_printf((432|0),($vararg_buffer1|0))|0);
   $88 = HEAP32[40>>2]|0;
   $retval = $88;
   $163 = $retval;
   STACKTOP = sp;return ($163|0);
  }
 } else if ((($1|0) == 1)) {
  $2 = $p2$addr;
  $3 = HEAP32[$2>>2]|0;
  if ((($3|0) == 3)) {
   $31 = $p1$addr;
   $data15 = (($31) + 8|0);
   $32 = $data15;
   $33 = $32;
   $34 = HEAP32[$33>>2]|0;
   $35 = (($32) + 4)|0;
   $36 = $35;
   $37 = HEAP32[$36>>2]|0;
   $38 = $p2$addr;
   $data18 = (($38) + 8|0);
   $numer = (($data18) + 8|0);
   $39 = $numer;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) + 4)|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = $p2$addr;
   $data19 = (($45) + 8|0);
   $46 = $data19;
   $47 = $46;
   $48 = HEAP32[$47>>2]|0;
   $49 = (($46) + 4)|0;
   $50 = $49;
   $51 = HEAP32[$50>>2]|0;
   $52 = (_mul_rat($34,$37,1,0,$41,$44,$48,$51)|0);
   $retval = $52;
   $163 = $retval;
   STACKTOP = sp;return ($163|0);
  } else if ((($3|0) == 1)) {
   $4 = $p1$addr;
   $data = (($4) + 8|0);
   $5 = $data;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $p2$addr;
   $data3 = (($11) + 8|0);
   $12 = $data3;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($12) + 4)|0;
   $16 = $15;
   $17 = HEAP32[$16>>2]|0;
   $18 = (___muldi3(($7|0),($10|0),($14|0),($17|0))|0);
   $19 = tempRet0;
   $20 = (_Object_initInteger($18,$19)|0);
   $retval = $20;
   $163 = $retval;
   STACKTOP = sp;return ($163|0);
  } else if ((($3|0) == 2)) {
   $21 = $p1$addr;
   $data7 = (($21) + 8|0);
   $22 = $data7;
   $23 = $22;
   $24 = HEAP32[$23>>2]|0;
   $25 = (($22) + 4)|0;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   $28 = (+($24>>>0)) + (4294967296.0*(+($27|0)));
   $29 = $p2$addr;
   $data10 = (($29) + 8|0);
   $30 = +HEAPF64[$data10>>3];
   $mul12 = $28 * $30;
   $call13 = (_Object_initDouble($mul12)|0);
   $retval = $call13;
   $163 = $retval;
   STACKTOP = sp;return ($163|0);
  } else {
   (_printf((432|0),($vararg_buffer|0))|0);
   $53 = HEAP32[40>>2]|0;
   $retval = $53;
   $163 = $retval;
   STACKTOP = sp;return ($163|0);
  }
 } else if ((($1|0) == 3)) {
  $89 = $p2$addr;
  $90 = HEAP32[$89>>2]|0;
  if ((($90|0) == 1)) {
   $91 = $p1$addr;
   $data63 = (($91) + 8|0);
   $numer65 = (($data63) + 8|0);
   $92 = $numer65;
   $93 = $92;
   $94 = HEAP32[$93>>2]|0;
   $95 = (($92) + 4)|0;
   $96 = $95;
   $97 = HEAP32[$96>>2]|0;
   $98 = $p1$addr;
   $data66 = (($98) + 8|0);
   $99 = $data66;
   $100 = $99;
   $101 = HEAP32[$100>>2]|0;
   $102 = (($99) + 4)|0;
   $103 = $102;
   $104 = HEAP32[$103>>2]|0;
   $105 = $p2$addr;
   $data69 = (($105) + 8|0);
   $106 = $data69;
   $107 = $106;
   $108 = HEAP32[$107>>2]|0;
   $109 = (($106) + 4)|0;
   $110 = $109;
   $111 = HEAP32[$110>>2]|0;
   $112 = (_mul_rat($94,$97,$101,$104,$108,$111,1,0)|0);
   $retval = $112;
   $163 = $retval;
   STACKTOP = sp;return ($163|0);
  } else if ((($90|0) == 2)) {
   $113 = $p1$addr;
   $data74 = (($113) + 8|0);
   $numer76 = (($data74) + 8|0);
   $114 = $numer76;
   $115 = $114;
   $116 = HEAP32[$115>>2]|0;
   $117 = (($114) + 4)|0;
   $118 = $117;
   $119 = HEAP32[$118>>2]|0;
   $120 = $p1$addr;
   $data77 = (($120) + 8|0);
   $121 = $data77;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = (($121) + 4)|0;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $127 = (___divdi3(($116|0),($119|0),($123|0),($126|0))|0);
   $128 = tempRet0;
   $129 = (+($127>>>0)) + (4294967296.0*(+($128|0)));
   $130 = $p2$addr;
   $data82 = (($130) + 8|0);
   $131 = +HEAPF64[$data82>>3];
   $mul85 = $129 * $131;
   $call86 = (_Object_initDouble($mul85)|0);
   $retval = $call86;
   $163 = $retval;
   STACKTOP = sp;return ($163|0);
  } else if ((($90|0) == 3)) {
   $132 = $p1$addr;
   $data88 = (($132) + 8|0);
   $numer90 = (($data88) + 8|0);
   $133 = $numer90;
   $134 = $133;
   $135 = HEAP32[$134>>2]|0;
   $136 = (($133) + 4)|0;
   $137 = $136;
   $138 = HEAP32[$137>>2]|0;
   $139 = $p1$addr;
   $data91 = (($139) + 8|0);
   $140 = $data91;
   $141 = $140;
   $142 = HEAP32[$141>>2]|0;
   $143 = (($140) + 4)|0;
   $144 = $143;
   $145 = HEAP32[$144>>2]|0;
   $146 = $p2$addr;
   $data94 = (($146) + 8|0);
   $numer96 = (($data94) + 8|0);
   $147 = $numer96;
   $148 = $147;
   $149 = HEAP32[$148>>2]|0;
   $150 = (($147) + 4)|0;
   $151 = $150;
   $152 = HEAP32[$151>>2]|0;
   $153 = $p2$addr;
   $data97 = (($153) + 8|0);
   $154 = $data97;
   $155 = $154;
   $156 = HEAP32[$155>>2]|0;
   $157 = (($154) + 4)|0;
   $158 = $157;
   $159 = HEAP32[$158>>2]|0;
   $160 = (_mul_rat($135,$138,$142,$145,$149,$152,$156,$159)|0);
   $retval = $160;
   $163 = $retval;
   STACKTOP = sp;return ($163|0);
  } else {
   (_printf((432|0),($vararg_buffer3|0))|0);
   $161 = HEAP32[40>>2]|0;
   $retval = $161;
   $163 = $retval;
   STACKTOP = sp;return ($163|0);
  }
 } else {
  (_printf((432|0),($vararg_buffer5|0))|0);
  $162 = HEAP32[40>>2]|0;
  $retval = $162;
  $163 = $retval;
  STACKTOP = sp;return ($163|0);
 }
 return 0|0;
}
function _builtin_mul($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0, $call = 0, $cmp = 0, $i = 0, $inc = 0, $p1 = 0, $p2 = 0;
 var $param_num$addr = 0, $params$addr = 0, $return_val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $return_val = $1;
 $i = 1;
 while(1) {
  $2 = $i;
  $3 = $param_num$addr;
  $cmp = ($2>>>0)<($3>>>0);
  if (!($cmp)) {
   break;
  }
  $4 = $i;
  $5 = $params$addr;
  $arrayidx1 = (($5) + ($4<<2)|0);
  $6 = HEAP32[$arrayidx1>>2]|0;
  $p2 = $6;
  $7 = $return_val;
  $p1 = $7;
  $8 = $return_val;
  $9 = $p2;
  $call = (_mul_2($8,$9)|0);
  $return_val = $call;
  $10 = $p1;
  _Object_free($10);
  $11 = $i;
  $inc = (($11) + 1)|0;
  $i = $inc;
 }
 $12 = $return_val;
 STACKTOP = sp;return ($12|0);
}
function _div_2($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $call12 = 0, $call33 = 0, $call42 = 0, $call57 = 0, $call86 = 0, $data = 0, $data10 = 0, $data14 = 0, $data17 = 0, $data18 = 0, $data25 = 0, $data28 = 0, $data3 = 0, $data35 = 0, $data38 = 0, $data44 = 0, $data47 = 0, $data52 = 0;
 var $data63 = 0, $data66 = 0, $data69 = 0, $data7 = 0, $data74 = 0, $data77 = 0, $data82 = 0, $data88 = 0, $data91 = 0, $data94 = 0, $data97 = 0, $div = 0.0, $div32 = 0.0, $div41 = 0.0, $div51 = 0.0, $div56 = 0.0, $div85 = 0.0, $numer = 0, $numer49 = 0, $numer65 = 0;
 var $numer76 = 0, $numer90 = 0, $numer96 = 0, $p1$addr = 0, $p2$addr = 0, $retval = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $p1$addr = $p1;
 $p2$addr = $p2;
 $0 = $p1$addr;
 $1 = HEAP32[$0>>2]|0;
 if ((($1|0) == 2)) {
  $52 = $p2$addr;
  $53 = HEAP32[$52>>2]|0;
  if ((($53|0) == 1)) {
   $54 = $p1$addr;
   $data25 = (($54) + 8|0);
   $55 = +HEAPF64[$data25>>3];
   $56 = $p2$addr;
   $data28 = (($56) + 8|0);
   $57 = $data28;
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = (($57) + 4)|0;
   $61 = $60;
   $62 = HEAP32[$61>>2]|0;
   $63 = (+($59>>>0)) + (4294967296.0*(+($62|0)));
   $div32 = $55 / $63;
   $call33 = (_Object_initDouble($div32)|0);
   $retval = $call33;
   $161 = $retval;
   STACKTOP = sp;return ($161|0);
  } else if ((($53|0) == 2)) {
   $64 = $p1$addr;
   $data35 = (($64) + 8|0);
   $65 = +HEAPF64[$data35>>3];
   $66 = $p2$addr;
   $data38 = (($66) + 8|0);
   $67 = +HEAPF64[$data38>>3];
   $div41 = $65 / $67;
   $call42 = (_Object_initDouble($div41)|0);
   $retval = $call42;
   $161 = $retval;
   STACKTOP = sp;return ($161|0);
  } else if ((($53|0) == 3)) {
   $68 = $p1$addr;
   $data44 = (($68) + 8|0);
   $69 = +HEAPF64[$data44>>3];
   $70 = $p2$addr;
   $data47 = (($70) + 8|0);
   $numer49 = (($data47) + 8|0);
   $71 = $numer49;
   $72 = $71;
   $73 = HEAP32[$72>>2]|0;
   $74 = (($71) + 4)|0;
   $75 = $74;
   $76 = HEAP32[$75>>2]|0;
   $77 = (+($73>>>0)) + (4294967296.0*(+($76|0)));
   $div51 = $69 / $77;
   $78 = $p2$addr;
   $data52 = (($78) + 8|0);
   $79 = $data52;
   $80 = $79;
   $81 = HEAP32[$80>>2]|0;
   $82 = (($79) + 4)|0;
   $83 = $82;
   $84 = HEAP32[$83>>2]|0;
   $85 = (+($81>>>0)) + (4294967296.0*(+($84|0)));
   $div56 = $div51 / $85;
   $call57 = (_Object_initDouble($div56)|0);
   $retval = $call57;
   $161 = $retval;
   STACKTOP = sp;return ($161|0);
  } else {
   (_printf((464|0),($vararg_buffer1|0))|0);
   $86 = HEAP32[40>>2]|0;
   $retval = $86;
   $161 = $retval;
   STACKTOP = sp;return ($161|0);
  }
 } else if ((($1|0) == 1)) {
  $2 = $p2$addr;
  $3 = HEAP32[$2>>2]|0;
  if ((($3|0) == 3)) {
   $29 = $p1$addr;
   $data14 = (($29) + 8|0);
   $30 = $data14;
   $31 = $30;
   $32 = HEAP32[$31>>2]|0;
   $33 = (($30) + 4)|0;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = $p2$addr;
   $data17 = (($36) + 8|0);
   $numer = (($data17) + 8|0);
   $37 = $numer;
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = (($37) + 4)|0;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = $p2$addr;
   $data18 = (($43) + 8|0);
   $44 = $data18;
   $45 = $44;
   $46 = HEAP32[$45>>2]|0;
   $47 = (($44) + 4)|0;
   $48 = $47;
   $49 = HEAP32[$48>>2]|0;
   $50 = (_div_rat($32,$35,1,0,$39,$42,$46,$49)|0);
   $retval = $50;
   $161 = $retval;
   STACKTOP = sp;return ($161|0);
  } else if ((($3|0) == 1)) {
   $4 = $p1$addr;
   $data = (($4) + 8|0);
   $5 = $data;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $p2$addr;
   $data3 = (($11) + 8|0);
   $12 = $data3;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($12) + 4)|0;
   $16 = $15;
   $17 = HEAP32[$16>>2]|0;
   $18 = (_div_rat($7,$10,1,0,$14,$17,1,0)|0);
   $retval = $18;
   $161 = $retval;
   STACKTOP = sp;return ($161|0);
  } else if ((($3|0) == 2)) {
   $19 = $p1$addr;
   $data7 = (($19) + 8|0);
   $20 = $data7;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = (($20) + 4)|0;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   $26 = (+($22>>>0)) + (4294967296.0*(+($25|0)));
   $27 = $p2$addr;
   $data10 = (($27) + 8|0);
   $28 = +HEAPF64[$data10>>3];
   $div = $26 / $28;
   $call12 = (_Object_initDouble($div)|0);
   $retval = $call12;
   $161 = $retval;
   STACKTOP = sp;return ($161|0);
  } else {
   (_printf((464|0),($vararg_buffer|0))|0);
   $51 = HEAP32[40>>2]|0;
   $retval = $51;
   $161 = $retval;
   STACKTOP = sp;return ($161|0);
  }
 } else if ((($1|0) == 3)) {
  $87 = $p2$addr;
  $88 = HEAP32[$87>>2]|0;
  if ((($88|0) == 1)) {
   $89 = $p1$addr;
   $data63 = (($89) + 8|0);
   $numer65 = (($data63) + 8|0);
   $90 = $numer65;
   $91 = $90;
   $92 = HEAP32[$91>>2]|0;
   $93 = (($90) + 4)|0;
   $94 = $93;
   $95 = HEAP32[$94>>2]|0;
   $96 = $p1$addr;
   $data66 = (($96) + 8|0);
   $97 = $data66;
   $98 = $97;
   $99 = HEAP32[$98>>2]|0;
   $100 = (($97) + 4)|0;
   $101 = $100;
   $102 = HEAP32[$101>>2]|0;
   $103 = $p2$addr;
   $data69 = (($103) + 8|0);
   $104 = $data69;
   $105 = $104;
   $106 = HEAP32[$105>>2]|0;
   $107 = (($104) + 4)|0;
   $108 = $107;
   $109 = HEAP32[$108>>2]|0;
   $110 = (_div_rat($92,$95,$99,$102,$106,$109,1,0)|0);
   $retval = $110;
   $161 = $retval;
   STACKTOP = sp;return ($161|0);
  } else if ((($88|0) == 2)) {
   $111 = $p1$addr;
   $data74 = (($111) + 8|0);
   $numer76 = (($data74) + 8|0);
   $112 = $numer76;
   $113 = $112;
   $114 = HEAP32[$113>>2]|0;
   $115 = (($112) + 4)|0;
   $116 = $115;
   $117 = HEAP32[$116>>2]|0;
   $118 = $p1$addr;
   $data77 = (($118) + 8|0);
   $119 = $data77;
   $120 = $119;
   $121 = HEAP32[$120>>2]|0;
   $122 = (($119) + 4)|0;
   $123 = $122;
   $124 = HEAP32[$123>>2]|0;
   $125 = (___divdi3(($114|0),($117|0),($121|0),($124|0))|0);
   $126 = tempRet0;
   $127 = (+($125>>>0)) + (4294967296.0*(+($126|0)));
   $128 = $p2$addr;
   $data82 = (($128) + 8|0);
   $129 = +HEAPF64[$data82>>3];
   $div85 = $127 / $129;
   $call86 = (_Object_initDouble($div85)|0);
   $retval = $call86;
   $161 = $retval;
   STACKTOP = sp;return ($161|0);
  } else if ((($88|0) == 3)) {
   $130 = $p1$addr;
   $data88 = (($130) + 8|0);
   $numer90 = (($data88) + 8|0);
   $131 = $numer90;
   $132 = $131;
   $133 = HEAP32[$132>>2]|0;
   $134 = (($131) + 4)|0;
   $135 = $134;
   $136 = HEAP32[$135>>2]|0;
   $137 = $p1$addr;
   $data91 = (($137) + 8|0);
   $138 = $data91;
   $139 = $138;
   $140 = HEAP32[$139>>2]|0;
   $141 = (($138) + 4)|0;
   $142 = $141;
   $143 = HEAP32[$142>>2]|0;
   $144 = $p2$addr;
   $data94 = (($144) + 8|0);
   $numer96 = (($data94) + 8|0);
   $145 = $numer96;
   $146 = $145;
   $147 = HEAP32[$146>>2]|0;
   $148 = (($145) + 4)|0;
   $149 = $148;
   $150 = HEAP32[$149>>2]|0;
   $151 = $p2$addr;
   $data97 = (($151) + 8|0);
   $152 = $data97;
   $153 = $152;
   $154 = HEAP32[$153>>2]|0;
   $155 = (($152) + 4)|0;
   $156 = $155;
   $157 = HEAP32[$156>>2]|0;
   $158 = (_div_rat($133,$136,$140,$143,$147,$150,$154,$157)|0);
   $retval = $158;
   $161 = $retval;
   STACKTOP = sp;return ($161|0);
  } else {
   (_printf((368|0),($vararg_buffer3|0))|0);
   $159 = HEAP32[40>>2]|0;
   $retval = $159;
   $161 = $retval;
   STACKTOP = sp;return ($161|0);
  }
 } else {
  (_printf((368|0),($vararg_buffer5|0))|0);
  $160 = HEAP32[40>>2]|0;
  $retval = $160;
  $161 = $retval;
  STACKTOP = sp;return ($161|0);
 }
 return 0|0;
}
function _builtin_div($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0, $call = 0, $cmp = 0, $i = 0, $inc = 0, $p1 = 0, $p2 = 0;
 var $param_num$addr = 0, $params$addr = 0, $return_val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $return_val = $1;
 $i = 1;
 while(1) {
  $2 = $i;
  $3 = $param_num$addr;
  $cmp = ($2>>>0)<($3>>>0);
  if (!($cmp)) {
   break;
  }
  $4 = $i;
  $5 = $params$addr;
  $arrayidx1 = (($5) + ($4<<2)|0);
  $6 = HEAP32[$arrayidx1>>2]|0;
  $p2 = $6;
  $7 = $return_val;
  $p1 = $7;
  $8 = $return_val;
  $9 = $p2;
  $call = (_div_2($8,$9)|0);
  $return_val = $call;
  $10 = $p1;
  _Object_free($10);
  $11 = $i;
  $inc = (($11) + 1)|0;
  $i = $inc;
 }
 $12 = $return_val;
 STACKTOP = sp;return ($12|0);
}
function _builtin_vector($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx3 = 0, $cmp = 0, $data = 0, $data6 = 0, $div = 0, $i = 0, $inc = 0, $inc4 = 0, $length = 0, $mul = 0, $param_num$addr = 0, $params$addr = 0, $size = 0, $temp = 0;
 var $use_count = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $param_num$addr;
 $div = (($0>>>0) / 16)&-1;
 $add = (($div) + 1)|0;
 $mul = $add<<4;
 $size = $mul;
 $i = 0;
 $1 = $size;
 $2 = ($1|0)<(0);
 $3 = $2 << 31 >> 31;
 $4 = (_Object_initVector(1,$1,$3)|0);
 $v = $4;
 while(1) {
  $5 = $i;
  $6 = $param_num$addr;
  $cmp = ($5>>>0)<($6>>>0);
  if (!($cmp)) {
   break;
  }
  $7 = $i;
  $8 = $params$addr;
  $arrayidx = (($8) + ($7<<2)|0);
  $9 = HEAP32[$arrayidx>>2]|0;
  $temp = $9;
  $10 = $temp;
  $11 = $i;
  $12 = $v;
  $data = (($12) + 8|0);
  $13 = HEAP32[$data>>2]|0;
  $arrayidx3 = (($13) + ($11<<2)|0);
  HEAP32[$arrayidx3>>2] = $10;
  $14 = $temp;
  $use_count = (($14) + 4|0);
  $15 = HEAP32[$use_count>>2]|0;
  $inc = (($15) + 1)|0;
  HEAP32[$use_count>>2] = $inc;
  $16 = $i;
  $inc4 = (($16) + 1)|0;
  $i = $inc4;
 }
 $17 = $param_num$addr;
 $18 = $v;
 $data6 = (($18) + 8|0);
 $length = (($data6) + 16|0);
 $19 = $length;
 $20 = $19;
 HEAP32[$20>>2] = $17;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = 0;
 $23 = $v;
 STACKTOP = sp;return ($23|0);
}
function _builtin_vector_with_unchangable_length($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $arrayidx = 0, $arrayidx3 = 0, $cmp = 0, $data = 0, $data6 = 0, $i = 0, $inc = 0, $inc4 = 0, $length = 0, $param_num$addr = 0, $params$addr = 0, $temp = 0, $use_count = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $i = 0;
 $0 = $param_num$addr;
 $1 = (_Object_initVector(0,$0,0)|0);
 $v = $1;
 while(1) {
  $2 = $i;
  $3 = $param_num$addr;
  $cmp = ($2>>>0)<($3>>>0);
  if (!($cmp)) {
   break;
  }
  $4 = $i;
  $5 = $params$addr;
  $arrayidx = (($5) + ($4<<2)|0);
  $6 = HEAP32[$arrayidx>>2]|0;
  $temp = $6;
  $7 = $temp;
  $8 = $i;
  $9 = $v;
  $data = (($9) + 8|0);
  $10 = HEAP32[$data>>2]|0;
  $arrayidx3 = (($10) + ($8<<2)|0);
  HEAP32[$arrayidx3>>2] = $7;
  $11 = $temp;
  $use_count = (($11) + 4|0);
  $12 = HEAP32[$use_count>>2]|0;
  $inc = (($12) + 1)|0;
  HEAP32[$use_count>>2] = $inc;
  $13 = $i;
  $inc4 = (($13) + 1)|0;
  $i = $inc4;
 }
 $14 = $param_num$addr;
 $15 = $v;
 $data6 = (($15) + 8|0);
 $length = (($data6) + 16|0);
 $16 = $length;
 $17 = $16;
 HEAP32[$17>>2] = $14;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = $v;
 STACKTOP = sp;return ($20|0);
}
function _builtin_vector_length($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $data = 0, $length = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $length = (($data) + 16|0);
 $2 = $length;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (_Object_initInteger($4,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _builtin_vector_push($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arrayidx24 = 0, $arrayidx29 = 0, $bf$clear = 0, $bf$load = 0, $call = 0, $data = 0, $data11 = 0, $data15 = 0, $data18 = 0, $data2 = 0, $data26 = 0, $data32 = 0, $data8 = 0, $i = 0, $inc = 0, $length = 0;
 var $length1 = 0, $length34 = 0, $param_num$addr = 0, $params$addr = 0, $resizable = 0, $retval = 0, $size = 0, $size20 = 0, $size4 = 0, $temp = 0, $tobool = 0, $use_count = 0, $vararg_buffer = 0, $vec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 16|0;
 $i = sp + 24|0;
 $length = sp;
 $size = sp + 8|0;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $i;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = $params$addr;
 $5 = HEAP32[$4>>2]|0;
 $vec = $5;
 $6 = $vec;
 $data = (($6) + 8|0);
 $length1 = (($data) + 16|0);
 $7 = $length1;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $length;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = $12;
 $17 = $vec;
 $data2 = (($17) + 8|0);
 $size4 = (($data2) + 8|0);
 $18 = $size4;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = $size;
 $25 = $24;
 HEAP32[$25>>2] = $20;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = $i;
 $29 = $28;
 HEAP32[$29>>2] = 1;
 $30 = (($28) + 4)|0;
 $31 = $30;
 HEAP32[$31>>2] = 0;
 while(1) {
  $32 = $i;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($32) + 4)|0;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = $param_num$addr;
  $39 = ($37|0)<(0);
  $40 = ($37|0)==(0);
  $41 = ($34>>>0)<($38>>>0);
  $42 = $40 & $41;
  $43 = $39 | $42;
  if (!($43)) {
   label = 10;
   break;
  }
  $44 = $length;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) + 4)|0;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = $size;
  $51 = $50;
  $52 = HEAP32[$51>>2]|0;
  $53 = (($50) + 4)|0;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = ($46|0)==($52|0);
  $57 = ($49|0)==($55|0);
  $58 = $56 & $57;
  if ($58) {
   $59 = $vec;
   $data8 = (($59) + 8|0);
   $resizable = (($data8) + 24|0);
   $bf$load = HEAP8[$resizable>>0]|0;
   $bf$clear = $bf$load & 1;
   $tobool = ($bf$clear<<24>>24)!=(0);
   if (!($tobool)) {
    label = 6;
    break;
   }
   $60 = $vec;
   $data11 = (($60) + 8|0);
   $61 = HEAP32[$data11>>2]|0;
   $62 = $size;
   $63 = $62;
   $64 = HEAP32[$63>>2]|0;
   $65 = (($62) + 4)|0;
   $66 = $65;
   $67 = HEAP32[$66>>2]|0;
   $68 = (___muldi3(($64|0),($67|0),2,0)|0);
   $69 = tempRet0;
   $70 = (___muldi3(4,0,($68|0),($69|0))|0);
   $71 = tempRet0;
   $call = (_realloc($61,$70)|0);
   $72 = $vec;
   $data15 = (($72) + 8|0);
   HEAP32[$data15>>2] = $call;
   $73 = $vec;
   $data18 = (($73) + 8|0);
   $size20 = (($data18) + 8|0);
   $74 = $size20;
   $75 = $74;
   $76 = HEAP32[$75>>2]|0;
   $77 = (($74) + 4)|0;
   $78 = $77;
   $79 = HEAP32[$78>>2]|0;
   $80 = (___muldi3(($76|0),($79|0),2,0)|0);
   $81 = tempRet0;
   $82 = $size20;
   $83 = $82;
   HEAP32[$83>>2] = $80;
   $84 = (($82) + 4)|0;
   $85 = $84;
   HEAP32[$85>>2] = $81;
  }
  $87 = $i;
  $88 = $87;
  $89 = HEAP32[$88>>2]|0;
  $90 = (($87) + 4)|0;
  $91 = $90;
  $92 = HEAP32[$91>>2]|0;
  $93 = $params$addr;
  $arrayidx24 = (($93) + ($89<<2)|0);
  $94 = HEAP32[$arrayidx24>>2]|0;
  $temp = $94;
  $95 = $temp;
  $96 = $length;
  $97 = $96;
  $98 = HEAP32[$97>>2]|0;
  $99 = (($96) + 4)|0;
  $100 = $99;
  $101 = HEAP32[$100>>2]|0;
  $102 = $vec;
  $data26 = (($102) + 8|0);
  $103 = HEAP32[$data26>>2]|0;
  $arrayidx29 = (($103) + ($98<<2)|0);
  HEAP32[$arrayidx29>>2] = $95;
  $104 = $temp;
  $use_count = (($104) + 4|0);
  $105 = HEAP32[$use_count>>2]|0;
  $inc = (($105) + 1)|0;
  HEAP32[$use_count>>2] = $inc;
  $106 = $length;
  $107 = $106;
  $108 = HEAP32[$107>>2]|0;
  $109 = (($106) + 4)|0;
  $110 = $109;
  $111 = HEAP32[$110>>2]|0;
  $112 = (_i64Add(($108|0),($111|0),1,0)|0);
  $113 = tempRet0;
  $114 = $length;
  $115 = $114;
  HEAP32[$115>>2] = $112;
  $116 = (($114) + 4)|0;
  $117 = $116;
  HEAP32[$117>>2] = $113;
  $118 = $i;
  $119 = $118;
  $120 = HEAP32[$119>>2]|0;
  $121 = (($118) + 4)|0;
  $122 = $121;
  $123 = HEAP32[$122>>2]|0;
  $124 = (_i64Add(($120|0),($123|0),1,0)|0);
  $125 = tempRet0;
  $126 = $i;
  $127 = $126;
  HEAP32[$127>>2] = $124;
  $128 = (($126) + 4)|0;
  $129 = $128;
  HEAP32[$129>>2] = $125;
 }
 if ((label|0) == 6) {
  (_printf((496|0),($vararg_buffer|0))|0);
  $86 = HEAP32[40>>2]|0;
  $retval = $86;
  $143 = $retval;
  STACKTOP = sp;return ($143|0);
 }
 else if ((label|0) == 10) {
  $130 = $length;
  $131 = $130;
  $132 = HEAP32[$131>>2]|0;
  $133 = (($130) + 4)|0;
  $134 = $133;
  $135 = HEAP32[$134>>2]|0;
  $136 = $vec;
  $data32 = (($136) + 8|0);
  $length34 = (($data32) + 16|0);
  $137 = $length34;
  $138 = $137;
  HEAP32[$138>>2] = $132;
  $139 = (($137) + 4)|0;
  $140 = $139;
  HEAP32[$140>>2] = $135;
  $141 = $params$addr;
  $142 = HEAP32[$141>>2]|0;
  $retval = $142;
  $143 = $retval;
  STACKTOP = sp;return ($143|0);
 }
 return 0|0;
}
function _builtin_vector_pop($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $arrayidx10 = 0, $arrayidx4 = 0, $data = 0, $data12 = 0, $data2 = 0, $data7 = 0, $dec = 0, $length = 0, $length1 = 0, $length14 = 0, $param_num$addr = 0, $params$addr = 0, $return_out = 0, $use_count = 0, $vec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $length = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $vec = $1;
 $2 = $vec;
 $data = (($2) + 8|0);
 $length1 = (($data) + 16|0);
 $3 = $length1;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = $length;
 $10 = $9;
 HEAP32[$10>>2] = $5;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 $13 = $length;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (_i64Subtract(($15|0),($18|0),1,0)|0);
 $20 = tempRet0;
 $21 = $vec;
 $data2 = (($21) + 8|0);
 $22 = HEAP32[$data2>>2]|0;
 $arrayidx4 = (($22) + ($19<<2)|0);
 $23 = HEAP32[$arrayidx4>>2]|0;
 $return_out = $23;
 $24 = $return_out;
 $use_count = (($24) + 4|0);
 $25 = HEAP32[$use_count>>2]|0;
 $dec = (($25) + -1)|0;
 HEAP32[$use_count>>2] = $dec;
 $26 = HEAP32[40>>2]|0;
 $27 = $length;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (_i64Subtract(($29|0),($32|0),1,0)|0);
 $34 = tempRet0;
 $35 = $vec;
 $data7 = (($35) + 8|0);
 $36 = HEAP32[$data7>>2]|0;
 $arrayidx10 = (($36) + ($33<<2)|0);
 HEAP32[$arrayidx10>>2] = $26;
 $37 = $length;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + 4)|0;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (_i64Subtract(($39|0),($42|0),1,0)|0);
 $44 = tempRet0;
 $45 = $length;
 $46 = $45;
 HEAP32[$46>>2] = $43;
 $47 = (($45) + 4)|0;
 $48 = $47;
 HEAP32[$48>>2] = $44;
 $49 = $length;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($49) + 4)|0;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = $vec;
 $data12 = (($55) + 8|0);
 $length14 = (($data12) + 16|0);
 $56 = $length14;
 $57 = $56;
 HEAP32[$57>>2] = $51;
 $58 = (($56) + 4)|0;
 $59 = $58;
 HEAP32[$59>>2] = $54;
 $60 = $return_out;
 STACKTOP = sp;return ($60|0);
}
function _num_equal_2($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $call100 = 0;
 var $call122 = 0, $call126 = 0, $call25 = 0, $call67 = 0, $cmp12 = 0, $cmp37 = 0, $cmp47 = 0, $cmp62 = 0, $cmp97 = 0, $cond = 0, $cond101 = 0, $cond119 = 0, $cond14 = 0, $cond24 = 0, $cond39 = 0, $cond49 = 0, $cond64 = 0, $cond84 = 0, $conv98 = 0, $conv99 = 0.0;
 var $data = 0, $data10 = 0, $data103 = 0, $data106 = 0, $data110 = 0, $data113 = 0, $data16 = 0, $data19 = 0, $data20 = 0, $data3 = 0, $data30 = 0, $data33 = 0, $data41 = 0, $data44 = 0, $data51 = 0, $data54 = 0, $data57 = 0, $data7 = 0, $data72 = 0, $data75 = 0;
 var $data79 = 0, $data86 = 0, $data89 = 0, $data94 = 0, $numer = 0, $numer105 = 0, $numer112 = 0, $numer56 = 0, $numer74 = 0, $numer88 = 0, $p1$addr = 0, $p2$addr = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer10 = sp + 16|0;
 $vararg_buffer8 = sp + 40|0;
 $vararg_buffer5 = sp + 8|0;
 $vararg_buffer3 = sp;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 48|0;
 $p1$addr = $p1;
 $p2$addr = $p2;
 $0 = $p1$addr;
 $1 = HEAP32[$0>>2]|0;
 if ((($1|0) == 2)) {
  $58 = $p2$addr;
  $59 = HEAP32[$58>>2]|0;
  if ((($59|0) == 1)) {
   $60 = $p1$addr;
   $data30 = (($60) + 8|0);
   $61 = +HEAPF64[$data30>>3];
   $62 = $p2$addr;
   $data33 = (($62) + 8|0);
   $63 = $data33;
   $64 = $63;
   $65 = HEAP32[$64>>2]|0;
   $66 = (($63) + 4)|0;
   $67 = $66;
   $68 = HEAP32[$67>>2]|0;
   $69 = (+($65>>>0)) + (4294967296.0*(+($68|0)));
   $cmp37 = $61 == $69;
   $cond39 = $cmp37 ? 1 : 0;
   $retval = $cond39;
   $178 = $retval;
   STACKTOP = sp;return ($178|0);
  } else if ((($59|0) == 2)) {
   $70 = $p1$addr;
   $data41 = (($70) + 8|0);
   $71 = +HEAPF64[$data41>>3];
   $72 = $p2$addr;
   $data44 = (($72) + 8|0);
   $73 = +HEAPF64[$data44>>3];
   $cmp47 = $71 == $73;
   $cond49 = $cmp47 ? 1 : 0;
   $retval = $cond49;
   $178 = $retval;
   STACKTOP = sp;return ($178|0);
  } else if ((($59|0) == 3)) {
   $74 = $p1$addr;
   $data51 = (($74) + 8|0);
   $75 = +HEAPF64[$data51>>3];
   $76 = $p2$addr;
   $data54 = (($76) + 8|0);
   $numer56 = (($data54) + 8|0);
   $77 = $numer56;
   $78 = $77;
   $79 = HEAP32[$78>>2]|0;
   $80 = (($77) + 4)|0;
   $81 = $80;
   $82 = HEAP32[$81>>2]|0;
   $83 = $p2$addr;
   $data57 = (($83) + 8|0);
   $84 = $data57;
   $85 = $84;
   $86 = HEAP32[$85>>2]|0;
   $87 = (($84) + 4)|0;
   $88 = $87;
   $89 = HEAP32[$88>>2]|0;
   $90 = (___divdi3(($79|0),($82|0),($86|0),($89|0))|0);
   $91 = tempRet0;
   $92 = (+($90>>>0)) + (4294967296.0*(+($91|0)));
   $cmp62 = $75 == $92;
   $cond64 = $cmp62 ? 1 : 0;
   $retval = $cond64;
   $178 = $retval;
   STACKTOP = sp;return ($178|0);
  } else {
   (_printf((536|0),($vararg_buffer3|0))|0);
   $93 = $p2$addr;
   $call67 = (_to_string($93)|0);
   HEAP32[$vararg_buffer5>>2] = $call67;
   (_printf((568|0),($vararg_buffer5|0))|0);
   $retval = 0;
   $178 = $retval;
   STACKTOP = sp;return ($178|0);
  }
 } else if ((($1|0) == 1)) {
  $2 = $p2$addr;
  $3 = HEAP32[$2>>2]|0;
  if ((($3|0) == 3)) {
   $31 = $p1$addr;
   $data16 = (($31) + 8|0);
   $32 = $data16;
   $33 = $32;
   $34 = HEAP32[$33>>2]|0;
   $35 = (($32) + 4)|0;
   $36 = $35;
   $37 = HEAP32[$36>>2]|0;
   $38 = $p2$addr;
   $data19 = (($38) + 8|0);
   $numer = (($data19) + 8|0);
   $39 = $numer;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) + 4)|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = $p2$addr;
   $data20 = (($45) + 8|0);
   $46 = $data20;
   $47 = $46;
   $48 = HEAP32[$47>>2]|0;
   $49 = (($46) + 4)|0;
   $50 = $49;
   $51 = HEAP32[$50>>2]|0;
   $52 = (___divdi3(($41|0),($44|0),($48|0),($51|0))|0);
   $53 = tempRet0;
   $54 = ($34|0)==($52|0);
   $55 = ($37|0)==($53|0);
   $56 = $54 & $55;
   $cond24 = $56 ? 1 : 0;
   $retval = $cond24;
   $178 = $retval;
   STACKTOP = sp;return ($178|0);
  } else if ((($3|0) == 2)) {
   $21 = $p1$addr;
   $data7 = (($21) + 8|0);
   $22 = $data7;
   $23 = $22;
   $24 = HEAP32[$23>>2]|0;
   $25 = (($22) + 4)|0;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   $28 = (+($24>>>0)) + (4294967296.0*(+($27|0)));
   $29 = $p2$addr;
   $data10 = (($29) + 8|0);
   $30 = +HEAPF64[$data10>>3];
   $cmp12 = $28 == $30;
   $cond14 = $cmp12 ? 1 : 0;
   $retval = $cond14;
   $178 = $retval;
   STACKTOP = sp;return ($178|0);
  } else if ((($3|0) == 1)) {
   $4 = $p1$addr;
   $data = (($4) + 8|0);
   $5 = $data;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $p2$addr;
   $data3 = (($11) + 8|0);
   $12 = $data3;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($12) + 4)|0;
   $16 = $15;
   $17 = HEAP32[$16>>2]|0;
   $18 = ($7|0)==($14|0);
   $19 = ($10|0)==($17|0);
   $20 = $18 & $19;
   $cond = $20 ? 1 : 0;
   $retval = $cond;
   $178 = $retval;
   STACKTOP = sp;return ($178|0);
  } else {
   (_printf((536|0),($vararg_buffer|0))|0);
   $57 = $p2$addr;
   $call25 = (_to_string($57)|0);
   HEAP32[$vararg_buffer1>>2] = $call25;
   (_printf((568|0),($vararg_buffer1|0))|0);
   $retval = 0;
   $178 = $retval;
   STACKTOP = sp;return ($178|0);
  }
 } else if ((($1|0) == 3)) {
  $94 = $p2$addr;
  $95 = HEAP32[$94>>2]|0;
  if ((($95|0) == 1)) {
   $96 = $p1$addr;
   $data72 = (($96) + 8|0);
   $numer74 = (($data72) + 8|0);
   $97 = $numer74;
   $98 = $97;
   $99 = HEAP32[$98>>2]|0;
   $100 = (($97) + 4)|0;
   $101 = $100;
   $102 = HEAP32[$101>>2]|0;
   $103 = $p1$addr;
   $data75 = (($103) + 8|0);
   $104 = $data75;
   $105 = $104;
   $106 = HEAP32[$105>>2]|0;
   $107 = (($104) + 4)|0;
   $108 = $107;
   $109 = HEAP32[$108>>2]|0;
   $110 = (___divdi3(($99|0),($102|0),($106|0),($109|0))|0);
   $111 = tempRet0;
   $112 = $p2$addr;
   $data79 = (($112) + 8|0);
   $113 = $data79;
   $114 = $113;
   $115 = HEAP32[$114>>2]|0;
   $116 = (($113) + 4)|0;
   $117 = $116;
   $118 = HEAP32[$117>>2]|0;
   $119 = ($110|0)==($115|0);
   $120 = ($111|0)==($118|0);
   $121 = $119 & $120;
   $cond84 = $121 ? 1 : 0;
   $retval = $cond84;
   $178 = $retval;
   STACKTOP = sp;return ($178|0);
  } else if ((($95|0) == 2)) {
   $122 = $p1$addr;
   $data86 = (($122) + 8|0);
   $numer88 = (($data86) + 8|0);
   $123 = $numer88;
   $124 = $123;
   $125 = HEAP32[$124>>2]|0;
   $126 = (($123) + 4)|0;
   $127 = $126;
   $128 = HEAP32[$127>>2]|0;
   $129 = $p1$addr;
   $data89 = (($129) + 8|0);
   $130 = $data89;
   $131 = $130;
   $132 = HEAP32[$131>>2]|0;
   $133 = (($130) + 4)|0;
   $134 = $133;
   $135 = HEAP32[$134>>2]|0;
   $136 = (___divdi3(($125|0),($128|0),($132|0),($135|0))|0);
   $137 = tempRet0;
   $138 = (+($136>>>0)) + (4294967296.0*(+($137|0)));
   $139 = $p2$addr;
   $data94 = (($139) + 8|0);
   $140 = +HEAPF64[$data94>>3];
   $cmp97 = $138 == $140;
   $conv98 = $cmp97&1;
   $conv99 = (+($conv98|0));
   $call100 = (_Object_initDouble($conv99)|0);
   $tobool = ($call100|0)!=(0|0);
   $cond101 = $tobool ? 1 : 0;
   $retval = $cond101;
   $178 = $retval;
   STACKTOP = sp;return ($178|0);
  } else if ((($95|0) == 3)) {
   $141 = $p1$addr;
   $data103 = (($141) + 8|0);
   $numer105 = (($data103) + 8|0);
   $142 = $numer105;
   $143 = $142;
   $144 = HEAP32[$143>>2]|0;
   $145 = (($142) + 4)|0;
   $146 = $145;
   $147 = HEAP32[$146>>2]|0;
   $148 = $p1$addr;
   $data106 = (($148) + 8|0);
   $149 = $data106;
   $150 = $149;
   $151 = HEAP32[$150>>2]|0;
   $152 = (($149) + 4)|0;
   $153 = $152;
   $154 = HEAP32[$153>>2]|0;
   $155 = (___divdi3(($144|0),($147|0),($151|0),($154|0))|0);
   $156 = tempRet0;
   $157 = $p2$addr;
   $data110 = (($157) + 8|0);
   $numer112 = (($data110) + 8|0);
   $158 = $numer112;
   $159 = $158;
   $160 = HEAP32[$159>>2]|0;
   $161 = (($158) + 4)|0;
   $162 = $161;
   $163 = HEAP32[$162>>2]|0;
   $164 = $p2$addr;
   $data113 = (($164) + 8|0);
   $165 = $data113;
   $166 = $165;
   $167 = HEAP32[$166>>2]|0;
   $168 = (($165) + 4)|0;
   $169 = $168;
   $170 = HEAP32[$169>>2]|0;
   $171 = (___divdi3(($160|0),($163|0),($167|0),($170|0))|0);
   $172 = tempRet0;
   $173 = ($155|0)==($171|0);
   $174 = ($156|0)==($172|0);
   $175 = $173 & $174;
   $cond119 = $175 ? 1 : 0;
   $retval = $cond119;
   $178 = $retval;
   STACKTOP = sp;return ($178|0);
  } else {
   (_printf((536|0),($vararg_buffer8|0))|0);
   $176 = $p2$addr;
   $call122 = (_to_string($176)|0);
   HEAP32[$vararg_buffer10>>2] = $call122;
   (_printf((568|0),($vararg_buffer10|0))|0);
   $retval = 0;
   $178 = $retval;
   STACKTOP = sp;return ($178|0);
  }
 } else {
  (_printf((536|0),($vararg_buffer13|0))|0);
  $177 = $p1$addr;
  $call126 = (_to_string($177)|0);
  HEAP32[$vararg_buffer15>>2] = $call126;
  (_printf((568|0),($vararg_buffer15|0))|0);
  $retval = 0;
  $178 = $retval;
  STACKTOP = sp;return ($178|0);
 }
 return 0|0;
}
function _builtin_num_equal($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx1 = 0, $call = 0, $cmp = 0, $i = 0;
 var $inc = 0, $p1 = 0, $p2 = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = $param_num$addr;
  $sub = (($1) - 1)|0;
  $cmp = ($0>>>0)<($sub>>>0);
  if (!($cmp)) {
   label = 7;
   break;
  }
  $2 = $i;
  $3 = $params$addr;
  $arrayidx = (($3) + ($2<<2)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  $p1 = $4;
  $5 = $i;
  $add = (($5) + 1)|0;
  $6 = $params$addr;
  $arrayidx1 = (($6) + ($add<<2)|0);
  $7 = HEAP32[$arrayidx1>>2]|0;
  $p2 = $7;
  $8 = $p1;
  $9 = $p2;
  $call = (_num_equal_2($8,$9)|0);
  $tobool = ($call|0)!=(0);
  if (!($tobool)) {
   label = 4;
   break;
  }
  $11 = $i;
  $inc = (($11) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 4) {
  $10 = HEAP32[40>>2]|0;
  $retval = $10;
  $13 = $retval;
  STACKTOP = sp;return ($13|0);
 }
 else if ((label|0) == 7) {
  $12 = HEAP32[584>>2]|0;
  $retval = $12;
  $13 = $retval;
  STACKTOP = sp;return ($13|0);
 }
 return 0|0;
}
function _lt_2($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0;
 var $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $call100 = 0, $call122 = 0, $call25 = 0, $call67 = 0, $cmp12 = 0;
 var $cmp37 = 0, $cmp47 = 0, $cmp62 = 0, $cmp97 = 0, $cond = 0, $cond101 = 0, $cond119 = 0, $cond127 = 0, $cond14 = 0, $cond24 = 0, $cond39 = 0, $cond49 = 0, $cond64 = 0, $cond84 = 0, $conv98 = 0, $conv99 = 0.0, $data = 0, $data10 = 0, $data103 = 0, $data106 = 0;
 var $data110 = 0, $data113 = 0, $data16 = 0, $data19 = 0, $data20 = 0, $data3 = 0, $data30 = 0, $data33 = 0, $data41 = 0, $data44 = 0, $data51 = 0, $data54 = 0, $data57 = 0, $data7 = 0, $data72 = 0, $data75 = 0, $data79 = 0, $data86 = 0, $data89 = 0, $data94 = 0;
 var $numer = 0, $numer105 = 0, $numer112 = 0, $numer56 = 0, $numer74 = 0, $numer88 = 0, $p1$addr = 0, $p2$addr = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $p1$addr = $p1;
 $p2$addr = $p2;
 $0 = $p1$addr;
 $1 = HEAP32[$0>>2]|0;
 if ((($1|0) == 1)) {
  $2 = $p2$addr;
  $3 = HEAP32[$2>>2]|0;
  if ((($3|0) == 2)) {
   $23 = $p1$addr;
   $data7 = (($23) + 8|0);
   $24 = $data7;
   $25 = $24;
   $26 = HEAP32[$25>>2]|0;
   $27 = (($24) + 4)|0;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   $30 = (+($26>>>0)) + (4294967296.0*(+($29|0)));
   $31 = $p2$addr;
   $data10 = (($31) + 8|0);
   $32 = +HEAPF64[$data10>>3];
   $cmp12 = $30 < $32;
   $cond14 = $cmp12 ? 1 : 0;
   $retval = $cond14;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  } else if ((($3|0) == 1)) {
   $4 = $p1$addr;
   $data = (($4) + 8|0);
   $5 = $data;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $p2$addr;
   $data3 = (($11) + 8|0);
   $12 = $data3;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($12) + 4)|0;
   $16 = $15;
   $17 = HEAP32[$16>>2]|0;
   $18 = ($10|0)<($17|0);
   $19 = ($10|0)==($17|0);
   $20 = ($7>>>0)<($14>>>0);
   $21 = $19 & $20;
   $22 = $18 | $21;
   $cond = $22 ? 1 : 0;
   $retval = $cond;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  } else if ((($3|0) == 3)) {
   $33 = $p1$addr;
   $data16 = (($33) + 8|0);
   $34 = $data16;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $37 = (($34) + 4)|0;
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = $p2$addr;
   $data19 = (($40) + 8|0);
   $numer = (($data19) + 8|0);
   $41 = $numer;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = (($41) + 4)|0;
   $45 = $44;
   $46 = HEAP32[$45>>2]|0;
   $47 = $p2$addr;
   $data20 = (($47) + 8|0);
   $48 = $data20;
   $49 = $48;
   $50 = HEAP32[$49>>2]|0;
   $51 = (($48) + 4)|0;
   $52 = $51;
   $53 = HEAP32[$52>>2]|0;
   $54 = (___divdi3(($43|0),($46|0),($50|0),($53|0))|0);
   $55 = tempRet0;
   $56 = ($39|0)<($55|0);
   $57 = ($39|0)==($55|0);
   $58 = ($36>>>0)<($54>>>0);
   $59 = $57 & $58;
   $60 = $56 | $59;
   $cond24 = $60 ? 1 : 0;
   $retval = $cond24;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  } else {
   (_printf((592|0),($vararg_buffer|0))|0);
   $61 = $p2$addr;
   $call25 = (_to_string($61)|0);
   HEAP32[$vararg_buffer1>>2] = $call25;
   (_printf((568|0),($vararg_buffer1|0))|0);
   $retval = 0;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  }
 } else if ((($1|0) == 2)) {
  $62 = $p2$addr;
  $63 = HEAP32[$62>>2]|0;
  if ((($63|0) == 1)) {
   $64 = $p1$addr;
   $data30 = (($64) + 8|0);
   $65 = +HEAPF64[$data30>>3];
   $66 = $p2$addr;
   $data33 = (($66) + 8|0);
   $67 = $data33;
   $68 = $67;
   $69 = HEAP32[$68>>2]|0;
   $70 = (($67) + 4)|0;
   $71 = $70;
   $72 = HEAP32[$71>>2]|0;
   $73 = (+($69>>>0)) + (4294967296.0*(+($72|0)));
   $cmp37 = $65 < $73;
   $cond39 = $cmp37 ? 1 : 0;
   $retval = $cond39;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  } else if ((($63|0) == 2)) {
   $74 = $p1$addr;
   $data41 = (($74) + 8|0);
   $75 = +HEAPF64[$data41>>3];
   $76 = $p2$addr;
   $data44 = (($76) + 8|0);
   $77 = +HEAPF64[$data44>>3];
   $cmp47 = $75 < $77;
   $cond49 = $cmp47 ? 1 : 0;
   $retval = $cond49;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  } else if ((($63|0) == 3)) {
   $78 = $p1$addr;
   $data51 = (($78) + 8|0);
   $79 = +HEAPF64[$data51>>3];
   $80 = $p2$addr;
   $data54 = (($80) + 8|0);
   $numer56 = (($data54) + 8|0);
   $81 = $numer56;
   $82 = $81;
   $83 = HEAP32[$82>>2]|0;
   $84 = (($81) + 4)|0;
   $85 = $84;
   $86 = HEAP32[$85>>2]|0;
   $87 = $p2$addr;
   $data57 = (($87) + 8|0);
   $88 = $data57;
   $89 = $88;
   $90 = HEAP32[$89>>2]|0;
   $91 = (($88) + 4)|0;
   $92 = $91;
   $93 = HEAP32[$92>>2]|0;
   $94 = (___divdi3(($83|0),($86|0),($90|0),($93|0))|0);
   $95 = tempRet0;
   $96 = (+($94>>>0)) + (4294967296.0*(+($95|0)));
   $cmp62 = $79 < $96;
   $cond64 = $cmp62 ? 1 : 0;
   $retval = $cond64;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  } else {
   (_printf((592|0),($vararg_buffer3|0))|0);
   $97 = $p2$addr;
   $call67 = (_to_string($97)|0);
   HEAP32[$vararg_buffer5>>2] = $call67;
   (_printf((568|0),($vararg_buffer5|0))|0);
   $retval = 0;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  }
 } else if ((($1|0) == 3)) {
  $98 = $p2$addr;
  $99 = HEAP32[$98>>2]|0;
  if ((($99|0) == 1)) {
   $100 = $p1$addr;
   $data72 = (($100) + 8|0);
   $numer74 = (($data72) + 8|0);
   $101 = $numer74;
   $102 = $101;
   $103 = HEAP32[$102>>2]|0;
   $104 = (($101) + 4)|0;
   $105 = $104;
   $106 = HEAP32[$105>>2]|0;
   $107 = $p1$addr;
   $data75 = (($107) + 8|0);
   $108 = $data75;
   $109 = $108;
   $110 = HEAP32[$109>>2]|0;
   $111 = (($108) + 4)|0;
   $112 = $111;
   $113 = HEAP32[$112>>2]|0;
   $114 = (___divdi3(($103|0),($106|0),($110|0),($113|0))|0);
   $115 = tempRet0;
   $116 = $p2$addr;
   $data79 = (($116) + 8|0);
   $117 = $data79;
   $118 = $117;
   $119 = HEAP32[$118>>2]|0;
   $120 = (($117) + 4)|0;
   $121 = $120;
   $122 = HEAP32[$121>>2]|0;
   $123 = ($115|0)<($122|0);
   $124 = ($115|0)==($122|0);
   $125 = ($114>>>0)<($119>>>0);
   $126 = $124 & $125;
   $127 = $123 | $126;
   $cond84 = $127 ? 1 : 0;
   $retval = $cond84;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  } else if ((($99|0) == 2)) {
   $128 = $p1$addr;
   $data86 = (($128) + 8|0);
   $numer88 = (($data86) + 8|0);
   $129 = $numer88;
   $130 = $129;
   $131 = HEAP32[$130>>2]|0;
   $132 = (($129) + 4)|0;
   $133 = $132;
   $134 = HEAP32[$133>>2]|0;
   $135 = $p1$addr;
   $data89 = (($135) + 8|0);
   $136 = $data89;
   $137 = $136;
   $138 = HEAP32[$137>>2]|0;
   $139 = (($136) + 4)|0;
   $140 = $139;
   $141 = HEAP32[$140>>2]|0;
   $142 = (___divdi3(($131|0),($134|0),($138|0),($141|0))|0);
   $143 = tempRet0;
   $144 = (+($142>>>0)) + (4294967296.0*(+($143|0)));
   $145 = $p2$addr;
   $data94 = (($145) + 8|0);
   $146 = +HEAPF64[$data94>>3];
   $cmp97 = $144 < $146;
   $conv98 = $cmp97&1;
   $conv99 = (+($conv98|0));
   $call100 = (_Object_initDouble($conv99)|0);
   $tobool = ($call100|0)!=(0|0);
   $cond101 = $tobool ? 1 : 0;
   $retval = $cond101;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  } else if ((($99|0) == 3)) {
   $147 = $p1$addr;
   $data103 = (($147) + 8|0);
   $numer105 = (($data103) + 8|0);
   $148 = $numer105;
   $149 = $148;
   $150 = HEAP32[$149>>2]|0;
   $151 = (($148) + 4)|0;
   $152 = $151;
   $153 = HEAP32[$152>>2]|0;
   $154 = $p1$addr;
   $data106 = (($154) + 8|0);
   $155 = $data106;
   $156 = $155;
   $157 = HEAP32[$156>>2]|0;
   $158 = (($155) + 4)|0;
   $159 = $158;
   $160 = HEAP32[$159>>2]|0;
   $161 = (___divdi3(($150|0),($153|0),($157|0),($160|0))|0);
   $162 = tempRet0;
   $163 = $p2$addr;
   $data110 = (($163) + 8|0);
   $numer112 = (($data110) + 8|0);
   $164 = $numer112;
   $165 = $164;
   $166 = HEAP32[$165>>2]|0;
   $167 = (($164) + 4)|0;
   $168 = $167;
   $169 = HEAP32[$168>>2]|0;
   $170 = $p2$addr;
   $data113 = (($170) + 8|0);
   $171 = $data113;
   $172 = $171;
   $173 = HEAP32[$172>>2]|0;
   $174 = (($171) + 4)|0;
   $175 = $174;
   $176 = HEAP32[$175>>2]|0;
   $177 = (___divdi3(($166|0),($169|0),($173|0),($176|0))|0);
   $178 = tempRet0;
   $179 = ($162|0)<($178|0);
   $180 = ($162|0)==($178|0);
   $181 = ($161>>>0)<($177>>>0);
   $182 = $180 & $181;
   $183 = $179 | $182;
   $cond119 = $183 ? 1 : 0;
   $retval = $cond119;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  } else {
   (_printf((592|0),($vararg_buffer8|0))|0);
   $184 = $p2$addr;
   $call122 = (_to_string($184)|0);
   HEAP32[$vararg_buffer10>>2] = $call122;
   (_printf((568|0),($vararg_buffer10|0))|0);
   $retval = 0;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  }
 } else {
  $185 = $p1$addr;
  $186 = $185;
  $187 = $p2$addr;
  $188 = $187;
  $189 = (0)<(0);
  $190 = (0)==(0);
  $191 = ($186>>>0)<($188>>>0);
  $192 = $190 & $191;
  $193 = $189 | $192;
  $cond127 = $193 ? 1 : 0;
  $retval = $cond127;
  $194 = $retval;
  STACKTOP = sp;return ($194|0);
 }
 return 0|0;
}
function _builtin_num_lt($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx1 = 0, $call = 0, $cmp = 0, $i = 0;
 var $inc = 0, $p1 = 0, $p2 = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = $param_num$addr;
  $sub = (($1) - 1)|0;
  $cmp = ($0>>>0)<($sub>>>0);
  if (!($cmp)) {
   label = 7;
   break;
  }
  $2 = $i;
  $3 = $params$addr;
  $arrayidx = (($3) + ($2<<2)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  $p1 = $4;
  $5 = $i;
  $add = (($5) + 1)|0;
  $6 = $params$addr;
  $arrayidx1 = (($6) + ($add<<2)|0);
  $7 = HEAP32[$arrayidx1>>2]|0;
  $p2 = $7;
  $8 = $p1;
  $9 = $p2;
  $call = (_lt_2($8,$9)|0);
  $tobool = ($call|0)!=(0);
  if (!($tobool)) {
   label = 4;
   break;
  }
  $11 = $i;
  $inc = (($11) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 4) {
  $10 = HEAP32[40>>2]|0;
  $retval = $10;
  $13 = $retval;
  STACKTOP = sp;return ($13|0);
 }
 else if ((label|0) == 7) {
  $12 = HEAP32[584>>2]|0;
  $retval = $12;
  $13 = $retval;
  STACKTOP = sp;return ($13|0);
 }
 return 0|0;
}
function _le_2($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0;
 var $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $call100 = 0, $call122 = 0, $call25 = 0, $call67 = 0, $cmp12 = 0;
 var $cmp37 = 0, $cmp47 = 0, $cmp62 = 0, $cmp97 = 0, $cond = 0, $cond101 = 0, $cond119 = 0, $cond127 = 0, $cond14 = 0, $cond24 = 0, $cond39 = 0, $cond49 = 0, $cond64 = 0, $cond84 = 0, $conv98 = 0, $conv99 = 0.0, $data = 0, $data10 = 0, $data103 = 0, $data106 = 0;
 var $data110 = 0, $data113 = 0, $data16 = 0, $data19 = 0, $data20 = 0, $data3 = 0, $data30 = 0, $data33 = 0, $data41 = 0, $data44 = 0, $data51 = 0, $data54 = 0, $data57 = 0, $data7 = 0, $data72 = 0, $data75 = 0, $data79 = 0, $data86 = 0, $data89 = 0, $data94 = 0;
 var $numer = 0, $numer105 = 0, $numer112 = 0, $numer56 = 0, $numer74 = 0, $numer88 = 0, $p1$addr = 0, $p2$addr = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $p1$addr = $p1;
 $p2$addr = $p2;
 $0 = $p1$addr;
 $1 = HEAP32[$0>>2]|0;
 if ((($1|0) == 1)) {
  $2 = $p2$addr;
  $3 = HEAP32[$2>>2]|0;
  if ((($3|0) == 2)) {
   $23 = $p1$addr;
   $data7 = (($23) + 8|0);
   $24 = $data7;
   $25 = $24;
   $26 = HEAP32[$25>>2]|0;
   $27 = (($24) + 4)|0;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   $30 = (+($26>>>0)) + (4294967296.0*(+($29|0)));
   $31 = $p2$addr;
   $data10 = (($31) + 8|0);
   $32 = +HEAPF64[$data10>>3];
   $cmp12 = $30 <= $32;
   $cond14 = $cmp12 ? 1 : 0;
   $retval = $cond14;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  } else if ((($3|0) == 1)) {
   $4 = $p1$addr;
   $data = (($4) + 8|0);
   $5 = $data;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $p2$addr;
   $data3 = (($11) + 8|0);
   $12 = $data3;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($12) + 4)|0;
   $16 = $15;
   $17 = HEAP32[$16>>2]|0;
   $18 = ($10|0)<($17|0);
   $19 = ($10|0)==($17|0);
   $20 = ($7>>>0)<=($14>>>0);
   $21 = $19 & $20;
   $22 = $18 | $21;
   $cond = $22 ? 1 : 0;
   $retval = $cond;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  } else if ((($3|0) == 3)) {
   $33 = $p1$addr;
   $data16 = (($33) + 8|0);
   $34 = $data16;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $37 = (($34) + 4)|0;
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = $p2$addr;
   $data19 = (($40) + 8|0);
   $numer = (($data19) + 8|0);
   $41 = $numer;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = (($41) + 4)|0;
   $45 = $44;
   $46 = HEAP32[$45>>2]|0;
   $47 = $p2$addr;
   $data20 = (($47) + 8|0);
   $48 = $data20;
   $49 = $48;
   $50 = HEAP32[$49>>2]|0;
   $51 = (($48) + 4)|0;
   $52 = $51;
   $53 = HEAP32[$52>>2]|0;
   $54 = (___divdi3(($43|0),($46|0),($50|0),($53|0))|0);
   $55 = tempRet0;
   $56 = ($39|0)<($55|0);
   $57 = ($39|0)==($55|0);
   $58 = ($36>>>0)<=($54>>>0);
   $59 = $57 & $58;
   $60 = $56 | $59;
   $cond24 = $60 ? 1 : 0;
   $retval = $cond24;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  } else {
   (_printf((624|0),($vararg_buffer|0))|0);
   $61 = $p2$addr;
   $call25 = (_to_string($61)|0);
   HEAP32[$vararg_buffer1>>2] = $call25;
   (_printf((568|0),($vararg_buffer1|0))|0);
   $retval = 0;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  }
 } else if ((($1|0) == 2)) {
  $62 = $p2$addr;
  $63 = HEAP32[$62>>2]|0;
  if ((($63|0) == 1)) {
   $64 = $p1$addr;
   $data30 = (($64) + 8|0);
   $65 = +HEAPF64[$data30>>3];
   $66 = $p2$addr;
   $data33 = (($66) + 8|0);
   $67 = $data33;
   $68 = $67;
   $69 = HEAP32[$68>>2]|0;
   $70 = (($67) + 4)|0;
   $71 = $70;
   $72 = HEAP32[$71>>2]|0;
   $73 = (+($69>>>0)) + (4294967296.0*(+($72|0)));
   $cmp37 = $65 <= $73;
   $cond39 = $cmp37 ? 1 : 0;
   $retval = $cond39;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  } else if ((($63|0) == 2)) {
   $74 = $p1$addr;
   $data41 = (($74) + 8|0);
   $75 = +HEAPF64[$data41>>3];
   $76 = $p2$addr;
   $data44 = (($76) + 8|0);
   $77 = +HEAPF64[$data44>>3];
   $cmp47 = $75 <= $77;
   $cond49 = $cmp47 ? 1 : 0;
   $retval = $cond49;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  } else if ((($63|0) == 3)) {
   $78 = $p1$addr;
   $data51 = (($78) + 8|0);
   $79 = +HEAPF64[$data51>>3];
   $80 = $p2$addr;
   $data54 = (($80) + 8|0);
   $numer56 = (($data54) + 8|0);
   $81 = $numer56;
   $82 = $81;
   $83 = HEAP32[$82>>2]|0;
   $84 = (($81) + 4)|0;
   $85 = $84;
   $86 = HEAP32[$85>>2]|0;
   $87 = $p2$addr;
   $data57 = (($87) + 8|0);
   $88 = $data57;
   $89 = $88;
   $90 = HEAP32[$89>>2]|0;
   $91 = (($88) + 4)|0;
   $92 = $91;
   $93 = HEAP32[$92>>2]|0;
   $94 = (___divdi3(($83|0),($86|0),($90|0),($93|0))|0);
   $95 = tempRet0;
   $96 = (+($94>>>0)) + (4294967296.0*(+($95|0)));
   $cmp62 = $79 <= $96;
   $cond64 = $cmp62 ? 1 : 0;
   $retval = $cond64;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  } else {
   (_printf((624|0),($vararg_buffer3|0))|0);
   $97 = $p2$addr;
   $call67 = (_to_string($97)|0);
   HEAP32[$vararg_buffer5>>2] = $call67;
   (_printf((568|0),($vararg_buffer5|0))|0);
   $retval = 0;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  }
 } else if ((($1|0) == 3)) {
  $98 = $p2$addr;
  $99 = HEAP32[$98>>2]|0;
  if ((($99|0) == 1)) {
   $100 = $p1$addr;
   $data72 = (($100) + 8|0);
   $numer74 = (($data72) + 8|0);
   $101 = $numer74;
   $102 = $101;
   $103 = HEAP32[$102>>2]|0;
   $104 = (($101) + 4)|0;
   $105 = $104;
   $106 = HEAP32[$105>>2]|0;
   $107 = $p1$addr;
   $data75 = (($107) + 8|0);
   $108 = $data75;
   $109 = $108;
   $110 = HEAP32[$109>>2]|0;
   $111 = (($108) + 4)|0;
   $112 = $111;
   $113 = HEAP32[$112>>2]|0;
   $114 = (___divdi3(($103|0),($106|0),($110|0),($113|0))|0);
   $115 = tempRet0;
   $116 = $p2$addr;
   $data79 = (($116) + 8|0);
   $117 = $data79;
   $118 = $117;
   $119 = HEAP32[$118>>2]|0;
   $120 = (($117) + 4)|0;
   $121 = $120;
   $122 = HEAP32[$121>>2]|0;
   $123 = ($115|0)<($122|0);
   $124 = ($115|0)==($122|0);
   $125 = ($114>>>0)<=($119>>>0);
   $126 = $124 & $125;
   $127 = $123 | $126;
   $cond84 = $127 ? 1 : 0;
   $retval = $cond84;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  } else if ((($99|0) == 2)) {
   $128 = $p1$addr;
   $data86 = (($128) + 8|0);
   $numer88 = (($data86) + 8|0);
   $129 = $numer88;
   $130 = $129;
   $131 = HEAP32[$130>>2]|0;
   $132 = (($129) + 4)|0;
   $133 = $132;
   $134 = HEAP32[$133>>2]|0;
   $135 = $p1$addr;
   $data89 = (($135) + 8|0);
   $136 = $data89;
   $137 = $136;
   $138 = HEAP32[$137>>2]|0;
   $139 = (($136) + 4)|0;
   $140 = $139;
   $141 = HEAP32[$140>>2]|0;
   $142 = (___divdi3(($131|0),($134|0),($138|0),($141|0))|0);
   $143 = tempRet0;
   $144 = (+($142>>>0)) + (4294967296.0*(+($143|0)));
   $145 = $p2$addr;
   $data94 = (($145) + 8|0);
   $146 = +HEAPF64[$data94>>3];
   $cmp97 = $144 <= $146;
   $conv98 = $cmp97&1;
   $conv99 = (+($conv98|0));
   $call100 = (_Object_initDouble($conv99)|0);
   $tobool = ($call100|0)!=(0|0);
   $cond101 = $tobool ? 1 : 0;
   $retval = $cond101;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  } else if ((($99|0) == 3)) {
   $147 = $p1$addr;
   $data103 = (($147) + 8|0);
   $numer105 = (($data103) + 8|0);
   $148 = $numer105;
   $149 = $148;
   $150 = HEAP32[$149>>2]|0;
   $151 = (($148) + 4)|0;
   $152 = $151;
   $153 = HEAP32[$152>>2]|0;
   $154 = $p1$addr;
   $data106 = (($154) + 8|0);
   $155 = $data106;
   $156 = $155;
   $157 = HEAP32[$156>>2]|0;
   $158 = (($155) + 4)|0;
   $159 = $158;
   $160 = HEAP32[$159>>2]|0;
   $161 = (___divdi3(($150|0),($153|0),($157|0),($160|0))|0);
   $162 = tempRet0;
   $163 = $p2$addr;
   $data110 = (($163) + 8|0);
   $numer112 = (($data110) + 8|0);
   $164 = $numer112;
   $165 = $164;
   $166 = HEAP32[$165>>2]|0;
   $167 = (($164) + 4)|0;
   $168 = $167;
   $169 = HEAP32[$168>>2]|0;
   $170 = $p2$addr;
   $data113 = (($170) + 8|0);
   $171 = $data113;
   $172 = $171;
   $173 = HEAP32[$172>>2]|0;
   $174 = (($171) + 4)|0;
   $175 = $174;
   $176 = HEAP32[$175>>2]|0;
   $177 = (___divdi3(($166|0),($169|0),($173|0),($176|0))|0);
   $178 = tempRet0;
   $179 = ($162|0)<($178|0);
   $180 = ($162|0)==($178|0);
   $181 = ($161>>>0)<=($177>>>0);
   $182 = $180 & $181;
   $183 = $179 | $182;
   $cond119 = $183 ? 1 : 0;
   $retval = $cond119;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  } else {
   (_printf((624|0),($vararg_buffer8|0))|0);
   $184 = $p2$addr;
   $call122 = (_to_string($184)|0);
   HEAP32[$vararg_buffer10>>2] = $call122;
   (_printf((568|0),($vararg_buffer10|0))|0);
   $retval = 0;
   $194 = $retval;
   STACKTOP = sp;return ($194|0);
  }
 } else {
  $185 = $p1$addr;
  $186 = $185;
  $187 = $p2$addr;
  $188 = $187;
  $189 = (0)<(0);
  $190 = (0)==(0);
  $191 = ($186>>>0)<=($188>>>0);
  $192 = $190 & $191;
  $193 = $189 | $192;
  $cond127 = $193 ? 1 : 0;
  $retval = $cond127;
  $194 = $retval;
  STACKTOP = sp;return ($194|0);
 }
 return 0|0;
}
function _builtin_num_le($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx1 = 0, $call = 0, $cmp = 0, $i = 0;
 var $inc = 0, $p1 = 0, $p2 = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = $param_num$addr;
  $sub = (($1) - 1)|0;
  $cmp = ($0>>>0)<($sub>>>0);
  if (!($cmp)) {
   label = 7;
   break;
  }
  $2 = $i;
  $3 = $params$addr;
  $arrayidx = (($3) + ($2<<2)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  $p1 = $4;
  $5 = $i;
  $add = (($5) + 1)|0;
  $6 = $params$addr;
  $arrayidx1 = (($6) + ($add<<2)|0);
  $7 = HEAP32[$arrayidx1>>2]|0;
  $p2 = $7;
  $8 = $p1;
  $9 = $p2;
  $call = (_le_2($8,$9)|0);
  $tobool = ($call|0)!=(0);
  if (!($tobool)) {
   label = 4;
   break;
  }
  $11 = $i;
  $inc = (($11) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 4) {
  $10 = HEAP32[40>>2]|0;
  $retval = $10;
  $13 = $retval;
  STACKTOP = sp;return ($13|0);
 }
 else if ((label|0) == 7) {
  $12 = HEAP32[584>>2]|0;
  $retval = $12;
  $13 = $retval;
  STACKTOP = sp;return ($13|0);
 }
 return 0|0;
}
function _eq_2($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0, $cmp10 = 0;
 var $cmp13 = 0, $cmp14 = 0, $cmp2 = 0, $cmp5 = 0, $cmp7 = 0, $cond = 0, $p1$addr = 0, $p2$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p1$addr = $p1;
 $p2$addr = $p2;
 $0 = $p1$addr;
 $1 = HEAP32[$0>>2]|0;
 $cmp = ($1|0)==(1);
 if ($cmp) {
  label = 4;
 } else {
  $2 = $p1$addr;
  $3 = HEAP32[$2>>2]|0;
  $cmp2 = ($3|0)==(2);
  if ($cmp2) {
   label = 4;
  } else {
   $4 = $p1$addr;
   $5 = HEAP32[$4>>2]|0;
   $cmp5 = ($5|0)==(3);
   if ($cmp5) {
    label = 4;
   }
  }
 }
 do {
  if ((label|0) == 4) {
   $6 = $p2$addr;
   $7 = HEAP32[$6>>2]|0;
   $cmp7 = ($7|0)==(1);
   if (!($cmp7)) {
    $8 = $p2$addr;
    $9 = HEAP32[$8>>2]|0;
    $cmp10 = ($9|0)==(2);
    if (!($cmp10)) {
     $10 = $p2$addr;
     $11 = HEAP32[$10>>2]|0;
     $cmp13 = ($11|0)==(3);
     if (!($cmp13)) {
      break;
     }
    }
   }
   $12 = $p1$addr;
   $13 = $p2$addr;
   $call = (_num_equal_2($12,$13)|0);
   $retval = $call;
   $16 = $retval;
   STACKTOP = sp;return ($16|0);
  }
 } while(0);
 $14 = $p1$addr;
 $15 = $p2$addr;
 $cmp14 = ($14|0)==($15|0);
 $cond = $cmp14 ? 1 : 0;
 $retval = $cond;
 $16 = $retval;
 STACKTOP = sp;return ($16|0);
}
function _builtin_eq($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx1 = 0, $call = 0, $cmp = 0, $i = 0;
 var $inc = 0, $p1 = 0, $p2 = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = $param_num$addr;
  $sub = (($1) - 1)|0;
  $cmp = ($0>>>0)<($sub>>>0);
  if (!($cmp)) {
   label = 7;
   break;
  }
  $2 = $i;
  $3 = $params$addr;
  $arrayidx = (($3) + ($2<<2)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  $p1 = $4;
  $5 = $i;
  $add = (($5) + 1)|0;
  $6 = $params$addr;
  $arrayidx1 = (($6) + ($add<<2)|0);
  $7 = HEAP32[$arrayidx1>>2]|0;
  $p2 = $7;
  $8 = $p1;
  $9 = $p2;
  $call = (_eq_2($8,$9)|0);
  $tobool = ($call|0)!=(0);
  if (!($tobool)) {
   label = 4;
   break;
  }
  $11 = $i;
  $inc = (($11) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 4) {
  $10 = HEAP32[40>>2]|0;
  $retval = $10;
  $13 = $retval;
  STACKTOP = sp;return ($13|0);
 }
 else if ((label|0) == 7) {
  $12 = HEAP32[584>>2]|0;
  $retval = $12;
  $13 = $retval;
  STACKTOP = sp;return ($13|0);
 }
 return 0|0;
}
function _builtin_exit($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call1 = 0, $cmp = 0, $data = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $param_num$addr;
 $cmp = ($0|0)==(0);
 if ($cmp) {
  (_printf((656|0),($vararg_buffer|0))|0);
  _exit(0);
  // unreachable;
 } else {
  $1 = $params$addr;
  $2 = HEAP32[$1>>2]|0;
  $call1 = (_to_string($2)|0);
  HEAP32[$vararg_buffer1>>2] = $call1;
  (_printf((664|0),($vararg_buffer1|0))|0);
  $3 = $params$addr;
  $4 = HEAP32[$3>>2]|0;
  $data = (($4) + 8|0);
  $5 = $data;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  _exit(($7|0));
  // unreachable;
 }
 return 0|0;
}
function _builtin_gt($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx1 = 0, $call = 0, $cmp = 0, $dec = 0, $i = 0, $param_num$addr = 0;
 var $params$addr = 0, $retval = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $param_num$addr;
 $sub = (($0) - 2)|0;
 $i = $sub;
 while(1) {
  $1 = $i;
  $cmp = ($1|0)>=(0);
  if (!($cmp)) {
   label = 7;
   break;
  }
  $2 = $i;
  $3 = $params$addr;
  $arrayidx = (($3) + ($2<<2)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  $5 = $i;
  $add = (($5) + 1)|0;
  $6 = $params$addr;
  $arrayidx1 = (($6) + ($add<<2)|0);
  $7 = HEAP32[$arrayidx1>>2]|0;
  $call = (_le_2($4,$7)|0);
  $tobool = ($call|0)!=(0);
  if ($tobool) {
   label = 4;
   break;
  }
  $9 = $i;
  $dec = (($9) + -1)|0;
  $i = $dec;
 }
 if ((label|0) == 4) {
  $8 = HEAP32[40>>2]|0;
  $retval = $8;
  $11 = $retval;
  STACKTOP = sp;return ($11|0);
 }
 else if ((label|0) == 7) {
  $10 = HEAP32[584>>2]|0;
  $retval = $10;
  $11 = $retval;
  STACKTOP = sp;return ($11|0);
 }
 return 0|0;
}
function _builtin_ge($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx1 = 0, $call = 0, $cmp = 0, $dec = 0, $i = 0, $param_num$addr = 0;
 var $params$addr = 0, $retval = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $param_num$addr;
 $sub = (($0) - 2)|0;
 $i = $sub;
 while(1) {
  $1 = $i;
  $cmp = ($1|0)>=(0);
  if (!($cmp)) {
   label = 7;
   break;
  }
  $2 = $i;
  $3 = $params$addr;
  $arrayidx = (($3) + ($2<<2)|0);
  $4 = HEAP32[$arrayidx>>2]|0;
  $5 = $i;
  $add = (($5) + 1)|0;
  $6 = $params$addr;
  $arrayidx1 = (($6) + ($add<<2)|0);
  $7 = HEAP32[$arrayidx1>>2]|0;
  $call = (_lt_2($4,$7)|0);
  $tobool = ($call|0)!=(0);
  if ($tobool) {
   label = 4;
   break;
  }
  $9 = $i;
  $dec = (($9) + -1)|0;
  $i = $dec;
 }
 if ((label|0) == 4) {
  $8 = HEAP32[40>>2]|0;
  $retval = $8;
  $11 = $retval;
  STACKTOP = sp;return ($11|0);
 }
 else if ((label|0) == 7) {
  $10 = HEAP32[584>>2]|0;
  $retval = $10;
  $11 = $retval;
  STACKTOP = sp;return ($11|0);
 }
 return 0|0;
}
function _builtin_parse($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call2 = 0, $cmp = 0, $data = 0, $l = 0, $param_num$addr = 0, $params$addr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = HEAP32[$data>>2]|0;
 $call = (_lexer($2)|0);
 $l = $call;
 $3 = $l;
 $cmp = ($3|0)==(0|0);
 if ($cmp) {
  (_printf((672|0),($vararg_buffer|0))|0);
 }
 $4 = $l;
 $call2 = (_parser($4)|0);
 STACKTOP = sp;return ($call2|0);
}
function _lexer($input_string) {
 $input_string = $input_string|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $add = 0, $add153 = 0, $add217 = 0, $add229 = 0, $add263 = 0, $add309 = 0, $add319 = 0, $add329 = 0, $add332 = 0, $add39 = 0, $add46 = 0, $array_length = 0, $array_length133 = 0;
 var $array_length147 = 0, $array_length151 = 0, $array_length159 = 0, $array_length189 = 0, $array_length193 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx103 = 0, $arrayidx109 = 0, $arrayidx115 = 0, $arrayidx121 = 0, $arrayidx127 = 0, $arrayidx136 = 0, $arrayidx137 = 0, $arrayidx14 = 0, $arrayidx142 = 0, $arrayidx166 = 0, $arrayidx175 = 0, $arrayidx19 = 0, $arrayidx192 = 0;
 var $arrayidx201 = 0, $arrayidx205 = 0, $arrayidx210 = 0, $arrayidx224 = 0, $arrayidx234 = 0, $arrayidx24 = 0, $arrayidx246 = 0, $arrayidx251 = 0, $arrayidx258 = 0, $arrayidx264 = 0, $arrayidx271 = 0, $arrayidx277 = 0, $arrayidx283 = 0, $arrayidx289 = 0, $arrayidx296 = 0, $arrayidx30 = 0, $arrayidx304 = 0, $arrayidx314 = 0, $arrayidx321 = 0, $arrayidx34 = 0;
 var $arrayidx4 = 0, $arrayidx40 = 0, $arrayidx47 = 0, $arrayidx55 = 0, $arrayidx60 = 0, $arrayidx65 = 0, $arrayidx73 = 0, $arrayidx79 = 0, $arrayidx85 = 0, $arrayidx91 = 0, $arrayidx97 = 0, $call = 0, $call1 = 0, $call154 = 0, $call155 = 0, $call218 = 0, $call219 = 0, $call230 = 0, $call231 = 0, $call330 = 0;
 var $call333 = 0, $call334 = 0, $cmp = 0, $cmp105 = 0, $cmp111 = 0, $cmp117 = 0, $cmp12 = 0, $cmp123 = 0, $cmp130 = 0, $cmp139 = 0, $cmp144 = 0, $cmp16 = 0, $cmp162 = 0, $cmp169 = 0, $cmp178 = 0, $cmp182 = 0, $cmp196 = 0, $cmp2 = 0, $cmp207 = 0, $cmp21 = 0;
 var $cmp212 = 0, $cmp226 = 0, $cmp236 = 0, $cmp248 = 0, $cmp253 = 0, $cmp26 = 0, $cmp260 = 0, $cmp266 = 0, $cmp273 = 0, $cmp279 = 0, $cmp285 = 0, $cmp291 = 0, $cmp294 = 0, $cmp298 = 0, $cmp306 = 0, $cmp311 = 0, $cmp316 = 0, $cmp32 = 0, $cmp323 = 0, $cmp351 = 0;
 var $cmp36 = 0, $cmp42 = 0, $cmp49 = 0, $cmp57 = 0, $cmp6 = 0, $cmp62 = 0, $cmp67 = 0, $cmp70 = 0, $cmp75 = 0, $cmp81 = 0, $cmp87 = 0, $cmp93 = 0, $cmp99 = 0, $conv = 0, $conv104 = 0, $conv11 = 0, $conv110 = 0, $conv116 = 0, $conv122 = 0, $conv129 = 0;
 var $conv138 = 0, $conv143 = 0, $conv15 = 0, $conv168 = 0, $conv177 = 0, $conv20 = 0, $conv206 = 0, $conv211 = 0, $conv225 = 0, $conv235 = 0, $conv247 = 0, $conv25 = 0, $conv252 = 0, $conv259 = 0, $conv265 = 0, $conv272 = 0, $conv278 = 0, $conv284 = 0, $conv290 = 0, $conv297 = 0;
 var $conv305 = 0, $conv31 = 0, $conv315 = 0, $conv322 = 0, $conv35 = 0, $conv41 = 0, $conv48 = 0, $conv5 = 0, $conv56 = 0, $conv61 = 0, $conv66 = 0, $conv74 = 0, $conv80 = 0, $conv86 = 0, $conv92 = 0, $conv98 = 0, $count = 0, $dec = 0, $dec181 = 0, $dec188 = 0;
 var $dec203 = 0, $dec256 = 0, $end = 0, $i = 0, $inc = 0, $inc149 = 0, $inc172 = 0, $inc215 = 0, $inc239 = 0, $inc241 = 0, $inc269 = 0, $inc302 = 0, $inc327 = 0, $inc349 = 0, $inc45 = 0, $inc53 = 0, $input_string$addr = 0, $j = 0, $output_list = 0, $paren_count = 0;
 var $retval = 0, $start_index = 0, $string_length = 0, $sub = 0, $sub102 = 0, $sub108 = 0, $sub114 = 0, $sub120 = 0, $sub126 = 0, $sub134 = 0, $sub148 = 0, $sub152 = 0, $sub156 = 0, $sub160 = 0, $sub190 = 0, $sub194 = 0, $sub199 = 0, $sub220 = 0, $sub232 = 0, $sub335 = 0;
 var $sub78 = 0, $sub84 = 0, $sub90 = 0, $sub96 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $input_string$addr = $input_string;
 $i = 0;
 $0 = $input_string$addr;
 $call = (_strlen(($0|0))|0);
 $string_length = $call;
 $call1 = (_Lexer_init()|0);
 $output_list = $call1;
 $paren_count = 0;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = $string_length;
  $cmp = ($1>>>0)<($2>>>0);
  if (!($cmp)) {
   break;
  }
  $3 = $i;
  $4 = $input_string$addr;
  $arrayidx = (($4) + ($3)|0);
  $5 = HEAP8[$arrayidx>>0]|0;
  $conv = $5 << 24 >> 24;
  $cmp2 = ($conv|0)==(40);
  L4: do {
   if ($cmp2) {
    $6 = $output_list;
    _Lexer_push($6,144);
    $7 = $paren_count;
    $inc = (($7) + 1)|0;
    $paren_count = $inc;
    label = 107;
   } else {
    $8 = $i;
    $9 = $input_string$addr;
    $arrayidx4 = (($9) + ($8)|0);
    $10 = HEAP8[$arrayidx4>>0]|0;
    $conv5 = $10 << 24 >> 24;
    $cmp6 = ($conv5|0)==(41);
    do {
     if ($cmp6) {
      $11 = $output_list;
      _Lexer_push($11,256);
      $12 = $paren_count;
      $dec = (($12) + -1)|0;
      $paren_count = $dec;
     } else {
      $13 = $i;
      $14 = $input_string$addr;
      $arrayidx10 = (($14) + ($13)|0);
      $15 = HEAP8[$arrayidx10>>0]|0;
      $conv11 = $15 << 24 >> 24;
      $cmp12 = ($conv11|0)==(32);
      if (!($cmp12)) {
       $16 = $i;
       $17 = $input_string$addr;
       $arrayidx14 = (($17) + ($16)|0);
       $18 = HEAP8[$arrayidx14>>0]|0;
       $conv15 = $18 << 24 >> 24;
       $cmp16 = ($conv15|0)==(10);
       if (!($cmp16)) {
        $19 = $i;
        $20 = $input_string$addr;
        $arrayidx19 = (($20) + ($19)|0);
        $21 = HEAP8[$arrayidx19>>0]|0;
        $conv20 = $21 << 24 >> 24;
        $cmp21 = ($conv20|0)==(9);
        if (!($cmp21)) {
         $22 = $i;
         $23 = $input_string$addr;
         $arrayidx24 = (($23) + ($22)|0);
         $24 = HEAP8[$arrayidx24>>0]|0;
         $conv25 = $24 << 24 >> 24;
         $cmp26 = ($conv25|0)==(44);
         if (!($cmp26)) {
          $25 = $i;
          $26 = $input_string$addr;
          $arrayidx30 = (($26) + ($25)|0);
          $27 = HEAP8[$arrayidx30>>0]|0;
          $conv31 = $27 << 24 >> 24;
          $cmp32 = ($conv31|0)==(35);
          do {
           if ($cmp32) {
            $28 = $i;
            $add = (($28) + 1)|0;
            $29 = $input_string$addr;
            $arrayidx34 = (($29) + ($add)|0);
            $30 = HEAP8[$arrayidx34>>0]|0;
            $conv35 = $30 << 24 >> 24;
            $cmp36 = ($conv35|0)==(91);
            if (!($cmp36)) {
             $31 = $i;
             $add39 = (($31) + 1)|0;
             $32 = $input_string$addr;
             $arrayidx40 = (($32) + ($add39)|0);
             $33 = HEAP8[$arrayidx40>>0]|0;
             $conv41 = $33 << 24 >> 24;
             $cmp42 = ($conv41|0)==(40);
             if (!($cmp42)) {
              label = 19;
              break;
             }
            }
            $34 = $output_list;
            _Lexer_push($34,144);
            $35 = $paren_count;
            $inc45 = (($35) + 1)|0;
            $paren_count = $inc45;
            $36 = $i;
            $add46 = (($36) + 1)|0;
            $37 = $input_string$addr;
            $arrayidx47 = (($37) + ($add46)|0);
            $38 = HEAP8[$arrayidx47>>0]|0;
            $conv48 = $38 << 24 >> 24;
            $cmp49 = ($conv48|0)==(40);
            if ($cmp49) {
             $39 = $output_list;
             _Lexer_push($39,1912);
            } else {
             $40 = $output_list;
             _Lexer_push($40,1920);
            }
            $41 = $i;
            $inc53 = (($41) + 1)|0;
            $i = $inc53;
           } else {
            label = 19;
           }
          } while(0);
          if ((label|0) == 19) {
           label = 0;
           $42 = $i;
           $43 = $input_string$addr;
           $arrayidx55 = (($43) + ($42)|0);
           $44 = HEAP8[$arrayidx55>>0]|0;
           $conv56 = $44 << 24 >> 24;
           $cmp57 = ($conv56|0)==(91);
           if ($cmp57) {
            label = 22;
           } else {
            $45 = $i;
            $46 = $input_string$addr;
            $arrayidx60 = (($46) + ($45)|0);
            $47 = HEAP8[$arrayidx60>>0]|0;
            $conv61 = $47 << 24 >> 24;
            $cmp62 = ($conv61|0)==(123);
            if ($cmp62) {
             label = 22;
            } else {
             $48 = $i;
             $49 = $input_string$addr;
             $arrayidx65 = (($49) + ($48)|0);
             $50 = HEAP8[$arrayidx65>>0]|0;
             $conv66 = $50 << 24 >> 24;
             $cmp67 = ($conv66|0)==(58);
             if ($cmp67) {
              label = 22;
             } else {
              $193 = $i;
              $194 = $input_string$addr;
              $arrayidx246 = (($194) + ($193)|0);
              $195 = HEAP8[$arrayidx246>>0]|0;
              $conv247 = $195 << 24 >> 24;
              $cmp248 = ($conv247|0)==(93);
              if ($cmp248) {
               label = 69;
              } else {
               $196 = $i;
               $197 = $input_string$addr;
               $arrayidx251 = (($197) + ($196)|0);
               $198 = HEAP8[$arrayidx251>>0]|0;
               $conv252 = $198 << 24 >> 24;
               $cmp253 = ($conv252|0)==(125);
               if ($cmp253) {
                label = 69;
               } else {
                $201 = $i;
                $202 = $input_string$addr;
                $arrayidx258 = (($202) + ($201)|0);
                $203 = HEAP8[$arrayidx258>>0]|0;
                $conv259 = $203 << 24 >> 24;
                $cmp260 = ($conv259|0)==(126);
                do {
                 if ($cmp260) {
                  $204 = $i;
                  $add263 = (($204) + 1)|0;
                  $205 = $input_string$addr;
                  $arrayidx264 = (($205) + ($add263)|0);
                  $206 = HEAP8[$arrayidx264>>0]|0;
                  $conv265 = $206 << 24 >> 24;
                  $cmp266 = ($conv265|0)==(64);
                  if (!($cmp266)) {
                   label = 73;
                   break;
                  }
                  $207 = $output_list;
                  _Lexer_push($207,1936);
                  $208 = $i;
                  $inc269 = (($208) + 1)|0;
                  $i = $inc269;
                 } else {
                  label = 73;
                 }
                } while(0);
                if ((label|0) == 73) {
                 label = 0;
                 $209 = $i;
                 $210 = $input_string$addr;
                 $arrayidx271 = (($210) + ($209)|0);
                 $211 = HEAP8[$arrayidx271>>0]|0;
                 $conv272 = $211 << 24 >> 24;
                 $cmp273 = ($conv272|0)==(39);
                 if ($cmp273) {
                  $212 = $output_list;
                  _Lexer_push($212,1944);
                 } else {
                  $213 = $i;
                  $214 = $input_string$addr;
                  $arrayidx277 = (($214) + ($213)|0);
                  $215 = HEAP8[$arrayidx277>>0]|0;
                  $conv278 = $215 << 24 >> 24;
                  $cmp279 = ($conv278|0)==(96);
                  if ($cmp279) {
                   $216 = $output_list;
                   _Lexer_push($216,1952);
                  } else {
                   $217 = $i;
                   $218 = $input_string$addr;
                   $arrayidx283 = (($218) + ($217)|0);
                   $219 = HEAP8[$arrayidx283>>0]|0;
                   $conv284 = $219 << 24 >> 24;
                   $cmp285 = ($conv284|0)==(126);
                   if ($cmp285) {
                    $220 = $output_list;
                    _Lexer_push($220,1960);
                   } else {
                    $221 = $i;
                    $222 = $input_string$addr;
                    $arrayidx289 = (($222) + ($221)|0);
                    $223 = HEAP8[$arrayidx289>>0]|0;
                    $conv290 = $223 << 24 >> 24;
                    $cmp291 = ($conv290|0)==(59);
                    if ($cmp291) {
                     while(1) {
                      $224 = $i;
                      $225 = $string_length;
                      $cmp294 = ($224|0)!=($225|0);
                      if (!($cmp294)) {
                       break;
                      }
                      $226 = $i;
                      $227 = $input_string$addr;
                      $arrayidx296 = (($227) + ($226)|0);
                      $228 = HEAP8[$arrayidx296>>0]|0;
                      $conv297 = $228 << 24 >> 24;
                      $cmp298 = ($conv297|0)==(10);
                      if ($cmp298) {
                       label = 83;
                       break;
                      }
                      $229 = $i;
                      $inc302 = (($229) + 1)|0;
                      $i = $inc302;
                     }
                     if ((label|0) == 83) {
                      label = 0;
                     }
                    } else {
                     $230 = $i;
                     $231 = $input_string$addr;
                     $arrayidx304 = (($231) + ($230)|0);
                     $232 = HEAP8[$arrayidx304>>0]|0;
                     $conv305 = $232 << 24 >> 24;
                     $cmp306 = ($conv305|0)==(34);
                     if ($cmp306) {
                      $233 = $i;
                      $add309 = (($233) + 1)|0;
                      $a = $add309;
                      while(1) {
                       $234 = $a;
                       $235 = $string_length;
                       $cmp311 = ($234|0)!=($235|0);
                       if (!($cmp311)) {
                        break;
                       }
                       $236 = $a;
                       $237 = $input_string$addr;
                       $arrayidx314 = (($237) + ($236)|0);
                       $238 = HEAP8[$arrayidx314>>0]|0;
                       $conv315 = $238 << 24 >> 24;
                       $cmp316 = ($conv315|0)==(92);
                       if ($cmp316) {
                        $239 = $a;
                        $add319 = (($239) + 2)|0;
                        $a = $add319;
                        continue;
                       }
                       $240 = $a;
                       $241 = $input_string$addr;
                       $arrayidx321 = (($241) + ($240)|0);
                       $242 = HEAP8[$arrayidx321>>0]|0;
                       $conv322 = $242 << 24 >> 24;
                       $cmp323 = ($conv322|0)==(34);
                       if ($cmp323) {
                        label = 92;
                        break;
                       }
                       $243 = $a;
                       $inc327 = (($243) + 1)|0;
                       $a = $inc327;
                      }
                      if ((label|0) == 92) {
                       label = 0;
                      }
                      $244 = $input_string$addr;
                      $245 = $i;
                      $246 = $a;
                      $add329 = (($246) + 1)|0;
                      $call330 = (_string_slice($244,$245,$add329)|0);
                      $t = $call330;
                      $247 = $output_list;
                      $248 = $t;
                      _Lexer_push($247,$248);
                      $249 = $a;
                      $i = $249;
                      $250 = $t;
                      _free($250);
                     } else {
                      $251 = $input_string$addr;
                      $252 = $i;
                      $add332 = (($252) + 1)|0;
                      $253 = $string_length;
                      $call333 = (_lexer_getIndexOfValidStr($251,$add332,$253)|0);
                      $end = $call333;
                      $254 = $input_string$addr;
                      $255 = $i;
                      $256 = $end;
                      $call334 = (_string_slice($254,$255,$256)|0);
                      $t = $call334;
                      $257 = $output_list;
                      $258 = $t;
                      _Lexer_push($257,$258);
                      $259 = $end;
                      $sub335 = (($259) - 1)|0;
                      $i = $sub335;
                      $260 = $t;
                      _free($260);
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
              if ((label|0) == 69) {
               label = 0;
               $199 = $output_list;
               _Lexer_push($199,256);
               $200 = $paren_count;
               $dec256 = (($200) + -1)|0;
               $paren_count = $dec256;
              }
             }
            }
           }
           if ((label|0) == 22) {
            label = 0;
            $51 = $i;
            $cmp70 = ($51|0)!=(0);
            do {
             if ($cmp70) {
              $52 = $i;
              $sub = (($52) - 1)|0;
              $53 = $input_string$addr;
              $arrayidx73 = (($53) + ($sub)|0);
              $54 = HEAP8[$arrayidx73>>0]|0;
              $conv74 = $54 << 24 >> 24;
              $cmp75 = ($conv74|0)!=(32);
              if ($cmp75) {
               $55 = $i;
               $sub78 = (($55) - 1)|0;
               $56 = $input_string$addr;
               $arrayidx79 = (($56) + ($sub78)|0);
               $57 = HEAP8[$arrayidx79>>0]|0;
               $conv80 = $57 << 24 >> 24;
               $cmp81 = ($conv80|0)!=(10);
               if ($cmp81) {
                $58 = $i;
                $sub84 = (($58) - 1)|0;
                $59 = $input_string$addr;
                $arrayidx85 = (($59) + ($sub84)|0);
                $60 = HEAP8[$arrayidx85>>0]|0;
                $conv86 = $60 << 24 >> 24;
                $cmp87 = ($conv86|0)!=(9);
                if ($cmp87) {
                 $61 = $i;
                 $sub90 = (($61) - 1)|0;
                 $62 = $input_string$addr;
                 $arrayidx91 = (($62) + ($sub90)|0);
                 $63 = HEAP8[$arrayidx91>>0]|0;
                 $conv92 = $63 << 24 >> 24;
                 $cmp93 = ($conv92|0)!=(39);
                 if (!($cmp93)) {
                  label = 59;
                  break;
                 }
                 $64 = $i;
                 $sub96 = (($64) - 1)|0;
                 $65 = $input_string$addr;
                 $arrayidx97 = (($65) + ($sub96)|0);
                 $66 = HEAP8[$arrayidx97>>0]|0;
                 $conv98 = $66 << 24 >> 24;
                 $cmp99 = ($conv98|0)!=(96);
                 if (!($cmp99)) {
                  label = 59;
                  break;
                 }
                 $67 = $i;
                 $sub102 = (($67) - 1)|0;
                 $68 = $input_string$addr;
                 $arrayidx103 = (($68) + ($sub102)|0);
                 $69 = HEAP8[$arrayidx103>>0]|0;
                 $conv104 = $69 << 24 >> 24;
                 $cmp105 = ($conv104|0)!=(126);
                 if (!($cmp105)) {
                  label = 59;
                  break;
                 }
                 $70 = $i;
                 $sub108 = (($70) - 1)|0;
                 $71 = $input_string$addr;
                 $arrayidx109 = (($71) + ($sub108)|0);
                 $72 = HEAP8[$arrayidx109>>0]|0;
                 $conv110 = $72 << 24 >> 24;
                 $cmp111 = ($conv110|0)!=(40);
                 if (!($cmp111)) {
                  label = 59;
                  break;
                 }
                 $73 = $i;
                 $sub114 = (($73) - 1)|0;
                 $74 = $input_string$addr;
                 $arrayidx115 = (($74) + ($sub114)|0);
                 $75 = HEAP8[$arrayidx115>>0]|0;
                 $conv116 = $75 << 24 >> 24;
                 $cmp117 = ($conv116|0)!=(123);
                 if (!($cmp117)) {
                  label = 59;
                  break;
                 }
                 $76 = $i;
                 $sub120 = (($76) - 1)|0;
                 $77 = $input_string$addr;
                 $arrayidx121 = (($77) + ($sub120)|0);
                 $78 = HEAP8[$arrayidx121>>0]|0;
                 $conv122 = $78 << 24 >> 24;
                 $cmp123 = ($conv122|0)!=(91);
                 if (!($cmp123)) {
                  label = 59;
                  break;
                 }
                 $79 = $output_list;
                 $array_length = (($79) + 4|0);
                 $80 = HEAP32[$array_length>>2]|0;
                 $sub126 = (($80) - 1)|0;
                 $81 = $output_list;
                 $82 = HEAP32[$81>>2]|0;
                 $arrayidx127 = (($82) + ($sub126<<2)|0);
                 $83 = HEAP32[$arrayidx127>>2]|0;
                 $84 = HEAP8[$83>>0]|0;
                 $conv129 = $84 << 24 >> 24;
                 $cmp130 = ($conv129|0)!=(41);
                 if ($cmp130) {
                  $85 = $output_list;
                  $86 = $output_list;
                  $array_length133 = (($86) + 4|0);
                  $87 = HEAP32[$array_length133>>2]|0;
                  $sub134 = (($87) - 1)|0;
                  $88 = $output_list;
                  $89 = HEAP32[$88>>2]|0;
                  $arrayidx136 = (($89) + ($sub134<<2)|0);
                  $90 = HEAP32[$arrayidx136>>2]|0;
                  _Lexer_push($85,$90);
                  $91 = $i;
                  $92 = $input_string$addr;
                  $arrayidx137 = (($92) + ($91)|0);
                  $93 = HEAP8[$arrayidx137>>0]|0;
                  $conv138 = $93 << 24 >> 24;
                  $cmp139 = ($conv138|0)==(91);
                  do {
                   if ($cmp139) {
                    label = 35;
                   } else {
                    $94 = $i;
                    $95 = $input_string$addr;
                    $arrayidx142 = (($95) + ($94)|0);
                    $96 = HEAP8[$arrayidx142>>0]|0;
                    $conv143 = $96 << 24 >> 24;
                    $cmp144 = ($conv143|0)==(123);
                    if ($cmp144) {
                     label = 35;
                     break;
                    }
                    $101 = $output_list;
                    $102 = $output_list;
                    $array_length151 = (($102) + 4|0);
                    $103 = HEAP32[$array_length151>>2]|0;
                    $sub152 = (($103) - 2)|0;
                    _Lexer_set($101,$sub152,144);
                    $104 = $input_string$addr;
                    $105 = $i;
                    $add153 = (($105) + 1)|0;
                    $106 = $string_length;
                    $call154 = (_lexer_getIndexOfValidStr($104,$add153,$106)|0);
                    $end = $call154;
                    $107 = $input_string$addr;
                    $108 = $i;
                    $109 = $end;
                    $call155 = (_string_slice($107,$108,$109)|0);
                    $t = $call155;
                    $110 = $output_list;
                    $111 = $t;
                    _Lexer_push($110,$111);
                    $112 = $end;
                    $sub156 = (($112) - 1)|0;
                    $i = $sub156;
                    $113 = $t;
                    _free($113);
                    $114 = $output_list;
                    _Lexer_push($114,256);
                   }
                  } while(0);
                  if ((label|0) == 35) {
                   label = 0;
                   $97 = $output_list;
                   $98 = $output_list;
                   $array_length147 = (($98) + 4|0);
                   $99 = HEAP32[$array_length147>>2]|0;
                   $sub148 = (($99) - 2)|0;
                   _Lexer_set($97,$sub148,144);
                   $100 = $paren_count;
                   $inc149 = (($100) + 1)|0;
                   $paren_count = $inc149;
                  }
                 } else {
                  $count = 1;
                  $start_index = 0;
                  $115 = $output_list;
                  $array_length159 = (($115) + 4|0);
                  $116 = HEAP32[$array_length159>>2]|0;
                  $sub160 = (($116) - 2)|0;
                  $j = $sub160;
                  while(1) {
                   $117 = $j;
                   $cmp162 = ($117|0)>=(0);
                   if (!($cmp162)) {
                    break;
                   }
                   $118 = $j;
                   $119 = $output_list;
                   $120 = HEAP32[$119>>2]|0;
                   $arrayidx166 = (($120) + ($118<<2)|0);
                   $121 = HEAP32[$arrayidx166>>2]|0;
                   $122 = HEAP8[$121>>0]|0;
                   $conv168 = $122 << 24 >> 24;
                   $cmp169 = ($conv168|0)==(41);
                   if ($cmp169) {
                    $123 = $count;
                    $inc172 = (($123) + 1)|0;
                    $count = $inc172;
                   } else {
                    $124 = $j;
                    $125 = $output_list;
                    $126 = HEAP32[$125>>2]|0;
                    $arrayidx175 = (($126) + ($124<<2)|0);
                    $127 = HEAP32[$arrayidx175>>2]|0;
                    $128 = HEAP8[$127>>0]|0;
                    $conv177 = $128 << 24 >> 24;
                    $cmp178 = ($conv177|0)==(40);
                    if ($cmp178) {
                     $129 = $count;
                     $dec181 = (($129) + -1)|0;
                     $count = $dec181;
                     $130 = $count;
                     $cmp182 = ($130|0)==(0);
                     if ($cmp182) {
                      label = 44;
                      break;
                     }
                    }
                   }
                   $132 = $j;
                   $dec188 = (($132) + -1)|0;
                   $j = $dec188;
                  }
                  if ((label|0) == 44) {
                   label = 0;
                   $131 = $j;
                   $start_index = $131;
                  }
                  $133 = $output_list;
                  $134 = $output_list;
                  $array_length189 = (($134) + 4|0);
                  $135 = HEAP32[$array_length189>>2]|0;
                  $sub190 = (($135) - 1)|0;
                  $136 = $output_list;
                  $137 = HEAP32[$136>>2]|0;
                  $arrayidx192 = (($137) + ($sub190<<2)|0);
                  $138 = HEAP32[$arrayidx192>>2]|0;
                  _Lexer_push($133,$138);
                  $139 = $output_list;
                  $array_length193 = (($139) + 4|0);
                  $140 = HEAP32[$array_length193>>2]|0;
                  $sub194 = (($140) - 2)|0;
                  $j = $sub194;
                  while(1) {
                   $141 = $j;
                   $142 = $start_index;
                   $cmp196 = ($141|0)!=($142|0);
                   if (!($cmp196)) {
                    break;
                   }
                   $143 = $output_list;
                   $144 = $j;
                   $145 = $j;
                   $sub199 = (($145) - 1)|0;
                   $146 = $output_list;
                   $147 = HEAP32[$146>>2]|0;
                   $arrayidx201 = (($147) + ($sub199<<2)|0);
                   $148 = HEAP32[$arrayidx201>>2]|0;
                   _Lexer_set($143,$144,$148);
                   $149 = $j;
                   $dec203 = (($149) + -1)|0;
                   $j = $dec203;
                  }
                  $150 = $i;
                  $151 = $input_string$addr;
                  $arrayidx205 = (($151) + ($150)|0);
                  $152 = HEAP8[$arrayidx205>>0]|0;
                  $conv206 = $152 << 24 >> 24;
                  $cmp207 = ($conv206|0)==(91);
                  do {
                   if ($cmp207) {
                    label = 55;
                   } else {
                    $153 = $i;
                    $154 = $input_string$addr;
                    $arrayidx210 = (($154) + ($153)|0);
                    $155 = HEAP8[$arrayidx210>>0]|0;
                    $conv211 = $155 << 24 >> 24;
                    $cmp212 = ($conv211|0)==(123);
                    if ($cmp212) {
                     label = 55;
                     break;
                    }
                    $159 = $output_list;
                    $160 = $j;
                    _Lexer_set($159,$160,144);
                    $161 = $input_string$addr;
                    $162 = $i;
                    $add217 = (($162) + 1)|0;
                    $163 = $string_length;
                    $call218 = (_lexer_getIndexOfValidStr($161,$add217,$163)|0);
                    $end = $call218;
                    $164 = $input_string$addr;
                    $165 = $i;
                    $166 = $end;
                    $call219 = (_string_slice($164,$165,$166)|0);
                    $t = $call219;
                    $167 = $output_list;
                    $168 = $t;
                    _Lexer_push($167,$168);
                    $169 = $end;
                    $sub220 = (($169) - 1)|0;
                    $i = $sub220;
                    $170 = $t;
                    _free($170);
                    $171 = $output_list;
                    _Lexer_push($171,256);
                   }
                  } while(0);
                  if ((label|0) == 55) {
                   label = 0;
                   $156 = $output_list;
                   $157 = $j;
                   _Lexer_set($156,$157,144);
                   $158 = $paren_count;
                   $inc215 = (($158) + 1)|0;
                   $paren_count = $inc215;
                  }
                 }
                } else {
                 label = 59;
                }
               } else {
                label = 59;
               }
              } else {
               label = 59;
              }
             } else {
              label = 59;
             }
            } while(0);
            if ((label|0) == 59) {
             label = 0;
             $172 = $i;
             $173 = $input_string$addr;
             $arrayidx224 = (($173) + ($172)|0);
             $174 = HEAP8[$arrayidx224>>0]|0;
             $conv225 = $174 << 24 >> 24;
             $cmp226 = ($conv225|0)==(58);
             if ($cmp226) {
              $175 = $input_string$addr;
              $176 = $i;
              $add229 = (($176) + 1)|0;
              $177 = $string_length;
              $call230 = (_lexer_getIndexOfValidStr($175,$add229,$177)|0);
              $end = $call230;
              $178 = $input_string$addr;
              $179 = $i;
              $180 = $end;
              $call231 = (_string_slice($178,$179,$180)|0);
              $t = $call231;
              $181 = $output_list;
              $182 = $t;
              _Lexer_push($181,$182);
              $183 = $end;
              $sub232 = (($183) - 1)|0;
              $i = $sub232;
              $184 = $t;
              _free($184);
             } else {
              $185 = $i;
              $186 = $input_string$addr;
              $arrayidx234 = (($186) + ($185)|0);
              $187 = HEAP8[$arrayidx234>>0]|0;
              $conv235 = $187 << 24 >> 24;
              $cmp236 = ($conv235|0)==(91);
              if ($cmp236) {
               $188 = $output_list;
               _Lexer_push($188,144);
               $189 = $paren_count;
               $inc239 = (($189) + 1)|0;
               $paren_count = $inc239;
              } else {
               $190 = $output_list;
               _Lexer_push($190,144);
               $191 = $output_list;
               _Lexer_push($191,1928);
               $192 = $paren_count;
               $inc241 = (($192) + 1)|0;
               $paren_count = $inc241;
              }
             }
            }
           }
          }
          break;
         }
        }
       }
      }
      break L4;
     }
    } while(0);
    label = 107;
   }
  } while(0);
  if ((label|0) == 107) {
   label = 0;
  }
  $261 = $i;
  $inc349 = (($261) + 1)|0;
  $i = $inc349;
 }
 $262 = $paren_count;
 $cmp351 = ($262|0)!=(0);
 if ($cmp351) {
  $263 = $output_list;
  _Lexer_free($263);
  $retval = 0;
  $265 = $retval;
  STACKTOP = sp;return ($265|0);
 } else {
  $264 = $output_list;
  $retval = $264;
  $265 = $retval;
  STACKTOP = sp;return ($265|0);
 }
 return 0|0;
}
function _parser($le) {
 $le = $le|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add56 = 0, $add69 = 0, $add71 = 0;
 var $array_length = 0, $arrayidx = 0, $arrayidx101 = 0, $arrayidx102 = 0, $arrayidx107 = 0, $arrayidx11 = 0, $arrayidx111 = 0, $arrayidx116 = 0, $arrayidx120 = 0, $arrayidx124 = 0, $arrayidx125 = 0, $arrayidx137 = 0, $arrayidx143 = 0, $arrayidx149 = 0, $arrayidx15 = 0, $arrayidx155 = 0, $arrayidx161 = 0, $arrayidx20 = 0, $arrayidx25 = 0, $arrayidx30 = 0;
 var $arrayidx49 = 0, $arrayidx5 = 0, $arrayidx54 = 0, $arrayidx60 = 0, $arrayidx65 = 0, $arrayidx66 = 0, $arrayidx67 = 0, $arrayidx68 = 0, $arrayidx70 = 0, $arrayidx75 = 0, $arrayidx81 = 0, $arrayidx82 = 0, $arrayidx87 = 0, $arrayidx90 = 0, $arrayidx95 = 0, $call = 0, $call117 = 0, $call12 = 0, $call121 = 0.0, $call122 = 0;
 var $call126 = 0, $call138 = 0, $call144 = 0, $call150 = 0, $call156 = 0, $call16 = 0, $call162 = 0, $call163 = 0, $call164 = 0, $call165 = 0, $call168 = 0, $call21 = 0, $call26 = 0, $call31 = 0, $call32 = 0, $call33 = 0, $call34 = 0, $call39 = 0, $call4 = 0, $call55 = 0;
 var $call57 = 0, $call6 = 0, $call61 = 0, $call83 = 0, $call88 = 0, $call91 = 0, $cdr = 0, $cdr45 = 0, $cmp = 0, $cmp1 = 0, $cmp104 = 0, $cmp13 = 0, $cmp133 = 0, $cmp139 = 0, $cmp145 = 0, $cmp151 = 0, $cmp157 = 0, $cmp17 = 0, $cmp2 = 0, $cmp22 = 0;
 var $cmp27 = 0, $cmp51 = 0, $cmp62 = 0, $cmp7 = 0, $cmp78 = 0, $cmp9 = 0, $cmp92 = 0, $cmp98 = 0, $conv = 0, $conv103 = 0, $conv77 = 0, $conv97 = 0, $current_list_pointer = 0, $data = 0, $data36 = 0, $data41 = 0, $data43 = 0, $dec = 0, $dec166 = 0, $dec173 = 0;
 var $i = 0, $inc = 0, $j = 0, $l = 0, $le$addr = 0, $length = 0, $lists = 0, $mul = 0, $retval = 0, $sub = 0, $sub10 = 0, $sub136 = 0, $sub14 = 0, $sub142 = 0, $sub148 = 0, $sub154 = 0, $sub160 = 0, $sub19 = 0, $sub24 = 0, $sub29 = 0;
 var $sub47 = 0, $t = 0, $temp = 0, $tobool = 0, $tobool118 = 0, $use_count = 0, $use_count46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp + 8|0;
 $le$addr = $le;
 $0 = $le$addr;
 $cmp = ($0|0)==(0|0);
 if ($cmp) {
  $1 = HEAP32[40>>2]|0;
  $retval = $1;
  $155 = $retval;
  STACKTOP = sp;return ($155|0);
 }
 $2 = $le$addr;
 $3 = HEAP32[$2>>2]|0;
 $l = $3;
 $4 = $le$addr;
 $array_length = (($4) + 4|0);
 $5 = HEAP32[$array_length>>2]|0;
 $length = $5;
 $6 = HEAP32[40>>2]|0;
 $current_list_pointer = $6;
 $7 = HEAP32[40>>2]|0;
 $lists = $7;
 $temp = 0;
 HEAP32[$t>>2] = 0;
 $8 = $length;
 $sub = (($8) - 1)|0;
 $i = $sub;
 while(1) {
  $9 = $i;
  $cmp1 = ($9|0)>=(0);
  if (!($cmp1)) {
   break;
  }
  $10 = $i;
  $11 = $l;
  $arrayidx = (($11) + ($10<<2)|0);
  $12 = HEAP32[$arrayidx>>2]|0;
  $call = (_strcmp($12,256)|0);
  $cmp2 = ($call|0)==(0);
  if ($cmp2) {
   $13 = $current_list_pointer;
   $14 = $lists;
   $call4 = (_cons($13,$14)|0);
   $lists = $call4;
   $15 = HEAP32[40>>2]|0;
   $current_list_pointer = $15;
  } else {
   $16 = $i;
   $17 = $l;
   $arrayidx5 = (($17) + ($16<<2)|0);
   $18 = HEAP32[$arrayidx5>>2]|0;
   $call6 = (_strcmp($18,144)|0);
   $cmp7 = ($call6|0)==(0);
   if ($cmp7) {
    $19 = $i;
    $cmp9 = ($19|0)!=(0);
    do {
     if ($cmp9) {
      $20 = $i;
      $sub10 = (($20) - 1)|0;
      $21 = $l;
      $arrayidx11 = (($21) + ($sub10<<2)|0);
      $22 = HEAP32[$arrayidx11>>2]|0;
      $call12 = (_strcmp($22,1936)|0);
      $cmp13 = ($call12|0)==(0);
      if (!($cmp13)) {
       $23 = $i;
       $sub14 = (($23) - 1)|0;
       $24 = $l;
       $arrayidx15 = (($24) + ($sub14<<2)|0);
       $25 = HEAP32[$arrayidx15>>2]|0;
       $call16 = (_strcmp($25,1944)|0);
       $cmp17 = ($call16|0)==(0);
       if (!($cmp17)) {
        $26 = $i;
        $sub19 = (($26) - 1)|0;
        $27 = $l;
        $arrayidx20 = (($27) + ($sub19<<2)|0);
        $28 = HEAP32[$arrayidx20>>2]|0;
        $call21 = (_strcmp($28,1960)|0);
        $cmp22 = ($call21|0)==(0);
        if (!($cmp22)) {
         $29 = $i;
         $sub24 = (($29) - 1)|0;
         $30 = $l;
         $arrayidx25 = (($30) + ($sub24<<2)|0);
         $31 = HEAP32[$arrayidx25>>2]|0;
         $call26 = (_strcmp($31,1952)|0);
         $cmp27 = ($call26|0)==(0);
         if (!($cmp27)) {
          label = 14;
          break;
         }
        }
       }
      }
      $32 = $i;
      $sub29 = (($32) - 1)|0;
      $33 = $l;
      $arrayidx30 = (($33) + ($sub29<<2)|0);
      $34 = HEAP32[$arrayidx30>>2]|0;
      $call31 = (_parser_get_tag($34)|0);
      $35 = $current_list_pointer;
      $36 = HEAP32[40>>2]|0;
      $call32 = (_cons($35,$36)|0);
      $call33 = (_cons($call31,$call32)|0);
      $37 = $lists;
      $data = (($37) + 8|0);
      $38 = HEAP32[$data>>2]|0;
      $call34 = (_cons($call33,$38)|0);
      $current_list_pointer = $call34;
      $39 = $i;
      $dec = (($39) + -1)|0;
      $i = $dec;
     } else {
      label = 14;
     }
    } while(0);
    if ((label|0) == 14) {
     label = 0;
     $40 = $current_list_pointer;
     $41 = $lists;
     $data36 = (($41) + 8|0);
     $42 = HEAP32[$data36>>2]|0;
     $call39 = (_cons($40,$42)|0);
     $current_list_pointer = $call39;
    }
    $43 = $lists;
    $temp = $43;
    $44 = $lists;
    $data41 = (($44) + 8|0);
    $cdr = (($data41) + 4|0);
    $45 = HEAP32[$cdr>>2]|0;
    $use_count = (($45) + 4|0);
    $46 = HEAP32[$use_count>>2]|0;
    $add = (($46) + 1)|0;
    HEAP32[$use_count>>2] = $add;
    $47 = $lists;
    $data43 = (($47) + 8|0);
    $cdr45 = (($data43) + 4|0);
    $48 = HEAP32[$cdr45>>2]|0;
    $lists = $48;
    $49 = $temp;
    _Object_free($49);
    $50 = $lists;
    $use_count46 = (($50) + 4|0);
    $51 = HEAP32[$use_count46>>2]|0;
    $sub47 = (($51) - 1)|0;
    HEAP32[$use_count46>>2] = $sub47;
   } else {
    $temp = 0;
    $52 = $i;
    $53 = $l;
    $arrayidx49 = (($53) + ($52<<2)|0);
    $54 = HEAP32[$arrayidx49>>2]|0;
    $55 = HEAP8[$54>>0]|0;
    $conv = $55 << 24 >> 24;
    $cmp51 = ($conv|0)==(58);
    if ($cmp51) {
     $56 = $i;
     $57 = $l;
     $arrayidx54 = (($57) + ($56<<2)|0);
     $58 = HEAP32[$arrayidx54>>2]|0;
     $call55 = (_strlen(($58|0))|0);
     $mul = $call55;
     $add56 = (($mul) + 2)|0;
     $call57 = (_malloc($add56)|0);
     HEAP32[$t>>2] = $call57;
     $59 = HEAP32[$t>>2]|0;
     HEAP8[$59>>0] = 34;
     $j = 1;
     while(1) {
      $60 = $j;
      $61 = $i;
      $62 = $l;
      $arrayidx60 = (($62) + ($61<<2)|0);
      $63 = HEAP32[$arrayidx60>>2]|0;
      $call61 = (_strlen(($63|0))|0);
      $cmp62 = ($60>>>0)<($call61>>>0);
      if (!($cmp62)) {
       break;
      }
      $64 = $j;
      $65 = $i;
      $66 = $l;
      $arrayidx65 = (($66) + ($65<<2)|0);
      $67 = HEAP32[$arrayidx65>>2]|0;
      $arrayidx66 = (($67) + ($64)|0);
      $68 = HEAP8[$arrayidx66>>0]|0;
      $69 = $j;
      $70 = HEAP32[$t>>2]|0;
      $arrayidx67 = (($70) + ($69)|0);
      HEAP8[$arrayidx67>>0] = $68;
      $71 = $j;
      $inc = (($71) + 1)|0;
      $j = $inc;
     }
     $72 = $j;
     $73 = HEAP32[$t>>2]|0;
     $arrayidx68 = (($73) + ($72)|0);
     HEAP8[$arrayidx68>>0] = 34;
     $74 = $j;
     $add69 = (($74) + 1)|0;
     $75 = HEAP32[$t>>2]|0;
     $arrayidx70 = (($75) + ($add69)|0);
     HEAP8[$arrayidx70>>0] = 0;
     $76 = HEAP32[$t>>2]|0;
     $77 = $j;
     $add71 = (($77) + 1)|0;
     $78 = (_Object_initString($76,$add71,0)|0);
     $temp = $78;
     $79 = HEAP32[$t>>2]|0;
     _free($79);
    } else {
     $80 = $i;
     $81 = $l;
     $arrayidx75 = (($81) + ($80<<2)|0);
     $82 = HEAP32[$arrayidx75>>2]|0;
     $83 = HEAP8[$82>>0]|0;
     $conv77 = $83 << 24 >> 24;
     $cmp78 = ($conv77|0)==(34);
     if ($cmp78) {
      $84 = $i;
      $85 = $l;
      $arrayidx81 = (($85) + ($84<<2)|0);
      $86 = HEAP32[$arrayidx81>>2]|0;
      $87 = $i;
      $88 = $l;
      $arrayidx82 = (($88) + ($87<<2)|0);
      $89 = HEAP32[$arrayidx82>>2]|0;
      $call83 = (_strlen(($89|0))|0);
      $90 = (_Object_initString($86,$call83,0)|0);
      $temp = $90;
     } else {
      $91 = $i;
      $92 = $l;
      $arrayidx87 = (($92) + ($91<<2)|0);
      $93 = HEAP32[$arrayidx87>>2]|0;
      $call88 = (_isInteger($93)|0);
      $tobool = ($call88|0)!=(0);
      if ($tobool) {
       $94 = $i;
       $95 = $l;
       $arrayidx90 = (($95) + ($94<<2)|0);
       $96 = HEAP32[$arrayidx90>>2]|0;
       $call91 = (_strlen(($96|0))|0);
       $cmp92 = ($call91>>>0)>=(3);
       if ($cmp92) {
        $97 = $i;
        $98 = $l;
        $arrayidx95 = (($98) + ($97<<2)|0);
        $99 = HEAP32[$arrayidx95>>2]|0;
        $100 = HEAP8[$99>>0]|0;
        $conv97 = $100 << 24 >> 24;
        $cmp98 = ($conv97|0)==(48);
        if ($cmp98) {
         $101 = $i;
         $102 = $l;
         $arrayidx101 = (($102) + ($101<<2)|0);
         $103 = HEAP32[$arrayidx101>>2]|0;
         $arrayidx102 = (($103) + 1|0);
         $104 = HEAP8[$arrayidx102>>0]|0;
         $conv103 = $104 << 24 >> 24;
         $cmp104 = ($conv103|0)==(120);
         if ($cmp104) {
          $105 = $i;
          $106 = $l;
          $arrayidx107 = (($106) + ($105<<2)|0);
          $107 = HEAP32[$arrayidx107>>2]|0;
          $108 = (_strtoull($107,$t,16)|0);
          $109 = tempRet0;
          $110 = (_Object_initInteger($108,$109)|0);
          $temp = $110;
         } else {
          label = 29;
         }
        } else {
         label = 29;
        }
       } else {
        label = 29;
       }
       if ((label|0) == 29) {
        label = 0;
        $111 = $i;
        $112 = $l;
        $arrayidx111 = (($112) + ($111<<2)|0);
        $113 = HEAP32[$arrayidx111>>2]|0;
        $114 = (_strtoull($113,$t,10)|0);
        $115 = tempRet0;
        $116 = (_Object_initInteger($114,$115)|0);
        $temp = $116;
       }
      } else {
       $117 = $i;
       $118 = $l;
       $arrayidx116 = (($118) + ($117<<2)|0);
       $119 = HEAP32[$arrayidx116>>2]|0;
       $call117 = (_isDouble($119)|0);
       $tobool118 = ($call117|0)!=(0);
       if ($tobool118) {
        $120 = $i;
        $121 = $l;
        $arrayidx120 = (($121) + ($120<<2)|0);
        $122 = HEAP32[$arrayidx120>>2]|0;
        $call121 = (+_strtod($122,$t));
        $call122 = (_Object_initDouble($call121)|0);
        $temp = $call122;
       } else {
        $123 = $i;
        $124 = $l;
        $arrayidx124 = (($124) + ($123<<2)|0);
        $125 = HEAP32[$arrayidx124>>2]|0;
        $126 = $i;
        $127 = $l;
        $arrayidx125 = (($127) + ($126<<2)|0);
        $128 = HEAP32[$arrayidx125>>2]|0;
        $call126 = (_strlen(($128|0))|0);
        $129 = (_Object_initString($125,$call126,0)|0);
        $temp = $129;
       }
      }
     }
    }
    $130 = $i;
    $cmp133 = ($130|0)!=(0);
    do {
     if ($cmp133) {
      $131 = $i;
      $sub136 = (($131) - 1)|0;
      $132 = $l;
      $arrayidx137 = (($132) + ($sub136<<2)|0);
      $133 = HEAP32[$arrayidx137>>2]|0;
      $call138 = (_strcmp($133,1936)|0);
      $cmp139 = ($call138|0)==(0);
      if (!($cmp139)) {
       $134 = $i;
       $sub142 = (($134) - 1)|0;
       $135 = $l;
       $arrayidx143 = (($135) + ($sub142<<2)|0);
       $136 = HEAP32[$arrayidx143>>2]|0;
       $call144 = (_strcmp($136,1944)|0);
       $cmp145 = ($call144|0)==(0);
       if (!($cmp145)) {
        $137 = $i;
        $sub148 = (($137) - 1)|0;
        $138 = $l;
        $arrayidx149 = (($138) + ($sub148<<2)|0);
        $139 = HEAP32[$arrayidx149>>2]|0;
        $call150 = (_strcmp($139,1960)|0);
        $cmp151 = ($call150|0)==(0);
        if (!($cmp151)) {
         $140 = $i;
         $sub154 = (($140) - 1)|0;
         $141 = $l;
         $arrayidx155 = (($141) + ($sub154<<2)|0);
         $142 = HEAP32[$arrayidx155>>2]|0;
         $call156 = (_strcmp($142,1952)|0);
         $cmp157 = ($call156|0)==(0);
         if (!($cmp157)) {
          label = 43;
          break;
         }
        }
       }
      }
      $143 = $i;
      $sub160 = (($143) - 1)|0;
      $144 = $l;
      $arrayidx161 = (($144) + ($sub160<<2)|0);
      $145 = HEAP32[$arrayidx161>>2]|0;
      $call162 = (_parser_get_tag($145)|0);
      $146 = $temp;
      $147 = HEAP32[40>>2]|0;
      $call163 = (_cons($146,$147)|0);
      $call164 = (_cons($call162,$call163)|0);
      $148 = $current_list_pointer;
      $call165 = (_cons($call164,$148)|0);
      $current_list_pointer = $call165;
      $149 = $i;
      $dec166 = (($149) + -1)|0;
      $i = $dec166;
     } else {
      label = 43;
     }
    } while(0);
    if ((label|0) == 43) {
     label = 0;
     $150 = $temp;
     $151 = $current_list_pointer;
     $call168 = (_cons($150,$151)|0);
     $current_list_pointer = $call168;
    }
   }
  }
  $152 = $i;
  $dec173 = (($152) + -1)|0;
  $i = $dec173;
 }
 $153 = $le$addr;
 _Lexer_free($153);
 $154 = $current_list_pointer;
 $retval = $154;
 $155 = $retval;
 STACKTOP = sp;return ($155|0);
}
function _builtin_random($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0.0, $call = 0, $call1 = 0, $conv = 0.0, $div = 0.0, $param_num$addr = 0, $params$addr = 0, $r = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $call = (_rand()|0);
 $conv = (+($call|0));
 $r = $conv;
 $0 = $r;
 $div = $0 / 2147483647.0;
 $call1 = (_Object_initDouble($div)|0);
 STACKTOP = sp;return ($call1|0);
}
function _builtin_strcmp($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0, $call = 0, $data = 0, $data2 = 0, $i = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = HEAP32[$data>>2]|0;
 $3 = $params$addr;
 $arrayidx1 = (($3) + 4|0);
 $4 = HEAP32[$arrayidx1>>2]|0;
 $data2 = (($4) + 8|0);
 $5 = HEAP32[$data2>>2]|0;
 $call = (_strcmp($2,$5)|0);
 $i = $call;
 $6 = $i;
 $7 = ($6|0)<(0);
 $8 = $7 << 31 >> 31;
 $9 = (_Object_initInteger($6,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _builtin_string_slice($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $arrayidx1 = 0, $arrayidx12 = 0, $arrayidx13 = 0, $arrayidx14 = 0, $arrayidx4 = 0, $call = 0, $data = 0, $data2 = 0, $data5 = 0;
 var $end = 0, $i = 0, $inc = 0, $length = 0, $out = 0, $param_num$addr = 0, $params$addr = 0, $s = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $start = sp + 16|0;
 $end = sp + 8|0;
 $length = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = HEAP32[$data>>2]|0;
 $s = $2;
 $3 = $params$addr;
 $arrayidx1 = (($3) + 4|0);
 $4 = HEAP32[$arrayidx1>>2]|0;
 $data2 = (($4) + 8|0);
 $5 = $data2;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $start;
 $12 = $11;
 HEAP32[$12>>2] = $7;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $15 = $params$addr;
 $arrayidx4 = (($15) + 8|0);
 $16 = HEAP32[$arrayidx4>>2]|0;
 $data5 = (($16) + 8|0);
 $17 = $data5;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = $end;
 $24 = $23;
 HEAP32[$24>>2] = $19;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $22;
 $27 = $end;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = $start;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (_i64Subtract(($29|0),($32|0),($35|0),($38|0))|0);
 $40 = tempRet0;
 $41 = $length;
 $42 = $41;
 HEAP32[$42>>2] = $39;
 $43 = (($41) + 4)|0;
 $44 = $43;
 HEAP32[$44>>2] = $40;
 $45 = $length;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (($45) + 4)|0;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = (_i64Add(($47|0),($50|0),1,0)|0);
 $52 = tempRet0;
 $53 = (___muldi3(1,0,($51|0),($52|0))|0);
 $54 = tempRet0;
 $call = (_malloc($53)|0);
 $out = $call;
 $i = 0;
 while(1) {
  $55 = $i;
  $56 = $length;
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  $59 = (($56) + 4)|0;
  $60 = $59;
  $61 = HEAP32[$60>>2]|0;
  $62 = (0)<($61|0);
  $63 = (0)==($61|0);
  $64 = ($55>>>0)<($58>>>0);
  $65 = $63 & $64;
  $66 = $62 | $65;
  if (!($66)) {
   break;
  }
  $67 = $i;
  $68 = $start;
  $69 = $68;
  $70 = HEAP32[$69>>2]|0;
  $71 = (($68) + 4)|0;
  $72 = $71;
  $73 = HEAP32[$72>>2]|0;
  $74 = (_i64Add(($67|0),0,($70|0),($73|0))|0);
  $75 = tempRet0;
  $76 = $s;
  $arrayidx12 = (($76) + ($74)|0);
  $77 = HEAP8[$arrayidx12>>0]|0;
  $78 = $i;
  $79 = $out;
  $arrayidx13 = (($79) + ($78)|0);
  HEAP8[$arrayidx13>>0] = $77;
  $80 = $i;
  $inc = (($80) + 1)|0;
  $i = $inc;
 }
 $81 = $i;
 $82 = $out;
 $arrayidx14 = (($82) + ($81)|0);
 HEAP8[$arrayidx14>>0] = 0;
 $83 = $out;
 $84 = $length;
 $85 = $84;
 $86 = HEAP32[$85>>2]|0;
 $87 = (($84) + 4)|0;
 $88 = $87;
 $89 = HEAP32[$88>>2]|0;
 $90 = (_Object_initString($83,$86,$89)|0);
 STACKTOP = sp;return ($90|0);
}
function _builtin_string_length($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $data = 0, $length = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $length = (($data) + 8|0);
 $2 = $length;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (_Object_initInteger($4,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _builtin_string_append($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0, $call = 0, $data = 0, $data2 = 0, $data6 = 0, $data9 = 0, $length = 0, $length4 = 0;
 var $out_ = 0, $param_num$addr = 0, $params$addr = 0, $s1 = 0, $s2 = 0, $sum_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sum_length = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $s1 = $1;
 $2 = $params$addr;
 $arrayidx1 = (($2) + 4|0);
 $3 = HEAP32[$arrayidx1>>2]|0;
 $s2 = $3;
 $4 = $s1;
 $data = (($4) + 8|0);
 $length = (($data) + 8|0);
 $5 = $length;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $s2;
 $data2 = (($11) + 8|0);
 $length4 = (($data2) + 8|0);
 $12 = $length4;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (_i64Add(($7|0),($10|0),($14|0),($17|0))|0);
 $19 = tempRet0;
 $20 = (_i64Add(($18|0),($19|0),1,0)|0);
 $21 = tempRet0;
 $22 = $sum_length;
 $23 = $22;
 HEAP32[$23>>2] = $20;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $21;
 $26 = $sum_length;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (___muldi3(1,0,($28|0),($31|0))|0);
 $33 = tempRet0;
 $call = (_malloc($32)|0);
 $out_ = $call;
 $34 = $out_;
 $35 = $s1;
 $data6 = (($35) + 8|0);
 $36 = HEAP32[$data6>>2]|0;
 (_strcpy(($34|0),($36|0))|0);
 $37 = $out_;
 $38 = $s2;
 $data9 = (($38) + 8|0);
 $39 = HEAP32[$data9>>2]|0;
 (_strcat(($37|0),($39|0))|0);
 $40 = $out_;
 $41 = $sum_length;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (($41) + 4)|0;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (_i64Subtract(($43|0),($46|0),1,0)|0);
 $48 = tempRet0;
 $49 = (_Object_initString($40,$47,$48)|0);
 $s1 = $49;
 $50 = $out_;
 _free($50);
 $51 = $s1;
 STACKTOP = sp;return ($51|0);
}
function _builtin_make_table($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add5 = 0, $arrayidx = 0, $arrayidx4 = 0;
 var $cmp = 0, $cmp2 = 0, $cond = 0.0, $conv = 0.0, $div = 0.0, $i = 0, $param_num$addr = 0, $params$addr = 0, $table = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $param_num$addr;
 $cmp = ($0|0)==(0);
 if ($cmp) {
  $cond = 16.0;
 } else {
  $1 = $param_num$addr;
  $conv = (+($1|0));
  $div = $conv / 0.599999999999999977796;
  $cond = $div;
 }
 $2 = (~~$cond)>>>0;
 $3 = +Math_abs($cond) >= 1.0 ? $cond > 0.0 ? (Math_min(+Math_floor($cond / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($cond - +(~~$cond >>> 0)) / 4294967296.0) >>> 0 : 0;
 $4 = (_Object_initTable($2,$3)|0);
 $table = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $param_num$addr;
  $cmp2 = ($5>>>0)<($6>>>0);
  if (!($cmp2)) {
   break;
  }
  $7 = $table;
  $8 = $i;
  $9 = $params$addr;
  $arrayidx = (($9) + ($8<<2)|0);
  $10 = HEAP32[$arrayidx>>2]|0;
  $11 = $i;
  $add = (($11) + 1)|0;
  $12 = $params$addr;
  $arrayidx4 = (($12) + ($add<<2)|0);
  $13 = HEAP32[$arrayidx4>>2]|0;
  _Table_setval($7,$10,$13);
  $14 = $i;
  $add5 = (($14) + 2)|0;
  $i = $add5;
 }
 $15 = $table;
 STACKTOP = sp;return ($15|0);
}
function _builtin_table_keys($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $param_num$addr = 0, $params$addr = 0, $table = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $table = $1;
 $2 = $table;
 $call = (_table_getKeys($2)|0);
 STACKTOP = sp;return ($call|0);
}
function _builtin_table_delete($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0, $arrayidx5 = 0, $call15 = 0, $cmp = 0, $cmp16 = 0, $cmp7 = 0, $data = 0, $data12 = 0, $data2 = 0, $data3 = 0, $data8 = 0;
 var $dec = 0, $hash_value = 0, $key = 0, $next = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $table = 0, $table_pairs = 0, $use_count = 0, $value = 0, $value17 = 0, $value18 = 0, $vec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $hash_value = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $table = $1;
 $2 = $params$addr;
 $arrayidx1 = (($2) + 4|0);
 $3 = HEAP32[$arrayidx1>>2]|0;
 $key = $3;
 $4 = $key;
 $data = (($4) + 8|0);
 $5 = HEAP32[$data>>2]|0;
 $6 = $table;
 $data2 = (($6) + 8|0);
 $7 = $data2;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (_hash($5,$9,$12)|0);
 $14 = tempRet0;
 $15 = $hash_value;
 $16 = $15;
 HEAP32[$16>>2] = $13;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $14;
 $19 = $hash_value;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = $table;
 $data3 = (($25) + 8|0);
 $vec = (($data3) + 16|0);
 $26 = HEAP32[$vec>>2]|0;
 $arrayidx5 = (($26) + ($21<<2)|0);
 $27 = HEAP32[$arrayidx5>>2]|0;
 $table_pairs = $27;
 while(1) {
  $28 = $table_pairs;
  $cmp = ($28|0)!=(0|0);
  if (!($cmp)) {
   label = 7;
   break;
  }
  $29 = $table_pairs;
  $30 = HEAP32[$29>>2]|0;
  $31 = $key;
  $cmp7 = ($30|0)==($31|0);
  if ($cmp7) {
   label = 5;
   break;
  }
  $32 = $key;
  $data8 = (($32) + 8|0);
  $33 = HEAP32[$data8>>2]|0;
  $34 = $table_pairs;
  $35 = HEAP32[$34>>2]|0;
  $data12 = (($35) + 8|0);
  $36 = HEAP32[$data12>>2]|0;
  $call15 = (_strcmp($33,$36)|0);
  $cmp16 = ($call15|0)==(0);
  if ($cmp16) {
   label = 5;
   break;
  }
  $45 = $table_pairs;
  $next = (($45) + 8|0);
  $46 = HEAP32[$next>>2]|0;
  $table_pairs = $46;
 }
 if ((label|0) == 5) {
  $37 = $table_pairs;
  $value = (($37) + 4|0);
  $38 = HEAP32[$value>>2]|0;
  $use_count = (($38) + 4|0);
  $39 = HEAP32[$use_count>>2]|0;
  $dec = (($39) + -1)|0;
  HEAP32[$use_count>>2] = $dec;
  $40 = $table_pairs;
  $value17 = (($40) + 4|0);
  $41 = HEAP32[$value17>>2]|0;
  _Object_free($41);
  $42 = HEAP32[40>>2]|0;
  $43 = $table_pairs;
  $value18 = (($43) + 4|0);
  HEAP32[$value18>>2] = $42;
  $44 = HEAP32[584>>2]|0;
  $retval = $44;
  $48 = $retval;
  STACKTOP = sp;return ($48|0);
 }
 else if ((label|0) == 7) {
  $47 = HEAP32[40>>2]|0;
  $retval = $47;
  $48 = $retval;
  STACKTOP = sp;return ($48|0);
 }
 return 0|0;
}
function _builtin_file_read($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call1 = 0;
 var $call3 = 0, $cmp = 0, $content = 0, $data = 0, $file = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = HEAP32[$data>>2]|0;
 $file = $2;
 $3 = $file;
 $cmp = ($3|0)==(0|0);
 if ($cmp) {
  $4 = HEAP32[40>>2]|0;
  $retval = $4;
  $38 = $retval;
  STACKTOP = sp;return ($38|0);
 } else {
  $5 = $file;
  (_fseek(($5|0),0,2)|0);
  $6 = $file;
  $call1 = (_ftell(($6|0))|0);
  $7 = ($call1|0)<(0);
  $8 = $7 << 31 >> 31;
  $9 = $size;
  $10 = $9;
  HEAP32[$10>>2] = $call1;
  $11 = (($9) + 4)|0;
  $12 = $11;
  HEAP32[$12>>2] = $8;
  $13 = $file;
  _rewind(($13|0));
  $14 = $size;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (_i64Add(($16|0),($19|0),1,0)|0);
  $21 = tempRet0;
  $call3 = (_calloc($20,1)|0);
  $content = $call3;
  $22 = $content;
  $23 = $size;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = $file;
  (_fread(($22|0),1,($25|0),($29|0))|0);
  $30 = $content;
  $31 = $size;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($31) + 4)|0;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = (_Object_initString($30,$33,$36)|0);
  $retval = $37;
  $38 = $retval;
  STACKTOP = sp;return ($38|0);
 }
 return 0|0;
}
function _builtin_file_write($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx1 = 0, $data = 0, $data2 = 0, $file = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = HEAP32[$data>>2]|0;
 $file = $2;
 $3 = $params$addr;
 $arrayidx1 = (($3) + 4|0);
 $4 = HEAP32[$arrayidx1>>2]|0;
 $data2 = (($4) + 8|0);
 $5 = HEAP32[$data2>>2]|0;
 $6 = $file;
 (_fputs(($5|0),($6|0))|0);
 $7 = HEAP32[40>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function _builtin_int_to_string($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $add20 = 0, $arrayidx9 = 0, $b = 0, $call19 = 0, $call2 = 0, $call22 = 0, $call25 = 0, $call3 = 0, $call6 = 0, $d = 0, $data = 0, $data10 = 0, $data14 = 0, $mul = 0, $mul21 = 0, $o = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $b = sp + 44|0;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $param_num$addr;
 if ((($0|0) == 2)) {
  $17 = $params$addr;
  $arrayidx9 = (($17) + 4|0);
  $18 = HEAP32[$arrayidx9>>2]|0;
  $data10 = (($18) + 8|0);
  $19 = HEAP32[$data10>>2]|0;
  $d = $19;
  $20 = $d;
  $21 = $params$addr;
  $22 = HEAP32[$21>>2]|0;
  $data14 = (($22) + 8|0);
  $23 = $data14;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = $vararg_buffer1;
  $30 = $29;
  HEAP32[$30>>2] = $25;
  $31 = (($29) + 4)|0;
  $32 = $31;
  HEAP32[$32>>2] = $28;
  (_sprintf($b,$20,$vararg_buffer1)|0);
  $call19 = (_strlen(($b|0))|0);
  $add20 = (($call19) + 1)|0;
  $mul21 = $add20;
  $call22 = (_malloc($mul21)|0);
  $o = $call22;
  $33 = $o;
  (_strcpy(($33|0),($b|0))|0);
  $34 = $o;
  $35 = $o;
  $call25 = (_strlen(($35|0))|0);
  $36 = (_Object_initString($34,$call25,0)|0);
  $retval = $36;
  $38 = $retval;
  STACKTOP = sp;return ($38|0);
 } else if ((($0|0) == 1)) {
  $1 = $params$addr;
  $2 = HEAP32[$1>>2]|0;
  $data = (($2) + 8|0);
  $3 = $data;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = $vararg_buffer;
  $10 = $9;
  HEAP32[$10>>2] = $5;
  $11 = (($9) + 4)|0;
  $12 = $11;
  HEAP32[$12>>2] = $8;
  (_sprintf($b,56,$vararg_buffer)|0);
  $call2 = (_strlen(($b|0))|0);
  $add = (($call2) + 1)|0;
  $mul = $add;
  $call3 = (_malloc($mul)|0);
  $o = $call3;
  $13 = $o;
  (_strcpy(($13|0),($b|0))|0);
  $14 = $o;
  $15 = $o;
  $call6 = (_strlen(($15|0))|0);
  $16 = (_Object_initString($14,$call6,0)|0);
  $retval = $16;
  $38 = $retval;
  STACKTOP = sp;return ($38|0);
 } else {
  (_printf((712|0),($vararg_buffer4|0))|0);
  $37 = HEAP32[40>>2]|0;
  $retval = $37;
  $38 = $retval;
  STACKTOP = sp;return ($38|0);
 }
 return 0|0;
}
function _builtin_float_to_string($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add = 0, $add20 = 0, $arrayidx9 = 0, $b = 0, $call19 = 0, $call2 = 0, $call22 = 0, $call25 = 0, $call3 = 0, $call6 = 0, $d = 0, $data = 0, $data10 = 0, $data14 = 0, $mul = 0, $mul21 = 0, $o = 0, $param_num$addr = 0, $params$addr = 0;
 var $retval = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $b = sp + 44|0;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $param_num$addr;
 if ((($0|0) == 2)) {
  $8 = $params$addr;
  $arrayidx9 = (($8) + 4|0);
  $9 = HEAP32[$arrayidx9>>2]|0;
  $data10 = (($9) + 8|0);
  $10 = HEAP32[$data10>>2]|0;
  $d = $10;
  $11 = $d;
  $12 = $params$addr;
  $13 = HEAP32[$12>>2]|0;
  $data14 = (($13) + 8|0);
  $14 = +HEAPF64[$data14>>3];
  HEAPF64[tempDoublePtr>>3]=$14;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sprintf($b,$11,$vararg_buffer1)|0);
  $call19 = (_strlen(($b|0))|0);
  $add20 = (($call19) + 1)|0;
  $mul21 = $add20;
  $call22 = (_malloc($mul21)|0);
  $o = $call22;
  $15 = $o;
  (_strcpy(($15|0),($b|0))|0);
  $16 = $o;
  $17 = $o;
  $call25 = (_strlen(($17|0))|0);
  $18 = (_Object_initString($16,$call25,0)|0);
  $retval = $18;
  $20 = $retval;
  STACKTOP = sp;return ($20|0);
 } else if ((($0|0) == 1)) {
  $1 = $params$addr;
  $2 = HEAP32[$1>>2]|0;
  $data = (($2) + 8|0);
  $3 = +HEAPF64[$data>>3];
  HEAPF64[tempDoublePtr>>3]=$3;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sprintf($b,752,$vararg_buffer)|0);
  $call2 = (_strlen(($b|0))|0);
  $add = (($call2) + 1)|0;
  $mul = $add;
  $call3 = (_malloc($mul)|0);
  $o = $call3;
  $4 = $o;
  (_strcpy(($4|0),($b|0))|0);
  $5 = $o;
  $6 = $o;
  $call6 = (_strlen(($6|0))|0);
  $7 = (_Object_initString($5,$call6,0)|0);
  $retval = $7;
  $20 = $retval;
  STACKTOP = sp;return ($20|0);
 } else {
  (_printf((760|0),($vararg_buffer4|0))|0);
  $19 = HEAP32[40>>2]|0;
  $retval = $19;
  $20 = $retval;
  STACKTOP = sp;return ($20|0);
 }
 return 0|0;
}
function _builtin_input($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx3 = 0, $arrayidx8 = 0, $buffer = 0, $call1 = 0, $call10 = 0, $cmp = 0, $cmp2 = 0, $cmp4 = 0, $conv = 0, $data = 0, $data11 = 0, $data15 = 0, $dec = 0, $length = 0, $n = 0, $o = 0;
 var $param_num$addr = 0, $params$addr = 0, $read_n = 0, $sub = 0, $sub7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buffer = sp + 24|0;
 $n = sp + 8|0;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $param_num$addr;
 $cmp = ($0|0)==(1);
 if ($cmp) {
  $1 = $params$addr;
  $2 = HEAP32[$1>>2]|0;
  $data = (($2) + 8|0);
  $3 = HEAP32[$data>>2]|0;
  HEAP32[$vararg_buffer>>2] = $3;
  (_printf((800|0),($vararg_buffer|0))|0);
 }
 HEAP32[$buffer>>2] = 0;
 $4 = HEAP32[_stdin>>2]|0;
 $call1 = (_getline(($buffer|0),($n|0),($4|0))|0);
 $read_n = $call1;
 $5 = $read_n;
 $cmp2 = ($5|0)>(0);
 if ($cmp2) {
  $6 = $read_n;
  $sub = (($6) - 1)|0;
  $7 = HEAP32[$buffer>>2]|0;
  $arrayidx3 = (($7) + ($sub)|0);
  $8 = HEAP8[$arrayidx3>>0]|0;
  $conv = $8 << 24 >> 24;
  $cmp4 = ($conv|0)==(10);
  if ($cmp4) {
   $9 = $read_n;
   $sub7 = (($9) - 1)|0;
   $10 = HEAP32[$buffer>>2]|0;
   $arrayidx8 = (($10) + ($sub7)|0);
   HEAP8[$arrayidx8>>0] = 0;
   $11 = $read_n;
   $dec = (($11) + -1)|0;
   $read_n = $dec;
  }
 }
 $call10 = (_allocateObject()|0);
 $o = $call10;
 $12 = $o;
 HEAP32[$12>>2] = 4;
 $13 = HEAP32[$buffer>>2]|0;
 $14 = $o;
 $data11 = (($14) + 8|0);
 HEAP32[$data11>>2] = $13;
 $15 = $read_n;
 $16 = ($15|0)<(0);
 $17 = $16 << 31 >> 31;
 $18 = $o;
 $data15 = (($18) + 8|0);
 $length = (($data15) + 8|0);
 $19 = $length;
 $20 = $19;
 HEAP32[$20>>2] = $15;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $17;
 $23 = $o;
 STACKTOP = sp;return ($23|0);
}
function _builtin_display_string($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $i = 0, $inc = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0;
 var $s = 0, $tobool = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = HEAP8[8>>0]|0;
 $tobool = ($0<<24>>24)!=(0);
 if ($tobool) {
  $1 = HEAP32[40>>2]|0;
  $retval = $1;
  $11 = $retval;
  STACKTOP = sp;return ($11|0);
 }
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $param_num$addr;
  $cmp = ($2>>>0)<($3>>>0);
  if (!($cmp)) {
   break;
  }
  $4 = $i;
  $5 = $params$addr;
  $arrayidx = (($5) + ($4<<2)|0);
  $6 = HEAP32[$arrayidx>>2]|0;
  $call = (_to_string($6)|0);
  $s = $call;
  $7 = $s;
  HEAP32[$vararg_buffer>>2] = $7;
  (_printf((800|0),($vararg_buffer|0))|0);
  $8 = $s;
  _free($8);
  $9 = $i;
  $inc = (($9) + 1)|0;
  $i = $inc;
 }
 $10 = HEAP32[40>>2]|0;
 $retval = $10;
 $11 = $retval;
 STACKTOP = sp;return ($11|0);
}
function _builtin_string_to_int($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx6 = 0, $call = 0, $cmp = 0;
 var $cmp3 = 0, $cmp8 = 0, $conv = 0, $conv7 = 0, $data = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $t = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = HEAP32[$data>>2]|0;
 $v = $2;
 HEAP32[$t>>2] = 0;
 $3 = $v;
 $call = (_strlen(($3|0))|0);
 $cmp = ($call>>>0)>=(3);
 if ($cmp) {
  $4 = $v;
  $5 = HEAP8[$4>>0]|0;
  $conv = $5 << 24 >> 24;
  $cmp3 = ($conv|0)==(48);
  if ($cmp3) {
   $6 = $v;
   $arrayidx6 = (($6) + 1|0);
   $7 = HEAP8[$arrayidx6>>0]|0;
   $conv7 = $7 << 24 >> 24;
   $cmp8 = ($conv7|0)==(120);
   if ($cmp8) {
    $8 = $v;
    $9 = (_strtoull($8,$t,16)|0);
    $10 = tempRet0;
    $11 = (_Object_initInteger($9,$10)|0);
    $retval = $11;
    $16 = $retval;
    STACKTOP = sp;return ($16|0);
   }
  }
 }
 $12 = $v;
 $13 = (_strtoull($12,$t,10)|0);
 $14 = tempRet0;
 $15 = (_Object_initInteger($13,$14)|0);
 $retval = $15;
 $16 = $retval;
 STACKTOP = sp;return ($16|0);
}
function _builtin_string_to_float($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0.0, $call1 = 0, $data = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = HEAP32[$data>>2]|0;
 $call = (+_atof($2));
 $call1 = (_Object_initDouble($call)|0);
 STACKTOP = sp;return ($call1|0);
}
function _builtin_null_type($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $cond = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[40>>2]|0;
 $cmp = ($1|0)==($2|0);
 if ($cmp) {
  $3 = HEAP32[584>>2]|0;
  $cond = $3;
  STACKTOP = sp;return ($cond|0);
 } else {
  $4 = HEAP32[40>>2]|0;
  $cond = $4;
  STACKTOP = sp;return ($cond|0);
 }
 return 0|0;
}
function _builtin_numer($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $numer = 0, $p = 0, $param_num$addr = 0, $params$addr = 0;
 var $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p = $1;
 $2 = $p;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 2) | (($3|0) == 1)) {
  $4 = $p;
  $retval = $4;
  $14 = $retval;
  STACKTOP = sp;return ($14|0);
 } else if ((($3|0) == 3)) {
  $5 = $p;
  $data = (($5) + 8|0);
  $numer = (($data) + 8|0);
  $6 = $numer;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + 4)|0;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = (_Object_initInteger($8,$11)|0);
  $retval = $12;
  $14 = $retval;
  STACKTOP = sp;return ($14|0);
 } else {
  (_printf((808|0),($vararg_buffer|0))|0);
  $13 = HEAP32[40>>2]|0;
  $retval = $13;
  $14 = $retval;
  STACKTOP = sp;return ($14|0);
 }
 return 0|0;
}
function _builtin_denom($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $p = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p = $1;
 $2 = $p;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 2) | (($3|0) == 1)) {
  $4 = (_Object_initInteger(1,0)|0);
  $retval = $4;
  $14 = $retval;
  STACKTOP = sp;return ($14|0);
 } else if ((($3|0) == 3)) {
  $5 = $p;
  $data = (($5) + 8|0);
  $6 = $data;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + 4)|0;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = (_Object_initInteger($8,$11)|0);
  $retval = $12;
  $14 = $retval;
  STACKTOP = sp;return ($14|0);
 } else {
  (_printf((848|0),($vararg_buffer|0))|0);
  $13 = HEAP32[40>>2]|0;
  $retval = $13;
  $14 = $retval;
  STACKTOP = sp;return ($14|0);
 }
 return 0|0;
}
function _builtin_gensym($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $buffer = 0, $call3 = 0, $param_num$addr = 0, $params$addr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buffer = sp + 16|0;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = HEAP32[904>>2]|0;
 HEAP32[$vararg_buffer>>2] = $0;
 (_sprintf($buffer,888,$vararg_buffer)|0);
 $1 = HEAP32[904>>2]|0;
 $add = (($1) + 6)|0;
 HEAP32[904>>2] = $add;
 $call3 = (_strlen(($buffer|0))|0);
 $2 = (_Object_initString($buffer,$call3,0)|0);
 STACKTOP = sp;return ($2|0);
}
function _builtin_table_add_proto($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx2 = 0, $data = 0, $inc = 0, $param_num$addr = 0, $params$addr = 0, $proto = 0, $use_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $arrayidx = (($0) + 4|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $2 = $params$addr;
 $3 = HEAP32[$2>>2]|0;
 $data = (($3) + 8|0);
 $proto = (($data) + 20|0);
 HEAP32[$proto>>2] = $1;
 $4 = $params$addr;
 $arrayidx2 = (($4) + 4|0);
 $5 = HEAP32[$arrayidx2>>2]|0;
 $use_count = (($5) + 4|0);
 $6 = HEAP32[$use_count>>2]|0;
 $inc = (($6) + 1)|0;
 HEAP32[$use_count>>2] = $inc;
 $7 = $params$addr;
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$8>>2] = 10;
 $9 = HEAP32[40>>2]|0;
 STACKTOP = sp;return ($9|0);
}
function _builtin_table_proto($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $data = 0, $param_num$addr = 0, $params$addr = 0, $proto = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $proto = (($data) + 20|0);
 $2 = HEAP32[$proto>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function _builtin_typeof($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 do {
  switch ($2|0) {
  case 3:  {
   $5 = HEAP32[928>>2]|0;
   $retval = $5;
   break;
  }
  case 4:  {
   $6 = HEAP32[936>>2]|0;
   $retval = $6;
   break;
  }
  case 2:  {
   $4 = HEAP32[920>>2]|0;
   $retval = $4;
   break;
  }
  case 1:  {
   $3 = HEAP32[912>>2]|0;
   $retval = $3;
   break;
  }
  case 8:  {
   $9 = HEAP32[960>>2]|0;
   $retval = $9;
   break;
  }
  case 9:  {
   $10 = HEAP32[968>>2]|0;
   $retval = $10;
   break;
  }
  case 5:  {
   $7 = HEAP32[944>>2]|0;
   $retval = $7;
   break;
  }
  case 7: case 6:  {
   $8 = HEAP32[952>>2]|0;
   $retval = $8;
   break;
  }
  case 10:  {
   $11 = HEAP32[976>>2]|0;
   $retval = $11;
   break;
  }
  default: {
   $12 = HEAP32[40>>2]|0;
   $retval = $12;
  }
  }
 } while(0);
 $13 = $retval;
 STACKTOP = sp;return ($13|0);
}
function _builtin_cos($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0.0, $call1 = 0, $call13 = 0.0, $call14 = 0, $call5 = 0.0, $call6 = 0, $data = 0, $data10 = 0;
 var $data3 = 0, $data8 = 0, $div = 0.0, $numer = 0, $p = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p = $1;
 $2 = $p;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $4 = $p;
  $data = (($4) + 8|0);
  $5 = $data;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (+($7>>>0)) + (4294967296.0*(+($10|0)));
  $call = (+Math_cos((+$11)));
  $call1 = (_Object_initDouble($call)|0);
  $retval = $call1;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 3)) {
  $14 = $p;
  $data8 = (($14) + 8|0);
  $numer = (($data8) + 8|0);
  $15 = $numer;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (+($17>>>0)) + (4294967296.0*(+($20|0)));
  $22 = $p;
  $data10 = (($22) + 8|0);
  $23 = $data10;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (+($25>>>0)) + (4294967296.0*(+($28|0)));
  $div = $21 / $29;
  $call13 = (+Math_cos((+$div)));
  $call14 = (_Object_initDouble($call13)|0);
  $retval = $call14;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 2)) {
  $12 = $p;
  $data3 = (($12) + 8|0);
  $13 = +HEAPF64[$data3>>3];
  $call5 = (+Math_cos((+$13)));
  $call6 = (_Object_initDouble($call5)|0);
  $retval = $call6;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else {
  (_printf((984|0),($vararg_buffer|0))|0);
  $30 = HEAP32[40>>2]|0;
  $retval = $30;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 }
 return 0|0;
}
function _builtin_sin($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0.0, $call1 = 0, $call13 = 0.0, $call14 = 0, $call5 = 0.0, $call6 = 0, $data = 0, $data10 = 0;
 var $data3 = 0, $data8 = 0, $div = 0.0, $numer = 0, $p = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p = $1;
 $2 = $p;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $4 = $p;
  $data = (($4) + 8|0);
  $5 = $data;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (+($7>>>0)) + (4294967296.0*(+($10|0)));
  $call = (+Math_sin((+$11)));
  $call1 = (_Object_initDouble($call)|0);
  $retval = $call1;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 3)) {
  $14 = $p;
  $data8 = (($14) + 8|0);
  $numer = (($data8) + 8|0);
  $15 = $numer;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (+($17>>>0)) + (4294967296.0*(+($20|0)));
  $22 = $p;
  $data10 = (($22) + 8|0);
  $23 = $data10;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (+($25>>>0)) + (4294967296.0*(+($28|0)));
  $div = $21 / $29;
  $call13 = (+Math_sin((+$div)));
  $call14 = (_Object_initDouble($call13)|0);
  $retval = $call14;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 2)) {
  $12 = $p;
  $data3 = (($12) + 8|0);
  $13 = +HEAPF64[$data3>>3];
  $call5 = (+Math_sin((+$13)));
  $call6 = (_Object_initDouble($call5)|0);
  $retval = $call6;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else {
  (_printf((1032|0),($vararg_buffer|0))|0);
  $30 = HEAP32[40>>2]|0;
  $retval = $30;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 }
 return 0|0;
}
function _builtin_tan($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0.0, $call1 = 0, $call13 = 0.0, $call14 = 0, $call5 = 0.0, $call6 = 0, $data = 0, $data10 = 0;
 var $data3 = 0, $data8 = 0, $div = 0.0, $numer = 0, $p = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p = $1;
 $2 = $p;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $4 = $p;
  $data = (($4) + 8|0);
  $5 = $data;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (+($7>>>0)) + (4294967296.0*(+($10|0)));
  $call = (+Math_tan((+$11)));
  $call1 = (_Object_initDouble($call)|0);
  $retval = $call1;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 3)) {
  $14 = $p;
  $data8 = (($14) + 8|0);
  $numer = (($data8) + 8|0);
  $15 = $numer;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (+($17>>>0)) + (4294967296.0*(+($20|0)));
  $22 = $p;
  $data10 = (($22) + 8|0);
  $23 = $data10;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (+($25>>>0)) + (4294967296.0*(+($28|0)));
  $div = $21 / $29;
  $call13 = (+Math_tan((+$div)));
  $call14 = (_Object_initDouble($call13)|0);
  $retval = $call14;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 2)) {
  $12 = $p;
  $data3 = (($12) + 8|0);
  $13 = +HEAPF64[$data3>>3];
  $call5 = (+Math_tan((+$13)));
  $call6 = (_Object_initDouble($call5)|0);
  $retval = $call6;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else {
  (_printf((1080|0),($vararg_buffer|0))|0);
  $30 = HEAP32[40>>2]|0;
  $retval = $30;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 }
 return 0|0;
}
function _builtin_acos($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0.0, $call1 = 0, $call13 = 0.0, $call14 = 0, $call5 = 0.0, $call6 = 0, $data = 0, $data10 = 0;
 var $data3 = 0, $data8 = 0, $div = 0.0, $numer = 0, $p = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p = $1;
 $2 = $p;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $4 = $p;
  $data = (($4) + 8|0);
  $5 = $data;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (+($7>>>0)) + (4294967296.0*(+($10|0)));
  $call = (+Math_acos((+$11)));
  $call1 = (_Object_initDouble($call)|0);
  $retval = $call1;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 3)) {
  $14 = $p;
  $data8 = (($14) + 8|0);
  $numer = (($data8) + 8|0);
  $15 = $numer;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (+($17>>>0)) + (4294967296.0*(+($20|0)));
  $22 = $p;
  $data10 = (($22) + 8|0);
  $23 = $data10;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (+($25>>>0)) + (4294967296.0*(+($28|0)));
  $div = $21 / $29;
  $call13 = (+Math_acos((+$div)));
  $call14 = (_Object_initDouble($call13)|0);
  $retval = $call14;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 2)) {
  $12 = $p;
  $data3 = (($12) + 8|0);
  $13 = +HEAPF64[$data3>>3];
  $call5 = (+Math_acos((+$13)));
  $call6 = (_Object_initDouble($call5)|0);
  $retval = $call6;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else {
  (_printf((1128|0),($vararg_buffer|0))|0);
  $30 = HEAP32[40>>2]|0;
  $retval = $30;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 }
 return 0|0;
}
function _builtin_asin($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0.0, $call1 = 0, $call13 = 0.0, $call14 = 0, $call5 = 0.0, $call6 = 0, $data = 0, $data10 = 0;
 var $data3 = 0, $data8 = 0, $div = 0.0, $numer = 0, $p = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p = $1;
 $2 = $p;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $4 = $p;
  $data = (($4) + 8|0);
  $5 = $data;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (+($7>>>0)) + (4294967296.0*(+($10|0)));
  $call = (+Math_asin((+$11)));
  $call1 = (_Object_initDouble($call)|0);
  $retval = $call1;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 3)) {
  $14 = $p;
  $data8 = (($14) + 8|0);
  $numer = (($data8) + 8|0);
  $15 = $numer;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (+($17>>>0)) + (4294967296.0*(+($20|0)));
  $22 = $p;
  $data10 = (($22) + 8|0);
  $23 = $data10;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (+($25>>>0)) + (4294967296.0*(+($28|0)));
  $div = $21 / $29;
  $call13 = (+Math_asin((+$div)));
  $call14 = (_Object_initDouble($call13)|0);
  $retval = $call14;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 2)) {
  $12 = $p;
  $data3 = (($12) + 8|0);
  $13 = +HEAPF64[$data3>>3];
  $call5 = (+Math_asin((+$13)));
  $call6 = (_Object_initDouble($call5)|0);
  $retval = $call6;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else {
  (_printf((1176|0),($vararg_buffer|0))|0);
  $30 = HEAP32[40>>2]|0;
  $retval = $30;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 }
 return 0|0;
}
function _builtin_atan($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0.0, $call1 = 0, $call13 = 0.0, $call14 = 0, $call5 = 0.0, $call6 = 0, $data = 0, $data10 = 0;
 var $data3 = 0, $data8 = 0, $div = 0.0, $numer = 0, $p = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p = $1;
 $2 = $p;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $4 = $p;
  $data = (($4) + 8|0);
  $5 = $data;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (+($7>>>0)) + (4294967296.0*(+($10|0)));
  $call = (+Math_atan((+$11)));
  $call1 = (_Object_initDouble($call)|0);
  $retval = $call1;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 3)) {
  $14 = $p;
  $data8 = (($14) + 8|0);
  $numer = (($data8) + 8|0);
  $15 = $numer;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (+($17>>>0)) + (4294967296.0*(+($20|0)));
  $22 = $p;
  $data10 = (($22) + 8|0);
  $23 = $data10;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (+($25>>>0)) + (4294967296.0*(+($28|0)));
  $div = $21 / $29;
  $call13 = (+Math_atan((+$div)));
  $call14 = (_Object_initDouble($call13)|0);
  $retval = $call14;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 2)) {
  $12 = $p;
  $data3 = (($12) + 8|0);
  $13 = +HEAPF64[$data3>>3];
  $call5 = (+Math_atan((+$13)));
  $call6 = (_Object_initDouble($call5)|0);
  $retval = $call6;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else {
  (_printf((1224|0),($vararg_buffer|0))|0);
  $30 = HEAP32[40>>2]|0;
  $retval = $30;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 }
 return 0|0;
}
function _builtin_cosh($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0.0, $call1 = 0, $call13 = 0.0, $call14 = 0, $call5 = 0.0, $call6 = 0, $data = 0, $data10 = 0;
 var $data3 = 0, $data8 = 0, $div = 0.0, $numer = 0, $p = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p = $1;
 $2 = $p;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $4 = $p;
  $data = (($4) + 8|0);
  $5 = $data;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (+($7>>>0)) + (4294967296.0*(+($10|0)));
  $call = (+_cosh((+$11)));
  $call1 = (_Object_initDouble($call)|0);
  $retval = $call1;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 3)) {
  $14 = $p;
  $data8 = (($14) + 8|0);
  $numer = (($data8) + 8|0);
  $15 = $numer;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (+($17>>>0)) + (4294967296.0*(+($20|0)));
  $22 = $p;
  $data10 = (($22) + 8|0);
  $23 = $data10;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (+($25>>>0)) + (4294967296.0*(+($28|0)));
  $div = $21 / $29;
  $call13 = (+_cosh((+$div)));
  $call14 = (_Object_initDouble($call13)|0);
  $retval = $call14;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 2)) {
  $12 = $p;
  $data3 = (($12) + 8|0);
  $13 = +HEAPF64[$data3>>3];
  $call5 = (+_cosh((+$13)));
  $call6 = (_Object_initDouble($call5)|0);
  $retval = $call6;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else {
  (_printf((1272|0),($vararg_buffer|0))|0);
  $30 = HEAP32[40>>2]|0;
  $retval = $30;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 }
 return 0|0;
}
function _builtin_sinh($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0.0, $call1 = 0, $call13 = 0.0, $call14 = 0, $call5 = 0.0, $call6 = 0, $data = 0, $data10 = 0;
 var $data3 = 0, $data8 = 0, $div = 0.0, $numer = 0, $p = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p = $1;
 $2 = $p;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $4 = $p;
  $data = (($4) + 8|0);
  $5 = $data;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (+($7>>>0)) + (4294967296.0*(+($10|0)));
  $call = (+_sinh((+$11)));
  $call1 = (_Object_initDouble($call)|0);
  $retval = $call1;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 3)) {
  $14 = $p;
  $data8 = (($14) + 8|0);
  $numer = (($data8) + 8|0);
  $15 = $numer;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (+($17>>>0)) + (4294967296.0*(+($20|0)));
  $22 = $p;
  $data10 = (($22) + 8|0);
  $23 = $data10;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (+($25>>>0)) + (4294967296.0*(+($28|0)));
  $div = $21 / $29;
  $call13 = (+_sinh((+$div)));
  $call14 = (_Object_initDouble($call13)|0);
  $retval = $call14;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 2)) {
  $12 = $p;
  $data3 = (($12) + 8|0);
  $13 = +HEAPF64[$data3>>3];
  $call5 = (+_sinh((+$13)));
  $call6 = (_Object_initDouble($call5)|0);
  $retval = $call6;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else {
  (_printf((1320|0),($vararg_buffer|0))|0);
  $30 = HEAP32[40>>2]|0;
  $retval = $30;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 }
 return 0|0;
}
function _builtin_tanh($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0.0, $call1 = 0, $call13 = 0.0, $call14 = 0, $call5 = 0.0, $call6 = 0, $data = 0, $data10 = 0;
 var $data3 = 0, $data8 = 0, $div = 0.0, $numer = 0, $p = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p = $1;
 $2 = $p;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $4 = $p;
  $data = (($4) + 8|0);
  $5 = $data;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (+($7>>>0)) + (4294967296.0*(+($10|0)));
  $call = (+_tanh((+$11)));
  $call1 = (_Object_initDouble($call)|0);
  $retval = $call1;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 3)) {
  $14 = $p;
  $data8 = (($14) + 8|0);
  $numer = (($data8) + 8|0);
  $15 = $numer;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (+($17>>>0)) + (4294967296.0*(+($20|0)));
  $22 = $p;
  $data10 = (($22) + 8|0);
  $23 = $data10;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (+($25>>>0)) + (4294967296.0*(+($28|0)));
  $div = $21 / $29;
  $call13 = (+_tanh((+$div)));
  $call14 = (_Object_initDouble($call13)|0);
  $retval = $call14;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 2)) {
  $12 = $p;
  $data3 = (($12) + 8|0);
  $13 = +HEAPF64[$data3>>3];
  $call5 = (+_tanh((+$13)));
  $call6 = (_Object_initDouble($call5)|0);
  $retval = $call6;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else {
  (_printf((1368|0),($vararg_buffer|0))|0);
  $30 = HEAP32[40>>2]|0;
  $retval = $30;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 }
 return 0|0;
}
function _builtin_log($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0.0, $call1 = 0, $call13 = 0.0, $call14 = 0, $call5 = 0.0, $call6 = 0, $data = 0, $data10 = 0;
 var $data3 = 0, $data8 = 0, $div = 0.0, $numer = 0, $p = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p = $1;
 $2 = $p;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $4 = $p;
  $data = (($4) + 8|0);
  $5 = $data;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (+($7>>>0)) + (4294967296.0*(+($10|0)));
  $call = (+Math_log((+$11)));
  $call1 = (_Object_initDouble($call)|0);
  $retval = $call1;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 3)) {
  $14 = $p;
  $data8 = (($14) + 8|0);
  $numer = (($data8) + 8|0);
  $15 = $numer;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (+($17>>>0)) + (4294967296.0*(+($20|0)));
  $22 = $p;
  $data10 = (($22) + 8|0);
  $23 = $data10;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (+($25>>>0)) + (4294967296.0*(+($28|0)));
  $div = $21 / $29;
  $call13 = (+Math_log((+$div)));
  $call14 = (_Object_initDouble($call13)|0);
  $retval = $call14;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 2)) {
  $12 = $p;
  $data3 = (($12) + 8|0);
  $13 = +HEAPF64[$data3>>3];
  $call5 = (+Math_log((+$13)));
  $call6 = (_Object_initDouble($call5)|0);
  $retval = $call6;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else {
  (_printf((1416|0),($vararg_buffer|0))|0);
  $30 = HEAP32[40>>2]|0;
  $retval = $30;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 }
 return 0|0;
}
function _builtin_exp($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0.0, $call1 = 0, $call13 = 0.0, $call14 = 0, $call5 = 0.0, $call6 = 0, $data = 0, $data10 = 0;
 var $data3 = 0, $data8 = 0, $div = 0.0, $numer = 0, $p = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p = $1;
 $2 = $p;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $4 = $p;
  $data = (($4) + 8|0);
  $5 = $data;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (+($7>>>0)) + (4294967296.0*(+($10|0)));
  $call = (+Math_exp((+$11)));
  $call1 = (_Object_initDouble($call)|0);
  $retval = $call1;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 3)) {
  $14 = $p;
  $data8 = (($14) + 8|0);
  $numer = (($data8) + 8|0);
  $15 = $numer;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (+($17>>>0)) + (4294967296.0*(+($20|0)));
  $22 = $p;
  $data10 = (($22) + 8|0);
  $23 = $data10;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (+($25>>>0)) + (4294967296.0*(+($28|0)));
  $div = $21 / $29;
  $call13 = (+Math_exp((+$div)));
  $call14 = (_Object_initDouble($call13)|0);
  $retval = $call14;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 2)) {
  $12 = $p;
  $data3 = (($12) + 8|0);
  $13 = +HEAPF64[$data3>>3];
  $call5 = (+Math_exp((+$13)));
  $call6 = (_Object_initDouble($call5)|0);
  $retval = $call6;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else {
  (_printf((1464|0),($vararg_buffer|0))|0);
  $30 = HEAP32[40>>2]|0;
  $retval = $30;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 }
 return 0|0;
}
function _builtin_log10($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0.0, $call1 = 0, $call13 = 0.0, $call14 = 0, $call5 = 0.0, $call6 = 0, $data = 0, $data10 = 0;
 var $data3 = 0, $data8 = 0, $div = 0.0, $numer = 0, $p = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p = $1;
 $2 = $p;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $4 = $p;
  $data = (($4) + 8|0);
  $5 = $data;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (+($7>>>0)) + (4294967296.0*(+($10|0)));
  $call = (+_log10((+$11)));
  $call1 = (_Object_initDouble($call)|0);
  $retval = $call1;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 3)) {
  $14 = $p;
  $data8 = (($14) + 8|0);
  $numer = (($data8) + 8|0);
  $15 = $numer;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (+($17>>>0)) + (4294967296.0*(+($20|0)));
  $22 = $p;
  $data10 = (($22) + 8|0);
  $23 = $data10;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (+($25>>>0)) + (4294967296.0*(+($28|0)));
  $div = $21 / $29;
  $call13 = (+_log10((+$div)));
  $call14 = (_Object_initDouble($call13)|0);
  $retval = $call14;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 2)) {
  $12 = $p;
  $data3 = (($12) + 8|0);
  $13 = +HEAPF64[$data3>>3];
  $call5 = (+_log10((+$13)));
  $call6 = (_Object_initDouble($call5)|0);
  $retval = $call6;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else {
  (_printf((1512|0),($vararg_buffer|0))|0);
  $30 = HEAP32[40>>2]|0;
  $retval = $30;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 }
 return 0|0;
}
function _builtin_pow($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0;
 var $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arrayidx1 = 0;
 var $call119 = 0, $call16 = 0, $call27 = 0, $call39 = 0, $call47 = 0, $call61 = 0, $call99 = 0, $data = 0, $data10 = 0, $data101 = 0, $data105 = 0, $data110 = 0, $data114 = 0, $data14 = 0, $data18 = 0, $data22 = 0, $data24 = 0, $data32 = 0, $data35 = 0, $data4 = 0;
 var $data41 = 0, $data44 = 0, $data49 = 0, $data52 = 0, $data56 = 0, $data67 = 0, $data71 = 0, $data76 = 0, $data80 = 0, $data87 = 0, $data91 = 0, $data96 = 0, $div = 0.0, $div109 = 0.0, $div118 = 0.0, $div60 = 0.0, $div95 = 0.0, $numer = 0, $numer103 = 0, $numer112 = 0;
 var $numer54 = 0, $numer69 = 0, $numer89 = 0, $p1 = 0, $p2 = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p1 = $1;
 $2 = $params$addr;
 $arrayidx1 = (($2) + 4|0);
 $3 = HEAP32[$arrayidx1>>2]|0;
 $p2 = $3;
 $4 = $p1;
 $5 = HEAP32[$4>>2]|0;
 if ((($5|0) == 1)) {
  $6 = $p2;
  $7 = HEAP32[$6>>2]|0;
  if ((($7|0) == 2)) {
   $28 = $p1;
   $data10 = (($28) + 8|0);
   $29 = $data10;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = (($29) + 4)|0;
   $33 = $32;
   $34 = HEAP32[$33>>2]|0;
   $35 = (+($31>>>0)) + (4294967296.0*(+($34|0)));
   $36 = $p2;
   $data14 = (($36) + 8|0);
   $37 = +HEAPF64[$data14>>3];
   $38 = (+Math_pow((+$35),(+$37)));
   $call16 = (_Object_initDouble($38)|0);
   $retval = $call16;
   $198 = $retval;
   STACKTOP = sp;return ($198|0);
  } else if ((($7|0) == 1)) {
   $8 = $p1;
   $data = (($8) + 8|0);
   $9 = $data;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + 4)|0;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = (+($11>>>0)) + (4294967296.0*(+($14|0)));
   $16 = $p2;
   $data4 = (($16) + 8|0);
   $17 = $data4;
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = (($17) + 4)|0;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = (+($19>>>0)) + (4294967296.0*(+($22|0)));
   $24 = (+Math_pow((+$15),(+$23)));
   $25 = (~~$24)>>>0;
   $26 = +Math_abs($24) >= 1.0 ? $24 > 0.0 ? (Math_min(+Math_floor($24 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($24 - +(~~$24 >>> 0)) / 4294967296.0) >>> 0 : 0;
   $27 = (_Object_initInteger($25,$26)|0);
   $retval = $27;
   $198 = $retval;
   STACKTOP = sp;return ($198|0);
  } else if ((($7|0) == 3)) {
   $39 = $p1;
   $data18 = (($39) + 8|0);
   $40 = $data18;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = (($40) + 4)|0;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = (+($42>>>0)) + (4294967296.0*(+($45|0)));
   $47 = $p2;
   $data22 = (($47) + 8|0);
   $numer = (($data22) + 8|0);
   $48 = $numer;
   $49 = $48;
   $50 = HEAP32[$49>>2]|0;
   $51 = (($48) + 4)|0;
   $52 = $51;
   $53 = HEAP32[$52>>2]|0;
   $54 = (+($50>>>0)) + (4294967296.0*(+($53|0)));
   $55 = $p2;
   $data24 = (($55) + 8|0);
   $56 = $data24;
   $57 = $56;
   $58 = HEAP32[$57>>2]|0;
   $59 = (($56) + 4)|0;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $62 = (+($58>>>0)) + (4294967296.0*(+($61|0)));
   $div = $54 / $62;
   $63 = (+Math_pow((+$46),(+$div)));
   $call27 = (_Object_initDouble($63)|0);
   $retval = $call27;
   $198 = $retval;
   STACKTOP = sp;return ($198|0);
  } else {
   (_printf((1560|0),($vararg_buffer|0))|0);
   $64 = HEAP32[40>>2]|0;
   $retval = $64;
   $198 = $retval;
   STACKTOP = sp;return ($198|0);
  }
 } else if ((($5|0) == 2)) {
  $65 = $p2;
  $66 = HEAP32[$65>>2]|0;
  if ((($66|0) == 1)) {
   $67 = $p1;
   $data32 = (($67) + 8|0);
   $68 = +HEAPF64[$data32>>3];
   $69 = $p2;
   $data35 = (($69) + 8|0);
   $70 = $data35;
   $71 = $70;
   $72 = HEAP32[$71>>2]|0;
   $73 = (($70) + 4)|0;
   $74 = $73;
   $75 = HEAP32[$74>>2]|0;
   $76 = (+($72>>>0)) + (4294967296.0*(+($75|0)));
   $77 = (+Math_pow((+$68),(+$76)));
   $call39 = (_Object_initDouble($77)|0);
   $retval = $call39;
   $198 = $retval;
   STACKTOP = sp;return ($198|0);
  } else if ((($66|0) == 2)) {
   $78 = $p1;
   $data41 = (($78) + 8|0);
   $79 = +HEAPF64[$data41>>3];
   $80 = $p2;
   $data44 = (($80) + 8|0);
   $81 = +HEAPF64[$data44>>3];
   $82 = (+Math_pow((+$79),(+$81)));
   $call47 = (_Object_initDouble($82)|0);
   $retval = $call47;
   $198 = $retval;
   STACKTOP = sp;return ($198|0);
  } else if ((($66|0) == 3)) {
   $83 = $p1;
   $data49 = (($83) + 8|0);
   $84 = +HEAPF64[$data49>>3];
   $85 = $p2;
   $data52 = (($85) + 8|0);
   $numer54 = (($data52) + 8|0);
   $86 = $numer54;
   $87 = $86;
   $88 = HEAP32[$87>>2]|0;
   $89 = (($86) + 4)|0;
   $90 = $89;
   $91 = HEAP32[$90>>2]|0;
   $92 = (+($88>>>0)) + (4294967296.0*(+($91|0)));
   $93 = $p2;
   $data56 = (($93) + 8|0);
   $94 = $data56;
   $95 = $94;
   $96 = HEAP32[$95>>2]|0;
   $97 = (($94) + 4)|0;
   $98 = $97;
   $99 = HEAP32[$98>>2]|0;
   $100 = (+($96>>>0)) + (4294967296.0*(+($99|0)));
   $div60 = $92 / $100;
   $101 = (+Math_pow((+$84),(+$div60)));
   $call61 = (_Object_initDouble($101)|0);
   $retval = $call61;
   $198 = $retval;
   STACKTOP = sp;return ($198|0);
  } else {
   (_printf((1560|0),($vararg_buffer1|0))|0);
   $102 = HEAP32[40>>2]|0;
   $retval = $102;
   $198 = $retval;
   STACKTOP = sp;return ($198|0);
  }
 } else if ((($5|0) == 3)) {
  $103 = $p2;
  $104 = HEAP32[$103>>2]|0;
  if ((($104|0) == 1)) {
   $105 = $p1;
   $data67 = (($105) + 8|0);
   $numer69 = (($data67) + 8|0);
   $106 = $numer69;
   $107 = $106;
   $108 = HEAP32[$107>>2]|0;
   $109 = (($106) + 4)|0;
   $110 = $109;
   $111 = HEAP32[$110>>2]|0;
   $112 = (+($108>>>0)) + (4294967296.0*(+($111|0)));
   $113 = $p2;
   $data71 = (($113) + 8|0);
   $114 = $data71;
   $115 = $114;
   $116 = HEAP32[$115>>2]|0;
   $117 = (($114) + 4)|0;
   $118 = $117;
   $119 = HEAP32[$118>>2]|0;
   $120 = (+($116>>>0)) + (4294967296.0*(+($119|0)));
   $121 = (+Math_pow((+$112),(+$120)));
   $122 = (~~$121)>>>0;
   $123 = +Math_abs($121) >= 1.0 ? $121 > 0.0 ? (Math_min(+Math_floor($121 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($121 - +(~~$121 >>> 0)) / 4294967296.0) >>> 0 : 0;
   $124 = $p1;
   $data76 = (($124) + 8|0);
   $125 = $data76;
   $126 = $125;
   $127 = HEAP32[$126>>2]|0;
   $128 = (($125) + 4)|0;
   $129 = $128;
   $130 = HEAP32[$129>>2]|0;
   $131 = (+($127>>>0)) + (4294967296.0*(+($130|0)));
   $132 = $p2;
   $data80 = (($132) + 8|0);
   $133 = $data80;
   $134 = $133;
   $135 = HEAP32[$134>>2]|0;
   $136 = (($133) + 4)|0;
   $137 = $136;
   $138 = HEAP32[$137>>2]|0;
   $139 = (+($135>>>0)) + (4294967296.0*(+($138|0)));
   $140 = (+Math_pow((+$131),(+$139)));
   $141 = (~~$140)>>>0;
   $142 = +Math_abs($140) >= 1.0 ? $140 > 0.0 ? (Math_min(+Math_floor($140 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($140 - +(~~$140 >>> 0)) / 4294967296.0) >>> 0 : 0;
   $143 = (_Object_initRatio($122,$123,$141,$142)|0);
   $retval = $143;
   $198 = $retval;
   STACKTOP = sp;return ($198|0);
  } else if ((($104|0) == 2)) {
   $144 = $p1;
   $data87 = (($144) + 8|0);
   $numer89 = (($data87) + 8|0);
   $145 = $numer89;
   $146 = $145;
   $147 = HEAP32[$146>>2]|0;
   $148 = (($145) + 4)|0;
   $149 = $148;
   $150 = HEAP32[$149>>2]|0;
   $151 = (+($147>>>0)) + (4294967296.0*(+($150|0)));
   $152 = $p1;
   $data91 = (($152) + 8|0);
   $153 = $data91;
   $154 = $153;
   $155 = HEAP32[$154>>2]|0;
   $156 = (($153) + 4)|0;
   $157 = $156;
   $158 = HEAP32[$157>>2]|0;
   $159 = (+($155>>>0)) + (4294967296.0*(+($158|0)));
   $div95 = $151 / $159;
   $160 = $p2;
   $data96 = (($160) + 8|0);
   $161 = +HEAPF64[$data96>>3];
   $162 = (+Math_pow((+$div95),(+$161)));
   $call99 = (_Object_initDouble($162)|0);
   $retval = $call99;
   $198 = $retval;
   STACKTOP = sp;return ($198|0);
  } else if ((($104|0) == 3)) {
   $163 = $p1;
   $data101 = (($163) + 8|0);
   $numer103 = (($data101) + 8|0);
   $164 = $numer103;
   $165 = $164;
   $166 = HEAP32[$165>>2]|0;
   $167 = (($164) + 4)|0;
   $168 = $167;
   $169 = HEAP32[$168>>2]|0;
   $170 = (+($166>>>0)) + (4294967296.0*(+($169|0)));
   $171 = $p1;
   $data105 = (($171) + 8|0);
   $172 = $data105;
   $173 = $172;
   $174 = HEAP32[$173>>2]|0;
   $175 = (($172) + 4)|0;
   $176 = $175;
   $177 = HEAP32[$176>>2]|0;
   $178 = (+($174>>>0)) + (4294967296.0*(+($177|0)));
   $div109 = $170 / $178;
   $179 = $p2;
   $data110 = (($179) + 8|0);
   $numer112 = (($data110) + 8|0);
   $180 = $numer112;
   $181 = $180;
   $182 = HEAP32[$181>>2]|0;
   $183 = (($180) + 4)|0;
   $184 = $183;
   $185 = HEAP32[$184>>2]|0;
   $186 = (+($182>>>0)) + (4294967296.0*(+($185|0)));
   $187 = $p2;
   $data114 = (($187) + 8|0);
   $188 = $data114;
   $189 = $188;
   $190 = HEAP32[$189>>2]|0;
   $191 = (($188) + 4)|0;
   $192 = $191;
   $193 = HEAP32[$192>>2]|0;
   $194 = (+($190>>>0)) + (4294967296.0*(+($193|0)));
   $div118 = $186 / $194;
   $195 = (+Math_pow((+$div109),(+$div118)));
   $call119 = (_Object_initDouble($195)|0);
   $retval = $call119;
   $198 = $retval;
   STACKTOP = sp;return ($198|0);
  } else {
   (_printf((1560|0),($vararg_buffer3|0))|0);
   $196 = HEAP32[40>>2]|0;
   $retval = $196;
   $198 = $retval;
   STACKTOP = sp;return ($198|0);
  }
 } else {
  (_printf((1560|0),($vararg_buffer5|0))|0);
  $197 = HEAP32[40>>2]|0;
  $retval = $197;
  $198 = $retval;
  STACKTOP = sp;return ($198|0);
 }
 return 0|0;
}
function _builtin_sqrt($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0.0, $call1 = 0, $call13 = 0.0, $call14 = 0, $call5 = 0.0, $call6 = 0, $data = 0, $data10 = 0;
 var $data3 = 0, $data8 = 0, $div = 0.0, $numer = 0, $p = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p = $1;
 $2 = $p;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $4 = $p;
  $data = (($4) + 8|0);
  $5 = $data;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (+($7>>>0)) + (4294967296.0*(+($10|0)));
  $call = (+Math_sqrt((+$11)));
  $call1 = (_Object_initDouble($call)|0);
  $retval = $call1;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 3)) {
  $14 = $p;
  $data8 = (($14) + 8|0);
  $numer = (($data8) + 8|0);
  $15 = $numer;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (+($17>>>0)) + (4294967296.0*(+($20|0)));
  $22 = $p;
  $data10 = (($22) + 8|0);
  $23 = $data10;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (+($25>>>0)) + (4294967296.0*(+($28|0)));
  $div = $21 / $29;
  $call13 = (+Math_sqrt((+$div)));
  $call14 = (_Object_initDouble($call13)|0);
  $retval = $call14;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 2)) {
  $12 = $p;
  $data3 = (($12) + 8|0);
  $13 = +HEAPF64[$data3>>3];
  $call5 = (+Math_sqrt((+$13)));
  $call6 = (_Object_initDouble($call5)|0);
  $retval = $call6;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else {
  (_printf((1608|0),($vararg_buffer|0))|0);
  $30 = HEAP32[40>>2]|0;
  $retval = $30;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 }
 return 0|0;
}
function _builtin_ceil($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0.0, $call1 = 0, $call13 = 0.0, $call14 = 0, $call5 = 0.0, $call6 = 0, $data = 0, $data10 = 0;
 var $data3 = 0, $data8 = 0, $div = 0.0, $numer = 0, $p = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p = $1;
 $2 = $p;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $4 = $p;
  $data = (($4) + 8|0);
  $5 = $data;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (+($7>>>0)) + (4294967296.0*(+($10|0)));
  $call = (+Math_ceil((+$11)));
  $call1 = (_Object_initDouble($call)|0);
  $retval = $call1;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 3)) {
  $14 = $p;
  $data8 = (($14) + 8|0);
  $numer = (($data8) + 8|0);
  $15 = $numer;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (+($17>>>0)) + (4294967296.0*(+($20|0)));
  $22 = $p;
  $data10 = (($22) + 8|0);
  $23 = $data10;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (+($25>>>0)) + (4294967296.0*(+($28|0)));
  $div = $21 / $29;
  $call13 = (+Math_ceil((+$div)));
  $call14 = (_Object_initDouble($call13)|0);
  $retval = $call14;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 2)) {
  $12 = $p;
  $data3 = (($12) + 8|0);
  $13 = +HEAPF64[$data3>>3];
  $call5 = (+Math_ceil((+$13)));
  $call6 = (_Object_initDouble($call5)|0);
  $retval = $call6;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else {
  (_printf((1656|0),($vararg_buffer|0))|0);
  $30 = HEAP32[40>>2]|0;
  $retval = $30;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 }
 return 0|0;
}
function _builtin_floor($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0.0, $call1 = 0, $call13 = 0.0, $call14 = 0, $call5 = 0.0, $call6 = 0, $data = 0, $data10 = 0;
 var $data3 = 0, $data8 = 0, $div = 0.0, $numer = 0, $p = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p = $1;
 $2 = $p;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $4 = $p;
  $data = (($4) + 8|0);
  $5 = $data;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (+($7>>>0)) + (4294967296.0*(+($10|0)));
  $call = (+Math_floor((+$11)));
  $call1 = (_Object_initDouble($call)|0);
  $retval = $call1;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 3)) {
  $14 = $p;
  $data8 = (($14) + 8|0);
  $numer = (($data8) + 8|0);
  $15 = $numer;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (+($17>>>0)) + (4294967296.0*(+($20|0)));
  $22 = $p;
  $data10 = (($22) + 8|0);
  $23 = $data10;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (+($25>>>0)) + (4294967296.0*(+($28|0)));
  $div = $21 / $29;
  $call13 = (+Math_floor((+$div)));
  $call14 = (_Object_initDouble($call13)|0);
  $retval = $call14;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else if ((($3|0) == 2)) {
  $12 = $p;
  $data3 = (($12) + 8|0);
  $13 = +HEAPF64[$data3>>3];
  $call5 = (+Math_floor((+$13)));
  $call6 = (_Object_initDouble($call5)|0);
  $retval = $call6;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else {
  (_printf((1704|0),($vararg_buffer|0))|0);
  $30 = HEAP32[40>>2]|0;
  $retval = $30;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 }
 return 0|0;
}
function _builtin_string_find($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $arrayidx1 = 0, $arrayidx14 = 0, $call = 0, $call20 = 0, $cmp = 0, $data = 0, $data11 = 0, $data15 = 0, $data17 = 0;
 var $data2 = 0, $data6 = 0, $find_s = 0, $p = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $s = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $s = $1;
 $2 = $params$addr;
 $arrayidx1 = (($2) + 4|0);
 $3 = HEAP32[$arrayidx1>>2]|0;
 $find_s = $3;
 $4 = $param_num$addr;
 $cmp = ($4|0)==(2);
 if ($cmp) {
  $5 = $s;
  $data = (($5) + 8|0);
  $6 = HEAP32[$data>>2]|0;
  $7 = $find_s;
  $data2 = (($7) + 8|0);
  $8 = HEAP32[$data2>>2]|0;
  $call = (_strstr($6,$8)|0);
  $p = $call;
 } else {
  $17 = $s;
  $data11 = (($17) + 8|0);
  $18 = HEAP32[$data11>>2]|0;
  $19 = $params$addr;
  $arrayidx14 = (($19) + 8|0);
  $20 = HEAP32[$arrayidx14>>2]|0;
  $data15 = (($20) + 8|0);
  $21 = $data15;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $add$ptr = (($18) + ($23)|0);
  $27 = $find_s;
  $data17 = (($27) + 8|0);
  $28 = HEAP32[$data17>>2]|0;
  $call20 = (_strstr($add$ptr,$28)|0);
  $p = $call20;
 }
 $9 = $p;
 $tobool = ($9|0)!=(0|0);
 if ($tobool) {
  $10 = $p;
  $11 = $s;
  $data6 = (($11) + 8|0);
  $12 = HEAP32[$data6>>2]|0;
  $sub$ptr$lhs$cast = $10;
  $sub$ptr$rhs$cast = $12;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $13 = ($sub$ptr$sub|0)<(0);
  $14 = $13 << 31 >> 31;
  $15 = (_Object_initInteger($sub$ptr$sub,$14)|0);
  $retval = $15;
  $29 = $retval;
  STACKTOP = sp;return ($29|0);
 } else {
  $16 = HEAP32[40>>2]|0;
  $retval = $16;
  $29 = $retval;
  STACKTOP = sp;return ($29|0);
 }
 return 0|0;
}
function _builtin_string_replace($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr35 = 0, $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx31 = 0, $buffer = 0, $call = 0, $call25 = 0, $call39 = 0, $cmp = 0, $data = 0, $data10 = 0, $data15 = 0, $data20 = 0, $data28 = 0, $data3 = 0, $data32 = 0, $data36 = 0;
 var $data7 = 0, $find_s = 0, $length = 0, $p = 0, $param_num$addr = 0, $params$addr = 0, $replace_s = 0, $retval = 0, $s = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 32|0;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $s = $1;
 $2 = $params$addr;
 $arrayidx1 = (($2) + 4|0);
 $3 = HEAP32[$arrayidx1>>2]|0;
 $find_s = $3;
 $4 = $params$addr;
 $arrayidx2 = (($4) + 8|0);
 $5 = HEAP32[$arrayidx2>>2]|0;
 $replace_s = $5;
 _memset(($buffer|0),0,4096)|0;
 $6 = $param_num$addr;
 $cmp = ($6|0)==(3);
 if ($cmp) {
  $7 = $s;
  $data = (($7) + 8|0);
  $8 = HEAP32[$data>>2]|0;
  $9 = $find_s;
  $data3 = (($9) + 8|0);
  $10 = HEAP32[$data3>>2]|0;
  $call = (_strstr($8,$10)|0);
  $p = $call;
 } else {
  $29 = $s;
  $data28 = (($29) + 8|0);
  $30 = HEAP32[$data28>>2]|0;
  $31 = $params$addr;
  $arrayidx31 = (($31) + 12|0);
  $32 = HEAP32[$arrayidx31>>2]|0;
  $data32 = (($32) + 8|0);
  $33 = $data32;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($33) + 4)|0;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $add$ptr35 = (($30) + ($35)|0);
  $39 = $find_s;
  $data36 = (($39) + 8|0);
  $40 = HEAP32[$data36>>2]|0;
  $call39 = (_strstr($add$ptr35,$40)|0);
  $p = $call39;
 }
 $11 = $p;
 $tobool = ($11|0)!=(0|0);
 if ($tobool) {
  $12 = $s;
  $data7 = (($12) + 8|0);
  $13 = HEAP32[$data7>>2]|0;
  $14 = $p;
  $15 = $s;
  $data10 = (($15) + 8|0);
  $16 = HEAP32[$data10>>2]|0;
  $sub$ptr$lhs$cast = $14;
  $sub$ptr$rhs$cast = $16;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  (_strncat($buffer,$13,$sub$ptr$sub)|0);
  $17 = $replace_s;
  $data15 = (($17) + 8|0);
  $18 = HEAP32[$data15>>2]|0;
  (_strcat(($buffer|0),($18|0))|0);
  $19 = $p;
  $20 = $find_s;
  $data20 = (($20) + 8|0);
  $length = (($data20) + 8|0);
  $21 = $length;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $add$ptr = (($19) + ($23)|0);
  (_strcat(($buffer|0),($add$ptr|0))|0);
  $call25 = (_strlen(($buffer|0))|0);
  $27 = (_Object_initString($buffer,$call25,0)|0);
  $retval = $27;
  $41 = $retval;
  STACKTOP = sp;return ($41|0);
 } else {
  $28 = $s;
  $retval = $28;
  $41 = $retval;
  STACKTOP = sp;return ($41|0);
 }
 return 0|0;
}
function _builtin_vector_slice($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arrayidx1 = 0, $arrayidx14 = 0, $arrayidx19 = 0, $arrayidx4 = 0, $data = 0;
 var $data11 = 0, $data16 = 0, $data2 = 0, $data22 = 0, $data5 = 0, $data8 = 0, $end = 0, $i = 0, $inc = 0, $length = 0, $length24 = 0, $o = 0, $p = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $size = 0, $start = 0, $t = 0, $use_count = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 16|0;
 $start = sp + 24|0;
 $end = sp;
 $i = sp + 8|0;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p = $1;
 $2 = $params$addr;
 $arrayidx1 = (($2) + 4|0);
 $3 = HEAP32[$arrayidx1>>2]|0;
 $data = (($3) + 8|0);
 $4 = $data;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = $start;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = $param_num$addr;
 if ((($14|0) == 2)) {
  $15 = $p;
  $data2 = (($15) + 8|0);
  $length = (($data2) + 16|0);
  $16 = $length;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = $end;
  $23 = $22;
  HEAP32[$23>>2] = $18;
  $24 = (($22) + 4)|0;
  $25 = $24;
  HEAP32[$25>>2] = $21;
 } else if ((($14|0) == 3)) {
  $26 = $params$addr;
  $arrayidx4 = (($26) + 8|0);
  $27 = HEAP32[$arrayidx4>>2]|0;
  $data5 = (($27) + 8|0);
  $28 = $data5;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($28) + 4)|0;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = $end;
  $35 = $34;
  HEAP32[$35>>2] = $30;
  $36 = (($34) + 4)|0;
  $37 = $36;
  HEAP32[$37>>2] = $33;
 } else {
  (_printf((1752|0),($vararg_buffer|0))|0);
  $38 = HEAP32[40>>2]|0;
  $retval = $38;
  $134 = $retval;
  STACKTOP = sp;return ($134|0);
 }
 $39 = $p;
 $data8 = (($39) + 8|0);
 $size = (($data8) + 8|0);
 $40 = $size;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + 4)|0;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = (_Object_initVector(1,$42,$45)|0);
 $o = $46;
 $47 = $start;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = (($47) + 4)|0;
 $51 = $50;
 $52 = HEAP32[$51>>2]|0;
 $53 = $i;
 $54 = $53;
 HEAP32[$54>>2] = $49;
 $55 = (($53) + 4)|0;
 $56 = $55;
 HEAP32[$56>>2] = $52;
 while(1) {
  $57 = $i;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = (($57) + 4)|0;
  $61 = $60;
  $62 = HEAP32[$61>>2]|0;
  $63 = $end;
  $64 = $63;
  $65 = HEAP32[$64>>2]|0;
  $66 = (($63) + 4)|0;
  $67 = $66;
  $68 = HEAP32[$67>>2]|0;
  $69 = ($62>>>0)<($68>>>0);
  $70 = ($62|0)==($68|0);
  $71 = ($59>>>0)<($65>>>0);
  $72 = $70 & $71;
  $73 = $69 | $72;
  if (!($73)) {
   break;
  }
  $74 = $i;
  $75 = $74;
  $76 = HEAP32[$75>>2]|0;
  $77 = (($74) + 4)|0;
  $78 = $77;
  $79 = HEAP32[$78>>2]|0;
  $80 = $p;
  $data11 = (($80) + 8|0);
  $81 = HEAP32[$data11>>2]|0;
  $arrayidx14 = (($81) + ($76<<2)|0);
  $82 = HEAP32[$arrayidx14>>2]|0;
  $t = $82;
  $83 = $t;
  $use_count = (($83) + 4|0);
  $84 = HEAP32[$use_count>>2]|0;
  $inc = (($84) + 1)|0;
  HEAP32[$use_count>>2] = $inc;
  $85 = $t;
  $86 = $i;
  $87 = $86;
  $88 = HEAP32[$87>>2]|0;
  $89 = (($86) + 4)|0;
  $90 = $89;
  $91 = HEAP32[$90>>2]|0;
  $92 = $start;
  $93 = $92;
  $94 = HEAP32[$93>>2]|0;
  $95 = (($92) + 4)|0;
  $96 = $95;
  $97 = HEAP32[$96>>2]|0;
  $98 = (_i64Subtract(($88|0),($91|0),($94|0),($97|0))|0);
  $99 = tempRet0;
  $100 = $o;
  $data16 = (($100) + 8|0);
  $101 = HEAP32[$data16>>2]|0;
  $arrayidx19 = (($101) + ($98<<2)|0);
  HEAP32[$arrayidx19>>2] = $85;
  $102 = $i;
  $103 = $102;
  $104 = HEAP32[$103>>2]|0;
  $105 = (($102) + 4)|0;
  $106 = $105;
  $107 = HEAP32[$106>>2]|0;
  $108 = (_i64Add(($104|0),($107|0),1,0)|0);
  $109 = tempRet0;
  $110 = $i;
  $111 = $110;
  HEAP32[$111>>2] = $108;
  $112 = (($110) + 4)|0;
  $113 = $112;
  HEAP32[$113>>2] = $109;
 }
 $114 = $end;
 $115 = $114;
 $116 = HEAP32[$115>>2]|0;
 $117 = (($114) + 4)|0;
 $118 = $117;
 $119 = HEAP32[$118>>2]|0;
 $120 = $start;
 $121 = $120;
 $122 = HEAP32[$121>>2]|0;
 $123 = (($120) + 4)|0;
 $124 = $123;
 $125 = HEAP32[$124>>2]|0;
 $126 = (_i64Subtract(($116|0),($119|0),($122|0),($125|0))|0);
 $127 = tempRet0;
 $128 = $o;
 $data22 = (($128) + 8|0);
 $length24 = (($data22) + 16|0);
 $129 = $length24;
 $130 = $129;
 HEAP32[$130>>2] = $126;
 $131 = (($129) + 4)|0;
 $132 = $131;
 HEAP32[$132>>2] = $127;
 $133 = $o;
 $retval = $133;
 $134 = $retval;
 STACKTOP = sp;return ($134|0);
}
function _builtin_set_car($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0, $data = 0, $data2 = 0, $data5 = 0, $dec = 0, $inc = 0;
 var $p1 = 0, $p2 = 0, $param_num$addr = 0, $params$addr = 0, $use_count = 0, $use_count8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p1 = $1;
 $2 = $params$addr;
 $arrayidx1 = (($2) + 4|0);
 $3 = HEAP32[$arrayidx1>>2]|0;
 $p2 = $3;
 $4 = $p1;
 $data = (($4) + 8|0);
 $5 = HEAP32[$data>>2]|0;
 $use_count = (($5) + 4|0);
 $6 = HEAP32[$use_count>>2]|0;
 $dec = (($6) + -1)|0;
 HEAP32[$use_count>>2] = $dec;
 $7 = $p1;
 $data2 = (($7) + 8|0);
 $8 = HEAP32[$data2>>2]|0;
 _Object_free($8);
 $9 = $p2;
 $10 = $p1;
 $data5 = (($10) + 8|0);
 HEAP32[$data5>>2] = $9;
 $11 = $p2;
 $use_count8 = (($11) + 4|0);
 $12 = HEAP32[$use_count8>>2]|0;
 $inc = (($12) + 1)|0;
 HEAP32[$use_count8>>2] = $inc;
 $13 = $p1;
 STACKTOP = sp;return ($13|0);
}
function _builtin_set_cdr($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0, $cdr = 0, $cdr4 = 0, $cdr7 = 0, $data = 0, $data2 = 0;
 var $data5 = 0, $dec = 0, $inc = 0, $p1 = 0, $p2 = 0, $param_num$addr = 0, $params$addr = 0, $use_count = 0, $use_count8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p1 = $1;
 $2 = $params$addr;
 $arrayidx1 = (($2) + 4|0);
 $3 = HEAP32[$arrayidx1>>2]|0;
 $p2 = $3;
 $4 = $p1;
 $data = (($4) + 8|0);
 $cdr = (($data) + 4|0);
 $5 = HEAP32[$cdr>>2]|0;
 $use_count = (($5) + 4|0);
 $6 = HEAP32[$use_count>>2]|0;
 $dec = (($6) + -1)|0;
 HEAP32[$use_count>>2] = $dec;
 $7 = $p1;
 $data2 = (($7) + 8|0);
 $cdr4 = (($data2) + 4|0);
 $8 = HEAP32[$cdr4>>2]|0;
 _Object_free($8);
 $9 = $p2;
 $10 = $p1;
 $data5 = (($10) + 8|0);
 $cdr7 = (($data5) + 4|0);
 HEAP32[$cdr7>>2] = $9;
 $11 = $p2;
 $use_count8 = (($11) + 4|0);
 $12 = HEAP32[$use_count8>>2]|0;
 $inc = (($12) + 1)|0;
 HEAP32[$use_count8>>2] = $inc;
 $13 = $p1;
 STACKTOP = sp;return ($13|0);
}
function _builtin_system($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $data = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = HEAP32[$data>>2]|0;
 (_system(($2|0))|0);
 $3 = HEAP32[40>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _builtin_left_shift($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0;
 var $data = 0, $data2 = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = $data;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $params$addr;
 $arrayidx1 = (($8) + 4|0);
 $9 = HEAP32[$arrayidx1>>2]|0;
 $data2 = (($9) + 8|0);
 $10 = $data2;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (_bitshift64Shl(($4|0),($7|0),($12|0))|0);
 $17 = tempRet0;
 $18 = (_Object_initInteger($16,$17)|0);
 STACKTOP = sp;return ($18|0);
}
function _builtin_right_shift($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0;
 var $data = 0, $data2 = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = $data;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $params$addr;
 $arrayidx1 = (($8) + 4|0);
 $9 = HEAP32[$arrayidx1>>2]|0;
 $data2 = (($9) + 8|0);
 $10 = $data2;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (_bitshift64Ashr(($4|0),($7|0),($12|0))|0);
 $17 = tempRet0;
 $18 = (_Object_initInteger($16,$17)|0);
 STACKTOP = sp;return ($18|0);
}
function _builtin_unsigned_right_shift($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0;
 var $data = 0, $data2 = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = $data;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $params$addr;
 $arrayidx1 = (($8) + 4|0);
 $9 = HEAP32[$arrayidx1>>2]|0;
 $data2 = (($9) + 8|0);
 $10 = $data2;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (_bitshift64Lshr(($4|0),($7|0),($12|0))|0);
 $17 = tempRet0;
 $18 = (_Object_initInteger($16,$17)|0);
 STACKTOP = sp;return ($18|0);
}
function _builtin_bitwise_and($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0;
 var $data = 0, $data2 = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = $data;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $params$addr;
 $arrayidx1 = (($8) + 4|0);
 $9 = HEAP32[$arrayidx1>>2]|0;
 $data2 = (($9) + 8|0);
 $10 = $data2;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $4 & $12;
 $17 = $7 & $15;
 $18 = (_Object_initInteger($16,$17)|0);
 STACKTOP = sp;return ($18|0);
}
function _builtin_bitwise_or($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0;
 var $data = 0, $data2 = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = $data;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $params$addr;
 $arrayidx1 = (($8) + 4|0);
 $9 = HEAP32[$arrayidx1>>2]|0;
 $data2 = (($9) + 8|0);
 $10 = $data2;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $4 | $12;
 $17 = $7 | $15;
 $18 = (_Object_initInteger($16,$17)|0);
 STACKTOP = sp;return ($18|0);
}
function _builtin_abs_path($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $abs_path = 0, $call3 = 0, $data = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $abs_path = sp + 8|0;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = HEAP32[$data>>2]|0;
 (_realpath(($2|0),($abs_path|0))|0);
 $call3 = (_strlen(($abs_path|0))|0);
 $3 = (_Object_initString($abs_path,$call3,0)|0);
 STACKTOP = sp;return ($3|0);
}
function _builtin_float_to_int64($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $param_num$addr = 0, $params$addr = 0, $unsigned_int_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $unsigned_int_ = $data;
 $2 = $unsigned_int_;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_Object_initInteger($5,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _builtin_table_length($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $data = 0, $length = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $length = (($data) + 8|0);
 $2 = $length;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (_Object_initInteger($4,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _builtin_string_char_code_at($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx4 = 0, $data = 0, $data2 = 0;
 var $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $arrayidx = (($0) + 4|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $data = (($1) + 8|0);
 $2 = $data;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $params$addr;
 $9 = HEAP32[$8>>2]|0;
 $data2 = (($9) + 8|0);
 $10 = HEAP32[$data2>>2]|0;
 $arrayidx4 = (($10) + ($4)|0);
 $11 = HEAP8[$arrayidx4>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = ($12|0)<(0);
 $14 = $13 << 31 >> 31;
 $15 = (_Object_initInteger($12,$14)|0);
 STACKTOP = sp;return ($15|0);
}
function _builtin_string_from_char_code($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx4 = 0, $arrayidx6 = 0, $call = 0, $cmp = 0, $conv = 0, $data = 0, $i = 0, $idxprom = 0, $idxprom3 = 0, $idxprom5 = 0, $inc = 0, $mul = 0, $o = 0, $param_num$addr = 0, $params$addr = 0;
 var $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $param_num$addr;
 $add = (($0) + 1)|0;
 $mul = $add;
 $call = (_malloc($mul)|0);
 $s = $call;
 $i = 0;
 while(1) {
  $1 = $i;
  $conv = $1&65535;
  $2 = $param_num$addr;
  $cmp = ($conv>>>0)<($2>>>0);
  if (!($cmp)) {
   break;
  }
  $3 = $i;
  $idxprom = $3&65535;
  $4 = $params$addr;
  $arrayidx = (($4) + ($idxprom<<2)|0);
  $5 = HEAP32[$arrayidx>>2]|0;
  $data = (($5) + 8|0);
  $6 = $data;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + 4)|0;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = $8&255;
  $13 = $i;
  $idxprom3 = $13&65535;
  $14 = $s;
  $arrayidx4 = (($14) + ($idxprom3)|0);
  HEAP8[$arrayidx4>>0] = $12;
  $15 = $i;
  $inc = (($15) + 1)<<16>>16;
  $i = $inc;
 }
 $16 = $i;
 $idxprom5 = $16&65535;
 $17 = $s;
 $arrayidx6 = (($17) + ($idxprom5)|0);
 HEAP8[$arrayidx6>>0] = 0;
 $18 = $s;
 $19 = $param_num$addr;
 $20 = (_Object_initString($18,$19,0)|0);
 $o = $20;
 $21 = $s;
 _free($21);
 $22 = $o;
 STACKTOP = sp;return ($22|0);
}
function _builtin_os_fork($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $param_num$addr = 0, $params$addr = 0, $pid = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $call = (_fork()|0);
 $pid = $call;
 $0 = $pid;
 $1 = ($0|0)<(0);
 $2 = $1 << 31 >> 31;
 $3 = (_Object_initInteger($0,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _builtin_os_getpid($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $call = (_getpid()|0);
 $0 = ($call|0)<(0);
 $1 = $0 << 31 >> 31;
 $2 = (_Object_initInteger($call,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _builtin_os_getppid($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $call = (_getppid()|0);
 $0 = ($call|0)<(0);
 $1 = $0 << 31 >> 31;
 $2 = (_Object_initInteger($call,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _builtin_os_waitpid($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx6 = 0, $cmp = 0, $data = 0, $data2 = 0, $data7 = 0, $param_num$addr = 0, $params$addr = 0, $status = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $status = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $param_num$addr;
 $cmp = ($0|0)==(1);
 if ($cmp) {
  $1 = $params$addr;
  $2 = HEAP32[$1>>2]|0;
  $data = (($2) + 8|0);
  $3 = $data;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  (_waitpid(($5|0),($status|0),0)|0);
  $25 = HEAP32[$status>>2]|0;
  $26 = ($25|0)<(0);
  $27 = $26 << 31 >> 31;
  $28 = (_Object_initInteger($25,$27)|0);
  STACKTOP = sp;return ($28|0);
 } else {
  $9 = $params$addr;
  $10 = HEAP32[$9>>2]|0;
  $data2 = (($10) + 8|0);
  $11 = $data2;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = $params$addr;
  $arrayidx6 = (($17) + 4|0);
  $18 = HEAP32[$arrayidx6>>2]|0;
  $data7 = (($18) + 8|0);
  $19 = $data7;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  (_waitpid(($13|0),($status|0),($21|0))|0);
  $25 = HEAP32[$status>>2]|0;
  $26 = ($25|0)<(0);
  $27 = $26 << 31 >> 31;
  $28 = (_Object_initInteger($25,$27)|0);
  STACKTOP = sp;return ($28|0);
 }
 return 0|0;
}
function _builtin_os_getenv($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $data = 0, $param_num$addr = 0, $params$addr = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = HEAP32[$data>>2]|0;
 $call = (_getenv(($2|0))|0);
 $val = $call;
 $3 = $val;
 $4 = $val;
 $call1 = (_strlen(($4|0))|0);
 $5 = (_Object_initString($3,$call1,0)|0);
 STACKTOP = sp;return ($5|0);
}
function _builtin_sleep($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $data = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = $data;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 (_sleep(($4|0))|0);
 $8 = HEAP32[40>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function _builtin_modulo($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0, $arrayidx5 = 0, $cmp = 0, $cmp3 = 0, $data = 0, $data6 = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $cmp = ($2|0)!=(1);
 if (!($cmp)) {
  $3 = $params$addr;
  $arrayidx1 = (($3) + 4|0);
  $4 = HEAP32[$arrayidx1>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $cmp3 = ($5|0)!=(1);
  if (!($cmp3)) {
   $7 = $params$addr;
   $8 = HEAP32[$7>>2]|0;
   $data = (($8) + 8|0);
   $9 = $data;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + 4)|0;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = $params$addr;
   $arrayidx5 = (($15) + 4|0);
   $16 = HEAP32[$arrayidx5>>2]|0;
   $data6 = (($16) + 8|0);
   $17 = $data6;
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = (($17) + 4)|0;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = (___remdi3(($11|0),($14|0),($19|0),($22|0))|0);
   $24 = tempRet0;
   $25 = (_Object_initInteger($23,$24)|0);
   $retval = $25;
   $26 = $retval;
   STACKTOP = sp;return ($26|0);
  }
 }
 (_printf((1800|0),($vararg_buffer|0))|0);
 $6 = HEAP32[40>>2]|0;
 $retval = $6;
 $26 = $retval;
 STACKTOP = sp;return ($26|0);
}
function _builtin_int($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $data3 = 0, $data4 = 0, $data8 = 0, $numer = 0, $p = 0;
 var $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p = $1;
 $2 = $p;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $9 = $p;
  $retval = $9;
  $33 = $retval;
  STACKTOP = sp;return ($33|0);
 } else if ((($3|0) == 4)) {
  $27 = $p;
  $data8 = (($27) + 8|0);
  $28 = HEAP32[$data8>>2]|0;
  $29 = (_atoll($28)|0);
  $30 = tempRet0;
  $31 = (_Object_initInteger($29,$30)|0);
  $retval = $31;
  $33 = $retval;
  STACKTOP = sp;return ($33|0);
 } else if ((($3|0) == 2)) {
  $4 = $p;
  $data = (($4) + 8|0);
  $5 = +HEAPF64[$data>>3];
  $6 = (~~$5)>>>0;
  $7 = +Math_abs($5) >= 1.0 ? $5 > 0.0 ? (Math_min(+Math_floor($5 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($5 - +(~~$5 >>> 0)) / 4294967296.0) >>> 0 : 0;
  $8 = (_Object_initInteger($6,$7)|0);
  $retval = $8;
  $33 = $retval;
  STACKTOP = sp;return ($33|0);
 } else if ((($3|0) == 3)) {
  $10 = $p;
  $data3 = (($10) + 8|0);
  $numer = (($data3) + 8|0);
  $11 = $numer;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = $p;
  $data4 = (($17) + 8|0);
  $18 = $data4;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (___divdi3(($13|0),($16|0),($20|0),($23|0))|0);
  $25 = tempRet0;
  $26 = (_Object_initInteger($24,$25)|0);
  $retval = $26;
  $33 = $retval;
  STACKTOP = sp;return ($33|0);
 } else {
  (_printf((1832|0),($vararg_buffer|0))|0);
  $32 = HEAP32[40>>2]|0;
  $retval = $32;
  $33 = $retval;
  STACKTOP = sp;return ($33|0);
 }
 return 0|0;
}
function _builtin_float($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call11 = 0.0, $call12 = 0, $call7 = 0, $data = 0, $data3 = 0;
 var $data4 = 0, $data9 = 0, $numer = 0, $p = 0, $param_num$addr = 0, $params$addr = 0, $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $p = $1;
 $2 = $p;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 3)) {
  $13 = $p;
  $data3 = (($13) + 8|0);
  $numer = (($data3) + 8|0);
  $14 = $numer;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = $p;
  $data4 = (($20) + 8|0);
  $21 = $data4;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (___divdi3(($16|0),($19|0),($23|0),($26|0))|0);
  $28 = tempRet0;
  $29 = (+($27>>>0)) + (4294967296.0*(+($28|0)));
  $call7 = (_Object_initDouble($29)|0);
  $retval = $call7;
  $33 = $retval;
  STACKTOP = sp;return ($33|0);
 } else if ((($3|0) == 4)) {
  $30 = $p;
  $data9 = (($30) + 8|0);
  $31 = HEAP32[$data9>>2]|0;
  $call11 = (+_atof($31));
  $call12 = (_Object_initDouble($call11)|0);
  $retval = $call12;
  $33 = $retval;
  STACKTOP = sp;return ($33|0);
 } else if ((($3|0) == 1)) {
  $4 = $p;
  $data = (($4) + 8|0);
  $5 = $data;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (+($7>>>0)) + (4294967296.0*(+($10|0)));
  $call = (_Object_initDouble($11)|0);
  $retval = $call;
  $33 = $retval;
  STACKTOP = sp;return ($33|0);
 } else if ((($3|0) == 2)) {
  $12 = $p;
  $retval = $12;
  $33 = $retval;
  STACKTOP = sp;return ($33|0);
 } else {
  (_printf((1872|0),($vararg_buffer|0))|0);
  $32 = HEAP32[40>>2]|0;
  $retval = $32;
  $33 = $retval;
  STACKTOP = sp;return ($33|0);
 }
 return 0|0;
}
function _builtin_File($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0, $call = 0, $call6 = 0, $data = 0, $data2 = 0, $data7 = 0, $fp = 0;
 var $param_num$addr = 0, $params$addr = 0, $retval = 0, $tobool = 0, $v5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = HEAP32[$data>>2]|0;
 $3 = $params$addr;
 $arrayidx1 = (($3) + 4|0);
 $4 = HEAP32[$arrayidx1>>2]|0;
 $data2 = (($4) + 8|0);
 $5 = HEAP32[$data2>>2]|0;
 $call = (_fopen(($2|0),($5|0))|0);
 $fp = $call;
 $6 = $fp;
 $tobool = ($6|0)!=(0|0);
 if ($tobool) {
  $call6 = (_allocateObject()|0);
  $v5 = $call6;
  $8 = $v5;
  HEAP32[$8>>2] = 11;
  $9 = $fp;
  $10 = $v5;
  $data7 = (($10) + 8|0);
  HEAP32[$data7>>2] = $9;
  $11 = $v5;
  $retval = $11;
  $12 = $retval;
  STACKTOP = sp;return ($12|0);
 } else {
  $7 = HEAP32[40>>2]|0;
  $retval = $7;
  $12 = $retval;
  STACKTOP = sp;return ($12|0);
 }
 return 0|0;
}
function _builtin_file_close($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $data = 0, $data2 = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = HEAP32[$data>>2]|0;
 (_fclose(($2|0))|0);
 $3 = $params$addr;
 $4 = HEAP32[$3>>2]|0;
 $data2 = (($4) + 8|0);
 HEAP32[$data2>>2] = 0;
 $5 = HEAP32[40>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _builtin_file_readlines($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $arrayidx27 = 0, $call1 = 0, $call15 = 0, $cmp = 0;
 var $data = 0, $data12 = 0, $data16 = 0, $data2 = 0, $data21 = 0, $data24 = 0, $data28 = 0, $data3 = 0, $data6 = 0, $data9 = 0, $fp = 0, $len = 0, $length = 0, $length23 = 0, $length30 = 0, $line = 0, $param_num$addr = 0, $params$addr = 0, $read = 0, $s = 0;
 var $size = 0, $size14 = 0, $size8 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $line = sp + 28|0;
 $len = sp;
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = HEAP32[$data>>2]|0;
 $fp = $2;
 $3 = (_Object_initVector(1,16,0)|0);
 $v = $3;
 HEAP32[$line>>2] = 0;
 HEAP32[$len>>2] = 0;
 while(1) {
  $4 = $fp;
  $call1 = (_getline(($line|0),($len|0),($4|0))|0);
  $read = $call1;
  $cmp = ($call1|0)!=(-1);
  if (!($cmp)) {
   break;
  }
  $5 = $v;
  $data2 = (($5) + 8|0);
  $length = (($data2) + 16|0);
  $6 = $length;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + 4)|0;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = $v;
  $data3 = (($12) + 8|0);
  $size = (($data3) + 8|0);
  $13 = $size;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + 4)|0;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = ($8|0)==($15|0);
  $20 = ($11|0)==($18|0);
  $21 = $19 & $20;
  if ($21) {
   $22 = $v;
   $data6 = (($22) + 8|0);
   $size8 = (($data6) + 8|0);
   $23 = $size8;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   $26 = (($23) + 4)|0;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (_bitshift64Shl(($25|0),($28|0),1)|0);
   $30 = tempRet0;
   $31 = $size8;
   $32 = $31;
   HEAP32[$32>>2] = $29;
   $33 = (($31) + 4)|0;
   $34 = $33;
   HEAP32[$34>>2] = $30;
   $35 = $v;
   $data9 = (($35) + 8|0);
   $36 = HEAP32[$data9>>2]|0;
   $37 = $v;
   $data12 = (($37) + 8|0);
   $size14 = (($data12) + 8|0);
   $38 = $size14;
   $39 = $38;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($38) + 4)|0;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = (___muldi3(40,0,($40|0),($43|0))|0);
   $45 = tempRet0;
   $call15 = (_realloc($36,$44)|0);
   $46 = $v;
   $data16 = (($46) + 8|0);
   HEAP32[$data16>>2] = $call15;
  }
  $47 = HEAP32[$line>>2]|0;
  $48 = $read;
  $49 = ($48|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (_Object_initString($47,$48,$50)|0);
  $s = $51;
  $52 = $s;
  $53 = $v;
  $data21 = (($53) + 8|0);
  $length23 = (($data21) + 16|0);
  $54 = $length23;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + 4)|0;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = $v;
  $data24 = (($60) + 8|0);
  $61 = HEAP32[$data24>>2]|0;
  $arrayidx27 = (($61) + ($56<<2)|0);
  HEAP32[$arrayidx27>>2] = $52;
  $62 = $v;
  $data28 = (($62) + 8|0);
  $length30 = (($data28) + 16|0);
  $63 = $length30;
  $64 = $63;
  $65 = HEAP32[$64>>2]|0;
  $66 = (($63) + 4)|0;
  $67 = $66;
  $68 = HEAP32[$67>>2]|0;
  $69 = (_i64Add(($65|0),($68|0),1,0)|0);
  $70 = tempRet0;
  $71 = $length30;
  $72 = $71;
  HEAP32[$72>>2] = $69;
  $73 = (($71) + 4)|0;
  $74 = $73;
  HEAP32[$74>>2] = $70;
 }
 $75 = $v;
 STACKTOP = sp;return ($75|0);
}
function _builtin_file_seek($params,$param_num) {
 $params = $params|0;
 $param_num = $param_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $arrayidx1 = 0, $arrayidx5 = 0, $data = 0, $data2 = 0, $data6 = 0, $fp = 0, $option = 0, $param_num$addr = 0, $params$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params$addr = $params;
 $param_num$addr = $param_num;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 $data = (($1) + 8|0);
 $2 = HEAP32[$data>>2]|0;
 $fp = $2;
 $option = 1;
 $3 = $params$addr;
 $arrayidx1 = (($3) + 8|0);
 $4 = HEAP32[$arrayidx1>>2]|0;
 $data2 = (($4) + 8|0);
 $5 = $data2;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 if ((($7|0) == 1)) {
  if ((($10|0) == 0)) {
   $option = 0;
  } else {
   label = 8;
  }
 } else if ((($7|0) == 2)) {
  if ((($10|0) == 0)) {
   $option = 2;
  } else {
   label = 8;
  }
 } else if ((($7|0) == 3)) {
  if ((($10|0) == 0)) {
   $option = 1;
  } else {
   label = 8;
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
 }
 $11 = $fp;
 $12 = $params$addr;
 $arrayidx5 = (($12) + 4|0);
 $13 = HEAP32[$arrayidx5>>2]|0;
 $data6 = (($13) + 8|0);
 $14 = $data6;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = $option;
 (_fseek(($11|0),($16|0),($20|0))|0);
 $21 = HEAP32[40>>2]|0;
 STACKTOP = sp;return ($21|0);
}
function _Lexer_init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $array_length = 0, $array_size = 0, $call = 0, $call1 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $call = (_malloc(12)|0);
 $l = $call;
 $0 = $l;
 $array_length = (($0) + 4|0);
 HEAP32[$array_length>>2] = 0;
 $call1 = (_malloc(4000)|0);
 $1 = $l;
 HEAP32[$1>>2] = $call1;
 $2 = $l;
 $array_size = (($2) + 8|0);
 HEAP32[$array_size>>2] = 1000;
 $3 = $l;
 STACKTOP = sp;return ($3|0);
}
function _Lexer_push($l,$value) {
 $l = $l|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add = 0, $add12 = 0, $array_length = 0, $array_length11 = 0, $array_length9 = 0, $array_size = 0, $array_size1 = 0, $array_size2 = 0, $arrayidx = 0, $call = 0, $call5 = 0, $call7 = 0, $cmp = 0, $l$addr = 0, $mul = 0, $mul3 = 0, $mul6 = 0, $s = 0, $value$addr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l$addr = $l;
 $value$addr = $value;
 $0 = $l$addr;
 $array_length = (($0) + 4|0);
 $1 = HEAP32[$array_length>>2]|0;
 $2 = $l$addr;
 $array_size = (($2) + 8|0);
 $3 = HEAP32[$array_size>>2]|0;
 $cmp = ($1|0)==($3|0);
 if ($cmp) {
  $4 = $l$addr;
  $array_size1 = (($4) + 8|0);
  $5 = HEAP32[$array_size1>>2]|0;
  $mul = $5<<1;
  HEAP32[$array_size1>>2] = $mul;
  $6 = $l$addr;
  $7 = HEAP32[$6>>2]|0;
  $8 = $l$addr;
  $array_size2 = (($8) + 8|0);
  $9 = HEAP32[$array_size2>>2]|0;
  $mul3 = $9<<2;
  $call = (_realloc($7,$mul3)|0);
  $10 = $l$addr;
  HEAP32[$10>>2] = $call;
 }
 $11 = $value$addr;
 $call5 = (_strlen(($11|0))|0);
 $add = (($call5) + 1)|0;
 $mul6 = $add;
 $call7 = (_malloc($mul6)|0);
 $s = $call7;
 $12 = $s;
 $13 = $value$addr;
 (_strcpy(($12|0),($13|0))|0);
 $14 = $s;
 $15 = $l$addr;
 $array_length9 = (($15) + 4|0);
 $16 = HEAP32[$array_length9>>2]|0;
 $17 = $l$addr;
 $18 = HEAP32[$17>>2]|0;
 $arrayidx = (($18) + ($16<<2)|0);
 HEAP32[$arrayidx>>2] = $14;
 $19 = $l$addr;
 $array_length11 = (($19) + 4|0);
 $20 = HEAP32[$array_length11>>2]|0;
 $add12 = (($20) + 1)|0;
 HEAP32[$array_length11>>2] = $add12;
 STACKTOP = sp;return;
}
function _Lexer_set($l,$index,$value) {
 $l = $l|0;
 $index = $index|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx6 = 0, $call = 0, $call3 = 0;
 var $index$addr = 0, $l$addr = 0, $mul = 0, $s = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l$addr = $l;
 $index$addr = $index;
 $value$addr = $value;
 $0 = $index$addr;
 $1 = $l$addr;
 $2 = HEAP32[$1>>2]|0;
 $arrayidx = (($2) + ($0<<2)|0);
 $3 = HEAP32[$arrayidx>>2]|0;
 _free($3);
 $4 = $index$addr;
 $5 = $l$addr;
 $6 = HEAP32[$5>>2]|0;
 $arrayidx2 = (($6) + ($4<<2)|0);
 HEAP32[$arrayidx2>>2] = 0;
 $7 = $value$addr;
 $call = (_strlen(($7|0))|0);
 $add = (($call) + 1)|0;
 $mul = $add;
 $call3 = (_malloc($mul)|0);
 $s = $call3;
 $8 = $s;
 $9 = $value$addr;
 (_strcpy(($8|0),($9|0))|0);
 $10 = $s;
 $11 = $index$addr;
 $12 = $l$addr;
 $13 = HEAP32[$12>>2]|0;
 $arrayidx6 = (($13) + ($11<<2)|0);
 HEAP32[$arrayidx6>>2] = $10;
 STACKTOP = sp;return;
}
function _Lexer_free($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $array_length = 0, $arrayidx = 0, $arrayidx4 = 0, $i = 0, $l$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp;
 $l$addr = $l;
 $0 = $i;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 while(1) {
  $4 = $i;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = $l$addr;
  $array_length = (($10) + 4|0);
  $11 = HEAP32[$array_length>>2]|0;
  $12 = ($9>>>0)<(0);
  $13 = ($9|0)==(0);
  $14 = ($6>>>0)<($11>>>0);
  $15 = $13 & $14;
  $16 = $12 | $15;
  if (!($16)) {
   break;
  }
  $17 = $i;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = $l$addr;
  $24 = HEAP32[$23>>2]|0;
  $arrayidx = (($24) + ($19<<2)|0);
  $25 = HEAP32[$arrayidx>>2]|0;
  _free($25);
  $26 = $i;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = $l$addr;
  $33 = HEAP32[$32>>2]|0;
  $arrayidx4 = (($33) + ($28<<2)|0);
  HEAP32[$arrayidx4>>2] = 0;
  $34 = $i;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = (($34) + 4)|0;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (_i64Add(($36|0),($39|0),1,0)|0);
  $41 = tempRet0;
  $42 = $i;
  $43 = $42;
  HEAP32[$43>>2] = $40;
  $44 = (($42) + 4)|0;
  $45 = $44;
  HEAP32[$45>>2] = $41;
 }
 $46 = $l$addr;
 $47 = HEAP32[$46>>2]|0;
 _free($47);
 $48 = $l$addr;
 HEAP32[$48>>2] = 0;
 $49 = $l$addr;
 _free($49);
 $l$addr = 0;
 STACKTOP = sp;return;
}
function _string_slice($input_string,$start,$end) {
 $input_string = $input_string|0;
 $start = $start|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx4 = 0;
 var $call = 0, $cmp = 0, $end$addr = 0, $i = 0, $inc = 0, $input_string$addr = 0, $mul = 0, $r = 0, $start$addr = 0, $sub = 0, $sub1 = 0, $sub3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $input_string$addr = $input_string;
 $start$addr = $start;
 $end$addr = $end;
 $0 = $end$addr;
 $1 = $start$addr;
 $sub = (($0) - ($1))|0;
 $add = (($sub) + 1)|0;
 $mul = $add;
 $call = (_malloc($mul)|0);
 $r = $call;
 $2 = $start$addr;
 $i = $2;
 while(1) {
  $3 = $i;
  $4 = $end$addr;
  $cmp = ($3>>>0)<($4>>>0);
  if (!($cmp)) {
   break;
  }
  $5 = $i;
  $6 = $input_string$addr;
  $arrayidx = (($6) + ($5)|0);
  $7 = HEAP8[$arrayidx>>0]|0;
  $8 = $i;
  $9 = $start$addr;
  $sub1 = (($8) - ($9))|0;
  $10 = $r;
  $arrayidx2 = (($10) + ($sub1)|0);
  HEAP8[$arrayidx2>>0] = $7;
  $11 = $i;
  $inc = (($11) + 1)|0;
  $i = $inc;
 }
 $12 = $i;
 $13 = $start$addr;
 $sub3 = (($12) - ($13))|0;
 $14 = $r;
 $arrayidx4 = (($14) + ($sub3)|0);
 HEAP8[$arrayidx4>>0] = 0;
 $15 = $r;
 STACKTOP = sp;return ($15|0);
}
function _lexer_getIndexOfValidStr($input_string,$end,$string_length) {
 $input_string = $input_string|0;
 $end = $end|0;
 $string_length = $string_length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx19 = 0, $arrayidx24 = 0, $arrayidx29 = 0, $arrayidx34 = 0, $arrayidx39 = 0, $arrayidx4 = 0, $arrayidx44 = 0, $arrayidx49 = 0;
 var $arrayidx54 = 0, $arrayidx59 = 0, $arrayidx64 = 0, $arrayidx69 = 0, $arrayidx9 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp16 = 0, $cmp21 = 0, $cmp26 = 0, $cmp31 = 0, $cmp36 = 0, $cmp41 = 0, $cmp46 = 0, $cmp51 = 0, $cmp56 = 0, $cmp6 = 0, $cmp61 = 0, $cmp66 = 0;
 var $cmp71 = 0, $conv = 0, $conv10 = 0, $conv15 = 0, $conv20 = 0, $conv25 = 0, $conv30 = 0, $conv35 = 0, $conv40 = 0, $conv45 = 0, $conv5 = 0, $conv50 = 0, $conv55 = 0, $conv60 = 0, $conv65 = 0, $conv70 = 0, $end$addr = 0, $input_string$addr = 0, $string_length$addr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $input_string$addr = $input_string;
 $end$addr = $end;
 $string_length$addr = $string_length;
 while(1) {
  $0 = $end$addr;
  $1 = $string_length$addr;
  $cmp = ($0|0)==($1|0);
  if ($cmp) {
   break;
  }
  $2 = $end$addr;
  $3 = $input_string$addr;
  $arrayidx = (($3) + ($2)|0);
  $4 = HEAP8[$arrayidx>>0]|0;
  $conv = $4 << 24 >> 24;
  $cmp1 = ($conv|0)==(32);
  if ($cmp1) {
   break;
  }
  $5 = $end$addr;
  $6 = $input_string$addr;
  $arrayidx4 = (($6) + ($5)|0);
  $7 = HEAP8[$arrayidx4>>0]|0;
  $conv5 = $7 << 24 >> 24;
  $cmp6 = ($conv5|0)==(10);
  if ($cmp6) {
   break;
  }
  $8 = $end$addr;
  $9 = $input_string$addr;
  $arrayidx9 = (($9) + ($8)|0);
  $10 = HEAP8[$arrayidx9>>0]|0;
  $conv10 = $10 << 24 >> 24;
  $cmp11 = ($conv10|0)==(9);
  if ($cmp11) {
   break;
  }
  $11 = $end$addr;
  $12 = $input_string$addr;
  $arrayidx14 = (($12) + ($11)|0);
  $13 = HEAP8[$arrayidx14>>0]|0;
  $conv15 = $13 << 24 >> 24;
  $cmp16 = ($conv15|0)==(44);
  if ($cmp16) {
   break;
  }
  $14 = $end$addr;
  $15 = $input_string$addr;
  $arrayidx19 = (($15) + ($14)|0);
  $16 = HEAP8[$arrayidx19>>0]|0;
  $conv20 = $16 << 24 >> 24;
  $cmp21 = ($conv20|0)==(41);
  if ($cmp21) {
   break;
  }
  $17 = $end$addr;
  $18 = $input_string$addr;
  $arrayidx24 = (($18) + ($17)|0);
  $19 = HEAP8[$arrayidx24>>0]|0;
  $conv25 = $19 << 24 >> 24;
  $cmp26 = ($conv25|0)==(40);
  if ($cmp26) {
   break;
  }
  $20 = $end$addr;
  $21 = $input_string$addr;
  $arrayidx29 = (($21) + ($20)|0);
  $22 = HEAP8[$arrayidx29>>0]|0;
  $conv30 = $22 << 24 >> 24;
  $cmp31 = ($conv30|0)==(93);
  if ($cmp31) {
   break;
  }
  $23 = $end$addr;
  $24 = $input_string$addr;
  $arrayidx34 = (($24) + ($23)|0);
  $25 = HEAP8[$arrayidx34>>0]|0;
  $conv35 = $25 << 24 >> 24;
  $cmp36 = ($conv35|0)==(91);
  if ($cmp36) {
   break;
  }
  $26 = $end$addr;
  $27 = $input_string$addr;
  $arrayidx39 = (($27) + ($26)|0);
  $28 = HEAP8[$arrayidx39>>0]|0;
  $conv40 = $28 << 24 >> 24;
  $cmp41 = ($conv40|0)==(123);
  if ($cmp41) {
   break;
  }
  $29 = $end$addr;
  $30 = $input_string$addr;
  $arrayidx44 = (($30) + ($29)|0);
  $31 = HEAP8[$arrayidx44>>0]|0;
  $conv45 = $31 << 24 >> 24;
  $cmp46 = ($conv45|0)==(125);
  if ($cmp46) {
   break;
  }
  $32 = $end$addr;
  $33 = $input_string$addr;
  $arrayidx49 = (($33) + ($32)|0);
  $34 = HEAP8[$arrayidx49>>0]|0;
  $conv50 = $34 << 24 >> 24;
  $cmp51 = ($conv50|0)==(39);
  if ($cmp51) {
   break;
  }
  $35 = $end$addr;
  $36 = $input_string$addr;
  $arrayidx54 = (($36) + ($35)|0);
  $37 = HEAP8[$arrayidx54>>0]|0;
  $conv55 = $37 << 24 >> 24;
  $cmp56 = ($conv55|0)==(96);
  if ($cmp56) {
   break;
  }
  $38 = $end$addr;
  $39 = $input_string$addr;
  $arrayidx59 = (($39) + ($38)|0);
  $40 = HEAP8[$arrayidx59>>0]|0;
  $conv60 = $40 << 24 >> 24;
  $cmp61 = ($conv60|0)==(126);
  if ($cmp61) {
   break;
  }
  $41 = $end$addr;
  $42 = $input_string$addr;
  $arrayidx64 = (($42) + ($41)|0);
  $43 = HEAP8[$arrayidx64>>0]|0;
  $conv65 = $43 << 24 >> 24;
  $cmp66 = ($conv65|0)==(59);
  if ($cmp66) {
   break;
  }
  $44 = $end$addr;
  $45 = $input_string$addr;
  $arrayidx69 = (($45) + ($44)|0);
  $46 = HEAP8[$arrayidx69>>0]|0;
  $conv70 = $46 << 24 >> 24;
  $cmp71 = ($conv70|0)==(58);
  if ($cmp71) {
   break;
  }
  $47 = $end$addr;
  $add = (($47) + 1)|0;
  $end$addr = $add;
 }
 $48 = $end$addr;
 STACKTOP = sp;return ($48|0);
}
function _parser_get_tag($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $call1 = 0, $call5 = 0, $cmp = 0, $cmp2 = 0, $cmp6 = 0, $retval = 0, $s$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s$addr = $s;
 $0 = $s$addr;
 $call = (_strcmp($0,1944)|0);
 $cmp = ($call|0)==(0);
 do {
  if ($cmp) {
   $1 = HEAP32[1968>>2]|0;
   $retval = $1;
  } else {
   $2 = $s$addr;
   $call1 = (_strcmp($2,1960)|0);
   $cmp2 = ($call1|0)==(0);
   if ($cmp2) {
    $3 = HEAP32[1976>>2]|0;
    $retval = $3;
    break;
   }
   $4 = $s$addr;
   $call5 = (_strcmp($4,1936)|0);
   $cmp6 = ($call5|0)==(0);
   if ($cmp6) {
    $5 = HEAP32[1984>>2]|0;
    $retval = $5;
    break;
   } else {
    $6 = HEAP32[1992>>2]|0;
    $retval = $6;
    break;
   }
  }
 } while(0);
 $7 = $retval;
 STACKTOP = sp;return ($7|0);
}
function _isDouble($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp7 = 0, $conv = 0, $conv4 = 0, $conv6 = 0, $conv8 = 0, $p = 0, $retval = 0, $s$addr = 0;
 var $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp;
 $s$addr = $s;
 $0 = $s$addr;
 $cmp = ($0|0)==(0|0);
 if (!($cmp)) {
  $1 = $s$addr;
  $2 = HEAP8[$1>>0]|0;
  $conv = $2 << 24 >> 24;
  $cmp1 = ($conv|0)==(0);
  if (!($cmp1)) {
   $3 = $s$addr;
   $4 = HEAP8[$3>>0]|0;
   $conv4 = $4 << 24 >> 24;
   $call = (_isspace($conv4)|0);
   $tobool = ($call|0)!=(0);
   if (!($tobool)) {
    $5 = $s$addr;
    (+_strtod($5,$p));
    $6 = HEAP32[$p>>2]|0;
    $7 = HEAP8[$6>>0]|0;
    $conv6 = $7 << 24 >> 24;
    $cmp7 = ($conv6|0)==(0);
    $conv8 = $cmp7&1;
    $retval = $conv8;
    $8 = $retval;
    STACKTOP = sp;return ($8|0);
   }
  }
 }
 $retval = 0;
 $8 = $retval;
 STACKTOP = sp;return ($8|0);
}
function _isInteger($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $arrayidx12 = 0, $call = 0, $call5 = 0, $cmp = 0;
 var $cmp1 = 0, $cmp14 = 0, $cmp21 = 0, $cmp6 = 0, $cmp9 = 0, $conv = 0, $conv13 = 0, $conv20 = 0, $conv22 = 0, $conv4 = 0, $conv8 = 0, $p = 0, $retval = 0, $s$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp;
 $s$addr = $s;
 $0 = $s$addr;
 $cmp = ($0|0)==(0|0);
 if (!($cmp)) {
  $1 = $s$addr;
  $2 = HEAP8[$1>>0]|0;
  $conv = $2 << 24 >> 24;
  $cmp1 = ($conv|0)==(0);
  if (!($cmp1)) {
   $3 = $s$addr;
   $4 = HEAP8[$3>>0]|0;
   $conv4 = $4 << 24 >> 24;
   $call = (_isspace($conv4)|0);
   $tobool = ($call|0)!=(0);
   if (!($tobool)) {
    $5 = $s$addr;
    $call5 = (_strlen(($5|0))|0);
    $cmp6 = ($call5>>>0)>=(3);
    if ($cmp6) {
     $6 = $s$addr;
     $7 = HEAP8[$6>>0]|0;
     $conv8 = $7 << 24 >> 24;
     $cmp9 = ($conv8|0)==(48);
     if ($cmp9) {
      $8 = $s$addr;
      $arrayidx12 = (($8) + 1|0);
      $9 = HEAP8[$arrayidx12>>0]|0;
      $conv13 = $9 << 24 >> 24;
      $cmp14 = ($conv13|0)==(120);
      if ($cmp14) {
       $10 = $s$addr;
       $add$ptr = (($10) + 2|0);
       (_strtol($add$ptr,$p,16)|0);
      } else {
       label = 9;
      }
     } else {
      label = 9;
     }
    } else {
     label = 9;
    }
    if ((label|0) == 9) {
     $11 = $s$addr;
     (_strtol($11,$p,10)|0);
    }
    $12 = HEAP32[$p>>2]|0;
    $13 = HEAP8[$12>>0]|0;
    $conv20 = $13 << 24 >> 24;
    $cmp21 = ($conv20|0)==(0);
    $conv22 = $cmp21&1;
    $retval = $conv22;
    $14 = $retval;
    STACKTOP = sp;return ($14|0);
   }
  }
 }
 $retval = 0;
 $14 = $retval;
 STACKTOP = sp;return ($14|0);
}
function _Insts_init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $insts = 0, $length = 0, $size = 0, $size1 = 0, $start_pc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $call = (_malloc(32)|0);
 $insts = $call;
 $0 = $insts;
 $length = (($0) + 8|0);
 $1 = $length;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = $insts;
 $size = (($5) + 16|0);
 $6 = $size;
 $7 = $6;
 HEAP32[$7>>2] = 1024;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = $insts;
 $size1 = (($10) + 16|0);
 $11 = $size1;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (___muldi3(2,0,($13|0),($16|0))|0);
 $18 = tempRet0;
 $call2 = (_malloc($17)|0);
 $19 = $insts;
 HEAP32[$19>>2] = $call2;
 $20 = $insts;
 $start_pc = (($20) + 24|0);
 $21 = $start_pc;
 $22 = $21;
 HEAP32[$22>>2] = 0;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = 0;
 $25 = $insts;
 STACKTOP = sp;return ($25|0);
}
function _Insts_push($insts,$v) {
 $insts = $insts|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $insts$addr = 0, $length = 0, $length5 = 0, $length7 = 0, $size = 0, $size1 = 0, $size2 = 0, $v$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $insts$addr = $insts;
 $v$addr = $v;
 $0 = $insts$addr;
 $length = (($0) + 8|0);
 $1 = $length;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $insts$addr;
 $size = (($7) + 16|0);
 $8 = $size;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($3|0)==($10|0);
 $15 = ($6|0)==($13|0);
 $16 = $14 & $15;
 if ($16) {
  $17 = $insts$addr;
  $size1 = (($17) + 16|0);
  $18 = $size1;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (___muldi3(($20|0),($23|0),2,0)|0);
  $25 = tempRet0;
  $26 = $size1;
  $27 = $26;
  HEAP32[$27>>2] = $24;
  $28 = (($26) + 4)|0;
  $29 = $28;
  HEAP32[$29>>2] = $25;
  $30 = $insts$addr;
  $31 = HEAP32[$30>>2]|0;
  $32 = $insts$addr;
  $size2 = (($32) + 16|0);
  $33 = $size2;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($33) + 4)|0;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = (___muldi3(2,0,($35|0),($38|0))|0);
  $40 = tempRet0;
  $call = (_realloc($31,$39)|0);
  $41 = $insts$addr;
  HEAP32[$41>>2] = $call;
 }
 $42 = $v$addr;
 $43 = $insts$addr;
 $length5 = (($43) + 8|0);
 $44 = $length5;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + 4)|0;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = $insts$addr;
 $51 = HEAP32[$50>>2]|0;
 $arrayidx = (($51) + ($46<<1)|0);
 HEAP16[$arrayidx>>1] = $42;
 $52 = $insts$addr;
 $length7 = (($52) + 8|0);
 $53 = $length7;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 $56 = (($53) + 4)|0;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = (_i64Add(($55|0),($58|0),1,0)|0);
 $60 = tempRet0;
 $61 = $length7;
 $62 = $61;
 HEAP32[$62>>2] = $59;
 $63 = (($61) + 4)|0;
 $64 = $63;
 HEAP32[$64>>2] = $60;
 STACKTOP = sp;return;
}
function _Module_init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call2 = 0, $conv = 0, $length = 0, $m = 0, $mul = 0, $size = 0, $size1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $call = (_malloc(8)|0);
 $m = $call;
 $0 = $m;
 $size = (($0) + 6|0);
 HEAP16[$size>>1] = 8;
 $1 = $m;
 $length = (($1) + 4|0);
 HEAP16[$length>>1] = 0;
 $2 = $m;
 $size1 = (($2) + 6|0);
 $3 = HEAP16[$size1>>1]|0;
 $conv = $3&65535;
 $mul = $conv<<1;
 $call2 = (_malloc($mul)|0);
 $4 = $m;
 HEAP32[$4>>2] = $call2;
 $5 = $m;
 STACKTOP = sp;return ($5|0);
}
function _Module_addOffset($m,$offset) {
 $m = $m|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0;
 var $cmp = 0, $conv = 0, $conv1 = 0, $conv4 = 0, $conv5 = 0, $conv7 = 0, $idxprom = 0, $inc = 0, $length = 0, $length10 = 0, $length12 = 0, $m$addr = 0, $mul = 0, $mul8 = 0, $offset$addr = 0, $size = 0, $size3 = 0, $size6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m$addr = $m;
 $offset$addr = $offset;
 $0 = $m$addr;
 $length = (($0) + 4|0);
 $1 = HEAP16[$length>>1]|0;
 $conv = $1&65535;
 $2 = $m$addr;
 $size = (($2) + 6|0);
 $3 = HEAP16[$size>>1]|0;
 $conv1 = $3&65535;
 $cmp = ($conv|0)==($conv1|0);
 if ($cmp) {
  $4 = $m$addr;
  $size3 = (($4) + 6|0);
  $5 = HEAP16[$size3>>1]|0;
  $conv4 = $5&65535;
  $mul = $conv4<<1;
  $conv5 = $mul&65535;
  HEAP16[$size3>>1] = $conv5;
  $6 = $m$addr;
  $7 = HEAP32[$6>>2]|0;
  $8 = $m$addr;
  $size6 = (($8) + 6|0);
  $9 = HEAP16[$size6>>1]|0;
  $conv7 = $9&65535;
  $mul8 = $conv7<<1;
  $call = (_realloc($7,$mul8)|0);
  $10 = $m$addr;
  HEAP32[$10>>2] = $call;
 }
 $11 = $offset$addr;
 $12 = $m$addr;
 $length10 = (($12) + 4|0);
 $13 = HEAP16[$length10>>1]|0;
 $idxprom = $13&65535;
 $14 = $m$addr;
 $15 = HEAP32[$14>>2]|0;
 $arrayidx = (($15) + ($idxprom<<1)|0);
 HEAP16[$arrayidx>>1] = $11;
 $16 = $m$addr;
 $length12 = (($16) + 4|0);
 $17 = HEAP16[$length12>>1]|0;
 $inc = (($17) + 1)<<16>>16;
 HEAP16[$length12>>1] = $inc;
 STACKTOP = sp;return;
}
function _Module_free($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $m$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m$addr = $m;
 $0 = $m$addr;
 $1 = HEAP32[$0>>2]|0;
 _free($1);
 $2 = $m$addr;
 _free($2);
 STACKTOP = sp;return;
}
function _VTF_init($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $length = 0, $mul = 0, $size$addr = 0, $use_count = 0, $vtf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size$addr = $size;
 $call = (_malloc(12)|0);
 $vtf = $call;
 $0 = $size$addr;
 $mul = $0<<2;
 $call1 = (_malloc($mul)|0);
 $1 = $vtf;
 HEAP32[$1>>2] = $call1;
 $2 = $vtf;
 $length = (($2) + 4|0);
 HEAP32[$length>>2] = 0;
 $3 = $vtf;
 $use_count = (($3) + 8|0);
 HEAP32[$use_count>>2] = 0;
 $4 = $vtf;
 STACKTOP = sp;return ($4|0);
}
function _VTF_push($vtf,$value) {
 $vtf = $vtf|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx6 = 0;
 var $call = 0, $call2 = 0, $cmp = 0, $inc = 0, $inc8 = 0, $length = 0, $length1 = 0, $length4 = 0, $length7 = 0, $mul = 0, $s = 0, $value$addr = 0, $vtf$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vtf$addr = $vtf;
 $value$addr = $value;
 $0 = $value$addr;
 $cmp = ($0|0)==(0|0);
 if ($cmp) {
  $1 = $vtf$addr;
  $length = (($1) + 4|0);
  $2 = HEAP32[$length>>2]|0;
  $3 = $vtf$addr;
  $4 = HEAP32[$3>>2]|0;
  $arrayidx = (($4) + ($2<<2)|0);
  HEAP32[$arrayidx>>2] = 0;
  $5 = $vtf$addr;
  $length1 = (($5) + 4|0);
  $6 = HEAP32[$length1>>2]|0;
  $inc = (($6) + 1)|0;
  HEAP32[$length1>>2] = $inc;
  STACKTOP = sp;return;
 } else {
  $7 = $value$addr;
  $call = (_strlen(($7|0))|0);
  $add = (($call) + 1)|0;
  $mul = $add;
  $call2 = (_malloc($mul)|0);
  $s = $call2;
  $8 = $s;
  $9 = $value$addr;
  (_strcpy(($8|0),($9|0))|0);
  $10 = $s;
  $11 = $vtf$addr;
  $length4 = (($11) + 4|0);
  $12 = HEAP32[$length4>>2]|0;
  $13 = $vtf$addr;
  $14 = HEAP32[$13>>2]|0;
  $arrayidx6 = (($14) + ($12<<2)|0);
  HEAP32[$arrayidx6>>2] = $10;
  $15 = $vtf$addr;
  $length7 = (($15) + 4|0);
  $16 = HEAP32[$length7>>2]|0;
  $inc8 = (($16) + 1)|0;
  HEAP32[$length7>>2] = $inc8;
  STACKTOP = sp;return;
 }
}
function _VT_init() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $call = 0, $call1 = 0, $length = 0, $use_count = 0, $vt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $call = (_malloc(260)|0);
 $vt = $call;
 $call1 = (_VTF_init(4096)|0);
 $0 = $vt;
 HEAP32[$0>>2] = $call1;
 $1 = $vt;
 $2 = HEAP32[$1>>2]|0;
 $use_count = (($2) + 8|0);
 HEAP32[$use_count>>2] = 1;
 $3 = $vt;
 $length = (($3) + 256|0);
 HEAP32[$length>>2] = 1;
 $4 = $vt;
 $5 = HEAP32[$4>>2]|0;
 _VTF_push($5,2000);
 $6 = $vt;
 $7 = HEAP32[$6>>2]|0;
 _VTF_push($7,2008);
 $8 = $vt;
 $9 = HEAP32[$8>>2]|0;
 _VTF_push($9,2016);
 $10 = $vt;
 $11 = HEAP32[$10>>2]|0;
 _VTF_push($11,2024);
 $12 = $vt;
 $13 = HEAP32[$12>>2]|0;
 _VTF_push($13,2032);
 $14 = $vt;
 $15 = HEAP32[$14>>2]|0;
 _VTF_push($15,2040);
 $16 = $vt;
 $17 = HEAP32[$16>>2]|0;
 _VTF_push($17,2048);
 $18 = $vt;
 $19 = HEAP32[$18>>2]|0;
 _VTF_push($19,1920);
 $20 = $vt;
 $21 = HEAP32[$20>>2]|0;
 _VTF_push($21,1912);
 $22 = $vt;
 $23 = HEAP32[$22>>2]|0;
 _VTF_push($23,2056);
 $24 = $vt;
 $25 = HEAP32[$24>>2]|0;
 _VTF_push($25,2072);
 $26 = $vt;
 $27 = HEAP32[$26>>2]|0;
 _VTF_push($27,2088);
 $28 = $vt;
 $29 = HEAP32[$28>>2]|0;
 _VTF_push($29,2104);
 $30 = $vt;
 $31 = HEAP32[$30>>2]|0;
 _VTF_push($31,2112);
 $32 = $vt;
 $33 = HEAP32[$32>>2]|0;
 _VTF_push($33,2120);
 $34 = $vt;
 $35 = HEAP32[$34>>2]|0;
 _VTF_push($35,2128);
 $36 = $vt;
 $37 = HEAP32[$36>>2]|0;
 _VTF_push($37,2136);
 $38 = $vt;
 $39 = HEAP32[$38>>2]|0;
 _VTF_push($39,2144);
 $40 = $vt;
 $41 = HEAP32[$40>>2]|0;
 _VTF_push($41,328);
 $42 = $vt;
 $43 = HEAP32[$42>>2]|0;
 _VTF_push($43,2152);
 $44 = $vt;
 $45 = HEAP32[$44>>2]|0;
 _VTF_push($45,2160);
 $46 = $vt;
 $47 = HEAP32[$46>>2]|0;
 _VTF_push($47,2168);
 $48 = $vt;
 $49 = HEAP32[$48>>2]|0;
 _VTF_push($49,2176);
 $50 = $vt;
 $51 = HEAP32[$50>>2]|0;
 _VTF_push($51,2184);
 $52 = $vt;
 $53 = HEAP32[$52>>2]|0;
 _VTF_push($53,2200);
 $54 = $vt;
 $55 = HEAP32[$54>>2]|0;
 _VTF_push($55,2216);
 $56 = $vt;
 $57 = HEAP32[$56>>2]|0;
 _VTF_push($57,1928);
 $58 = $vt;
 $59 = HEAP32[$58>>2]|0;
 _VTF_push($59,2232);
 $60 = $vt;
 $61 = HEAP32[$60>>2]|0;
 _VTF_push($61,2248);
 $62 = $vt;
 $63 = HEAP32[$62>>2]|0;
 _VTF_push($63,2264);
 $64 = $vt;
 $65 = HEAP32[$64>>2]|0;
 _VTF_push($65,2280);
 $66 = $vt;
 $67 = HEAP32[$66>>2]|0;
 _VTF_push($67,2296);
 $68 = $vt;
 $69 = HEAP32[$68>>2]|0;
 _VTF_push($69,2312);
 $70 = $vt;
 $71 = HEAP32[$70>>2]|0;
 _VTF_push($71,2328);
 $72 = $vt;
 $73 = HEAP32[$72>>2]|0;
 _VTF_push($73,2344);
 $74 = $vt;
 $75 = HEAP32[$74>>2]|0;
 _VTF_push($75,2352);
 $76 = $vt;
 $77 = HEAP32[$76>>2]|0;
 _VTF_push($77,2360);
 $78 = $vt;
 $79 = HEAP32[$78>>2]|0;
 _VTF_push($79,2376);
 $80 = $vt;
 $81 = HEAP32[$80>>2]|0;
 _VTF_push($81,2392);
 $82 = $vt;
 $83 = HEAP32[$82>>2]|0;
 _VTF_push($83,2400);
 $84 = $vt;
 $85 = HEAP32[$84>>2]|0;
 _VTF_push($85,2416);
 $86 = $vt;
 $87 = HEAP32[$86>>2]|0;
 _VTF_push($87,2432);
 $88 = $vt;
 $89 = HEAP32[$88>>2]|0;
 _VTF_push($89,2440);
 $90 = $vt;
 $91 = HEAP32[$90>>2]|0;
 _VTF_push($91,2456);
 $92 = $vt;
 $93 = HEAP32[$92>>2]|0;
 _VTF_push($93,2464);
 $94 = $vt;
 $95 = HEAP32[$94>>2]|0;
 _VTF_push($95,2472);
 $96 = $vt;
 $97 = HEAP32[$96>>2]|0;
 _VTF_push($97,2488);
 $98 = $vt;
 $99 = HEAP32[$98>>2]|0;
 _VTF_push($99,2504);
 $100 = $vt;
 $101 = HEAP32[$100>>2]|0;
 _VTF_push($101,2520);
 $102 = $vt;
 $103 = HEAP32[$102>>2]|0;
 _VTF_push($103,2536);
 $104 = $vt;
 $105 = HEAP32[$104>>2]|0;
 _VTF_push($105,2552);
 $106 = $vt;
 $107 = HEAP32[$106>>2]|0;
 _VTF_push($107,2568);
 $108 = $vt;
 $109 = HEAP32[$108>>2]|0;
 _VTF_push($109,2584);
 $110 = $vt;
 $111 = HEAP32[$110>>2]|0;
 _VTF_push($111,2600);
 $112 = $vt;
 $113 = HEAP32[$112>>2]|0;
 _VTF_push($113,2616);
 $114 = $vt;
 $115 = HEAP32[$114>>2]|0;
 _VTF_push($115,2632);
 $116 = $vt;
 $117 = HEAP32[$116>>2]|0;
 _VTF_push($117,2648);
 $118 = $vt;
 $119 = HEAP32[$118>>2]|0;
 _VTF_push($119,2664);
 $120 = $vt;
 $121 = HEAP32[$120>>2]|0;
 _VTF_push($121,2680);
 $122 = $vt;
 $123 = HEAP32[$122>>2]|0;
 _VTF_push($123,2696);
 $124 = $vt;
 $125 = HEAP32[$124>>2]|0;
 _VTF_push($125,2712);
 $126 = $vt;
 $127 = HEAP32[$126>>2]|0;
 _VTF_push($127,2728);
 $128 = $vt;
 $129 = HEAP32[$128>>2]|0;
 _VTF_push($129,2744);
 $130 = $vt;
 $131 = HEAP32[$130>>2]|0;
 _VTF_push($131,2760);
 $132 = $vt;
 $133 = HEAP32[$132>>2]|0;
 _VTF_push($133,2768);
 $134 = $vt;
 $135 = HEAP32[$134>>2]|0;
 _VTF_push($135,2784);
 $136 = $vt;
 $137 = HEAP32[$136>>2]|0;
 _VTF_push($137,2800);
 $138 = $vt;
 $139 = HEAP32[$138>>2]|0;
 _VTF_push($139,2816);
 $140 = $vt;
 $141 = HEAP32[$140>>2]|0;
 _VTF_push($141,2824);
 $142 = $vt;
 $143 = HEAP32[$142>>2]|0;
 _VTF_push($143,2832);
 $144 = $vt;
 $145 = HEAP32[$144>>2]|0;
 _VTF_push($145,2840);
 $146 = $vt;
 $147 = HEAP32[$146>>2]|0;
 _VTF_push($147,2848);
 $148 = $vt;
 $149 = HEAP32[$148>>2]|0;
 _VTF_push($149,2856);
 $150 = $vt;
 $151 = HEAP32[$150>>2]|0;
 _VTF_push($151,2864);
 $152 = $vt;
 $153 = HEAP32[$152>>2]|0;
 _VTF_push($153,2880);
 $154 = $vt;
 $155 = HEAP32[$154>>2]|0;
 _VTF_push($155,2896);
 $156 = $vt;
 $157 = HEAP32[$156>>2]|0;
 _VTF_push($157,2912);
 $158 = $vt;
 $159 = HEAP32[$158>>2]|0;
 _VTF_push($159,2936);
 $160 = $vt;
 $161 = HEAP32[$160>>2]|0;
 _VTF_push($161,2960);
 $162 = $vt;
 $163 = HEAP32[$162>>2]|0;
 _VTF_push($163,2968);
 $164 = $vt;
 $165 = HEAP32[$164>>2]|0;
 _VTF_push($165,2984);
 $166 = $vt;
 $167 = HEAP32[$166>>2]|0;
 _VTF_push($167,3000);
 $168 = $vt;
 $169 = HEAP32[$168>>2]|0;
 _VTF_push($169,3016);
 $170 = $vt;
 $171 = HEAP32[$170>>2]|0;
 _VTF_push($171,3032);
 $172 = $vt;
 $173 = HEAP32[$172>>2]|0;
 _VTF_push($173,3040);
 $174 = $vt;
 $175 = HEAP32[$174>>2]|0;
 _VTF_push($175,3048);
 $176 = $vt;
 $177 = HEAP32[$176>>2]|0;
 _VTF_push($177,3056);
 $178 = $vt;
 $179 = HEAP32[$178>>2]|0;
 _VTF_push($179,3064);
 $180 = $vt;
 $181 = HEAP32[$180>>2]|0;
 _VTF_push($181,3072);
 $182 = $vt;
 $183 = HEAP32[$182>>2]|0;
 _VTF_push($183,3088);
 $184 = $vt;
 $185 = HEAP32[$184>>2]|0;
 _VTF_push($185,3104);
 $186 = $vt;
 STACKTOP = sp;return ($186|0);
}
function _VT_add_new_empty_frame($vt) {
 $vt = $vt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $arrayidx = 0, $call = 0, $frame = 0, $length = 0, $length1 = 0, $use_count = 0, $vt$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vt$addr = $vt;
 $call = (_VTF_init(64)|0);
 $frame = $call;
 $0 = $frame;
 $use_count = (($0) + 8|0);
 HEAP32[$use_count>>2] = 1;
 $1 = $frame;
 $2 = $vt$addr;
 $length = (($2) + 256|0);
 $3 = HEAP32[$length>>2]|0;
 $4 = $vt$addr;
 $arrayidx = (($4) + ($3<<2)|0);
 HEAP32[$arrayidx>>2] = $1;
 $5 = $vt$addr;
 $length1 = (($5) + 256|0);
 $6 = HEAP32[$length1>>2]|0;
 $add = (($6) + 1)|0;
 HEAP32[$length1>>2] = $add;
 STACKTOP = sp;return;
}
function _VT_copy($vt) {
 $vt = $vt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx4 = 0, $arrayidx6 = 0;
 var $call = 0, $cmp = 0, $i = 0, $inc = 0, $inc7 = 0, $length = 0, $length1 = 0, $length2 = 0, $return_vt = 0, $use_count = 0, $vt$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vt$addr = $vt;
 $0 = $vt$addr;
 $length1 = (($0) + 256|0);
 $1 = HEAP32[$length1>>2]|0;
 $length = $1;
 $call = (_malloc(260)|0);
 $return_vt = $call;
 $2 = $length;
 $3 = $return_vt;
 $length2 = (($3) + 256|0);
 HEAP32[$length2>>2] = $2;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $length;
  $cmp = ($4>>>0)<($5>>>0);
  if (!($cmp)) {
   break;
  }
  $6 = $i;
  $7 = $vt$addr;
  $arrayidx = (($7) + ($6<<2)|0);
  $8 = HEAP32[$arrayidx>>2]|0;
  $9 = $i;
  $10 = $return_vt;
  $arrayidx4 = (($10) + ($9<<2)|0);
  HEAP32[$arrayidx4>>2] = $8;
  $11 = $i;
  $12 = $vt$addr;
  $arrayidx6 = (($12) + ($11<<2)|0);
  $13 = HEAP32[$arrayidx6>>2]|0;
  $use_count = (($13) + 8|0);
  $14 = HEAP32[$use_count>>2]|0;
  $inc = (($14) + 1)|0;
  HEAP32[$use_count>>2] = $inc;
  $15 = $i;
  $inc7 = (($15) + 1)|0;
  $i = $inc7;
 }
 $16 = $return_vt;
 STACKTOP = sp;return ($16|0);
}
function _Macro_init($macro_name,$clauses,$vt) {
 $macro_name = $macro_name|0;
 $clauses = $clauses|0;
 $vt = $vt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $call = 0, $call1 = 0, $call2 = 0, $clauses$addr = 0, $clauses5 = 0, $inc = 0, $m = 0;
 var $macro_name$addr = 0, $mul = 0, $s = 0, $use_count = 0, $vt$addr = 0, $vt6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $macro_name$addr = $macro_name;
 $clauses$addr = $clauses;
 $vt$addr = $vt;
 $call = (_malloc(12)|0);
 $m = $call;
 $0 = $macro_name$addr;
 $call1 = (_strlen(($0|0))|0);
 $add = (($call1) + 1)|0;
 $mul = $add;
 $call2 = (_malloc($mul)|0);
 $s = $call2;
 $1 = $s;
 $2 = $macro_name$addr;
 (_strcpy(($1|0),($2|0))|0);
 $3 = $s;
 $4 = $m;
 HEAP32[$4>>2] = $3;
 $5 = $clauses$addr;
 $6 = $m;
 $clauses5 = (($6) + 4|0);
 HEAP32[$clauses5>>2] = $5;
 $7 = $vt$addr;
 $8 = $m;
 $vt6 = (($8) + 8|0);
 HEAP32[$vt6>>2] = $7;
 $9 = $clauses$addr;
 $use_count = (($9) + 4|0);
 $10 = HEAP32[$use_count>>2]|0;
 $inc = (($10) + 1)|0;
 HEAP32[$use_count>>2] = $inc;
 $11 = $m;
 STACKTOP = sp;return ($11|0);
}
function _Macro_free($macro) {
 $macro = $macro|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $clauses = 0, $clauses1 = 0, $dec = 0, $macro$addr = 0, $use_count = 0, $vt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $macro$addr = $macro;
 $0 = $macro$addr;
 $1 = HEAP32[$0>>2]|0;
 _free($1);
 $2 = $macro$addr;
 $clauses = (($2) + 4|0);
 $3 = HEAP32[$clauses>>2]|0;
 $use_count = (($3) + 4|0);
 $4 = HEAP32[$use_count>>2]|0;
 $dec = (($4) + -1)|0;
 HEAP32[$use_count>>2] = $dec;
 $5 = $macro$addr;
 $clauses1 = (($5) + 4|0);
 $6 = HEAP32[$clauses1>>2]|0;
 _Object_free($6);
 $7 = $macro$addr;
 $vt = (($7) + 8|0);
 $8 = HEAP32[$vt>>2]|0;
 _free($8);
 $9 = $macro$addr;
 _free($9);
 STACKTOP = sp;return;
}
function _MTF_init($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call3 = 0, $length = 0, $mul = 0, $o = 0, $size$addr = 0, $size1 = 0, $size2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size$addr = $size;
 $call = (_malloc(12)|0);
 $o = $call;
 $0 = $size$addr;
 $1 = $o;
 $size1 = (($1) + 4|0);
 HEAP32[$size1>>2] = $0;
 $2 = $o;
 $length = (($2) + 8|0);
 HEAP32[$length>>2] = 0;
 $3 = $o;
 $size2 = (($3) + 4|0);
 $4 = HEAP32[$size2>>2]|0;
 $mul = $4<<2;
 $call3 = (_malloc($mul)|0);
 $5 = $o;
 HEAP32[$5>>2] = $call3;
 $6 = $o;
 STACKTOP = sp;return ($6|0);
}
function _MT_init() {
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $call1 = 0, $length = 0, $o = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $call = (_malloc(260)|0);
 $o = $call;
 $0 = $o;
 $length = (($0) + 256|0);
 HEAP32[$length>>2] = 1;
 $call1 = (_MTF_init(64)|0);
 $1 = $o;
 HEAP32[$1>>2] = $call1;
 $2 = $o;
 STACKTOP = sp;return ($2|0);
}
function _MT_find($mt,$macro_name,$output) {
 $mt = $mt|0;
 $macro_name = $macro_name|0;
 $output = $output|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx15 = 0, $arrayidx6 = 0, $call = 0, $cmp = 0, $cmp4 = 0, $cmp8 = 0, $frame = 0, $frame_length = 0, $i = 0, $inc = 0, $inc12 = 0, $j = 0, $length = 0;
 var $length1 = 0, $length2 = 0, $macro_name$addr = 0, $mt$addr = 0, $output$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mt$addr = $mt;
 $macro_name$addr = $macro_name;
 $output$addr = $output;
 $0 = $mt$addr;
 $length1 = (($0) + 256|0);
 $1 = HEAP32[$length1>>2]|0;
 $length = $1;
 $i = 0;
 L1: while(1) {
  $2 = $i;
  $3 = $length;
  $cmp = ($2>>>0)<($3>>>0);
  if (!($cmp)) {
   label = 11;
   break;
  }
  $4 = $i;
  $5 = $mt$addr;
  $arrayidx = (($5) + ($4<<2)|0);
  $6 = HEAP32[$arrayidx>>2]|0;
  $frame = $6;
  $7 = $frame;
  $length2 = (($7) + 8|0);
  $8 = HEAP32[$length2>>2]|0;
  $frame_length = $8;
  $j = 0;
  while(1) {
   $9 = $j;
   $10 = $frame_length;
   $cmp4 = ($9>>>0)<($10>>>0);
   if (!($cmp4)) {
    break;
   }
   $11 = $j;
   $12 = $frame;
   $13 = HEAP32[$12>>2]|0;
   $arrayidx6 = (($13) + ($11<<2)|0);
   $14 = HEAP32[$arrayidx6>>2]|0;
   $15 = HEAP32[$14>>2]|0;
   $16 = $macro_name$addr;
   $call = (_strcmp($15,$16)|0);
   $cmp8 = ($call|0)==(0);
   if ($cmp8) {
    label = 6;
    break L1;
   }
   $21 = $j;
   $inc = (($21) + 1)|0;
   $j = $inc;
  }
  $22 = $i;
  $inc12 = (($22) + 1)|0;
  $i = $inc12;
 }
 if ((label|0) == 6) {
  $17 = $i;
  $18 = $output$addr;
  HEAP32[$18>>2] = $17;
  $19 = $j;
  $20 = $output$addr;
  $arrayidx10 = (($20) + 4|0);
  HEAP32[$arrayidx10>>2] = $19;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 11) {
  $23 = $output$addr;
  HEAP32[$23>>2] = -1;
  $24 = $output$addr;
  $arrayidx15 = (($24) + 4|0);
  HEAP32[$arrayidx15>>2] = -1;
  STACKTOP = sp;return;
 }
}
function _MT_add_new_empty_frame($mt) {
 $mt = $mt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add = 0, $arrayidx = 0, $call = 0, $frame = 0, $length = 0, $length1 = 0, $mt$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mt$addr = $mt;
 $call = (_MTF_init(64)|0);
 $frame = $call;
 $0 = $frame;
 $1 = $mt$addr;
 $length = (($1) + 256|0);
 $2 = HEAP32[$length>>2]|0;
 $3 = $mt$addr;
 $arrayidx = (($3) + ($2<<2)|0);
 HEAP32[$arrayidx>>2] = $0;
 $4 = $mt$addr;
 $length1 = (($4) + 256|0);
 $5 = HEAP32[$length1>>2]|0;
 $add = (($5) + 1)|0;
 HEAP32[$length1>>2] = $add;
 STACKTOP = sp;return;
}
function _MT_copy($mt) {
 $mt = $mt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx4 = 0, $call = 0, $cmp = 0, $i = 0, $inc = 0, $length = 0;
 var $length1 = 0, $length2 = 0, $mt$addr = 0, $return_mt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mt$addr = $mt;
 $0 = $mt$addr;
 $length1 = (($0) + 256|0);
 $1 = HEAP32[$length1>>2]|0;
 $length = $1;
 $call = (_malloc(260)|0);
 $return_mt = $call;
 $2 = $length;
 $3 = $return_mt;
 $length2 = (($3) + 256|0);
 HEAP32[$length2>>2] = $2;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $length;
  $cmp = ($4>>>0)<($5>>>0);
  if (!($cmp)) {
   break;
  }
  $6 = $i;
  $7 = $mt$addr;
  $arrayidx = (($7) + ($6<<2)|0);
  $8 = HEAP32[$arrayidx>>2]|0;
  $9 = $i;
  $10 = $return_mt;
  $arrayidx4 = (($10) + ($9<<2)|0);
  HEAP32[$arrayidx4>>2] = $8;
  $11 = $i;
  $inc = (($11) + 1)|0;
  $i = $inc;
 }
 $12 = $return_mt;
 STACKTOP = sp;return ($12|0);
}
function _VT_find($vt,$var_name,$output,$module) {
 $vt = $vt|0;
 $var_name = $var_name|0;
 $output = $output|0;
 $module = $module|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx13 = 0, $arrayidx23 = 0, $arrayidx27 = 0, $arrayidx38 = 0, $arrayidx40 = 0, $arrayidx55 = 0, $arrayidx6 = 0, $arrayidx60 = 0, $arrayidx71 = 0;
 var $arrayidx73 = 0, $arrayidx80 = 0, $arrayidx9 = 0, $call = 0, $call32 = 0, $call65 = 0, $cmp = 0, $cmp10 = 0, $cmp20 = 0, $cmp28 = 0, $cmp33 = 0, $cmp4 = 0, $cmp44 = 0, $cmp50 = 0, $cmp61 = 0, $cmp66 = 0, $cmp7 = 0, $conv = 0, $conv39 = 0, $conv49 = 0;
 var $conv72 = 0, $dec = 0, $dec16 = 0, $frame = 0, $i = 0, $idxprom = 0, $idxprom56 = 0, $inc = 0, $inc76 = 0, $j = 0, $length = 0, $length1 = 0, $length19 = 0, $length48 = 0, $module$addr = 0, $output$addr = 0, $sub = 0, $sub2 = 0, $var_name$addr = 0, $var_name2 = 0;
 var $var_name253 = 0, $vt$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vt$addr = $vt;
 $var_name$addr = $var_name;
 $output$addr = $output;
 $module$addr = $module;
 $0 = $vt$addr;
 $length = (($0) + 256|0);
 $1 = HEAP32[$length>>2]|0;
 $sub = (($1) - 1)|0;
 $i = $sub;
 L1: while(1) {
  $2 = $i;
  $cmp = ($2|0)>=(1);
  if (!($cmp)) {
   break;
  }
  $3 = $i;
  $4 = $vt$addr;
  $arrayidx = (($4) + ($3<<2)|0);
  $5 = HEAP32[$arrayidx>>2]|0;
  $frame = $5;
  $6 = $frame;
  $length1 = (($6) + 4|0);
  $7 = HEAP32[$length1>>2]|0;
  $sub2 = (($7) - 1)|0;
  $j = $sub2;
  while(1) {
   $8 = $j;
   $cmp4 = ($8|0)>=(0);
   if (!($cmp4)) {
    break;
   }
   $9 = $j;
   $10 = $frame;
   $11 = HEAP32[$10>>2]|0;
   $arrayidx6 = (($11) + ($9<<2)|0);
   $12 = HEAP32[$arrayidx6>>2]|0;
   $cmp7 = ($12|0)==(0|0);
   if ($cmp7) {
   } else {
    $13 = $j;
    $14 = $frame;
    $15 = HEAP32[$14>>2]|0;
    $arrayidx9 = (($15) + ($13<<2)|0);
    $16 = HEAP32[$arrayidx9>>2]|0;
    $17 = $var_name$addr;
    $call = (_strcmp($16,$17)|0);
    $cmp10 = ($call|0)==(0);
    if ($cmp10) {
     label = 8;
     break L1;
    }
   }
   $22 = $j;
   $dec = (($22) + -1)|0;
   $j = $dec;
  }
  $23 = $i;
  $dec16 = (($23) + -1)|0;
  $i = $dec16;
 }
 if ((label|0) == 8) {
  $18 = $i;
  $19 = $output$addr;
  HEAP32[$19>>2] = $18;
  $20 = $j;
  $21 = $output$addr;
  $arrayidx13 = (($21) + 4|0);
  HEAP32[$arrayidx13>>2] = $20;
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = $module$addr;
  $length19 = (($25) + 4|0);
  $26 = HEAP16[$length19>>1]|0;
  $conv = $26&65535;
  $cmp20 = ($24|0)<($conv|0);
  if (!($cmp20)) {
   break;
  }
  $27 = $i;
  $28 = $module$addr;
  $29 = HEAP32[$28>>2]|0;
  $arrayidx23 = (($29) + ($27<<1)|0);
  $30 = HEAP16[$arrayidx23>>1]|0;
  $idxprom = $30&65535;
  $31 = $vt$addr;
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$32>>2]|0;
  $arrayidx27 = (($33) + ($idxprom<<2)|0);
  $34 = HEAP32[$arrayidx27>>2]|0;
  $var_name2 = $34;
  $35 = $var_name2;
  $cmp28 = ($35|0)==(0|0);
  if ($cmp28) {
  } else {
   $36 = $var_name$addr;
   $37 = $var_name2;
   $call32 = (_strcmp($36,$37)|0);
   $cmp33 = ($call32|0)==(0);
   if ($cmp33) {
    label = 18;
    break;
   }
  }
  $44 = $i;
  $inc = (($44) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 18) {
  $38 = $output$addr;
  HEAP32[$38>>2] = 0;
  $39 = $i;
  $40 = $module$addr;
  $41 = HEAP32[$40>>2]|0;
  $arrayidx38 = (($41) + ($39<<1)|0);
  $42 = HEAP16[$arrayidx38>>1]|0;
  $conv39 = $42&65535;
  $43 = $output$addr;
  $arrayidx40 = (($43) + 4|0);
  HEAP32[$arrayidx40>>2] = $conv39;
  STACKTOP = sp;return;
 }
 $45 = $module$addr;
 $46 = HEAP32[3120>>2]|0;
 $cmp44 = ($45|0)!=($46|0);
 do {
  if ($cmp44) {
   $i = 0;
   while(1) {
    $47 = $i;
    $48 = HEAP32[3120>>2]|0;
    $length48 = (($48) + 4|0);
    $49 = HEAP16[$length48>>1]|0;
    $conv49 = $49&65535;
    $cmp50 = ($47|0)<($conv49|0);
    if (!($cmp50)) {
     label = 30;
     break;
    }
    $50 = $i;
    $51 = HEAP32[3120>>2]|0;
    $52 = HEAP32[$51>>2]|0;
    $arrayidx55 = (($52) + ($50<<1)|0);
    $53 = HEAP16[$arrayidx55>>1]|0;
    $idxprom56 = $53&65535;
    $54 = $vt$addr;
    $55 = HEAP32[$54>>2]|0;
    $56 = HEAP32[$55>>2]|0;
    $arrayidx60 = (($56) + ($idxprom56<<2)|0);
    $57 = HEAP32[$arrayidx60>>2]|0;
    $var_name253 = $57;
    $58 = $var_name253;
    $cmp61 = ($58|0)==(0|0);
    if ($cmp61) {
    } else {
     $59 = $var_name$addr;
     $60 = $var_name253;
     $call65 = (_strcmp($59,$60)|0);
     $cmp66 = ($call65|0)==(0);
     if ($cmp66) {
      break;
     }
    }
    $67 = $i;
    $inc76 = (($67) + 1)|0;
    $i = $inc76;
   }
   if ((label|0) == 30) {
    break;
   }
   $61 = $output$addr;
   HEAP32[$61>>2] = 0;
   $62 = $i;
   $63 = HEAP32[3120>>2]|0;
   $64 = HEAP32[$63>>2]|0;
   $arrayidx71 = (($64) + ($62<<1)|0);
   $65 = HEAP16[$arrayidx71>>1]|0;
   $conv72 = $65&65535;
   $66 = $output$addr;
   $arrayidx73 = (($66) + 4|0);
   HEAP32[$arrayidx73>>2] = $conv72;
   STACKTOP = sp;return;
  }
 } while(0);
 $68 = $output$addr;
 HEAP32[$68>>2] = -1;
 $69 = $output$addr;
 $arrayidx80 = (($69) + 4|0);
 HEAP32[$arrayidx80>>2] = -1;
 STACKTOP = sp;return;
}
function _checkModuleLoaded($m,$abs_path,$global_vtf) {
 $m = $m|0;
 $abs_path = $abs_path|0;
 $global_vtf = $global_vtf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $abs_path$addr = 0, $add = 0, $call = 0, $call2 = 0, $call4 = 0, $call5 = 0, $cmp = 0, $cmp1 = 0, $conv = 0, $global_vtf$addr = 0, $m$addr = 0, $m_ = 0, $mul = 0, $new_m = 0, $next = 0, $next3 = 0, $offset = 0, $offset9 = 0;
 var $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m$addr = $m;
 $abs_path$addr = $abs_path;
 $global_vtf$addr = $global_vtf;
 $0 = $m$addr;
 $1 = HEAP32[$0>>2]|0;
 $m_ = $1;
 while(1) {
  $2 = $m_;
  $cmp = ($2|0)!=(0|0);
  if (!($cmp)) {
   label = 6;
   break;
  }
  $3 = $m_;
  $4 = HEAP32[$3>>2]|0;
  $5 = $abs_path$addr;
  $call = (_strcmp($4,$5)|0);
  $cmp1 = ($call|0)==(0);
  if ($cmp1) {
   label = 4;
   break;
  }
  $8 = $m_;
  $next = (($8) + 4|0);
  $9 = HEAP32[$next>>2]|0;
  $m_ = $9;
 }
 if ((label|0) == 4) {
  $6 = $m_;
  $offset = (($6) + 8|0);
  $7 = HEAP16[$offset>>1]|0;
  $conv = $7&65535;
  $retval = $conv;
  $21 = $retval;
  STACKTOP = sp;return ($21|0);
 }
 else if ((label|0) == 6) {
  $call2 = (_malloc(12)|0);
  $new_m = $call2;
  $10 = $m$addr;
  $11 = HEAP32[$10>>2]|0;
  $12 = $new_m;
  $next3 = (($12) + 4|0);
  HEAP32[$next3>>2] = $11;
  $13 = $abs_path$addr;
  $call4 = (_strlen(($13|0))|0);
  $add = (1 + ($call4))|0;
  $mul = $add;
  $call5 = (_malloc($mul)|0);
  $14 = $new_m;
  HEAP32[$14>>2] = $call5;
  $15 = $new_m;
  $16 = HEAP32[$15>>2]|0;
  $17 = $abs_path$addr;
  (_strcpy(($16|0),($17|0))|0);
  $18 = $new_m;
  $offset9 = (($18) + 8|0);
  HEAP16[$offset9>>1] = 0;
  $19 = $new_m;
  $20 = $m$addr;
  HEAP32[$20>>2] = $19;
  $retval = 0;
  $21 = $retval;
  STACKTOP = sp;return ($21|0);
 }
 return 0|0;
}
function _Walley_init() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arrayidx = 0, $arrayidx65 = 0, $arrayidx66 = 0, $arrayidx67 = 0, $arrayidx68 = 0, $arrayidx69 = 0, $arrayidx70 = 0, $arrayidx71 = 0, $arrayidx72 = 0, $arrayidx73 = 0, $arrayidx74 = 0, $arrayidx75 = 0, $arrayidx76 = 0, $arrayidx77 = 0, $arrayidx78 = 0, $arrayidx79 = 0, $arrayidx80 = 0, $arrayidx81 = 0, $arrayidx82 = 0, $arrayidx83 = 0;
 var $arrayidx84 = 0, $call = 0, $call100 = 0, $call101 = 0, $call62 = 0, $call85 = 0, $call86 = 0, $call87 = 0, $call88 = 0, $call89 = 0, $call90 = 0, $cmp = 0, $cmp93 = 0, $conv96 = 0, $i = 0, $inc = 0, $inc98 = 0, $length = 0, $next = 0, $offset = 0;
 var $t = 0, $use_count = 0, $use_count10 = 0, $use_count12 = 0, $use_count14 = 0, $use_count16 = 0, $use_count18 = 0, $use_count2 = 0, $use_count20 = 0, $use_count22 = 0, $use_count24 = 0, $use_count26 = 0, $use_count28 = 0, $use_count30 = 0, $use_count32 = 0, $use_count34 = 0, $use_count36 = 0, $use_count38 = 0, $use_count4 = 0, $use_count40 = 0;
 var $use_count6 = 0, $use_count64 = 0, $use_count8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $call = (_Object_initNull()|0);
 HEAP32[40>>2] = $call;
 $0 = HEAP32[40>>2]|0;
 $use_count = (($0) + 4|0);
 HEAP32[$use_count>>2] = 1;
 $1 = (_Object_initString(3128,5,0)|0);
 HEAP32[1968>>2] = $1;
 $2 = HEAP32[1968>>2]|0;
 $use_count2 = (($2) + 4|0);
 HEAP32[$use_count2>>2] = 1;
 $3 = (_Object_initString(3136,7,0)|0);
 HEAP32[1976>>2] = $3;
 $4 = HEAP32[1976>>2]|0;
 $use_count4 = (($4) + 4|0);
 HEAP32[$use_count4>>2] = 1;
 $5 = (_Object_initString(3144,14,0)|0);
 HEAP32[1984>>2] = $5;
 $6 = HEAP32[1984>>2]|0;
 $use_count6 = (($6) + 4|0);
 HEAP32[$use_count6>>2] = 1;
 $7 = (_Object_initString(3160,10,0)|0);
 HEAP32[1992>>2] = $7;
 $8 = HEAP32[1992>>2]|0;
 $use_count8 = (($8) + 4|0);
 HEAP32[$use_count8>>2] = 1;
 $9 = (_Object_initString(2000,4,0)|0);
 HEAP32[3176>>2] = $9;
 $10 = HEAP32[3176>>2]|0;
 $use_count10 = (($10) + 4|0);
 HEAP32[$use_count10>>2] = 1;
 $11 = (_Object_initString(3184,3,0)|0);
 HEAP32[3192>>2] = $11;
 $12 = HEAP32[3192>>2]|0;
 $use_count12 = (($12) + 4|0);
 HEAP32[$use_count12>>2] = 1;
 $13 = (_Object_initString(3200,4,0)|0);
 HEAP32[3208>>2] = $13;
 $14 = HEAP32[3208>>2]|0;
 $use_count14 = (($14) + 4|0);
 HEAP32[$use_count14>>2] = 1;
 $15 = (_Object_initString(3216,6,0)|0);
 HEAP32[952>>2] = $15;
 $16 = HEAP32[952>>2]|0;
 $use_count16 = (($16) + 4|0);
 HEAP32[$use_count16>>2] = 1;
 $17 = (_Object_initString(3224,4,0)|0);
 HEAP32[584>>2] = $17;
 $18 = HEAP32[584>>2]|0;
 $use_count18 = (($18) + 4|0);
 HEAP32[$use_count18>>2] = 1;
 $19 = (_Object_initString(3232,7,0)|0);
 HEAP32[912>>2] = $19;
 $20 = HEAP32[912>>2]|0;
 $use_count20 = (($20) + 4|0);
 HEAP32[$use_count20>>2] = 1;
 $21 = (_Object_initString(3240,5,0)|0);
 HEAP32[920>>2] = $21;
 $22 = HEAP32[920>>2]|0;
 $use_count22 = (($22) + 4|0);
 HEAP32[$use_count22>>2] = 1;
 $23 = (_Object_initString(3248,5,0)|0);
 HEAP32[928>>2] = $23;
 $24 = HEAP32[928>>2]|0;
 $use_count24 = (($24) + 4|0);
 HEAP32[$use_count24>>2] = 1;
 $25 = (_Object_initString(3256,6,0)|0);
 HEAP32[936>>2] = $25;
 $26 = HEAP32[936>>2]|0;
 $use_count26 = (($26) + 4|0);
 HEAP32[$use_count26>>2] = 1;
 $27 = (_Object_initString(3264,4,0)|0);
 HEAP32[944>>2] = $27;
 $28 = HEAP32[944>>2]|0;
 $use_count28 = (($28) + 4|0);
 HEAP32[$use_count28>>2] = 1;
 $29 = (_Object_initString(3272,6,0)|0);
 HEAP32[960>>2] = $29;
 $30 = HEAP32[960>>2]|0;
 $use_count30 = (($30) + 4|0);
 HEAP32[$use_count30>>2] = 1;
 $31 = (_Object_initString(3280,5,0)|0);
 HEAP32[968>>2] = $31;
 $32 = HEAP32[968>>2]|0;
 $use_count32 = (($32) + 4|0);
 HEAP32[$use_count32>>2] = 1;
 $33 = (_Object_initString(3288,5,0)|0);
 HEAP32[3296>>2] = $33;
 $34 = HEAP32[3296>>2]|0;
 $use_count34 = (($34) + 4|0);
 HEAP32[$use_count34>>2] = 1;
 $35 = (_Object_initString(2456,5,0)|0);
 HEAP32[3304>>2] = $35;
 $36 = HEAP32[3304>>2]|0;
 $use_count36 = (($36) + 4|0);
 HEAP32[$use_count36>>2] = 1;
 $37 = (_Object_initString(3312,4,0)|0);
 HEAP32[3320>>2] = $37;
 $38 = HEAP32[3320>>2]|0;
 $use_count38 = (($38) + 4|0);
 HEAP32[$use_count38>>2] = 1;
 $39 = (_Object_initString(3328,6,0)|0);
 HEAP32[976>>2] = $39;
 $40 = HEAP32[976>>2]|0;
 $use_count40 = (($40) + 4|0);
 HEAP32[$use_count40>>2] = 1;
 $41 = (_Object_initTable(1024,0)|0);
 HEAP32[3336>>2] = $41;
 $42 = HEAP32[3336>>2]|0;
 $43 = HEAP32[1968>>2]|0;
 $44 = (_Object_initInteger(250,0)|0);
 _Table_setval($42,$43,$44);
 $45 = HEAP32[3336>>2]|0;
 $46 = HEAP32[1976>>2]|0;
 $47 = (_Object_initInteger(251,0)|0);
 _Table_setval($45,$46,$47);
 $48 = HEAP32[3336>>2]|0;
 $49 = HEAP32[1984>>2]|0;
 $50 = (_Object_initInteger(252,0)|0);
 _Table_setval($48,$49,$50);
 $51 = HEAP32[3336>>2]|0;
 $52 = HEAP32[1992>>2]|0;
 $53 = (_Object_initInteger(253,0)|0);
 _Table_setval($51,$52,$53);
 $54 = HEAP32[3336>>2]|0;
 $55 = HEAP32[3176>>2]|0;
 $56 = (_Object_initInteger(254,0)|0);
 _Table_setval($54,$55,$56);
 $57 = HEAP32[3336>>2]|0;
 $58 = HEAP32[3192>>2]|0;
 $59 = (_Object_initInteger(255,0)|0);
 _Table_setval($57,$58,$59);
 $60 = HEAP32[3336>>2]|0;
 $61 = HEAP32[3208>>2]|0;
 $62 = (_Object_initInteger(256,0)|0);
 _Table_setval($60,$61,$62);
 $63 = HEAP32[3336>>2]|0;
 $64 = HEAP32[952>>2]|0;
 $65 = (_Object_initInteger(257,0)|0);
 _Table_setval($63,$64,$65);
 $66 = HEAP32[3336>>2]|0;
 $67 = HEAP32[584>>2]|0;
 $68 = (_Object_initInteger(258,0)|0);
 _Table_setval($66,$67,$68);
 $69 = HEAP32[3336>>2]|0;
 $70 = HEAP32[912>>2]|0;
 $71 = (_Object_initInteger(259,0)|0);
 _Table_setval($69,$70,$71);
 $72 = HEAP32[3336>>2]|0;
 $73 = HEAP32[920>>2]|0;
 $74 = (_Object_initInteger(260,0)|0);
 _Table_setval($72,$73,$74);
 $75 = HEAP32[3336>>2]|0;
 $76 = HEAP32[928>>2]|0;
 $77 = (_Object_initInteger(261,0)|0);
 _Table_setval($75,$76,$77);
 $78 = HEAP32[3336>>2]|0;
 $79 = HEAP32[936>>2]|0;
 $80 = (_Object_initInteger(262,0)|0);
 _Table_setval($78,$79,$80);
 $81 = HEAP32[3336>>2]|0;
 $82 = HEAP32[944>>2]|0;
 $83 = (_Object_initInteger(263,0)|0);
 _Table_setval($81,$82,$83);
 $84 = HEAP32[3336>>2]|0;
 $85 = HEAP32[960>>2]|0;
 $86 = (_Object_initInteger(264,0)|0);
 _Table_setval($84,$85,$86);
 $87 = HEAP32[3336>>2]|0;
 $88 = HEAP32[968>>2]|0;
 $89 = (_Object_initInteger(265,0)|0);
 _Table_setval($87,$88,$89);
 $90 = HEAP32[3336>>2]|0;
 $91 = HEAP32[3296>>2]|0;
 $92 = (_Object_initInteger(266,0)|0);
 _Table_setval($90,$91,$92);
 $93 = HEAP32[3336>>2]|0;
 $94 = HEAP32[3304>>2]|0;
 $95 = (_Object_initInteger(267,0)|0);
 _Table_setval($93,$94,$95);
 $96 = HEAP32[3336>>2]|0;
 $97 = HEAP32[3320>>2]|0;
 $98 = (_Object_initInteger(268,0)|0);
 _Table_setval($96,$97,$98);
 $99 = HEAP32[3336>>2]|0;
 $100 = HEAP32[976>>2]|0;
 $101 = (_Object_initInteger(269,0)|0);
 _Table_setval($99,$100,$101);
 $102 = 3344;
 $103 = $102;
 HEAP32[$103>>2] = 270;
 $104 = (($102) + 4)|0;
 $105 = $104;
 HEAP32[$105>>2] = 0;
 $call62 = (_malloc(4096)|0);
 HEAP32[3352>>2] = $call62;
 $106 = 3360;
 $107 = $106;
 HEAP32[$107>>2] = 1024;
 $108 = (($106) + 4)|0;
 $109 = $108;
 HEAP32[$109>>2] = 0;
 $i = 0;
 while(1) {
  $110 = $i;
  $cmp = ($110|0)<(250);
  if (!($cmp)) {
   break;
  }
  $111 = $i;
  $112 = ($111|0)<(0);
  $113 = $112 << 31 >> 31;
  $114 = (_Object_initInteger($111,$113)|0);
  $t = $114;
  $115 = $t;
  $use_count64 = (($115) + 4|0);
  HEAP32[$use_count64>>2] = 1;
  $116 = $t;
  $117 = $i;
  $118 = HEAP32[3352>>2]|0;
  $arrayidx = (($118) + ($117<<2)|0);
  HEAP32[$arrayidx>>2] = $116;
  $119 = $i;
  $inc = (($119) + 1)|0;
  $i = $inc;
 }
 $120 = HEAP32[1968>>2]|0;
 $121 = HEAP32[3352>>2]|0;
 $arrayidx65 = (($121) + 1000|0);
 HEAP32[$arrayidx65>>2] = $120;
 $122 = HEAP32[1976>>2]|0;
 $123 = HEAP32[3352>>2]|0;
 $arrayidx66 = (($123) + 1004|0);
 HEAP32[$arrayidx66>>2] = $122;
 $124 = HEAP32[1984>>2]|0;
 $125 = HEAP32[3352>>2]|0;
 $arrayidx67 = (($125) + 1008|0);
 HEAP32[$arrayidx67>>2] = $124;
 $126 = HEAP32[1992>>2]|0;
 $127 = HEAP32[3352>>2]|0;
 $arrayidx68 = (($127) + 1012|0);
 HEAP32[$arrayidx68>>2] = $126;
 $128 = HEAP32[3176>>2]|0;
 $129 = HEAP32[3352>>2]|0;
 $arrayidx69 = (($129) + 1016|0);
 HEAP32[$arrayidx69>>2] = $128;
 $130 = HEAP32[3192>>2]|0;
 $131 = HEAP32[3352>>2]|0;
 $arrayidx70 = (($131) + 1020|0);
 HEAP32[$arrayidx70>>2] = $130;
 $132 = HEAP32[3208>>2]|0;
 $133 = HEAP32[3352>>2]|0;
 $arrayidx71 = (($133) + 1024|0);
 HEAP32[$arrayidx71>>2] = $132;
 $134 = HEAP32[952>>2]|0;
 $135 = HEAP32[3352>>2]|0;
 $arrayidx72 = (($135) + 1028|0);
 HEAP32[$arrayidx72>>2] = $134;
 $136 = HEAP32[584>>2]|0;
 $137 = HEAP32[3352>>2]|0;
 $arrayidx73 = (($137) + 1032|0);
 HEAP32[$arrayidx73>>2] = $136;
 $138 = HEAP32[912>>2]|0;
 $139 = HEAP32[3352>>2]|0;
 $arrayidx74 = (($139) + 1036|0);
 HEAP32[$arrayidx74>>2] = $138;
 $140 = HEAP32[920>>2]|0;
 $141 = HEAP32[3352>>2]|0;
 $arrayidx75 = (($141) + 1040|0);
 HEAP32[$arrayidx75>>2] = $140;
 $142 = HEAP32[928>>2]|0;
 $143 = HEAP32[3352>>2]|0;
 $arrayidx76 = (($143) + 1044|0);
 HEAP32[$arrayidx76>>2] = $142;
 $144 = HEAP32[936>>2]|0;
 $145 = HEAP32[3352>>2]|0;
 $arrayidx77 = (($145) + 1048|0);
 HEAP32[$arrayidx77>>2] = $144;
 $146 = HEAP32[944>>2]|0;
 $147 = HEAP32[3352>>2]|0;
 $arrayidx78 = (($147) + 1052|0);
 HEAP32[$arrayidx78>>2] = $146;
 $148 = HEAP32[960>>2]|0;
 $149 = HEAP32[3352>>2]|0;
 $arrayidx79 = (($149) + 1056|0);
 HEAP32[$arrayidx79>>2] = $148;
 $150 = HEAP32[968>>2]|0;
 $151 = HEAP32[3352>>2]|0;
 $arrayidx80 = (($151) + 1060|0);
 HEAP32[$arrayidx80>>2] = $150;
 $152 = HEAP32[3296>>2]|0;
 $153 = HEAP32[3352>>2]|0;
 $arrayidx81 = (($153) + 1064|0);
 HEAP32[$arrayidx81>>2] = $152;
 $154 = HEAP32[3304>>2]|0;
 $155 = HEAP32[3352>>2]|0;
 $arrayidx82 = (($155) + 1068|0);
 HEAP32[$arrayidx82>>2] = $154;
 $156 = HEAP32[3320>>2]|0;
 $157 = HEAP32[3352>>2]|0;
 $arrayidx83 = (($157) + 1072|0);
 HEAP32[$arrayidx83>>2] = $156;
 $158 = HEAP32[976>>2]|0;
 $159 = HEAP32[3352>>2]|0;
 $arrayidx84 = (($159) + 1076|0);
 HEAP32[$arrayidx84>>2] = $158;
 $160 = 3368;
 $161 = $160;
 HEAP32[$161>>2] = 270;
 $162 = (($160) + 4)|0;
 $163 = $162;
 HEAP32[$163>>2] = 0;
 $call85 = (_Insts_init()|0);
 HEAP32[3376>>2] = $call85;
 $164 = 3384;
 $165 = $164;
 HEAP32[$165>>2] = 0;
 $166 = (($164) + 4)|0;
 $167 = $166;
 HEAP32[$167>>2] = 0;
 $call86 = (_Insts_init()|0);
 HEAP32[3392>>2] = $call86;
 $call87 = (_VT_init()|0);
 HEAP32[3400>>2] = $call87;
 $call88 = (_createEnvironment()|0);
 HEAP32[3408>>2] = $call88;
 $call89 = (_MT_init()|0);
 HEAP32[3416>>2] = $call89;
 $call90 = (_Module_init()|0);
 HEAP32[3120>>2] = $call90;
 $i = 0;
 while(1) {
  $168 = $i;
  $169 = HEAP32[3400>>2]|0;
  $170 = HEAP32[$169>>2]|0;
  $length = (($170) + 4|0);
  $171 = HEAP32[$length>>2]|0;
  $cmp93 = ($168>>>0)<($171>>>0);
  if (!($cmp93)) {
   break;
  }
  $172 = HEAP32[3120>>2]|0;
  $173 = $i;
  $conv96 = $173&65535;
  _Module_addOffset($172,$conv96);
  $174 = $i;
  $inc98 = (($174) + 1)|0;
  $i = $inc98;
 }
 $call100 = (_malloc(12)|0);
 HEAP32[3424>>2] = $call100;
 $175 = HEAP32[3424>>2]|0;
 $next = (($175) + 4|0);
 HEAP32[$next>>2] = 0;
 $call101 = (_malloc(1)|0);
 $176 = HEAP32[3424>>2]|0;
 HEAP32[$176>>2] = $call101;
 $177 = HEAP32[3424>>2]|0;
 $178 = HEAP32[$177>>2]|0;
 HEAP8[$178>>0] = 0;
 $179 = HEAP32[3424>>2]|0;
 $offset = (($179) + 8|0);
 HEAP16[$offset>>1] = 0;
 STACKTOP = sp;return;
}
function _EF_free($ef) {
 $ef = $ef|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx4 = 0;
 var $cmp = 0, $cmp1 = 0, $dec = 0, $ef$addr = 0, $i = 0, $inc = 0, $length = 0, $use_count = 0, $use_count2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ef$addr = $ef;
 $0 = $ef$addr;
 $use_count = (($0) + 8|0);
 $1 = HEAP32[$use_count>>2]|0;
 $cmp = ($1|0)==(0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $ef$addr;
  $length = (($3) + 4|0);
  $4 = HEAP32[$length>>2]|0;
  $cmp1 = ($2|0)<($4|0);
  if (!($cmp1)) {
   break;
  }
  $5 = $i;
  $6 = $ef$addr;
  $7 = HEAP32[$6>>2]|0;
  $arrayidx = (($7) + ($5<<2)|0);
  $8 = HEAP32[$arrayidx>>2]|0;
  $use_count2 = (($8) + 4|0);
  $9 = HEAP32[$use_count2>>2]|0;
  $dec = (($9) + -1)|0;
  HEAP32[$use_count2>>2] = $dec;
  $10 = $i;
  $11 = $ef$addr;
  $12 = HEAP32[$11>>2]|0;
  $arrayidx4 = (($12) + ($10<<2)|0);
  $13 = HEAP32[$arrayidx4>>2]|0;
  _Object_free($13);
  $14 = $i;
  $inc = (($14) + 1)|0;
  $i = $inc;
 }
 $15 = $ef$addr;
 $16 = HEAP32[$15>>2]|0;
 _free($16);
 $17 = $ef$addr;
 _free($17);
 STACKTOP = sp;return;
}
function _EF_init_with_size($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $frame = 0, $length = 0, $size$addr = 0, $use_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size$addr = $size;
 $call = (_malloc(12)|0);
 $frame = $call;
 $0 = $frame;
 $length = (($0) + 4|0);
 HEAP32[$length>>2] = 0;
 $1 = $size$addr;
 $call1 = (_calloc($1,4)|0);
 $2 = $frame;
 HEAP32[$2>>2] = $call1;
 $3 = $frame;
 $use_count = (($3) + 8|0);
 HEAP32[$use_count>>2] = 0;
 $4 = $frame;
 STACKTOP = sp;return ($4|0);
}
function _Env_init_with_size($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call1 = 0, $env = 0, $length = 0, $mul = 0, $size$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size$addr = $size;
 $call = (_malloc(8)|0);
 $env = $call;
 $0 = $size$addr;
 $mul = $0<<2;
 $call1 = (_malloc($mul)|0);
 $1 = $env;
 HEAP32[$1>>2] = $call1;
 $2 = $env;
 $length = (($2) + 4|0);
 HEAP32[$length>>2] = 0;
 $3 = $env;
 STACKTOP = sp;return ($3|0);
}
function _createFrame0() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arrayidx = 0, $arrayidx101 = 0, $arrayidx105 = 0, $arrayidx109 = 0, $arrayidx113 = 0, $arrayidx117 = 0, $arrayidx121 = 0, $arrayidx125 = 0, $arrayidx128 = 0, $arrayidx13 = 0, $arrayidx130 = 0, $arrayidx136 = 0;
 var $arrayidx140 = 0, $arrayidx144 = 0, $arrayidx148 = 0, $arrayidx152 = 0, $arrayidx156 = 0, $arrayidx160 = 0, $arrayidx164 = 0, $arrayidx168 = 0, $arrayidx17 = 0, $arrayidx172 = 0, $arrayidx176 = 0, $arrayidx180 = 0, $arrayidx184 = 0, $arrayidx188 = 0, $arrayidx192 = 0, $arrayidx196 = 0, $arrayidx200 = 0, $arrayidx204 = 0, $arrayidx208 = 0, $arrayidx21 = 0;
 var $arrayidx212 = 0, $arrayidx216 = 0, $arrayidx220 = 0, $arrayidx224 = 0, $arrayidx228 = 0, $arrayidx232 = 0, $arrayidx236 = 0, $arrayidx240 = 0, $arrayidx244 = 0, $arrayidx248 = 0, $arrayidx25 = 0, $arrayidx252 = 0, $arrayidx256 = 0, $arrayidx260 = 0, $arrayidx262 = 0, $arrayidx268 = 0, $arrayidx272 = 0, $arrayidx276 = 0, $arrayidx280 = 0, $arrayidx284 = 0;
 var $arrayidx288 = 0, $arrayidx29 = 0, $arrayidx292 = 0, $arrayidx296 = 0, $arrayidx300 = 0, $arrayidx304 = 0, $arrayidx308 = 0, $arrayidx312 = 0, $arrayidx316 = 0, $arrayidx320 = 0, $arrayidx324 = 0, $arrayidx328 = 0, $arrayidx33 = 0, $arrayidx332 = 0, $arrayidx336 = 0, $arrayidx340 = 0, $arrayidx344 = 0, $arrayidx348 = 0, $arrayidx352 = 0, $arrayidx356 = 0;
 var $arrayidx360 = 0, $arrayidx364 = 0, $arrayidx368 = 0, $arrayidx37 = 0, $arrayidx372 = 0, $arrayidx41 = 0, $arrayidx45 = 0, $arrayidx49 = 0, $arrayidx5 = 0, $arrayidx53 = 0, $arrayidx57 = 0, $arrayidx61 = 0, $arrayidx65 = 0, $arrayidx67 = 0, $arrayidx73 = 0, $arrayidx77 = 0, $arrayidx81 = 0, $arrayidx85 = 0, $arrayidx89 = 0, $arrayidx9 = 0;
 var $arrayidx93 = 0, $arrayidx97 = 0, $call = 0, $call1 = 0, $call103 = 0, $call107 = 0, $call11 = 0, $call111 = 0, $call115 = 0, $call119 = 0, $call123 = 0, $call134 = 0, $call138 = 0, $call142 = 0, $call146 = 0, $call15 = 0, $call150 = 0, $call154 = 0, $call158 = 0, $call162 = 0;
 var $call166 = 0, $call170 = 0, $call174 = 0, $call178 = 0, $call182 = 0, $call186 = 0, $call19 = 0, $call190 = 0, $call194 = 0, $call198 = 0, $call202 = 0, $call206 = 0, $call210 = 0, $call214 = 0, $call218 = 0, $call222 = 0, $call226 = 0, $call23 = 0, $call230 = 0, $call234 = 0;
 var $call238 = 0, $call242 = 0, $call246 = 0, $call250 = 0, $call254 = 0, $call266 = 0, $call27 = 0, $call270 = 0, $call274 = 0, $call278 = 0, $call282 = 0, $call286 = 0, $call290 = 0, $call294 = 0, $call298 = 0, $call3 = 0, $call302 = 0, $call306 = 0, $call31 = 0, $call310 = 0;
 var $call314 = 0, $call318 = 0, $call322 = 0, $call326 = 0, $call330 = 0, $call334 = 0, $call338 = 0, $call342 = 0, $call346 = 0, $call35 = 0, $call350 = 0, $call354 = 0, $call358 = 0, $call362 = 0, $call366 = 0, $call370 = 0, $call39 = 0, $call43 = 0, $call47 = 0, $call51 = 0;
 var $call55 = 0, $call59 = 0, $call7 = 0, $call71 = 0, $call75 = 0, $call79 = 0, $call83 = 0, $call87 = 0, $call91 = 0, $call95 = 0, $call99 = 0, $count = 0, $frame = 0, $inc = 0, $inc10 = 0, $inc102 = 0, $inc106 = 0, $inc110 = 0, $inc114 = 0, $inc118 = 0;
 var $inc122 = 0, $inc126 = 0, $inc132 = 0, $inc133 = 0, $inc137 = 0, $inc14 = 0, $inc141 = 0, $inc145 = 0, $inc149 = 0, $inc153 = 0, $inc157 = 0, $inc161 = 0, $inc165 = 0, $inc169 = 0, $inc173 = 0, $inc177 = 0, $inc18 = 0, $inc181 = 0, $inc185 = 0, $inc189 = 0;
 var $inc193 = 0, $inc197 = 0, $inc201 = 0, $inc205 = 0, $inc209 = 0, $inc213 = 0, $inc217 = 0, $inc22 = 0, $inc221 = 0, $inc225 = 0, $inc229 = 0, $inc233 = 0, $inc237 = 0, $inc241 = 0, $inc245 = 0, $inc249 = 0, $inc253 = 0, $inc257 = 0, $inc26 = 0, $inc264 = 0;
 var $inc265 = 0, $inc269 = 0, $inc273 = 0, $inc277 = 0, $inc281 = 0, $inc285 = 0, $inc289 = 0, $inc293 = 0, $inc297 = 0, $inc30 = 0, $inc301 = 0, $inc305 = 0, $inc309 = 0, $inc313 = 0, $inc317 = 0, $inc321 = 0, $inc325 = 0, $inc329 = 0, $inc333 = 0, $inc337 = 0;
 var $inc34 = 0, $inc341 = 0, $inc345 = 0, $inc349 = 0, $inc353 = 0, $inc357 = 0, $inc361 = 0, $inc365 = 0, $inc369 = 0, $inc373 = 0, $inc38 = 0, $inc42 = 0, $inc46 = 0, $inc50 = 0, $inc54 = 0, $inc58 = 0, $inc6 = 0, $inc62 = 0, $inc69 = 0, $inc70 = 0;
 var $inc74 = 0, $inc78 = 0, $inc82 = 0, $inc86 = 0, $inc90 = 0, $inc94 = 0, $inc98 = 0, $length = 0, $length374 = 0, $use_count = 0, $use_count131 = 0, $use_count263 = 0, $use_count68 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $call = (_malloc(12)|0);
 $frame = $call;
 $0 = $frame;
 $length = (($0) + 4|0);
 HEAP32[$length>>2] = 0;
 $1 = $frame;
 HEAP32[$1>>2] = 3432;
 $2 = $frame;
 $use_count = (($2) + 8|0);
 HEAP32[$use_count>>2] = 0;
 $count = 0;
 $call1 = (_Object_initBuiltinLambda(2)|0);
 $3 = $count;
 $4 = $frame;
 $5 = HEAP32[$4>>2]|0;
 $arrayidx = (($5) + ($3<<2)|0);
 HEAP32[$arrayidx>>2] = $call1;
 $6 = $count;
 $inc = (($6) + 1)|0;
 $count = $inc;
 $call3 = (_Object_initBuiltinLambda(3)|0);
 $7 = $count;
 $8 = $frame;
 $9 = HEAP32[$8>>2]|0;
 $arrayidx5 = (($9) + ($7<<2)|0);
 HEAP32[$arrayidx5>>2] = $call3;
 $10 = $count;
 $inc6 = (($10) + 1)|0;
 $count = $inc6;
 $call7 = (_Object_initBuiltinLambda(4)|0);
 $11 = $count;
 $12 = $frame;
 $13 = HEAP32[$12>>2]|0;
 $arrayidx9 = (($13) + ($11<<2)|0);
 HEAP32[$arrayidx9>>2] = $call7;
 $14 = $count;
 $inc10 = (($14) + 1)|0;
 $count = $inc10;
 $call11 = (_Object_initBuiltinLambda(5)|0);
 $15 = $count;
 $16 = $frame;
 $17 = HEAP32[$16>>2]|0;
 $arrayidx13 = (($17) + ($15<<2)|0);
 HEAP32[$arrayidx13>>2] = $call11;
 $18 = $count;
 $inc14 = (($18) + 1)|0;
 $count = $inc14;
 $call15 = (_Object_initBuiltinLambda(6)|0);
 $19 = $count;
 $20 = $frame;
 $21 = HEAP32[$20>>2]|0;
 $arrayidx17 = (($21) + ($19<<2)|0);
 HEAP32[$arrayidx17>>2] = $call15;
 $22 = $count;
 $inc18 = (($22) + 1)|0;
 $count = $inc18;
 $call19 = (_Object_initBuiltinLambda(7)|0);
 $23 = $count;
 $24 = $frame;
 $25 = HEAP32[$24>>2]|0;
 $arrayidx21 = (($25) + ($23<<2)|0);
 HEAP32[$arrayidx21>>2] = $call19;
 $26 = $count;
 $inc22 = (($26) + 1)|0;
 $count = $inc22;
 $call23 = (_Object_initBuiltinLambda(8)|0);
 $27 = $count;
 $28 = $frame;
 $29 = HEAP32[$28>>2]|0;
 $arrayidx25 = (($29) + ($27<<2)|0);
 HEAP32[$arrayidx25>>2] = $call23;
 $30 = $count;
 $inc26 = (($30) + 1)|0;
 $count = $inc26;
 $call27 = (_Object_initBuiltinLambda(9)|0);
 $31 = $count;
 $32 = $frame;
 $33 = HEAP32[$32>>2]|0;
 $arrayidx29 = (($33) + ($31<<2)|0);
 HEAP32[$arrayidx29>>2] = $call27;
 $34 = $count;
 $inc30 = (($34) + 1)|0;
 $count = $inc30;
 $call31 = (_Object_initBuiltinLambda(10)|0);
 $35 = $count;
 $36 = $frame;
 $37 = HEAP32[$36>>2]|0;
 $arrayidx33 = (($37) + ($35<<2)|0);
 HEAP32[$arrayidx33>>2] = $call31;
 $38 = $count;
 $inc34 = (($38) + 1)|0;
 $count = $inc34;
 $call35 = (_Object_initBuiltinLambda(11)|0);
 $39 = $count;
 $40 = $frame;
 $41 = HEAP32[$40>>2]|0;
 $arrayidx37 = (($41) + ($39<<2)|0);
 HEAP32[$arrayidx37>>2] = $call35;
 $42 = $count;
 $inc38 = (($42) + 1)|0;
 $count = $inc38;
 $call39 = (_Object_initBuiltinLambda(12)|0);
 $43 = $count;
 $44 = $frame;
 $45 = HEAP32[$44>>2]|0;
 $arrayidx41 = (($45) + ($43<<2)|0);
 HEAP32[$arrayidx41>>2] = $call39;
 $46 = $count;
 $inc42 = (($46) + 1)|0;
 $count = $inc42;
 $call43 = (_Object_initBuiltinLambda(13)|0);
 $47 = $count;
 $48 = $frame;
 $49 = HEAP32[$48>>2]|0;
 $arrayidx45 = (($49) + ($47<<2)|0);
 HEAP32[$arrayidx45>>2] = $call43;
 $50 = $count;
 $inc46 = (($50) + 1)|0;
 $count = $inc46;
 $call47 = (_Object_initBuiltinLambda(14)|0);
 $51 = $count;
 $52 = $frame;
 $53 = HEAP32[$52>>2]|0;
 $arrayidx49 = (($53) + ($51<<2)|0);
 HEAP32[$arrayidx49>>2] = $call47;
 $54 = $count;
 $inc50 = (($54) + 1)|0;
 $count = $inc50;
 $call51 = (_Object_initBuiltinLambda(15)|0);
 $55 = $count;
 $56 = $frame;
 $57 = HEAP32[$56>>2]|0;
 $arrayidx53 = (($57) + ($55<<2)|0);
 HEAP32[$arrayidx53>>2] = $call51;
 $58 = $count;
 $inc54 = (($58) + 1)|0;
 $count = $inc54;
 $call55 = (_Object_initBuiltinLambda(16)|0);
 $59 = $count;
 $60 = $frame;
 $61 = HEAP32[$60>>2]|0;
 $arrayidx57 = (($61) + ($59<<2)|0);
 HEAP32[$arrayidx57>>2] = $call55;
 $62 = $count;
 $inc58 = (($62) + 1)|0;
 $count = $inc58;
 $call59 = (_Object_initBuiltinLambda(17)|0);
 $63 = $count;
 $64 = $frame;
 $65 = HEAP32[$64>>2]|0;
 $arrayidx61 = (($65) + ($63<<2)|0);
 HEAP32[$arrayidx61>>2] = $call59;
 $66 = $count;
 $inc62 = (($66) + 1)|0;
 $count = $inc62;
 $67 = (_Object_initInteger(1,0)|0);
 $68 = $count;
 $69 = $frame;
 $70 = HEAP32[$69>>2]|0;
 $arrayidx65 = (($70) + ($68<<2)|0);
 HEAP32[$arrayidx65>>2] = $67;
 $71 = $count;
 $72 = $frame;
 $73 = HEAP32[$72>>2]|0;
 $arrayidx67 = (($73) + ($71<<2)|0);
 $74 = HEAP32[$arrayidx67>>2]|0;
 $use_count68 = (($74) + 4|0);
 $75 = HEAP32[$use_count68>>2]|0;
 $inc69 = (($75) + 1)|0;
 HEAP32[$use_count68>>2] = $inc69;
 $76 = $count;
 $inc70 = (($76) + 1)|0;
 $count = $inc70;
 $call71 = (_Object_initBuiltinLambda(18)|0);
 $77 = $count;
 $78 = $frame;
 $79 = HEAP32[$78>>2]|0;
 $arrayidx73 = (($79) + ($77<<2)|0);
 HEAP32[$arrayidx73>>2] = $call71;
 $80 = $count;
 $inc74 = (($80) + 1)|0;
 $count = $inc74;
 $call75 = (_Object_initBuiltinLambda(19)|0);
 $81 = $count;
 $82 = $frame;
 $83 = HEAP32[$82>>2]|0;
 $arrayidx77 = (($83) + ($81<<2)|0);
 HEAP32[$arrayidx77>>2] = $call75;
 $84 = $count;
 $inc78 = (($84) + 1)|0;
 $count = $inc78;
 $call79 = (_Object_initBuiltinLambda(20)|0);
 $85 = $count;
 $86 = $frame;
 $87 = HEAP32[$86>>2]|0;
 $arrayidx81 = (($87) + ($85<<2)|0);
 HEAP32[$arrayidx81>>2] = $call79;
 $88 = $count;
 $inc82 = (($88) + 1)|0;
 $count = $inc82;
 $call83 = (_Object_initBuiltinLambda(21)|0);
 $89 = $count;
 $90 = $frame;
 $91 = HEAP32[$90>>2]|0;
 $arrayidx85 = (($91) + ($89<<2)|0);
 HEAP32[$arrayidx85>>2] = $call83;
 $92 = $count;
 $inc86 = (($92) + 1)|0;
 $count = $inc86;
 $call87 = (_Object_initBuiltinLambda(22)|0);
 $93 = $count;
 $94 = $frame;
 $95 = HEAP32[$94>>2]|0;
 $arrayidx89 = (($95) + ($93<<2)|0);
 HEAP32[$arrayidx89>>2] = $call87;
 $96 = $count;
 $inc90 = (($96) + 1)|0;
 $count = $inc90;
 $call91 = (_Object_initBuiltinLambda(23)|0);
 $97 = $count;
 $98 = $frame;
 $99 = HEAP32[$98>>2]|0;
 $arrayidx93 = (($99) + ($97<<2)|0);
 HEAP32[$arrayidx93>>2] = $call91;
 $100 = $count;
 $inc94 = (($100) + 1)|0;
 $count = $inc94;
 $call95 = (_Object_initBuiltinLambda(24)|0);
 $101 = $count;
 $102 = $frame;
 $103 = HEAP32[$102>>2]|0;
 $arrayidx97 = (($103) + ($101<<2)|0);
 HEAP32[$arrayidx97>>2] = $call95;
 $104 = $count;
 $inc98 = (($104) + 1)|0;
 $count = $inc98;
 $call99 = (_Object_initBuiltinLambda(25)|0);
 $105 = $count;
 $106 = $frame;
 $107 = HEAP32[$106>>2]|0;
 $arrayidx101 = (($107) + ($105<<2)|0);
 HEAP32[$arrayidx101>>2] = $call99;
 $108 = $count;
 $inc102 = (($108) + 1)|0;
 $count = $inc102;
 $call103 = (_Object_initBuiltinLambda(26)|0);
 $109 = $count;
 $110 = $frame;
 $111 = HEAP32[$110>>2]|0;
 $arrayidx105 = (($111) + ($109<<2)|0);
 HEAP32[$arrayidx105>>2] = $call103;
 $112 = $count;
 $inc106 = (($112) + 1)|0;
 $count = $inc106;
 $call107 = (_Object_initBuiltinLambda(27)|0);
 $113 = $count;
 $114 = $frame;
 $115 = HEAP32[$114>>2]|0;
 $arrayidx109 = (($115) + ($113<<2)|0);
 HEAP32[$arrayidx109>>2] = $call107;
 $116 = $count;
 $inc110 = (($116) + 1)|0;
 $count = $inc110;
 $call111 = (_Object_initBuiltinLambda(28)|0);
 $117 = $count;
 $118 = $frame;
 $119 = HEAP32[$118>>2]|0;
 $arrayidx113 = (($119) + ($117<<2)|0);
 HEAP32[$arrayidx113>>2] = $call111;
 $120 = $count;
 $inc114 = (($120) + 1)|0;
 $count = $inc114;
 $call115 = (_Object_initBuiltinLambda(29)|0);
 $121 = $count;
 $122 = $frame;
 $123 = HEAP32[$122>>2]|0;
 $arrayidx117 = (($123) + ($121<<2)|0);
 HEAP32[$arrayidx117>>2] = $call115;
 $124 = $count;
 $inc118 = (($124) + 1)|0;
 $count = $inc118;
 $call119 = (_Object_initBuiltinLambda(30)|0);
 $125 = $count;
 $126 = $frame;
 $127 = HEAP32[$126>>2]|0;
 $arrayidx121 = (($127) + ($125<<2)|0);
 HEAP32[$arrayidx121>>2] = $call119;
 $128 = $count;
 $inc122 = (($128) + 1)|0;
 $count = $inc122;
 $call123 = (_Object_initBuiltinLambda(31)|0);
 $129 = $count;
 $130 = $frame;
 $131 = HEAP32[$130>>2]|0;
 $arrayidx125 = (($131) + ($129<<2)|0);
 HEAP32[$arrayidx125>>2] = $call123;
 $132 = $count;
 $inc126 = (($132) + 1)|0;
 $count = $inc126;
 $133 = HEAP32[7528>>2]|0;
 $134 = $count;
 $135 = $frame;
 $136 = HEAP32[$135>>2]|0;
 $arrayidx128 = (($136) + ($134<<2)|0);
 HEAP32[$arrayidx128>>2] = $133;
 $137 = $count;
 $138 = $frame;
 $139 = HEAP32[$138>>2]|0;
 $arrayidx130 = (($139) + ($137<<2)|0);
 $140 = HEAP32[$arrayidx130>>2]|0;
 $use_count131 = (($140) + 4|0);
 $141 = HEAP32[$use_count131>>2]|0;
 $inc132 = (($141) + 1)|0;
 HEAP32[$use_count131>>2] = $inc132;
 $142 = $count;
 $inc133 = (($142) + 1)|0;
 $count = $inc133;
 $call134 = (_Object_initBuiltinLambda(32)|0);
 $143 = $count;
 $144 = $frame;
 $145 = HEAP32[$144>>2]|0;
 $arrayidx136 = (($145) + ($143<<2)|0);
 HEAP32[$arrayidx136>>2] = $call134;
 $146 = $count;
 $inc137 = (($146) + 1)|0;
 $count = $inc137;
 $call138 = (_Object_initBuiltinLambda(33)|0);
 $147 = $count;
 $148 = $frame;
 $149 = HEAP32[$148>>2]|0;
 $arrayidx140 = (($149) + ($147<<2)|0);
 HEAP32[$arrayidx140>>2] = $call138;
 $150 = $count;
 $inc141 = (($150) + 1)|0;
 $count = $inc141;
 $call142 = (_Object_initBuiltinLambda(34)|0);
 $151 = $count;
 $152 = $frame;
 $153 = HEAP32[$152>>2]|0;
 $arrayidx144 = (($153) + ($151<<2)|0);
 HEAP32[$arrayidx144>>2] = $call142;
 $154 = $count;
 $inc145 = (($154) + 1)|0;
 $count = $inc145;
 $call146 = (_Object_initBuiltinLambda(35)|0);
 $155 = $count;
 $156 = $frame;
 $157 = HEAP32[$156>>2]|0;
 $arrayidx148 = (($157) + ($155<<2)|0);
 HEAP32[$arrayidx148>>2] = $call146;
 $158 = $count;
 $inc149 = (($158) + 1)|0;
 $count = $inc149;
 $call150 = (_Object_initBuiltinLambda(36)|0);
 $159 = $count;
 $160 = $frame;
 $161 = HEAP32[$160>>2]|0;
 $arrayidx152 = (($161) + ($159<<2)|0);
 HEAP32[$arrayidx152>>2] = $call150;
 $162 = $count;
 $inc153 = (($162) + 1)|0;
 $count = $inc153;
 $call154 = (_Object_initBuiltinLambda(37)|0);
 $163 = $count;
 $164 = $frame;
 $165 = HEAP32[$164>>2]|0;
 $arrayidx156 = (($165) + ($163<<2)|0);
 HEAP32[$arrayidx156>>2] = $call154;
 $166 = $count;
 $inc157 = (($166) + 1)|0;
 $count = $inc157;
 $call158 = (_Object_initBuiltinLambda(38)|0);
 $167 = $count;
 $168 = $frame;
 $169 = HEAP32[$168>>2]|0;
 $arrayidx160 = (($169) + ($167<<2)|0);
 HEAP32[$arrayidx160>>2] = $call158;
 $170 = $count;
 $inc161 = (($170) + 1)|0;
 $count = $inc161;
 $call162 = (_Object_initBuiltinLambda(39)|0);
 $171 = $count;
 $172 = $frame;
 $173 = HEAP32[$172>>2]|0;
 $arrayidx164 = (($173) + ($171<<2)|0);
 HEAP32[$arrayidx164>>2] = $call162;
 $174 = $count;
 $inc165 = (($174) + 1)|0;
 $count = $inc165;
 $call166 = (_Object_initBuiltinLambda(40)|0);
 $175 = $count;
 $176 = $frame;
 $177 = HEAP32[$176>>2]|0;
 $arrayidx168 = (($177) + ($175<<2)|0);
 HEAP32[$arrayidx168>>2] = $call166;
 $178 = $count;
 $inc169 = (($178) + 1)|0;
 $count = $inc169;
 $call170 = (_Object_initBuiltinLambda(41)|0);
 $179 = $count;
 $180 = $frame;
 $181 = HEAP32[$180>>2]|0;
 $arrayidx172 = (($181) + ($179<<2)|0);
 HEAP32[$arrayidx172>>2] = $call170;
 $182 = $count;
 $inc173 = (($182) + 1)|0;
 $count = $inc173;
 $call174 = (_Object_initBuiltinLambda(42)|0);
 $183 = $count;
 $184 = $frame;
 $185 = HEAP32[$184>>2]|0;
 $arrayidx176 = (($185) + ($183<<2)|0);
 HEAP32[$arrayidx176>>2] = $call174;
 $186 = $count;
 $inc177 = (($186) + 1)|0;
 $count = $inc177;
 $call178 = (_Object_initBuiltinLambda(43)|0);
 $187 = $count;
 $188 = $frame;
 $189 = HEAP32[$188>>2]|0;
 $arrayidx180 = (($189) + ($187<<2)|0);
 HEAP32[$arrayidx180>>2] = $call178;
 $190 = $count;
 $inc181 = (($190) + 1)|0;
 $count = $inc181;
 $call182 = (_Object_initBuiltinLambda(44)|0);
 $191 = $count;
 $192 = $frame;
 $193 = HEAP32[$192>>2]|0;
 $arrayidx184 = (($193) + ($191<<2)|0);
 HEAP32[$arrayidx184>>2] = $call182;
 $194 = $count;
 $inc185 = (($194) + 1)|0;
 $count = $inc185;
 $call186 = (_Object_initBuiltinLambda(45)|0);
 $195 = $count;
 $196 = $frame;
 $197 = HEAP32[$196>>2]|0;
 $arrayidx188 = (($197) + ($195<<2)|0);
 HEAP32[$arrayidx188>>2] = $call186;
 $198 = $count;
 $inc189 = (($198) + 1)|0;
 $count = $inc189;
 $call190 = (_Object_initBuiltinLambda(46)|0);
 $199 = $count;
 $200 = $frame;
 $201 = HEAP32[$200>>2]|0;
 $arrayidx192 = (($201) + ($199<<2)|0);
 HEAP32[$arrayidx192>>2] = $call190;
 $202 = $count;
 $inc193 = (($202) + 1)|0;
 $count = $inc193;
 $call194 = (_Object_initBuiltinLambda(47)|0);
 $203 = $count;
 $204 = $frame;
 $205 = HEAP32[$204>>2]|0;
 $arrayidx196 = (($205) + ($203<<2)|0);
 HEAP32[$arrayidx196>>2] = $call194;
 $206 = $count;
 $inc197 = (($206) + 1)|0;
 $count = $inc197;
 $call198 = (_Object_initBuiltinLambda(48)|0);
 $207 = $count;
 $208 = $frame;
 $209 = HEAP32[$208>>2]|0;
 $arrayidx200 = (($209) + ($207<<2)|0);
 HEAP32[$arrayidx200>>2] = $call198;
 $210 = $count;
 $inc201 = (($210) + 1)|0;
 $count = $inc201;
 $call202 = (_Object_initBuiltinLambda(49)|0);
 $211 = $count;
 $212 = $frame;
 $213 = HEAP32[$212>>2]|0;
 $arrayidx204 = (($213) + ($211<<2)|0);
 HEAP32[$arrayidx204>>2] = $call202;
 $214 = $count;
 $inc205 = (($214) + 1)|0;
 $count = $inc205;
 $call206 = (_Object_initBuiltinLambda(50)|0);
 $215 = $count;
 $216 = $frame;
 $217 = HEAP32[$216>>2]|0;
 $arrayidx208 = (($217) + ($215<<2)|0);
 HEAP32[$arrayidx208>>2] = $call206;
 $218 = $count;
 $inc209 = (($218) + 1)|0;
 $count = $inc209;
 $call210 = (_Object_initBuiltinLambda(51)|0);
 $219 = $count;
 $220 = $frame;
 $221 = HEAP32[$220>>2]|0;
 $arrayidx212 = (($221) + ($219<<2)|0);
 HEAP32[$arrayidx212>>2] = $call210;
 $222 = $count;
 $inc213 = (($222) + 1)|0;
 $count = $inc213;
 $call214 = (_Object_initBuiltinLambda(52)|0);
 $223 = $count;
 $224 = $frame;
 $225 = HEAP32[$224>>2]|0;
 $arrayidx216 = (($225) + ($223<<2)|0);
 HEAP32[$arrayidx216>>2] = $call214;
 $226 = $count;
 $inc217 = (($226) + 1)|0;
 $count = $inc217;
 $call218 = (_Object_initBuiltinLambda(53)|0);
 $227 = $count;
 $228 = $frame;
 $229 = HEAP32[$228>>2]|0;
 $arrayidx220 = (($229) + ($227<<2)|0);
 HEAP32[$arrayidx220>>2] = $call218;
 $230 = $count;
 $inc221 = (($230) + 1)|0;
 $count = $inc221;
 $call222 = (_Object_initBuiltinLambda(54)|0);
 $231 = $count;
 $232 = $frame;
 $233 = HEAP32[$232>>2]|0;
 $arrayidx224 = (($233) + ($231<<2)|0);
 HEAP32[$arrayidx224>>2] = $call222;
 $234 = $count;
 $inc225 = (($234) + 1)|0;
 $count = $inc225;
 $call226 = (_Object_initBuiltinLambda(55)|0);
 $235 = $count;
 $236 = $frame;
 $237 = HEAP32[$236>>2]|0;
 $arrayidx228 = (($237) + ($235<<2)|0);
 HEAP32[$arrayidx228>>2] = $call226;
 $238 = $count;
 $inc229 = (($238) + 1)|0;
 $count = $inc229;
 $call230 = (_Object_initBuiltinLambda(56)|0);
 $239 = $count;
 $240 = $frame;
 $241 = HEAP32[$240>>2]|0;
 $arrayidx232 = (($241) + ($239<<2)|0);
 HEAP32[$arrayidx232>>2] = $call230;
 $242 = $count;
 $inc233 = (($242) + 1)|0;
 $count = $inc233;
 $call234 = (_Object_initBuiltinLambda(57)|0);
 $243 = $count;
 $244 = $frame;
 $245 = HEAP32[$244>>2]|0;
 $arrayidx236 = (($245) + ($243<<2)|0);
 HEAP32[$arrayidx236>>2] = $call234;
 $246 = $count;
 $inc237 = (($246) + 1)|0;
 $count = $inc237;
 $call238 = (_Object_initBuiltinLambda(58)|0);
 $247 = $count;
 $248 = $frame;
 $249 = HEAP32[$248>>2]|0;
 $arrayidx240 = (($249) + ($247<<2)|0);
 HEAP32[$arrayidx240>>2] = $call238;
 $250 = $count;
 $inc241 = (($250) + 1)|0;
 $count = $inc241;
 $call242 = (_Object_initBuiltinLambda(59)|0);
 $251 = $count;
 $252 = $frame;
 $253 = HEAP32[$252>>2]|0;
 $arrayidx244 = (($253) + ($251<<2)|0);
 HEAP32[$arrayidx244>>2] = $call242;
 $254 = $count;
 $inc245 = (($254) + 1)|0;
 $count = $inc245;
 $call246 = (_Object_initBuiltinLambda(60)|0);
 $255 = $count;
 $256 = $frame;
 $257 = HEAP32[$256>>2]|0;
 $arrayidx248 = (($257) + ($255<<2)|0);
 HEAP32[$arrayidx248>>2] = $call246;
 $258 = $count;
 $inc249 = (($258) + 1)|0;
 $count = $inc249;
 $call250 = (_Object_initBuiltinLambda(61)|0);
 $259 = $count;
 $260 = $frame;
 $261 = HEAP32[$260>>2]|0;
 $arrayidx252 = (($261) + ($259<<2)|0);
 HEAP32[$arrayidx252>>2] = $call250;
 $262 = $count;
 $inc253 = (($262) + 1)|0;
 $count = $inc253;
 $call254 = (_Object_initBuiltinLambda(62)|0);
 $263 = $count;
 $264 = $frame;
 $265 = HEAP32[$264>>2]|0;
 $arrayidx256 = (($265) + ($263<<2)|0);
 HEAP32[$arrayidx256>>2] = $call254;
 $266 = $count;
 $inc257 = (($266) + 1)|0;
 $count = $inc257;
 $267 = (_Object_initInteger(2,0)|0);
 $268 = $count;
 $269 = $frame;
 $270 = HEAP32[$269>>2]|0;
 $arrayidx260 = (($270) + ($268<<2)|0);
 HEAP32[$arrayidx260>>2] = $267;
 $271 = $count;
 $272 = $frame;
 $273 = HEAP32[$272>>2]|0;
 $arrayidx262 = (($273) + ($271<<2)|0);
 $274 = HEAP32[$arrayidx262>>2]|0;
 $use_count263 = (($274) + 4|0);
 $275 = HEAP32[$use_count263>>2]|0;
 $inc264 = (($275) + 1)|0;
 HEAP32[$use_count263>>2] = $inc264;
 $276 = $count;
 $inc265 = (($276) + 1)|0;
 $count = $inc265;
 $call266 = (_Object_initBuiltinLambda(63)|0);
 $277 = $count;
 $278 = $frame;
 $279 = HEAP32[$278>>2]|0;
 $arrayidx268 = (($279) + ($277<<2)|0);
 HEAP32[$arrayidx268>>2] = $call266;
 $280 = $count;
 $inc269 = (($280) + 1)|0;
 $count = $inc269;
 $call270 = (_Object_initBuiltinLambda(64)|0);
 $281 = $count;
 $282 = $frame;
 $283 = HEAP32[$282>>2]|0;
 $arrayidx272 = (($283) + ($281<<2)|0);
 HEAP32[$arrayidx272>>2] = $call270;
 $284 = $count;
 $inc273 = (($284) + 1)|0;
 $count = $inc273;
 $call274 = (_Object_initBuiltinLambda(65)|0);
 $285 = $count;
 $286 = $frame;
 $287 = HEAP32[$286>>2]|0;
 $arrayidx276 = (($287) + ($285<<2)|0);
 HEAP32[$arrayidx276>>2] = $call274;
 $288 = $count;
 $inc277 = (($288) + 1)|0;
 $count = $inc277;
 $call278 = (_Object_initBuiltinLambda(66)|0);
 $289 = $count;
 $290 = $frame;
 $291 = HEAP32[$290>>2]|0;
 $arrayidx280 = (($291) + ($289<<2)|0);
 HEAP32[$arrayidx280>>2] = $call278;
 $292 = $count;
 $inc281 = (($292) + 1)|0;
 $count = $inc281;
 $call282 = (_Object_initBuiltinLambda(67)|0);
 $293 = $count;
 $294 = $frame;
 $295 = HEAP32[$294>>2]|0;
 $arrayidx284 = (($295) + ($293<<2)|0);
 HEAP32[$arrayidx284>>2] = $call282;
 $296 = $count;
 $inc285 = (($296) + 1)|0;
 $count = $inc285;
 $call286 = (_Object_initBuiltinLambda(68)|0);
 $297 = $count;
 $298 = $frame;
 $299 = HEAP32[$298>>2]|0;
 $arrayidx288 = (($299) + ($297<<2)|0);
 HEAP32[$arrayidx288>>2] = $call286;
 $300 = $count;
 $inc289 = (($300) + 1)|0;
 $count = $inc289;
 $call290 = (_Object_initBuiltinLambda(69)|0);
 $301 = $count;
 $302 = $frame;
 $303 = HEAP32[$302>>2]|0;
 $arrayidx292 = (($303) + ($301<<2)|0);
 HEAP32[$arrayidx292>>2] = $call290;
 $304 = $count;
 $inc293 = (($304) + 1)|0;
 $count = $inc293;
 $call294 = (_Object_initBuiltinLambda(70)|0);
 $305 = $count;
 $306 = $frame;
 $307 = HEAP32[$306>>2]|0;
 $arrayidx296 = (($307) + ($305<<2)|0);
 HEAP32[$arrayidx296>>2] = $call294;
 $308 = $count;
 $inc297 = (($308) + 1)|0;
 $count = $inc297;
 $call298 = (_Object_initBuiltinLambda(71)|0);
 $309 = $count;
 $310 = $frame;
 $311 = HEAP32[$310>>2]|0;
 $arrayidx300 = (($311) + ($309<<2)|0);
 HEAP32[$arrayidx300>>2] = $call298;
 $312 = $count;
 $inc301 = (($312) + 1)|0;
 $count = $inc301;
 $call302 = (_Object_initBuiltinLambda(72)|0);
 $313 = $count;
 $314 = $frame;
 $315 = HEAP32[$314>>2]|0;
 $arrayidx304 = (($315) + ($313<<2)|0);
 HEAP32[$arrayidx304>>2] = $call302;
 $316 = $count;
 $inc305 = (($316) + 1)|0;
 $count = $inc305;
 $call306 = (_Object_initBuiltinLambda(73)|0);
 $317 = $count;
 $318 = $frame;
 $319 = HEAP32[$318>>2]|0;
 $arrayidx308 = (($319) + ($317<<2)|0);
 HEAP32[$arrayidx308>>2] = $call306;
 $320 = $count;
 $inc309 = (($320) + 1)|0;
 $count = $inc309;
 $call310 = (_Object_initBuiltinLambda(74)|0);
 $321 = $count;
 $322 = $frame;
 $323 = HEAP32[$322>>2]|0;
 $arrayidx312 = (($323) + ($321<<2)|0);
 HEAP32[$arrayidx312>>2] = $call310;
 $324 = $count;
 $inc313 = (($324) + 1)|0;
 $count = $inc313;
 $call314 = (_Object_initBuiltinLambda(75)|0);
 $325 = $count;
 $326 = $frame;
 $327 = HEAP32[$326>>2]|0;
 $arrayidx316 = (($327) + ($325<<2)|0);
 HEAP32[$arrayidx316>>2] = $call314;
 $328 = $count;
 $inc317 = (($328) + 1)|0;
 $count = $inc317;
 $call318 = (_Object_initBuiltinLambda(76)|0);
 $329 = $count;
 $330 = $frame;
 $331 = HEAP32[$330>>2]|0;
 $arrayidx320 = (($331) + ($329<<2)|0);
 HEAP32[$arrayidx320>>2] = $call318;
 $332 = $count;
 $inc321 = (($332) + 1)|0;
 $count = $inc321;
 $call322 = (_Object_initBuiltinLambda(77)|0);
 $333 = $count;
 $334 = $frame;
 $335 = HEAP32[$334>>2]|0;
 $arrayidx324 = (($335) + ($333<<2)|0);
 HEAP32[$arrayidx324>>2] = $call322;
 $336 = $count;
 $inc325 = (($336) + 1)|0;
 $count = $inc325;
 $call326 = (_Object_initBuiltinLambda(78)|0);
 $337 = $count;
 $338 = $frame;
 $339 = HEAP32[$338>>2]|0;
 $arrayidx328 = (($339) + ($337<<2)|0);
 HEAP32[$arrayidx328>>2] = $call326;
 $340 = $count;
 $inc329 = (($340) + 1)|0;
 $count = $inc329;
 $call330 = (_Object_initBuiltinLambda(79)|0);
 $341 = $count;
 $342 = $frame;
 $343 = HEAP32[$342>>2]|0;
 $arrayidx332 = (($343) + ($341<<2)|0);
 HEAP32[$arrayidx332>>2] = $call330;
 $344 = $count;
 $inc333 = (($344) + 1)|0;
 $count = $inc333;
 $call334 = (_Object_initBuiltinLambda(80)|0);
 $345 = $count;
 $346 = $frame;
 $347 = HEAP32[$346>>2]|0;
 $arrayidx336 = (($347) + ($345<<2)|0);
 HEAP32[$arrayidx336>>2] = $call334;
 $348 = $count;
 $inc337 = (($348) + 1)|0;
 $count = $inc337;
 $call338 = (_Object_initBuiltinLambda(81)|0);
 $349 = $count;
 $350 = $frame;
 $351 = HEAP32[$350>>2]|0;
 $arrayidx340 = (($351) + ($349<<2)|0);
 HEAP32[$arrayidx340>>2] = $call338;
 $352 = $count;
 $inc341 = (($352) + 1)|0;
 $count = $inc341;
 $call342 = (_Object_initBuiltinLambda(82)|0);
 $353 = $count;
 $354 = $frame;
 $355 = HEAP32[$354>>2]|0;
 $arrayidx344 = (($355) + ($353<<2)|0);
 HEAP32[$arrayidx344>>2] = $call342;
 $356 = $count;
 $inc345 = (($356) + 1)|0;
 $count = $inc345;
 $call346 = (_Object_initBuiltinLambda(83)|0);
 $357 = $count;
 $358 = $frame;
 $359 = HEAP32[$358>>2]|0;
 $arrayidx348 = (($359) + ($357<<2)|0);
 HEAP32[$arrayidx348>>2] = $call346;
 $360 = $count;
 $inc349 = (($360) + 1)|0;
 $count = $inc349;
 $call350 = (_Object_initBuiltinLambda(84)|0);
 $361 = $count;
 $362 = $frame;
 $363 = HEAP32[$362>>2]|0;
 $arrayidx352 = (($363) + ($361<<2)|0);
 HEAP32[$arrayidx352>>2] = $call350;
 $364 = $count;
 $inc353 = (($364) + 1)|0;
 $count = $inc353;
 $call354 = (_Object_initBuiltinLambda(85)|0);
 $365 = $count;
 $366 = $frame;
 $367 = HEAP32[$366>>2]|0;
 $arrayidx356 = (($367) + ($365<<2)|0);
 HEAP32[$arrayidx356>>2] = $call354;
 $368 = $count;
 $inc357 = (($368) + 1)|0;
 $count = $inc357;
 $call358 = (_Object_initBuiltinLambda(86)|0);
 $369 = $count;
 $370 = $frame;
 $371 = HEAP32[$370>>2]|0;
 $arrayidx360 = (($371) + ($369<<2)|0);
 HEAP32[$arrayidx360>>2] = $call358;
 $372 = $count;
 $inc361 = (($372) + 1)|0;
 $count = $inc361;
 $call362 = (_Object_initBuiltinLambda(87)|0);
 $373 = $count;
 $374 = $frame;
 $375 = HEAP32[$374>>2]|0;
 $arrayidx364 = (($375) + ($373<<2)|0);
 HEAP32[$arrayidx364>>2] = $call362;
 $376 = $count;
 $inc365 = (($376) + 1)|0;
 $count = $inc365;
 $call366 = (_Object_initBuiltinLambda(88)|0);
 $377 = $count;
 $378 = $frame;
 $379 = HEAP32[$378>>2]|0;
 $arrayidx368 = (($379) + ($377<<2)|0);
 HEAP32[$arrayidx368>>2] = $call366;
 $380 = $count;
 $inc369 = (($380) + 1)|0;
 $count = $inc369;
 $call370 = (_Object_initBuiltinLambda(89)|0);
 $381 = $count;
 $382 = $frame;
 $383 = HEAP32[$382>>2]|0;
 $arrayidx372 = (($383) + ($381<<2)|0);
 HEAP32[$arrayidx372>>2] = $call370;
 $384 = $count;
 $inc373 = (($384) + 1)|0;
 $count = $inc373;
 $385 = $count;
 $386 = $frame;
 $length374 = (($386) + 4|0);
 HEAP32[$length374>>2] = $385;
 $387 = $frame;
 STACKTOP = sp;return ($387|0);
}
function _createEnvironment() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $call1 = 0, $call2 = 0, $env = 0, $length = 0, $use_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $call = (_malloc(8)|0);
 $env = $call;
 $0 = $env;
 $length = (($0) + 4|0);
 HEAP32[$length>>2] = 1;
 $call1 = (_malloc(4096)|0);
 $1 = $env;
 HEAP32[$1>>2] = $call1;
 $call2 = (_createFrame0()|0);
 $2 = $env;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $call2;
 $4 = $env;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $use_count = (($6) + 8|0);
 HEAP32[$use_count>>2] = 1;
 $7 = $env;
 STACKTOP = sp;return ($7|0);
}
function _copyEnvironment($old_env) {
 $old_env = $old_env|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx7 = 0, $arrayidx9 = 0, $call = 0, $call3 = 0, $cmp = 0, $i = 0, $inc = 0, $inc10 = 0, $length = 0, $length1 = 0, $length2 = 0, $length4 = 0, $mul = 0, $new_env = 0, $old_env$addr = 0, $use_count = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $old_env$addr = $old_env;
 $call = (_malloc(8)|0);
 $new_env = $call;
 $0 = $old_env$addr;
 $length = (($0) + 4|0);
 $1 = HEAP32[$length>>2]|0;
 $2 = $new_env;
 $length1 = (($2) + 4|0);
 HEAP32[$length1>>2] = $1;
 $3 = $new_env;
 $length2 = (($3) + 4|0);
 $4 = HEAP32[$length2>>2]|0;
 $mul = $4<<2;
 $call3 = (_malloc($mul)|0);
 $5 = $new_env;
 HEAP32[$5>>2] = $call3;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $new_env;
  $length4 = (($7) + 4|0);
  $8 = HEAP32[$length4>>2]|0;
  $cmp = ($6|0)<($8|0);
  if (!($cmp)) {
   break;
  }
  $9 = $i;
  $10 = $old_env$addr;
  $11 = HEAP32[$10>>2]|0;
  $arrayidx = (($11) + ($9<<2)|0);
  $12 = HEAP32[$arrayidx>>2]|0;
  $13 = $i;
  $14 = $new_env;
  $15 = HEAP32[$14>>2]|0;
  $arrayidx7 = (($15) + ($13<<2)|0);
  HEAP32[$arrayidx7>>2] = $12;
  $16 = $i;
  $17 = $new_env;
  $18 = HEAP32[$17>>2]|0;
  $arrayidx9 = (($18) + ($16<<2)|0);
  $19 = HEAP32[$arrayidx9>>2]|0;
  $use_count = (($19) + 8|0);
  $20 = HEAP32[$use_count>>2]|0;
  $inc = (($20) + 1)|0;
  HEAP32[$use_count>>2] = $inc;
  $21 = $i;
  $inc10 = (($21) + 1)|0;
  $i = $inc10;
 }
 $22 = $new_env;
 STACKTOP = sp;return ($22|0);
}
function _copyEnvironmentAndPushFrame($old_env,$frame) {
 $old_env = $old_env|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add16 = 0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx7 = 0, $arrayidx9 = 0, $call = 0, $call3 = 0, $cmp = 0;
 var $frame$addr = 0, $i = 0, $inc = 0, $inc10 = 0, $inc14 = 0, $length = 0, $length1 = 0, $length15 = 0, $length2 = 0, $length4 = 0, $mul = 0, $new_env = 0, $old_env$addr = 0, $use_count = 0, $use_count13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $old_env$addr = $old_env;
 $frame$addr = $frame;
 $call = (_malloc(8)|0);
 $new_env = $call;
 $0 = $old_env$addr;
 $length = (($0) + 4|0);
 $1 = HEAP32[$length>>2]|0;
 $2 = $new_env;
 $length1 = (($2) + 4|0);
 HEAP32[$length1>>2] = $1;
 $3 = $new_env;
 $length2 = (($3) + 4|0);
 $4 = HEAP32[$length2>>2]|0;
 $add = (($4) + 1)|0;
 $mul = $add<<2;
 $call3 = (_malloc($mul)|0);
 $5 = $new_env;
 HEAP32[$5>>2] = $call3;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $old_env$addr;
  $length4 = (($7) + 4|0);
  $8 = HEAP32[$length4>>2]|0;
  $cmp = ($6|0)<($8|0);
  if (!($cmp)) {
   break;
  }
  $9 = $i;
  $10 = $old_env$addr;
  $11 = HEAP32[$10>>2]|0;
  $arrayidx = (($11) + ($9<<2)|0);
  $12 = HEAP32[$arrayidx>>2]|0;
  $13 = $i;
  $14 = $new_env;
  $15 = HEAP32[$14>>2]|0;
  $arrayidx7 = (($15) + ($13<<2)|0);
  HEAP32[$arrayidx7>>2] = $12;
  $16 = $i;
  $17 = $new_env;
  $18 = HEAP32[$17>>2]|0;
  $arrayidx9 = (($18) + ($16<<2)|0);
  $19 = HEAP32[$arrayidx9>>2]|0;
  $use_count = (($19) + 8|0);
  $20 = HEAP32[$use_count>>2]|0;
  $inc = (($20) + 1)|0;
  HEAP32[$use_count>>2] = $inc;
  $21 = $i;
  $inc10 = (($21) + 1)|0;
  $i = $inc10;
 }
 $22 = $frame$addr;
 $23 = $i;
 $24 = $new_env;
 $25 = HEAP32[$24>>2]|0;
 $arrayidx12 = (($25) + ($23<<2)|0);
 HEAP32[$arrayidx12>>2] = $22;
 $26 = $frame$addr;
 $use_count13 = (($26) + 8|0);
 $27 = HEAP32[$use_count13>>2]|0;
 $inc14 = (($27) + 1)|0;
 HEAP32[$use_count13>>2] = $inc14;
 $28 = $new_env;
 $length15 = (($28) + 4|0);
 $29 = HEAP32[$length15>>2]|0;
 $add16 = (($29) + 1)|0;
 HEAP32[$length15>>2] = $add16;
 $30 = $new_env;
 STACKTOP = sp;return ($30|0);
}
function _quote_list($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call14 = 0, $call23 = 0, $call24 = 0, $call27 = 0, $call28 = 0, $call32 = 0, $call33 = 0, $call34 = 0, $call35 = 0, $call6 = 0;
 var $call7 = 0, $call8 = 0, $call9 = 0, $cdr = 0, $cdr19 = 0, $cdr31 = 0, $cmp = 0, $cmp11 = 0, $cmp15 = 0, $cmp2 = 0, $data = 0, $data12 = 0, $data17 = 0, $data20 = 0, $data29 = 0, $data4 = 0, $l$addr = 0, $retval = 0, $v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l$addr = $l;
 $0 = $l$addr;
 $1 = HEAP32[$0>>2]|0;
 $cmp = ($1|0)==(0);
 if ($cmp) {
  $2 = HEAP32[40>>2]|0;
  $retval = $2;
  $28 = $retval;
  STACKTOP = sp;return ($28|0);
 }
 $3 = $l$addr;
 $data = (($3) + 8|0);
 $4 = HEAP32[$data>>2]|0;
 $v = $4;
 $5 = $v;
 $6 = HEAP32[$5>>2]|0;
 $cmp2 = ($6|0)==(5);
 if ($cmp2) {
  $7 = HEAP32[3176>>2]|0;
  $8 = $v;
  $call = (_quote_list($8)|0);
  $9 = $l$addr;
  $data4 = (($9) + 8|0);
  $cdr = (($data4) + 4|0);
  $10 = HEAP32[$cdr>>2]|0;
  $call6 = (_quote_list($10)|0);
  $11 = HEAP32[40>>2]|0;
  $call7 = (_cons($call6,$11)|0);
  $call8 = (_cons($call,$call7)|0);
  $call9 = (_cons($7,$call8)|0);
  $retval = $call9;
  $28 = $retval;
  STACKTOP = sp;return ($28|0);
 }
 $12 = $v;
 $13 = HEAP32[$12>>2]|0;
 $cmp11 = ($13|0)==(4);
 if ($cmp11) {
  $14 = $v;
  $data12 = (($14) + 8|0);
  $15 = HEAP32[$data12>>2]|0;
  $call14 = (_strcmp($15,7536)|0);
  $cmp15 = ($call14|0)==(0);
  if ($cmp15) {
   $16 = HEAP32[1968>>2]|0;
   $17 = $l$addr;
   $data17 = (($17) + 8|0);
   $cdr19 = (($data17) + 4|0);
   $18 = HEAP32[$cdr19>>2]|0;
   $data20 = (($18) + 8|0);
   $19 = HEAP32[$data20>>2]|0;
   $20 = HEAP32[40>>2]|0;
   $call23 = (_cons($19,$20)|0);
   $call24 = (_cons($16,$call23)|0);
   $retval = $call24;
   $28 = $retval;
   STACKTOP = sp;return ($28|0);
  }
 }
 $21 = HEAP32[3176>>2]|0;
 $22 = HEAP32[1968>>2]|0;
 $23 = $v;
 $24 = HEAP32[40>>2]|0;
 $call27 = (_cons($23,$24)|0);
 $call28 = (_cons($22,$call27)|0);
 $25 = $l$addr;
 $data29 = (($25) + 8|0);
 $cdr31 = (($data29) + 4|0);
 $26 = HEAP32[$cdr31>>2]|0;
 $call32 = (_quote_list($26)|0);
 $27 = HEAP32[40>>2]|0;
 $call33 = (_cons($call32,$27)|0);
 $call34 = (_cons($call28,$call33)|0);
 $call35 = (_cons($21,$call34)|0);
 $retval = $call35;
 $28 = $retval;
 STACKTOP = sp;return ($28|0);
}
function _quasiquote_list($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call24 = 0, $call25 = 0, $call26 = 0, $call27 = 0;
 var $call40 = 0, $call53 = 0, $call54 = 0, $call55 = 0, $call56 = 0, $call59 = 0, $call63 = 0, $call64 = 0, $call65 = 0, $call66 = 0, $call74 = 0, $call83 = 0, $call84 = 0, $call86 = 0, $call87 = 0, $call91 = 0, $call92 = 0, $call93 = 0, $call94 = 0, $cdr = 0;
 var $cdr23 = 0, $cdr46 = 0, $cdr52 = 0, $cdr62 = 0, $cdr79 = 0, $cdr90 = 0, $cmp = 0, $cmp14 = 0, $cmp2 = 0, $cmp32 = 0, $cmp41 = 0, $cmp69 = 0, $cmp75 = 0, $cmp8 = 0, $data = 0, $data12 = 0, $data16 = 0, $data18 = 0, $data21 = 0, $data28 = 0;
 var $data34 = 0, $data37 = 0, $data4 = 0, $data44 = 0, $data47 = 0, $data50 = 0, $data60 = 0, $data71 = 0, $data77 = 0, $data80 = 0, $data88 = 0, $data9 = 0, $l$addr = 0, $retval = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l$addr = $l;
 $0 = $l$addr;
 $1 = HEAP32[$0>>2]|0;
 $cmp = ($1|0)==(0);
 if ($cmp) {
  $2 = HEAP32[40>>2]|0;
  $retval = $2;
  $54 = $retval;
  STACKTOP = sp;return ($54|0);
 }
 $3 = $l$addr;
 $data = (($3) + 8|0);
 $4 = HEAP32[$data>>2]|0;
 $v = $4;
 $5 = $v;
 $6 = HEAP32[$5>>2]|0;
 $cmp2 = ($6|0)==(5);
 if (!($cmp2)) {
  $38 = $v;
  $39 = HEAP32[$38>>2]|0;
  $cmp69 = ($39|0)==(4);
  if ($cmp69) {
   $40 = $v;
   $data71 = (($40) + 8|0);
   $41 = HEAP32[$data71>>2]|0;
   $call74 = (_strcmp($41,7536)|0);
   $cmp75 = ($call74|0)==(0);
   if ($cmp75) {
    $42 = HEAP32[1968>>2]|0;
    $43 = $l$addr;
    $data77 = (($43) + 8|0);
    $cdr79 = (($data77) + 4|0);
    $44 = HEAP32[$cdr79>>2]|0;
    $data80 = (($44) + 8|0);
    $45 = HEAP32[$data80>>2]|0;
    $46 = HEAP32[40>>2]|0;
    $call83 = (_cons($45,$46)|0);
    $call84 = (_cons($42,$call83)|0);
    $retval = $call84;
    $54 = $retval;
    STACKTOP = sp;return ($54|0);
   }
  }
  $47 = HEAP32[3176>>2]|0;
  $48 = HEAP32[1968>>2]|0;
  $49 = $v;
  $50 = HEAP32[40>>2]|0;
  $call86 = (_cons($49,$50)|0);
  $call87 = (_cons($48,$call86)|0);
  $51 = $l$addr;
  $data88 = (($51) + 8|0);
  $cdr90 = (($data88) + 4|0);
  $52 = HEAP32[$cdr90>>2]|0;
  $call91 = (_quasiquote_list($52)|0);
  $53 = HEAP32[40>>2]|0;
  $call92 = (_cons($call91,$53)|0);
  $call93 = (_cons($call87,$call92)|0);
  $call94 = (_cons($47,$call93)|0);
  $retval = $call94;
  $54 = $retval;
  STACKTOP = sp;return ($54|0);
 }
 $7 = $v;
 $data4 = (($7) + 8|0);
 $8 = HEAP32[$data4>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $cmp8 = ($9|0)==(4);
 if ($cmp8) {
  $10 = $v;
  $data9 = (($10) + 8|0);
  $11 = HEAP32[$data9>>2]|0;
  $data12 = (($11) + 8|0);
  $12 = HEAP32[$data12>>2]|0;
  $call = (_strcmp($12,3136)|0);
  $cmp14 = ($call|0)==(0);
  if ($cmp14) {
   $13 = HEAP32[3176>>2]|0;
   $14 = $v;
   $data16 = (($14) + 8|0);
   $cdr = (($data16) + 4|0);
   $15 = HEAP32[$cdr>>2]|0;
   $data18 = (($15) + 8|0);
   $16 = HEAP32[$data18>>2]|0;
   $17 = $l$addr;
   $data21 = (($17) + 8|0);
   $cdr23 = (($data21) + 4|0);
   $18 = HEAP32[$cdr23>>2]|0;
   $call24 = (_quasiquote_list($18)|0);
   $19 = HEAP32[40>>2]|0;
   $call25 = (_cons($call24,$19)|0);
   $call26 = (_cons($16,$call25)|0);
   $call27 = (_cons($13,$call26)|0);
   $retval = $call27;
   $54 = $retval;
   STACKTOP = sp;return ($54|0);
  }
 }
 $20 = $v;
 $data28 = (($20) + 8|0);
 $21 = HEAP32[$data28>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $cmp32 = ($22|0)==(4);
 if ($cmp32) {
  $23 = $v;
  $data34 = (($23) + 8|0);
  $24 = HEAP32[$data34>>2]|0;
  $data37 = (($24) + 8|0);
  $25 = HEAP32[$data37>>2]|0;
  $call40 = (_strcmp($25,3144)|0);
  $cmp41 = ($call40|0)==(0);
  if ($cmp41) {
   $26 = (_Object_initString(7544,6,0)|0);
   $27 = $v;
   $data44 = (($27) + 8|0);
   $cdr46 = (($data44) + 4|0);
   $28 = HEAP32[$cdr46>>2]|0;
   $data47 = (($28) + 8|0);
   $29 = HEAP32[$data47>>2]|0;
   $30 = $l$addr;
   $data50 = (($30) + 8|0);
   $cdr52 = (($data50) + 4|0);
   $31 = HEAP32[$cdr52>>2]|0;
   $call53 = (_quasiquote_list($31)|0);
   $32 = HEAP32[40>>2]|0;
   $call54 = (_cons($call53,$32)|0);
   $call55 = (_cons($29,$call54)|0);
   $call56 = (_cons($26,$call55)|0);
   $retval = $call56;
   $54 = $retval;
   STACKTOP = sp;return ($54|0);
  }
 }
 $33 = HEAP32[3176>>2]|0;
 $34 = $v;
 $call59 = (_quasiquote_list($34)|0);
 $35 = $l$addr;
 $data60 = (($35) + 8|0);
 $cdr62 = (($data60) + 4|0);
 $36 = HEAP32[$cdr62>>2]|0;
 $call63 = (_quasiquote_list($36)|0);
 $37 = HEAP32[40>>2]|0;
 $call64 = (_cons($call63,$37)|0);
 $call65 = (_cons($call59,$call64)|0);
 $call66 = (_cons($33,$call65)|0);
 $retval = $call66;
 $54 = $retval;
 STACKTOP = sp;return ($54|0);
}
function _macro_match($a,$b,$var_names,$var_values,$count) {
 $a = $a|0;
 $b = $b|0;
 $var_names = $var_names|0;
 $var_values = $var_values|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$addr = 0, $add = 0, $add$ptr = 0, $arrayidx132 = 0, $arrayidx133 = 0, $arrayidx141 = 0, $arrayidx145 = 0, $b$addr = 0, $call = 0, $call106 = 0, $call119 = 0, $call120 = 0, $call153 = 0, $call32 = 0, $call80 = 0;
 var $call90 = 0, $cdr = 0, $cdr112 = 0, $cdr124 = 0, $cdr149 = 0, $cdr152 = 0, $cdr31 = 0, $cdr86 = 0, $cdr89 = 0, $cmp = 0, $cmp107 = 0, $cmp12 = 0, $cmp18 = 0, $cmp2 = 0, $cmp3 = 0, $cmp38 = 0, $cmp44 = 0, $cmp5 = 0, $cmp51 = 0, $cmp57 = 0;
 var $cmp6 = 0, $cmp64 = 0, $cmp8 = 0, $cmp81 = 0, $cmp97 = 0, $conv = 0, $count$addr = 0, $data = 0, $data100 = 0, $data103 = 0, $data110 = 0, $data113 = 0, $data116 = 0, $data122 = 0, $data125 = 0, $data128 = 0, $data135 = 0, $data138 = 0, $data14 = 0, $data142 = 0;
 var $data147 = 0, $data150 = 0, $data20 = 0, $data23 = 0, $data27 = 0, $data29 = 0, $data34 = 0, $data40 = 0, $data47 = 0, $data53 = 0, $data56 = 0, $data60 = 0, $data68 = 0, $data71 = 0, $data74 = 0, $data77 = 0, $data84 = 0, $data87 = 0, $data93 = 0, $inc = 0;
 var $inc146 = 0, $match = 0, $mul = 0, $retval = 0, $temp = 0, $tobool = 0, $var_names$addr = 0, $var_values$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a$addr = $a;
 $b$addr = $b;
 $var_names$addr = $var_names;
 $var_values$addr = $var_values;
 $count$addr = $count;
 $0 = $a$addr;
 $1 = HEAP32[$0>>2]|0;
 $cmp = ($1|0)==(0);
 if ($cmp) {
  $2 = $b$addr;
  $3 = HEAP32[$2>>2]|0;
  $cmp2 = ($3|0)==(0);
  if ($cmp2) {
   $4 = $count$addr;
   $retval = $4;
   $104 = $retval;
   STACKTOP = sp;return ($104|0);
  }
 }
 $5 = $a$addr;
 $6 = HEAP32[40>>2]|0;
 $cmp3 = ($5|0)==($6|0);
 if ($cmp3) {
  $7 = $b$addr;
  $8 = HEAP32[40>>2]|0;
  $cmp5 = ($7|0)!=($8|0);
  if (!($cmp5)) {
   label = 6;
  }
 } else {
  label = 6;
 }
 do {
  if ((label|0) == 6) {
   $9 = $a$addr;
   $10 = HEAP32[40>>2]|0;
   $cmp6 = ($9|0)!=($10|0);
   if ($cmp6) {
    $11 = $b$addr;
    $12 = HEAP32[40>>2]|0;
    $cmp8 = ($11|0)==($12|0);
    if ($cmp8) {
     break;
    }
   }
   $13 = $a$addr;
   $data = (($13) + 8|0);
   $14 = HEAP32[$data>>2]|0;
   $15 = HEAP32[$14>>2]|0;
   $cmp12 = ($15|0)==(5);
   if ($cmp12) {
    $16 = $b$addr;
    $data14 = (($16) + 8|0);
    $17 = HEAP32[$data14>>2]|0;
    $18 = HEAP32[$17>>2]|0;
    $cmp18 = ($18|0)==(5);
    if ($cmp18) {
     $19 = $a$addr;
     $data20 = (($19) + 8|0);
     $20 = HEAP32[$data20>>2]|0;
     $21 = $b$addr;
     $data23 = (($21) + 8|0);
     $22 = HEAP32[$data23>>2]|0;
     $23 = $var_names$addr;
     $24 = $var_values$addr;
     $25 = $count$addr;
     $call = (_macro_match($20,$22,$23,$24,$25)|0);
     $match = $call;
     $26 = $match;
     $tobool = ($26|0)!=(0);
     if ($tobool) {
      $27 = $a$addr;
      $data27 = (($27) + 8|0);
      $cdr = (($data27) + 4|0);
      $28 = HEAP32[$cdr>>2]|0;
      $29 = $b$addr;
      $data29 = (($29) + 8|0);
      $cdr31 = (($data29) + 4|0);
      $30 = HEAP32[$cdr31>>2]|0;
      $31 = $var_names$addr;
      $32 = $var_values$addr;
      $33 = $match;
      $call32 = (_macro_match($28,$30,$31,$32,$33)|0);
      $retval = $call32;
      $104 = $retval;
      STACKTOP = sp;return ($104|0);
     } else {
      $retval = 0;
      $104 = $retval;
      STACKTOP = sp;return ($104|0);
     }
    }
   }
   $34 = $a$addr;
   $data34 = (($34) + 8|0);
   $35 = HEAP32[$data34>>2]|0;
   $36 = HEAP32[$35>>2]|0;
   $cmp38 = ($36|0)==(5);
   if ($cmp38) {
    $37 = $b$addr;
    $data40 = (($37) + 8|0);
    $38 = HEAP32[$data40>>2]|0;
    $39 = HEAP32[$38>>2]|0;
    $cmp44 = ($39|0)!=(5);
    if ($cmp44) {
     $retval = 0;
     $104 = $retval;
     STACKTOP = sp;return ($104|0);
    }
   }
   $40 = $a$addr;
   $data47 = (($40) + 8|0);
   $41 = HEAP32[$data47>>2]|0;
   $42 = HEAP32[$41>>2]|0;
   $cmp51 = ($42|0)==(4);
   if ($cmp51) {
    $43 = $a$addr;
    $data53 = (($43) + 8|0);
    $44 = HEAP32[$data53>>2]|0;
    $data56 = (($44) + 8|0);
    $45 = HEAP32[$data56>>2]|0;
    $46 = HEAP8[$45>>0]|0;
    $conv = $46 << 24 >> 24;
    $cmp57 = ($conv|0)==(35);
    if ($cmp57) {
     $47 = $b$addr;
     $data60 = (($47) + 8|0);
     $48 = HEAP32[$data60>>2]|0;
     $49 = HEAP32[$48>>2]|0;
     $cmp64 = ($49|0)!=(4);
     if ($cmp64) {
      $retval = 0;
      $104 = $retval;
      STACKTOP = sp;return ($104|0);
     }
     $50 = $a$addr;
     $data68 = (($50) + 8|0);
     $51 = HEAP32[$data68>>2]|0;
     $data71 = (($51) + 8|0);
     $52 = HEAP32[$data71>>2]|0;
     $add$ptr = (($52) + 1|0);
     $53 = $b$addr;
     $data74 = (($53) + 8|0);
     $54 = HEAP32[$data74>>2]|0;
     $data77 = (($54) + 8|0);
     $55 = HEAP32[$data77>>2]|0;
     $call80 = (_strcmp($add$ptr,$55)|0);
     $cmp81 = ($call80|0)==(0);
     if ($cmp81) {
      $56 = $a$addr;
      $data84 = (($56) + 8|0);
      $cdr86 = (($data84) + 4|0);
      $57 = HEAP32[$cdr86>>2]|0;
      $58 = $b$addr;
      $data87 = (($58) + 8|0);
      $cdr89 = (($data87) + 4|0);
      $59 = HEAP32[$cdr89>>2]|0;
      $60 = $var_names$addr;
      $61 = $var_values$addr;
      $62 = $count$addr;
      $call90 = (_macro_match($57,$59,$60,$61,$62)|0);
      $retval = $call90;
      $104 = $retval;
      STACKTOP = sp;return ($104|0);
     } else {
      $retval = 0;
      $104 = $retval;
      STACKTOP = sp;return ($104|0);
     }
    }
   }
   $63 = $a$addr;
   $data93 = (($63) + 8|0);
   $64 = HEAP32[$data93>>2]|0;
   $65 = HEAP32[$64>>2]|0;
   $cmp97 = ($65|0)==(4);
   if ($cmp97) {
    $66 = $a$addr;
    $data100 = (($66) + 8|0);
    $67 = HEAP32[$data100>>2]|0;
    $data103 = (($67) + 8|0);
    $68 = HEAP32[$data103>>2]|0;
    $call106 = (_strcmp($68,7536)|0);
    $cmp107 = ($call106|0)==(0);
    if ($cmp107) {
     $69 = $a$addr;
     $data110 = (($69) + 8|0);
     $cdr112 = (($data110) + 4|0);
     $70 = HEAP32[$cdr112>>2]|0;
     $data113 = (($70) + 8|0);
     $71 = HEAP32[$data113>>2]|0;
     $data116 = (($71) + 8|0);
     $72 = HEAP32[$data116>>2]|0;
     $call119 = (_strlen(($72|0))|0);
     $add = (($call119) + 2)|0;
     $mul = $add;
     $call120 = (_malloc($mul)|0);
     $temp = $call120;
     $73 = $temp;
     (_strcpy(($73|0),(192|0))|0);
     $74 = $temp;
     $75 = $a$addr;
     $data122 = (($75) + 8|0);
     $cdr124 = (($data122) + 4|0);
     $76 = HEAP32[$cdr124>>2]|0;
     $data125 = (($76) + 8|0);
     $77 = HEAP32[$data125>>2]|0;
     $data128 = (($77) + 8|0);
     $78 = HEAP32[$data128>>2]|0;
     (_strcat(($74|0),($78|0))|0);
     $79 = $temp;
     $80 = $count$addr;
     $81 = $var_names$addr;
     $arrayidx132 = (($81) + ($80<<2)|0);
     HEAP32[$arrayidx132>>2] = $79;
     $82 = $b$addr;
     $83 = $count$addr;
     $84 = $var_values$addr;
     $arrayidx133 = (($84) + ($83<<2)|0);
     HEAP32[$arrayidx133>>2] = $82;
     $85 = $count$addr;
     $inc = (($85) + 1)|0;
     $count$addr = $inc;
     $86 = $count$addr;
     $retval = $86;
     $104 = $retval;
     STACKTOP = sp;return ($104|0);
    }
   }
   $87 = $a$addr;
   $data135 = (($87) + 8|0);
   $88 = HEAP32[$data135>>2]|0;
   $data138 = (($88) + 8|0);
   $89 = HEAP32[$data138>>2]|0;
   $90 = $count$addr;
   $91 = $var_names$addr;
   $arrayidx141 = (($91) + ($90<<2)|0);
   HEAP32[$arrayidx141>>2] = $89;
   $92 = $b$addr;
   $data142 = (($92) + 8|0);
   $93 = HEAP32[$data142>>2]|0;
   $94 = $count$addr;
   $95 = $var_values$addr;
   $arrayidx145 = (($95) + ($94<<2)|0);
   HEAP32[$arrayidx145>>2] = $93;
   $96 = $count$addr;
   $inc146 = (($96) + 1)|0;
   $count$addr = $inc146;
   $97 = $a$addr;
   $data147 = (($97) + 8|0);
   $cdr149 = (($data147) + 4|0);
   $98 = HEAP32[$cdr149>>2]|0;
   $99 = $b$addr;
   $data150 = (($99) + 8|0);
   $cdr152 = (($data150) + 4|0);
   $100 = HEAP32[$cdr152>>2]|0;
   $101 = $var_names$addr;
   $102 = $var_values$addr;
   $103 = $count$addr;
   $call153 = (_macro_match($98,$100,$101,$102,$103)|0);
   $retval = $call153;
   $104 = $retval;
   STACKTOP = sp;return ($104|0);
  }
 } while(0);
 $retval = 0;
 $104 = $retval;
 STACKTOP = sp;return ($104|0);
}
function _macro_expansion_replacement($expanded_value,$vt,$is_head,$module) {
 $expanded_value = $expanded_value|0;
 $vt = $vt|0;
 $is_head = $is_head|0;
 $module = $module|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $arrayidx34 = 0, $arrayidx58 = 0, $call = 0;
 var $call10 = 0, $call16 = 0, $call21 = 0, $call38 = 0, $call44 = 0, $call45 = 0, $call61 = 0, $call62 = 0, $call63 = 0, $call67 = 0, $call68 = 0, $call73 = 0, $call74 = 0, $call9 = 0, $call95 = 0, $call96 = 0, $call99 = 0, $cdr = 0, $cdr43 = 0, $cdr66 = 0;
 var $cdr72 = 0, $cdr94 = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp17 = 0, $cmp22 = 0, $cmp28 = 0, $cmp5 = 0, $cmp51 = 0, $cmp77 = 0, $cmp81 = 0, $cmp85 = 0, $cmp89 = 0, $conv = 0, $data = 0, $data14 = 0, $data18 = 0, $data25 = 0, $data31 = 0;
 var $data35 = 0, $data41 = 0, $data47 = 0, $data64 = 0, $data7 = 0, $data70 = 0, $data92 = 0, $expanded_value$addr = 0, $find = 0, $is_head$addr = 0, $module$addr = 0, $retval = 0, $sub = 0, $tobool = 0, $v = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vt$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $find = sp + 40|0;
 $expanded_value$addr = $expanded_value;
 $vt$addr = $vt;
 $is_head$addr = $is_head;
 $module$addr = $module;
 $0 = $expanded_value$addr;
 $1 = HEAP32[40>>2]|0;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  $2 = HEAP32[40>>2]|0;
  $retval = $2;
  $76 = $retval;
  STACKTOP = sp;return ($76|0);
 }
 $3 = $expanded_value$addr;
 $4 = HEAP32[$3>>2]|0;
 $cmp1 = ($4|0)!=(5);
 if ($cmp1) {
  $5 = $expanded_value$addr;
  $retval = $5;
  $76 = $retval;
  STACKTOP = sp;return ($76|0);
 }
 $6 = $expanded_value$addr;
 $data = (($6) + 8|0);
 $7 = HEAP32[$data>>2]|0;
 $v = $7;
 $8 = $v;
 $9 = HEAP32[$8>>2]|0;
 $cmp5 = ($9|0)==(5);
 if ($cmp5) {
  $10 = $v;
  $11 = $vt$addr;
  $12 = $module$addr;
  $call = (_macro_expansion_replacement($10,$11,1,$12)|0);
  $13 = $expanded_value$addr;
  $data7 = (($13) + 8|0);
  $cdr = (($data7) + 4|0);
  $14 = HEAP32[$cdr>>2]|0;
  $15 = $vt$addr;
  $16 = $module$addr;
  $call9 = (_macro_expansion_replacement($14,$15,0,$16)|0);
  $call10 = (_cons($call,$call9)|0);
  $retval = $call10;
  $76 = $retval;
  STACKTOP = sp;return ($76|0);
 }
 $17 = $v;
 $18 = HEAP32[$17>>2]|0;
 $cmp12 = ($18|0)==(4);
 if ($cmp12) {
  $19 = $is_head$addr;
  $tobool = ($19|0)!=(0);
  if ($tobool) {
   $20 = $v;
   $data14 = (($20) + 8|0);
   $21 = HEAP32[$data14>>2]|0;
   $call16 = (_strcmp($21,3128)|0);
   $cmp17 = ($call16|0)==(0);
   if (!($cmp17)) {
    $22 = $v;
    $data18 = (($22) + 8|0);
    $23 = HEAP32[$data18>>2]|0;
    $call21 = (_strcmp($23,3160)|0);
    $cmp22 = ($call21|0)==(0);
    if (!($cmp22)) {
     $25 = $v;
     $data25 = (($25) + 8|0);
     $26 = HEAP32[$data25>>2]|0;
     $27 = HEAP8[$26>>0]|0;
     $conv = $27 << 24 >> 24;
     $cmp28 = ($conv|0)==(33);
     if ($cmp28) {
      $28 = $v;
      $data31 = (($28) + 8|0);
      $29 = HEAP32[$data31>>2]|0;
      $arrayidx34 = (($29) + 1|0);
      $30 = $v;
      $data35 = (($30) + 8|0);
      $31 = HEAP32[$data35>>2]|0;
      $call38 = (_strlen(($31|0))|0);
      $sub = (($call38) - 1)|0;
      $32 = (_Object_initString($arrayidx34,$sub,0)|0);
      $33 = $expanded_value$addr;
      $data41 = (($33) + 8|0);
      $cdr43 = (($data41) + 4|0);
      $34 = HEAP32[$cdr43>>2]|0;
      $35 = $vt$addr;
      $36 = $module$addr;
      $call44 = (_macro_expansion_replacement($34,$35,0,$36)|0);
      $call45 = (_cons($32,$call44)|0);
      $retval = $call45;
      $76 = $retval;
      STACKTOP = sp;return ($76|0);
     }
     $37 = $vt$addr;
     $38 = $v;
     $data47 = (($38) + 8|0);
     $39 = HEAP32[$data47>>2]|0;
     $40 = $module$addr;
     _VT_find($37,$39,$find,$40);
     $41 = HEAP32[$find>>2]|0;
     $cmp51 = ($41|0)!=(-1);
     if ($cmp51) {
      $42 = (_Object_initInteger(0,0)|0);
      $43 = HEAP32[$find>>2]|0;
      $44 = ($43|0)<(0);
      $45 = $44 << 31 >> 31;
      $46 = (_Object_initInteger($43,$45)|0);
      $arrayidx58 = (($find) + 4|0);
      $47 = HEAP32[$arrayidx58>>2]|0;
      $48 = ($47|0)<(0);
      $49 = $48 << 31 >> 31;
      $50 = (_Object_initInteger($47,$49)|0);
      $51 = HEAP32[40>>2]|0;
      $call61 = (_cons($50,$51)|0);
      $call62 = (_cons($46,$call61)|0);
      $call63 = (_cons($42,$call62)|0);
      $52 = $expanded_value$addr;
      $data64 = (($52) + 8|0);
      $cdr66 = (($data64) + 4|0);
      $53 = HEAP32[$cdr66>>2]|0;
      $54 = $vt$addr;
      $55 = $module$addr;
      $call67 = (_macro_expansion_replacement($53,$54,0,$55)|0);
      $call68 = (_cons($call63,$call67)|0);
      $retval = $call68;
      $76 = $retval;
      STACKTOP = sp;return ($76|0);
     } else {
      $56 = $v;
      $57 = $expanded_value$addr;
      $data70 = (($57) + 8|0);
      $cdr72 = (($data70) + 4|0);
      $58 = HEAP32[$cdr72>>2]|0;
      $59 = $vt$addr;
      $60 = $module$addr;
      $call73 = (_macro_expansion_replacement($58,$59,0,$60)|0);
      $call74 = (_cons($56,$call73)|0);
      $retval = $call74;
      $76 = $retval;
      STACKTOP = sp;return ($76|0);
     }
    }
   }
   $24 = $expanded_value$addr;
   $retval = $24;
   $76 = $retval;
   STACKTOP = sp;return ($76|0);
  }
 }
 $61 = $v;
 $62 = HEAP32[$61>>2]|0;
 $cmp77 = ($62|0)==(4);
 if (!($cmp77)) {
  $63 = $v;
  $64 = HEAP32[$63>>2]|0;
  $cmp81 = ($64|0)==(1);
  if (!($cmp81)) {
   $65 = $v;
   $66 = HEAP32[$65>>2]|0;
   $cmp85 = ($66|0)==(2);
   if (!($cmp85)) {
    $67 = $v;
    $68 = HEAP32[$67>>2]|0;
    $cmp89 = ($68|0)==(0);
    if (!($cmp89)) {
     (_printf((7552|0),($vararg_buffer|0))|0);
     $74 = $v;
     $call99 = (_to_string($74)|0);
     HEAP32[$vararg_buffer1>>2] = $call99;
     (_printf((568|0),($vararg_buffer1|0))|0);
     $75 = HEAP32[40>>2]|0;
     $retval = $75;
     $76 = $retval;
     STACKTOP = sp;return ($76|0);
    }
   }
  }
 }
 $69 = $v;
 $70 = $expanded_value$addr;
 $data92 = (($70) + 8|0);
 $cdr94 = (($data92) + 4|0);
 $71 = HEAP32[$cdr94>>2]|0;
 $72 = $vt$addr;
 $73 = $module$addr;
 $call95 = (_macro_expansion_replacement($71,$72,0,$73)|0);
 $call96 = (_cons($69,$call95)|0);
 $retval = $call96;
 $76 = $retval;
 STACKTOP = sp;return ($76|0);
}
function _macro_expand_for_compilation($macro,$exps,$mt,$global_env,$insts,$module) {
 $macro = $macro|0;
 $exps = $exps|0;
 $mt = $mt|0;
 $global_env = $global_env|0;
 $insts = $insts|0;
 $module = $module|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a = 0, $add = 0, $add32 = 0, $add41 = 0, $arrayidx104 = 0, $arrayidx106 = 0, $arrayidx107 = 0, $arrayidx108 = 0, $arrayidx109 = 0, $arrayidx21 = 0, $arrayidx30 = 0, $arrayidx34 = 0, $arrayidx39 = 0, $arrayidx44 = 0, $arrayidx45 = 0, $arrayidx47 = 0, $arrayidx48 = 0, $arrayidx49 = 0;
 var $arrayidx53 = 0, $arrayidx61 = 0, $arrayidx82 = 0, $arrayidx95 = 0, $buffer = 0, $call = 0, $call122 = 0, $call131 = 0, $call14 = 0, $call15 = 0, $call17 = 0, $call23 = 0, $call24 = 0, $call40 = 0, $call43 = 0, $call66 = 0, $call70 = 0, $call74 = 0, $call92 = 0, $cdr = 0;
 var $cdr135 = 0, $clauses = 0, $clauses1 = 0, $cmp = 0, $cmp13 = 0, $cmp33 = 0, $cmp36 = 0, $cmp50 = 0, $cmp58 = 0, $cmp6 = 0, $cmp67 = 0, $cmp71 = 0, $cmp75 = 0, $conv = 0, $data = 0, $data10 = 0, $data114 = 0, $data117 = 0, $data119 = 0, $data133 = 0;
 var $data2 = 0, $data54 = 0, $data62 = 0, $data65 = 0, $data7 = 0, $data83 = 0, $data86 = 0, $data96 = 0, $data99 = 0, $expanded_value = 0, $expanded_value_after_replacement = 0, $exps$addr = 0, $global_env$addr = 0, $i = 0, $inc = 0, $inc111 = 0, $insts$addr = 0, $insts_length = 0, $length = 0, $length113 = 0;
 var $length124 = 0, $length127 = 0, $length22 = 0, $length31 = 0, $macro$addr = 0, $match = 0, $module$addr = 0, $mt$addr = 0, $mul = 0, $mul42 = 0, $new_env = 0, $new_env_top_frame = 0, $new_vt = 0, $new_vt_top_frame = 0, $retval = 0, $start_pc = 0, $start_pc112 = 0, $start_pc126 = 0, $sub = 0, $t = 0;
 var $temp = 0, $tobool = 0, $use_count = 0, $use_count110 = 0, $use_count129 = 0, $var_names = 0, $var_values = 0, $vararg_buffer = 0, $vt = 0, $vt130 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 880|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $var_names = sp + 104|0;
 $var_values = sp + 360|0;
 $start_pc = sp;
 $insts_length = sp + 16|0;
 $buffer = sp + 616|0;
 $macro$addr = $macro;
 $exps$addr = $exps;
 $mt$addr = $mt;
 $global_env$addr = $global_env;
 $insts$addr = $insts;
 $module$addr = $module;
 $0 = $macro$addr;
 $clauses1 = (($0) + 4|0);
 $1 = HEAP32[$clauses1>>2]|0;
 $clauses = $1;
 while(1) {
  $2 = $clauses;
  $3 = HEAP32[40>>2]|0;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   label = 23;
   break;
  }
  $4 = $clauses;
  $data = (($4) + 8|0);
  $5 = HEAP32[$data>>2]|0;
  $data2 = (($5) + 8|0);
  $6 = HEAP32[$data2>>2]|0;
  $7 = $exps$addr;
  $call = (_macro_match($6,$7,$var_names,$var_values,0)|0);
  $match = $call;
  $8 = $match;
  $tobool = ($8|0)!=(0);
  if ($tobool) {
   break;
  }
  $9 = $exps$addr;
  $10 = HEAP32[40>>2]|0;
  $cmp6 = ($9|0)==($10|0);
  if ($cmp6) {
   $11 = $clauses;
   $data7 = (($11) + 8|0);
   $12 = HEAP32[$data7>>2]|0;
   $data10 = (($12) + 8|0);
   $13 = HEAP32[$data10>>2]|0;
   $14 = HEAP32[40>>2]|0;
   $cmp13 = ($13|0)==($14|0);
   if ($cmp13) {
    break;
   }
  }
  $176 = $clauses;
  $data133 = (($176) + 8|0);
  $cdr135 = (($data133) + 4|0);
  $177 = HEAP32[$cdr135>>2]|0;
  $clauses = $177;
 }
 if ((label|0) == 23) {
  $178 = $macro$addr;
  $179 = HEAP32[$178>>2]|0;
  HEAP32[$vararg_buffer>>2] = $179;
  (_printf((7616|0),($vararg_buffer|0))|0);
  $180 = HEAP32[40>>2]|0;
  $retval = $180;
  $181 = $retval;
  STACKTOP = sp;return ($181|0);
 }
 $call14 = (_malloc(12)|0);
 $new_vt_top_frame = $call14;
 $15 = $match;
 $mul = $15<<2;
 $call15 = (_malloc($mul)|0);
 $16 = $new_vt_top_frame;
 HEAP32[$16>>2] = $call15;
 $17 = $match;
 $18 = $new_vt_top_frame;
 $length = (($18) + 4|0);
 HEAP32[$length>>2] = $17;
 $call17 = (_malloc(260)|0);
 $new_vt = $call17;
 $19 = $macro$addr;
 $vt = (($19) + 8|0);
 $20 = HEAP32[$vt>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = $new_vt;
 HEAP32[$22>>2] = $21;
 $23 = $new_vt_top_frame;
 $24 = $new_vt;
 $arrayidx21 = (($24) + 4|0);
 HEAP32[$arrayidx21>>2] = $23;
 $25 = $new_vt;
 $length22 = (($25) + 256|0);
 HEAP32[$length22>>2] = 2;
 $26 = $match;
 $add = (($26) + 1)|0;
 $call23 = (_EF_init_with_size($add)|0);
 $new_env_top_frame = $call23;
 $call24 = (_Env_init_with_size(64)|0);
 $new_env = $call24;
 $27 = $global_env$addr;
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$28>>2]|0;
 $30 = $new_env;
 $31 = HEAP32[$30>>2]|0;
 HEAP32[$31>>2] = $29;
 $32 = $new_env_top_frame;
 $33 = $new_env;
 $34 = HEAP32[$33>>2]|0;
 $arrayidx30 = (($34) + 4|0);
 HEAP32[$arrayidx30>>2] = $32;
 $35 = $new_env;
 $length31 = (($35) + 4|0);
 HEAP32[$length31>>2] = 2;
 $36 = $new_env_top_frame;
 $use_count = (($36) + 8|0);
 $37 = HEAP32[$use_count>>2]|0;
 $add32 = (($37) + 1)|0;
 HEAP32[$use_count>>2] = $add32;
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = $match;
  $cmp33 = ($38|0)<($39|0);
  if (!($cmp33)) {
   break;
  }
  $40 = $i;
  $arrayidx34 = (($var_names) + ($40<<2)|0);
  $41 = HEAP32[$arrayidx34>>2]|0;
  $42 = HEAP8[$41>>0]|0;
  $conv = $42 << 24 >> 24;
  $cmp36 = ($conv|0)==(32);
  if ($cmp36) {
   $43 = $i;
   $arrayidx39 = (($var_names) + ($43<<2)|0);
   $44 = HEAP32[$arrayidx39>>2]|0;
   $call40 = (_strlen(($44|0))|0);
   $add41 = (($call40) + 1)|0;
   $mul42 = $add41;
   $call43 = (_malloc($mul42)|0);
   $a = $call43;
   $45 = $a;
   $46 = $i;
   $arrayidx44 = (($var_names) + ($46<<2)|0);
   $47 = HEAP32[$arrayidx44>>2]|0;
   $arrayidx45 = (($47) + 1|0);
   (_strcpy(($45|0),($arrayidx45|0))|0);
   $48 = $i;
   $arrayidx47 = (($var_names) + ($48<<2)|0);
   $49 = HEAP32[$arrayidx47>>2]|0;
   _free($49);
   $50 = $a;
   $51 = $i;
   $arrayidx48 = (($var_names) + ($51<<2)|0);
   HEAP32[$arrayidx48>>2] = $50;
  } else {
   $52 = $i;
   $arrayidx49 = (($var_values) + ($52<<2)|0);
   $53 = HEAP32[$arrayidx49>>2]|0;
   $54 = HEAP32[$53>>2]|0;
   $cmp50 = ($54|0)==(5);
   if ($cmp50) {
    $55 = $i;
    $arrayidx53 = (($var_values) + ($55<<2)|0);
    $56 = HEAP32[$arrayidx53>>2]|0;
    $data54 = (($56) + 8|0);
    $57 = HEAP32[$data54>>2]|0;
    $58 = HEAP32[$57>>2]|0;
    $cmp58 = ($58|0)==(4);
    if ($cmp58) {
     $59 = $i;
     $arrayidx61 = (($var_values) + ($59<<2)|0);
     $60 = HEAP32[$arrayidx61>>2]|0;
     $data62 = (($60) + 8|0);
     $61 = HEAP32[$data62>>2]|0;
     $temp = $61;
     $62 = $temp;
     $data65 = (($62) + 8|0);
     $63 = HEAP32[$data65>>2]|0;
     $t = $63;
     $64 = $t;
     $call66 = (_strcmp($64,3160)|0);
     $cmp67 = ($call66|0)==(0);
     if ($cmp67) {
      label = 15;
     } else {
      $65 = $t;
      $call70 = (_strcmp($65,3128)|0);
      $cmp71 = ($call70|0)==(0);
      if ($cmp71) {
       label = 15;
      } else {
       $66 = $t;
       $call74 = (_strcmp($66,3144)|0);
       $cmp75 = ($call74|0)==(0);
       if ($cmp75) {
        label = 15;
       } else {
        (_strcpy(($buffer|0),(7608|0))|0);
        $67 = $i;
        $arrayidx82 = (($var_values) + ($67<<2)|0);
        $68 = HEAP32[$arrayidx82>>2]|0;
        $data83 = (($68) + 8|0);
        $69 = HEAP32[$data83>>2]|0;
        $data86 = (($69) + 8|0);
        $70 = HEAP32[$data86>>2]|0;
        (_strcat(($buffer|0),($70|0))|0);
        $call92 = (_strlen(($buffer|0))|0);
        $71 = (_Object_initString($buffer,$call92,0)|0);
        $72 = $i;
        $arrayidx95 = (($var_values) + ($72<<2)|0);
        $73 = HEAP32[$arrayidx95>>2]|0;
        $data96 = (($73) + 8|0);
        HEAP32[$data96>>2] = $71;
        $74 = $temp;
        $data99 = (($74) + 8|0);
        $75 = HEAP32[$data99>>2]|0;
        _free($75);
        $76 = $temp;
        _free($76);
       }
      }
     }
     if ((label|0) == 15) {
      label = 0;
     }
    }
   }
  }
  $77 = $i;
  $arrayidx104 = (($var_names) + ($77<<2)|0);
  $78 = HEAP32[$arrayidx104>>2]|0;
  $79 = $i;
  $80 = $new_vt_top_frame;
  $81 = HEAP32[$80>>2]|0;
  $arrayidx106 = (($81) + ($79<<2)|0);
  HEAP32[$arrayidx106>>2] = $78;
  $82 = $i;
  $arrayidx107 = (($var_values) + ($82<<2)|0);
  $83 = HEAP32[$arrayidx107>>2]|0;
  $84 = $i;
  $85 = $new_env_top_frame;
  $86 = HEAP32[$85>>2]|0;
  $arrayidx108 = (($86) + ($84<<2)|0);
  HEAP32[$arrayidx108>>2] = $83;
  $87 = $i;
  $arrayidx109 = (($var_values) + ($87<<2)|0);
  $88 = HEAP32[$arrayidx109>>2]|0;
  $use_count110 = (($88) + 4|0);
  $89 = HEAP32[$use_count110>>2]|0;
  $inc = (($89) + 1)|0;
  HEAP32[$use_count110>>2] = $inc;
  $90 = $i;
  $inc111 = (($90) + 1)|0;
  $i = $inc111;
 }
 $91 = $insts$addr;
 $start_pc112 = (($91) + 24|0);
 $92 = $start_pc112;
 $93 = $92;
 $94 = HEAP32[$93>>2]|0;
 $95 = (($92) + 4)|0;
 $96 = $95;
 $97 = HEAP32[$96>>2]|0;
 $98 = $start_pc;
 $99 = $98;
 HEAP32[$99>>2] = $94;
 $100 = (($98) + 4)|0;
 $101 = $100;
 HEAP32[$101>>2] = $97;
 $102 = $insts$addr;
 $length113 = (($102) + 8|0);
 $103 = $length113;
 $104 = $103;
 $105 = HEAP32[$104>>2]|0;
 $106 = (($103) + 4)|0;
 $107 = $106;
 $108 = HEAP32[$107>>2]|0;
 $109 = $insts_length;
 $110 = $109;
 HEAP32[$110>>2] = $105;
 $111 = (($109) + 4)|0;
 $112 = $111;
 HEAP32[$112>>2] = $108;
 $113 = $insts$addr;
 $114 = $clauses;
 $data114 = (($114) + 8|0);
 $115 = HEAP32[$data114>>2]|0;
 $data117 = (($115) + 8|0);
 $cdr = (($data117) + 4|0);
 $116 = HEAP32[$cdr>>2]|0;
 $data119 = (($116) + 8|0);
 $117 = HEAP32[$data119>>2]|0;
 $118 = HEAP32[40>>2]|0;
 $call122 = (_cons($117,$118)|0);
 $119 = $new_vt;
 $120 = $new_env;
 $121 = $mt$addr;
 $122 = $module$addr;
 (_compiler_begin($113,$call122,$119,0,0,0,$120,$121,$122)|0);
 $123 = $insts$addr;
 $124 = $insts_length;
 $125 = $124;
 $126 = HEAP32[$125>>2]|0;
 $127 = (($124) + 4)|0;
 $128 = $127;
 $129 = HEAP32[$128>>2]|0;
 $130 = $insts$addr;
 $length124 = (($130) + 8|0);
 $131 = $length124;
 $132 = $131;
 $133 = HEAP32[$132>>2]|0;
 $134 = (($131) + 4)|0;
 $135 = $134;
 $136 = HEAP32[$135>>2]|0;
 $137 = $new_env;
 $138 = $module$addr;
 $139 = (_VM($123,$126,$129,$133,$136,$137,0,0,$138)|0);
 $expanded_value = $139;
 $140 = $start_pc;
 $141 = $140;
 $142 = HEAP32[$141>>2]|0;
 $143 = (($140) + 4)|0;
 $144 = $143;
 $145 = HEAP32[$144>>2]|0;
 $146 = $insts$addr;
 $start_pc126 = (($146) + 24|0);
 $147 = $start_pc126;
 $148 = $147;
 HEAP32[$148>>2] = $142;
 $149 = (($147) + 4)|0;
 $150 = $149;
 HEAP32[$150>>2] = $145;
 $151 = $insts_length;
 $152 = $151;
 $153 = HEAP32[$152>>2]|0;
 $154 = (($151) + 4)|0;
 $155 = $154;
 $156 = HEAP32[$155>>2]|0;
 $157 = $insts$addr;
 $length127 = (($157) + 8|0);
 $158 = $length127;
 $159 = $158;
 HEAP32[$159>>2] = $153;
 $160 = (($158) + 4)|0;
 $161 = $160;
 HEAP32[$161>>2] = $156;
 $162 = $new_vt;
 _free($162);
 $163 = $new_vt_top_frame;
 $164 = HEAP32[$163>>2]|0;
 _free($164);
 $165 = $new_vt_top_frame;
 _free($165);
 $166 = $new_env;
 _free($166);
 $167 = $new_env_top_frame;
 $use_count129 = (($167) + 8|0);
 $168 = HEAP32[$use_count129>>2]|0;
 $sub = (($168) - 1)|0;
 HEAP32[$use_count129>>2] = $sub;
 $169 = $new_env_top_frame;
 _EF_free($169);
 $170 = $expanded_value;
 $171 = $macro$addr;
 $vt130 = (($171) + 8|0);
 $172 = HEAP32[$vt130>>2]|0;
 $173 = $module$addr;
 $call131 = (_macro_expansion_replacement($170,$172,1,$173)|0);
 $expanded_value_after_replacement = $call131;
 $174 = $expanded_value;
 _Object_free($174);
 $175 = $expanded_value_after_replacement;
 $retval = $175;
 $181 = $retval;
 STACKTOP = sp;return ($181|0);
}
function _compiler_begin($insts,$l,$vt,$parent_func_name,$function_for_compilation,$eval_flag,$env,$mt,$module) {
 $insts = $insts|0;
 $l = $l|0;
 $vt = $vt|0;
 $parent_func_name = $parent_func_name|0;
 $function_for_compilation = $function_for_compilation|0;
 $eval_flag = $eval_flag|0;
 $env = $env|0;
 $mt = $mt|0;
 $module = $module|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $acc = 0, $call = 0, $cdr = 0, $cdr26 = 0, $cmp = 0, $cmp1 = 0, $cmp15 = 0, $cmp4 = 0, $cmp6 = 0, $data = 0;
 var $data11 = 0, $data14 = 0, $data16 = 0, $data2 = 0, $data20 = 0, $data24 = 0, $data8 = 0, $env$addr = 0, $eval_flag$addr = 0, $function_for_compilation$addr = 0, $insts$addr = 0, $l$addr = 0, $l_ = 0, $length = 0, $length29 = 0, $module$addr = 0, $mt$addr = 0, $parent_func_name$addr = 0, $start_pc = 0, $start_pc30 = 0;
 var $tobool = 0, $vt$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $insts$addr = $insts;
 $l$addr = $l;
 $vt$addr = $vt;
 $parent_func_name$addr = $parent_func_name;
 $function_for_compilation$addr = $function_for_compilation;
 $eval_flag$addr = $eval_flag;
 $env$addr = $env;
 $mt$addr = $mt;
 $module$addr = $module;
 $0 = HEAP32[40>>2]|0;
 $acc = $0;
 $1 = $l$addr;
 $l_ = $1;
 while(1) {
  $2 = $l$addr;
  $3 = HEAP32[40>>2]|0;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $l$addr;
  $data = (($4) + 8|0);
  $cdr = (($data) + 4|0);
  $5 = HEAP32[$cdr>>2]|0;
  $6 = HEAP32[40>>2]|0;
  $cmp1 = ($5|0)==($6|0);
  if ($cmp1) {
   $7 = $l$addr;
   $data2 = (($7) + 8|0);
   $8 = HEAP32[$data2>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $cmp4 = ($9|0)==(5);
   if ($cmp4) {
    $10 = $parent_func_name$addr;
    $cmp6 = ($10|0)!=(0|0);
    if ($cmp6) {
     $11 = $l$addr;
     $data8 = (($11) + 8|0);
     $12 = HEAP32[$data8>>2]|0;
     $data11 = (($12) + 8|0);
     $13 = HEAP32[$data11>>2]|0;
     $data14 = (($13) + 8|0);
     $14 = HEAP32[$data14>>2]|0;
     $15 = $parent_func_name$addr;
     $call = (_strcmp($14,$15)|0);
     $cmp15 = ($call|0)==(0);
     if ($cmp15) {
      $16 = $insts$addr;
      $17 = $l$addr;
      $data16 = (($17) + 8|0);
      $18 = HEAP32[$data16>>2]|0;
      $19 = $vt$addr;
      $20 = $function_for_compilation$addr;
      $21 = $env$addr;
      $22 = $mt$addr;
      $23 = $module$addr;
      (_compiler($16,$18,$19,1,0,$20,$21,$22,$23)|0);
     } else {
      label = 8;
     }
    } else {
     label = 8;
    }
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
  if ((label|0) == 8) {
   label = 0;
   $24 = $insts$addr;
   $25 = $l$addr;
   $data20 = (($25) + 8|0);
   $26 = HEAP32[$data20>>2]|0;
   $27 = $vt$addr;
   $28 = $parent_func_name$addr;
   $29 = $function_for_compilation$addr;
   $30 = $env$addr;
   $31 = $mt$addr;
   $32 = $module$addr;
   (_compiler($24,$26,$27,0,$28,$29,$30,$31,$32)|0);
  }
  $33 = $l$addr;
  $data24 = (($33) + 8|0);
  $cdr26 = (($data24) + 4|0);
  $34 = HEAP32[$cdr26>>2]|0;
  $l$addr = $34;
  $35 = $eval_flag$addr;
  $tobool = ($35|0)!=(0);
  if ($tobool) {
   $36 = $insts$addr;
   $37 = $insts$addr;
   $start_pc = (($37) + 24|0);
   $38 = $start_pc;
   $39 = $38;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($38) + 4)|0;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = $insts$addr;
   $length = (($44) + 8|0);
   $45 = $length;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = (($45) + 4)|0;
   $49 = $48;
   $50 = HEAP32[$49>>2]|0;
   $51 = $env$addr;
   $52 = $vt$addr;
   $53 = $mt$addr;
   $54 = $module$addr;
   $55 = (_VM($36,$40,$43,$47,$50,$51,$52,$53,$54)|0);
   $acc = $55;
   $56 = $insts$addr;
   $length29 = (($56) + 8|0);
   $57 = $length29;
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = (($57) + 4)|0;
   $61 = $60;
   $62 = HEAP32[$61>>2]|0;
   $63 = $insts$addr;
   $start_pc30 = (($63) + 24|0);
   $64 = $start_pc30;
   $65 = $64;
   HEAP32[$65>>2] = $59;
   $66 = (($64) + 4)|0;
   $67 = $66;
   HEAP32[$67>>2] = $62;
  }
 }
 $68 = $l_;
 _Object_free($68);
 $69 = $acc;
 STACKTOP = sp;return ($69|0);
}
function _VM($instructions_,$0,$1,$2,$3,$env,$vt,$mt,$module) {
 $instructions_ = $instructions_|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $env = $env|0;
 $vt = $vt|0;
 $mt = $mt|0;
 $module = $module|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
 var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0;
 var $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0;
 var $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0;
 var $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0;
 var $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0;
 var $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0;
 var $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0;
 var $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0;
 var $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0;
 var $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0;
 var $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $BUILTIN_PRIMITIVE_PROCEDURE_STACK = 0, $accumulator = 0, $add1112 = 0, $add238 = 0, $add591 = 0, $add615 = 0;
 var $add702 = 0, $add737 = 0, $add873 = 0, $and = 0, $and109 = 0, $and186 = 0, $and19 = 0, $and190 = 0, $and193 = 0, $and273 = 0, $and63 = 0, $and69 = 0, $and992 = 0, $arrayidx1000 = 0, $arrayidx101 = 0, $arrayidx1011 = 0, $arrayidx1019 = 0, $arrayidx1021 = 0, $arrayidx1028 = 0, $arrayidx103 = 0;
 var $arrayidx1030 = 0, $arrayidx1033 = 0, $arrayidx1038 = 0, $arrayidx1053 = 0, $arrayidx1100 = 0, $arrayidx1103 = 0, $arrayidx113 = 0, $arrayidx117 = 0, $arrayidx119 = 0, $arrayidx128 = 0, $arrayidx132 = 0, $arrayidx137 = 0, $arrayidx143 = 0, $arrayidx151 = 0, $arrayidx156 = 0, $arrayidx16 = 0, $arrayidx162 = 0, $arrayidx168 = 0, $arrayidx176 = 0, $arrayidx178 = 0;
 var $arrayidx199 = 0, $arrayidx204 = 0, $arrayidx213 = 0, $arrayidx221 = 0, $arrayidx227 = 0, $arrayidx236 = 0, $arrayidx243 = 0, $arrayidx25 = 0, $arrayidx250 = 0, $arrayidx255 = 0, $arrayidx267 = 0, $arrayidx277 = 0, $arrayidx280 = 0, $arrayidx290 = 0, $arrayidx296 = 0, $arrayidx3 = 0, $arrayidx308 = 0, $arrayidx316 = 0, $arrayidx32 = 0, $arrayidx327 = 0;
 var $arrayidx333 = 0, $arrayidx345 = 0, $arrayidx353 = 0, $arrayidx360 = 0, $arrayidx37 = 0, $arrayidx370 = 0, $arrayidx375 = 0, $arrayidx379 = 0, $arrayidx387 = 0, $arrayidx394 = 0, $arrayidx399 = 0, $arrayidx410 = 0, $arrayidx423 = 0, $arrayidx433 = 0, $arrayidx442 = 0, $arrayidx462 = 0, $arrayidx468 = 0, $arrayidx475 = 0, $arrayidx478 = 0, $arrayidx481 = 0;
 var $arrayidx487 = 0, $arrayidx492 = 0, $arrayidx495 = 0, $arrayidx50 = 0, $arrayidx508 = 0, $arrayidx513 = 0, $arrayidx517 = 0, $arrayidx526 = 0, $arrayidx539 = 0, $arrayidx578 = 0, $arrayidx582 = 0, $arrayidx588 = 0, $arrayidx6 = 0, $arrayidx606 = 0, $arrayidx61 = 0, $arrayidx619 = 0, $arrayidx622 = 0, $arrayidx629 = 0, $arrayidx640 = 0, $arrayidx673 = 0;
 var $arrayidx679 = 0, $arrayidx692 = 0, $arrayidx698 = 0, $arrayidx704 = 0, $arrayidx714 = 0, $arrayidx73 = 0, $arrayidx733 = 0, $arrayidx750 = 0, $arrayidx77 = 0, $arrayidx772 = 0, $arrayidx793 = 0, $arrayidx805 = 0, $arrayidx848 = 0, $arrayidx85 = 0, $arrayidx850 = 0, $arrayidx87 = 0, $arrayidx871 = 0, $arrayidx878 = 0, $arrayidx884 = 0, $arrayidx896 = 0;
 var $arrayidx900 = 0, $arrayidx909 = 0, $arrayidx922 = 0, $arrayidx930 = 0, $arrayidx935 = 0, $arrayidx94 = 0, $arrayidx947 = 0, $arrayidx955 = 0, $arrayidx960 = 0, $arrayidx962 = 0, $arrayidx973 = 0, $arrayidx979 = 0, $arrayidx984 = 0, $arrayidx986 = 0, $arrayidx990 = 0, $arrayidx998 = 0, $b_ = 0, $call = 0, $call10 = 0, $call1069 = 0;
 var $call171 = 0, $call201 = 0, $call234 = 0, $call318 = 0, $call456 = 0, $call46 = 0, $call557 = 0, $call583 = 0, $call653 = 0, $call654 = 0, $call656 = 0, $call661 = 0, $call735 = 0, $call740 = 0, $call821 = 0, $call867 = 0, $cdr = 0, $cdr758 = 0, $cmp1055 = 0, $cmp1059 = 0;
 var $cmp1070 = 0, $cmp22 = 0, $cmp27 = 0, $cmp444 = 0, $cmp447 = 0, $cmp457 = 0, $cmp464 = 0, $cmp470 = 0, $cmp558 = 0, $cmp563 = 0, $cmp568 = 0, $cmp574 = 0, $cmp595 = 0, $cmp641 = 0, $cmp647 = 0, $cmp708 = 0, $cmp742 = 0, $cmp79 = 0, $cmp807 = 0, $cmp811 = 0;
 var $cmp822 = 0, $cmp831 = 0, $cmp852 = 0, $cmp856 = 0, $cmp860 = 0, $cmp942 = 0, $cond = 0, $cond658 = 0, $continuation_env = 0, $continuation_env_length = 0, $continuation_return_pc = 0, $continuation_return_pc_length = 0, $conv = 0, $conv108 = 0, $conv110 = 0, $conv1108 = 0, $conv124 = 0, $conv17 = 0, $conv18 = 0, $conv185 = 0;
 var $conv188 = 0, $conv189 = 0, $conv192 = 0, $conv195 = 0, $conv20 = 0, $conv205 = 0, $conv21 = 0, $conv219 = 0, $conv222 = 0, $conv224 = 0, $conv225 = 0, $conv228 = 0, $conv230 = 0, $conv233 = 0, $conv237 = 0, $conv239 = 0, $conv26 = 0, $conv272 = 0, $conv274 = 0, $conv275 = 0;
 var $conv278 = 0, $conv306 = 0, $conv313 = 0, $conv317 = 0, $conv343 = 0, $conv348 = 0, $conv368 = 0, $conv421 = 0, $conv428 = 0, $conv463 = 0, $conv469 = 0, $conv506 = 0, $conv537 = 0, $conv546 = 0, $conv550 = 0, $conv561 = 0, $conv612 = 0, $conv62 = 0, $conv627 = 0, $conv637 = 0;
 var $conv65 = 0, $conv66 = 0, $conv68 = 0, $conv690 = 0, $conv695 = 0, $conv70 = 0, $conv700 = 0, $conv730 = 0, $conv734 = 0, $conv736 = 0, $conv738 = 0, $conv74 = 0, $conv788 = 0, $conv846 = 0, $conv851 = 0, $conv866 = 0, $conv872 = 0, $conv874 = 0, $conv91 = 0, $conv920 = 0;
 var $conv931 = 0, $conv936 = 0, $conv991 = 0, $conv993 = 0, $created_string = 0, $current_frame_pointer = 0, $data = 0, $data1041 = 0, $data1050 = 0, $data1062 = 0, $data1066 = 0, $data1085 = 0, $data1088 = 0, $data291 = 0, $data294 = 0, $data310 = 0, $data354 = 0, $data358 = 0, $data380 = 0, $data384 = 0;
 var $data391 = 0, $data396 = 0, $data434 = 0, $data437 = 0, $data440 = 0, $data449 = 0, $data453 = 0, $data543 = 0, $data547 = 0, $data551 = 0, $data554 = 0, $data631 = 0, $data650 = 0, $data711 = 0, $data715 = 0, $data722 = 0, $data726 = 0, $data745 = 0, $data751 = 0, $data756 = 0;
 var $data794 = 0, $data797 = 0, $data802 = 0, $data814 = 0, $data818 = 0, $data829 = 0, $data835 = 0, $data863 = 0, $dec = 0, $dec1006 = 0, $dec1077 = 0, $dec1114 = 0, $dec215 = 0, $dec218 = 0, $dec281 = 0, $dec283 = 0, $dec300 = 0, $dec302 = 0, $dec304 = 0, $dec305 = 0;
 var $dec329 = 0, $dec335 = 0, $dec338 = 0, $dec341 = 0, $dec342 = 0, $dec362 = 0, $dec364 = 0, $dec366 = 0, $dec367 = 0, $dec389 = 0, $dec412 = 0, $dec414 = 0, $dec419 = 0, $dec420 = 0, $dec500 = 0, $dec502 = 0, $dec504 = 0, $dec505 = 0, $dec528 = 0, $dec530 = 0;
 var $dec535 = 0, $dec536 = 0, $dec580 = 0, $dec625 = 0, $dec626 = 0, $dec675 = 0, $dec681 = 0, $dec686 = 0, $dec688 = 0, $dec689 = 0, $dec774 = 0, $dec776 = 0, $dec781 = 0, $dec840 = 0, $dec842 = 0, $dec844 = 0, $dec845 = 0, $dec911 = 0, $dec913 = 0, $dec918 = 0;
 var $dec919 = 0, $dec968 = 0, $end_pc$addr = 0, $env$addr = 0, $env556 = 0, $frame_index = 0, $frame_size = 0, $frame_size865 = 0, $frames_list = 0, $frames_list_length = 0, $func_ptr = 0, $functions_list = 0, $functions_list_length = 0, $global_frame = 0, $hash_val = 0, $i = 0, $idxprom1015 = 0, $idxprom1029 = 0, $idxprom1101 = 0, $idxprom114 = 0;
 var $idxprom115 = 0, $idxprom177 = 0, $idxprom235 = 0, $idxprom242 = 0, $idxprom249 = 0, $idxprom254 = 0, $idxprom618 = 0, $idxprom621 = 0, $idxprom75 = 0, $idxprom82 = 0, $idxprom83 = 0, $idxprom870 = 0, $idxprom877 = 0, $idxprom92 = 0, $idxprom956 = 0, $idxprom98 = 0, $idxprom980 = 0, $idxprom99 = 0, $idxprom994 = 0, $inc1002 = 0;
 var $inc1013 = 0, $inc105 = 0, $inc1075 = 0, $inc1097 = 0, $inc1105 = 0, $inc210 = 0, $inc241 = 0, $inc244 = 0, $inc246 = 0, $inc251 = 0, $inc253 = 0, $inc256 = 0, $inc258 = 0, $inc264 = 0, $inc269 = 0, $inc320 = 0, $inc401 = 0, $inc590 = 0, $inc608 = 0, $inc620 = 0;
 var $inc623 = 0, $inc664 = 0, $inc719 = 0, $inc721 = 0, $inc724 = 0, $inc755 = 0, $inc760 = 0, $inc763 = 0, $inc876 = 0, $inc879 = 0, $inc881 = 0, $inc886 = 0, $inc888 = 0, $inc964 = 0, $inc975 = 0, $inst = 0, $instructions = 0, $instructions_$addr = 0, $integer_ = 0, $integer__ = 0;
 var $jump_steps = 0, $length = 0, $length1008 = 0, $length1012 = 0, $length1016 = 0, $length1104 = 0, $length211 = 0, $length265 = 0, $length268 = 0, $length287 = 0, $length301 = 0, $length312 = 0, $length324 = 0, $length330 = 0, $length334 = 0, $length350 = 0, $length363 = 0, $length372 = 0, $length376 = 0, $length407 = 0;
 var $length413 = 0, $length430 = 0, $length501 = 0, $length510 = 0, $length514 = 0, $length523 = 0, $length529 = 0, $length55 = 0, $length571 = 0, $length592 = 0, $length594 = 0, $length614 = 0, $length636 = 0, $length659 = 0, $length670 = 0, $length676 = 0, $length680 = 0, $length694 = 0, $length699 = 0, $length712 = 0;
 var $length720 = 0, $length729 = 0, $length748 = 0, $length759 = 0, $length769 = 0, $length775 = 0, $length78 = 0, $length790 = 0, $length841 = 0, $length882 = 0, $length885 = 0, $length893 = 0, $length897 = 0, $length906 = 0, $length912 = 0, $length95 = 0, $length957 = 0, $length970 = 0, $length974 = 0, $length981 = 0;
 var $length995 = 0, $m = 0, $module$addr = 0, $mt$addr = 0, $new_env = 0, $next = 0, $next1080 = 0, $next827 = 0, $offset = 0, $opcode = 0, $or937 = 0, $original_env = 0, $param_num = 0, $pc = 0, $proto = 0, $proto837 = 0, $required_param_num = 0, $required_variadic_place = 0, $s = 0, $s1 = 0;
 var $s2 = 0, $shl932 = 0, $shr = 0, $shr187 = 0, $shr194 = 0, $shr64 = 0, $start_pc$addr = 0, $start_pc553 = 0, $start_pc660 = 0, $start_pc662 = 0, $string_length = 0, $sub = 0, $sub1009 = 0, $sub1017 = 0, $sub1116 = 0, $sub220 = 0, $sub223 = 0, $sub226 = 0, $sub229 = 0, $sub276 = 0;
 var $sub279 = 0, $sub288 = 0, $sub307 = 0, $sub314 = 0, $sub325 = 0, $sub331 = 0, $sub344 = 0, $sub351 = 0, $sub369 = 0, $sub373 = 0, $sub377 = 0, $sub408 = 0, $sub422 = 0, $sub431 = 0, $sub507 = 0, $sub511 = 0, $sub515 = 0, $sub524 = 0, $sub538 = 0, $sub562 = 0;
 var $sub572 = 0, $sub585 = 0, $sub613 = 0, $sub628 = 0, $sub638 = 0, $sub671 = 0, $sub677 = 0, $sub691 = 0, $sub696 = 0, $sub701 = 0, $sub731 = 0, $sub770 = 0, $sub791 = 0, $sub847 = 0, $sub894 = 0, $sub898 = 0, $sub907 = 0, $sub921 = 0, $sub958 = 0, $sub971 = 0;
 var $sub982 = 0, $sub996 = 0, $table_pairs = 0, $temp = 0, $temp2 = 0, $temp_frame = 0, $tobool = 0, $tobool1003 = 0, $tobool191 = 0, $tobool965 = 0, $use_count = 0, $use_count1001 = 0, $use_count1005 = 0, $use_count104 = 0, $use_count1074 = 0, $use_count1076 = 0, $use_count1096 = 0, $use_count1111 = 0, $use_count1113 = 0, $use_count1115 = 0;
 var $use_count209 = 0, $use_count214 = 0, $use_count217 = 0, $use_count240 = 0, $use_count245 = 0, $use_count252 = 0, $use_count257 = 0, $use_count263 = 0, $use_count282 = 0, $use_count299 = 0, $use_count303 = 0, $use_count319 = 0, $use_count328 = 0, $use_count337 = 0, $use_count340 = 0, $use_count361 = 0, $use_count365 = 0, $use_count388 = 0, $use_count39 = 0, $use_count400 = 0;
 var $use_count411 = 0, $use_count418 = 0, $use_count499 = 0, $use_count503 = 0, $use_count527 = 0, $use_count534 = 0, $use_count579 = 0, $use_count589 = 0, $use_count607 = 0, $use_count624 = 0, $use_count663 = 0, $use_count674 = 0, $use_count685 = 0, $use_count687 = 0, $use_count718 = 0, $use_count754 = 0, $use_count762 = 0, $use_count773 = 0, $use_count780 = 0, $use_count839 = 0;
 var $use_count843 = 0, $use_count875 = 0, $use_count88 = 0, $use_count880 = 0, $use_count887 = 0, $use_count910 = 0, $use_count917 = 0, $use_count963 = 0, $use_count967 = 0, $v = 0, $value = 0, $value1073 = 0, $value825 = 0, $value_index = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0;
 var $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr5 = 0, $variadic_place = 0, $variadic_place549 = 0, $vec = 0, $vec1052 = 0, $vec804 = 0, $vt$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 20800|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer26 = sp + 8|0;
 $vararg_buffer24 = sp + 8368|0;
 $vararg_buffer22 = sp + 8288|0;
 $vararg_buffer20 = sp;
 $vararg_buffer18 = sp + 16|0;
 $vararg_buffer16 = sp + 8336|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 8272|0;
 $vararg_buffer10 = sp + 8312|0;
 $vararg_buffer8 = sp + 8328|0;
 $vararg_buffer6 = sp + 8344|0;
 $vararg_buffer3 = sp + 8360|0;
 $vararg_buffer1 = sp + 64|0;
 $vararg_buffer = sp + 72|0;
 $start_pc$addr = sp + 8280|0;
 $end_pc$addr = sp + 8296|0;
 $pc = sp + 48|0;
 $i = sp + 8352|0;
 $jump_steps = sp + 8304|0;
 $string_length = sp + 32|0;
 $integer_ = sp + 24|0;
 $continuation_env = sp + 8408|0;
 $continuation_return_pc = sp + 80|0;
 $frames_list = sp + 16664|0;
 $functions_list = sp + 12544|0;
 $hash_val = sp + 40|0;
 $integer__ = sp + 8320|0;
 $b_ = sp + 20780|0;
 $instructions_$addr = $instructions_;
 $4 = $start_pc$addr;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $end_pc$addr;
 $9 = $8;
 HEAP32[$9>>2] = $2;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $3;
 $env$addr = $env;
 $vt$addr = $vt;
 $mt$addr = $mt;
 $module$addr = $module;
 $12 = $instructions_$addr;
 $13 = HEAP32[$12>>2]|0;
 $instructions = $13;
 $14 = $env$addr;
 $original_env = $14;
 $15 = HEAP32[40>>2]|0;
 $accumulator = $15;
 $current_frame_pointer = 0;
 $16 = $env$addr;
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $global_frame = $18;
 $call = (_EF_init_with_size(1024)|0);
 $BUILTIN_PRIMITIVE_PROCEDURE_STACK = $call;
 $19 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
 $use_count = (($19) + 8|0);
 HEAP32[$use_count>>2] = 1;
 $continuation_env_length = 0;
 $continuation_return_pc_length = 0;
 HEAP32[$frames_list>>2] = 0;
 $frames_list_length = 1;
 $functions_list_length = 0;
 $20 = 3384;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = $pc;
 $27 = $26;
 HEAP32[$27>>2] = $22;
 $28 = (($26) + 4)|0;
 $29 = $28;
 HEAP32[$29>>2] = $25;
 while(1) {
  $30 = $pc;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + 4)|0;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[3376>>2]|0;
  $length = (($36) + 8|0);
  $37 = $length;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = ($32|0)!=($39|0);
  $44 = ($35|0)!=($42|0);
  $45 = $43 | $44;
  if (!($45)) {
   break;
  }
  $46 = $pc;
  $47 = $46;
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 4)|0;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = HEAP32[3376>>2]|0;
  $53 = HEAP32[$52>>2]|0;
  $arrayidx3 = (($53) + ($48<<1)|0);
  $54 = HEAP16[$arrayidx3>>1]|0;
  $inst = $54;
  $55 = $inst;
  $conv = $55 << 16 >> 16;
  if (!((($conv|0) == 8960))) {
   label = 15;
   break;
  }
  $56 = $pc;
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  $59 = (($56) + 4)|0;
  $60 = $59;
  $61 = HEAP32[$60>>2]|0;
  $62 = (_i64Add(($58|0),($61|0),1,0)|0);
  $63 = tempRet0;
  $64 = HEAP32[3376>>2]|0;
  $65 = HEAP32[$64>>2]|0;
  $arrayidx6 = (($65) + ($62<<1)|0);
  $66 = HEAP16[$arrayidx6>>1]|0;
  $67 = $66&65535;
  $68 = $string_length;
  $69 = $68;
  HEAP32[$69>>2] = $67;
  $70 = (($68) + 4)|0;
  $71 = $70;
  HEAP32[$71>>2] = 0;
  $72 = $string_length;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = (($72) + 4)|0;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $78 = (_i64Add(($74|0),($77|0),1,0)|0);
  $79 = tempRet0;
  $80 = (___muldi3(1,0,($78|0),($79|0))|0);
  $81 = tempRet0;
  $call10 = (_malloc($80)|0);
  $created_string = $call10;
  $82 = $pc;
  $83 = $82;
  $84 = HEAP32[$83>>2]|0;
  $85 = (($82) + 4)|0;
  $86 = $85;
  $87 = HEAP32[$86>>2]|0;
  $88 = (_i64Add(($84|0),($87|0),2,0)|0);
  $89 = tempRet0;
  $90 = $pc;
  $91 = $90;
  HEAP32[$91>>2] = $88;
  $92 = (($90) + 4)|0;
  $93 = $92;
  HEAP32[$93>>2] = $89;
  $94 = $i;
  $95 = $94;
  HEAP32[$95>>2] = 0;
  $96 = (($94) + 4)|0;
  $97 = $96;
  HEAP32[$97>>2] = 0;
  while(1) {
   $98 = $pc;
   $99 = $98;
   $100 = HEAP32[$99>>2]|0;
   $101 = (($98) + 4)|0;
   $102 = $101;
   $103 = HEAP32[$102>>2]|0;
   $104 = HEAP32[3376>>2]|0;
   $105 = HEAP32[$104>>2]|0;
   $arrayidx16 = (($105) + ($100<<1)|0);
   $106 = HEAP16[$arrayidx16>>1]|0;
   $conv17 = $106&65535;
   $s = $conv17;
   $107 = $s;
   $and = 65280 & $107;
   $shr = $and >> 8;
   $conv18 = $shr&255;
   $s1 = $conv18;
   $108 = $s;
   $and19 = 255 & $108;
   $conv20 = $and19&255;
   $s2 = $conv20;
   $109 = $s1;
   $conv21 = $109 << 24 >> 24;
   $cmp22 = ($conv21|0)==(0);
   if ($cmp22) {
    label = 6;
    break;
   }
   $110 = $s1;
   $111 = $i;
   $112 = $111;
   $113 = HEAP32[$112>>2]|0;
   $114 = (($111) + 4)|0;
   $115 = $114;
   $116 = HEAP32[$115>>2]|0;
   $117 = $created_string;
   $arrayidx25 = (($117) + ($113)|0);
   HEAP8[$arrayidx25>>0] = $110;
   $118 = $i;
   $119 = $118;
   $120 = HEAP32[$119>>2]|0;
   $121 = (($118) + 4)|0;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = (_i64Add(($120|0),($123|0),1,0)|0);
   $125 = tempRet0;
   $126 = $i;
   $127 = $126;
   HEAP32[$127>>2] = $124;
   $128 = (($126) + 4)|0;
   $129 = $128;
   HEAP32[$129>>2] = $125;
   $130 = $s2;
   $conv26 = $130 << 24 >> 24;
   $cmp27 = ($conv26|0)==(0);
   if ($cmp27) {
    label = 9;
    break;
   }
   $131 = $s2;
   $132 = $i;
   $133 = $132;
   $134 = HEAP32[$133>>2]|0;
   $135 = (($132) + 4)|0;
   $136 = $135;
   $137 = HEAP32[$136>>2]|0;
   $138 = $created_string;
   $arrayidx32 = (($138) + ($134)|0);
   HEAP8[$arrayidx32>>0] = $131;
   $139 = $i;
   $140 = $139;
   $141 = HEAP32[$140>>2]|0;
   $142 = (($139) + 4)|0;
   $143 = $142;
   $144 = HEAP32[$143>>2]|0;
   $145 = (_i64Add(($141|0),($144|0),1,0)|0);
   $146 = tempRet0;
   $147 = $i;
   $148 = $147;
   HEAP32[$148>>2] = $145;
   $149 = (($147) + 4)|0;
   $150 = $149;
   HEAP32[$150>>2] = $146;
   $151 = $pc;
   $152 = $151;
   $153 = HEAP32[$152>>2]|0;
   $154 = (($151) + 4)|0;
   $155 = $154;
   $156 = HEAP32[$155>>2]|0;
   $157 = (_i64Add(($153|0),($156|0),1,0)|0);
   $158 = tempRet0;
   $159 = $pc;
   $160 = $159;
   HEAP32[$160>>2] = $157;
   $161 = (($159) + 4)|0;
   $162 = $161;
   HEAP32[$162>>2] = $158;
  }
  if ((label|0) == 6) {
   label = 0;
  }
  else if ((label|0) == 9) {
   label = 0;
  }
  $163 = $i;
  $164 = $163;
  $165 = HEAP32[$164>>2]|0;
  $166 = (($163) + 4)|0;
  $167 = $166;
  $168 = HEAP32[$167>>2]|0;
  $169 = $created_string;
  $arrayidx37 = (($169) + ($165)|0);
  HEAP8[$arrayidx37>>0] = 0;
  $170 = $created_string;
  $171 = $string_length;
  $172 = $171;
  $173 = HEAP32[$172>>2]|0;
  $174 = (($171) + 4)|0;
  $175 = $174;
  $176 = HEAP32[$175>>2]|0;
  $177 = (_Object_initString($170,$173,$176)|0);
  $accumulator = $177;
  $178 = $accumulator;
  $use_count39 = (($178) + 4|0);
  HEAP32[$use_count39>>2] = 1;
  $179 = 3368;
  $180 = $179;
  $181 = HEAP32[$180>>2]|0;
  $182 = (($179) + 4)|0;
  $183 = $182;
  $184 = HEAP32[$183>>2]|0;
  $185 = 3360;
  $186 = $185;
  $187 = HEAP32[$186>>2]|0;
  $188 = (($185) + 4)|0;
  $189 = $188;
  $190 = HEAP32[$189>>2]|0;
  $191 = ($181|0)==($187|0);
  $192 = ($184|0)==($190|0);
  $193 = $191 & $192;
  if ($193) {
   $194 = HEAP32[3352>>2]|0;
   $195 = 3360;
   $196 = $195;
   $197 = HEAP32[$196>>2]|0;
   $198 = (($195) + 4)|0;
   $199 = $198;
   $200 = HEAP32[$199>>2]|0;
   $201 = (___muldi3(4,0,($197|0),($200|0))|0);
   $202 = tempRet0;
   $203 = (___muldi3(($201|0),($202|0),2,0)|0);
   $204 = tempRet0;
   $call46 = (_realloc($194,$203)|0);
   HEAP32[3352>>2] = $call46;
   $205 = 3360;
   $206 = $205;
   $207 = HEAP32[$206>>2]|0;
   $208 = (($205) + 4)|0;
   $209 = $208;
   $210 = HEAP32[$209>>2]|0;
   $211 = (___muldi3(($207|0),($210|0),2,0)|0);
   $212 = tempRet0;
   $213 = 3360;
   $214 = $213;
   HEAP32[$214>>2] = $211;
   $215 = (($213) + 4)|0;
   $216 = $215;
   HEAP32[$216>>2] = $212;
  }
  $217 = $accumulator;
  $218 = 3368;
  $219 = $218;
  $220 = HEAP32[$219>>2]|0;
  $221 = (($218) + 4)|0;
  $222 = $221;
  $223 = HEAP32[$222>>2]|0;
  $224 = HEAP32[3352>>2]|0;
  $arrayidx50 = (($224) + ($220<<2)|0);
  HEAP32[$arrayidx50>>2] = $217;
  $225 = 3368;
  $226 = $225;
  $227 = HEAP32[$226>>2]|0;
  $228 = (($225) + 4)|0;
  $229 = $228;
  $230 = HEAP32[$229>>2]|0;
  $231 = (_i64Add(($227|0),($230|0),1,0)|0);
  $232 = tempRet0;
  $233 = 3368;
  $234 = $233;
  HEAP32[$234>>2] = $231;
  $235 = (($233) + 4)|0;
  $236 = $235;
  HEAP32[$236>>2] = $232;
  $237 = $pc;
  $238 = $237;
  $239 = HEAP32[$238>>2]|0;
  $240 = (($237) + 4)|0;
  $241 = $240;
  $242 = HEAP32[$241>>2]|0;
  $243 = (_i64Add(($239|0),($242|0),1,0)|0);
  $244 = tempRet0;
  $245 = $pc;
  $246 = $245;
  HEAP32[$246>>2] = $243;
  $247 = (($245) + 4)|0;
  $248 = $247;
  HEAP32[$248>>2] = $244;
  $249 = $created_string;
  _free($249);
 }
 if ((label|0) == 15) {
  (_printf((8216|0),($vararg_buffer|0))|0);
  $250 = $accumulator;
  _Object_free($250);
  $251 = HEAP32[40>>2]|0;
  $accumulator = $251;
  $2170 = $accumulator;
  $use_count1111 = (($2170) + 4|0);
  $2171 = HEAP32[$use_count1111>>2]|0;
  $add1112 = (($2171) + 1)|0;
  HEAP32[$use_count1111>>2] = $add1112;
  $2172 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
  $use_count1113 = (($2172) + 8|0);
  $2173 = HEAP32[$use_count1113>>2]|0;
  $dec1114 = (($2173) + -1)|0;
  HEAP32[$use_count1113>>2] = $dec1114;
  $2174 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
  _EF_free($2174);
  $2175 = $accumulator;
  $use_count1115 = (($2175) + 4|0);
  $2176 = HEAP32[$use_count1115>>2]|0;
  $sub1116 = (($2176) - 1)|0;
  HEAP32[$use_count1115>>2] = $sub1116;
  $2177 = $accumulator;
  STACKTOP = sp;return ($2177|0);
 }
 $252 = HEAP32[3376>>2]|0;
 $length55 = (($252) + 8|0);
 $253 = $length55;
 $254 = $253;
 $255 = HEAP32[$254>>2]|0;
 $256 = (($253) + 4)|0;
 $257 = $256;
 $258 = HEAP32[$257>>2]|0;
 $259 = 3384;
 $260 = $259;
 HEAP32[$260>>2] = $255;
 $261 = (($259) + 4)|0;
 $262 = $261;
 HEAP32[$262>>2] = $258;
 $263 = $start_pc$addr;
 $264 = $263;
 $265 = HEAP32[$264>>2]|0;
 $266 = (($263) + 4)|0;
 $267 = $266;
 $268 = HEAP32[$267>>2]|0;
 $269 = $pc;
 $270 = $269;
 HEAP32[$270>>2] = $265;
 $271 = (($269) + 4)|0;
 $272 = $271;
 HEAP32[$272>>2] = $268;
 L22: while(1) {
  $273 = $pc;
  $274 = $273;
  $275 = HEAP32[$274>>2]|0;
  $276 = (($273) + 4)|0;
  $277 = $276;
  $278 = HEAP32[$277>>2]|0;
  $279 = $end_pc$addr;
  $280 = $279;
  $281 = HEAP32[$280>>2]|0;
  $282 = (($279) + 4)|0;
  $283 = $282;
  $284 = HEAP32[$283>>2]|0;
  $285 = ($275|0)!=($281|0);
  $286 = ($278|0)!=($284|0);
  $287 = $285 | $286;
  if (!($287)) {
   label = 177;
   break;
  }
  L25: while(1) {
   $288 = $pc;
   $289 = $288;
   $290 = HEAP32[$289>>2]|0;
   $291 = (($288) + 4)|0;
   $292 = $291;
   $293 = HEAP32[$292>>2]|0;
   $294 = $instructions;
   $arrayidx61 = (($294) + ($290<<1)|0);
   $295 = HEAP16[$arrayidx61>>1]|0;
   $inst = $295;
   $296 = $inst;
   $conv62 = $296 << 16 >> 16;
   $and63 = $conv62 & 61440;
   $shr64 = $and63 >> 12;
   $conv65 = $shr64&65535;
   $opcode = $conv65;
   $297 = $opcode;
   $conv66 = $297 << 16 >> 16;
   switch ($conv66|0) {
   case 2:  {
    label = 27;
    break L25;
    break;
   }
   case 1:  {
    label = 24;
    break L25;
    break;
   }
   case 0:  {
    label = 20;
    break L25;
    break;
   }
   case 3:  {
    label = 33;
    break L25;
    break;
   }
   case 4:  {
    label = 37;
    break L25;
    break;
   }
   case 5:  {
    label = 38;
    break L25;
    break;
   }
   case 6:  {
    label = 42;
    break L25;
    break;
   }
   case 7:  {
    label = 43;
    break L25;
    break;
   }
   case 8:  {
    label = 149;
    break L25;
    break;
   }
   case 9:  {
    label = 150;
    break L25;
    break;
   }
   case 10:  {
    label = 153;
    break L25;
    break;
   }
   case 11:  {
    label = 157;
    break L25;
    break;
   }
   case 12:  {
    label = 161;
    break L25;
    break;
   }
   case 13:  {
    label = 162;
    break L25;
    break;
   }
   case 14:  {
    break;
   }
   case 15:  {
    label = 175;
    break L25;
    break;
   }
   default: {
    label = 176;
    break L22;
   }
   }
   $1970 = $pc;
   $1971 = $1970;
   $1972 = HEAP32[$1971>>2]|0;
   $1973 = (($1970) + 4)|0;
   $1974 = $1973;
   $1975 = HEAP32[$1974>>2]|0;
   $1976 = (_i64Add(($1972|0),($1975|0),1,0)|0);
   $1977 = tempRet0;
   $1978 = $instructions;
   $arrayidx1028 = (($1978) + ($1976<<1)|0);
   $1979 = HEAP16[$arrayidx1028>>1]|0;
   $offset = $1979;
   $1980 = $offset;
   $idxprom1029 = $1980&65535;
   $1981 = HEAP32[3352>>2]|0;
   $arrayidx1030 = (($1981) + ($idxprom1029<<2)|0);
   $1982 = HEAP32[$arrayidx1030>>2]|0;
   $temp = $1982;
   $1983 = $pc;
   $1984 = $1983;
   $1985 = HEAP32[$1984>>2]|0;
   $1986 = (($1983) + 4)|0;
   $1987 = $1986;
   $1988 = HEAP32[$1987>>2]|0;
   $1989 = (_i64Add(($1985|0),($1988|0),2,0)|0);
   $1990 = tempRet0;
   $1991 = $instructions;
   $arrayidx1033 = (($1991) + ($1989<<1)|0);
   $1992 = HEAP16[$arrayidx1033>>1]|0;
   $1993 = $1992&65535;
   $1994 = (_bitshift64Shl(($1993|0),0,16)|0);
   $1995 = tempRet0;
   $1996 = $pc;
   $1997 = $1996;
   $1998 = HEAP32[$1997>>2]|0;
   $1999 = (($1996) + 4)|0;
   $2000 = $1999;
   $2001 = HEAP32[$2000>>2]|0;
   $2002 = (_i64Add(($1998|0),($2001|0),3,0)|0);
   $2003 = tempRet0;
   $2004 = $instructions;
   $arrayidx1038 = (($2004) + ($2002<<1)|0);
   $2005 = HEAP16[$arrayidx1038>>1]|0;
   $2006 = $2005&65535;
   $2007 = $1994 | $2006;
   $2008 = $hash_val;
   $2009 = $2008;
   HEAP32[$2009>>2] = $2007;
   $2010 = (($2008) + 4)|0;
   $2011 = $2010;
   HEAP32[$2011>>2] = $1995;
   $2012 = $hash_val;
   $2013 = $2012;
   $2014 = HEAP32[$2013>>2]|0;
   $2015 = (($2012) + 4)|0;
   $2016 = $2015;
   $2017 = HEAP32[$2016>>2]|0;
   $2018 = $accumulator;
   $data1041 = (($2018) + 8|0);
   $2019 = $data1041;
   $2020 = $2019;
   $2021 = HEAP32[$2020>>2]|0;
   $2022 = (($2019) + 4)|0;
   $2023 = $2022;
   $2024 = HEAP32[$2023>>2]|0;
   $2025 = ($2017>>>0)>($2024>>>0);
   $2026 = ($2017|0)==($2024|0);
   $2027 = ($2014>>>0)>($2021>>>0);
   $2028 = $2026 & $2027;
   $2029 = $2025 | $2028;
   if ($2029) {
    $2030 = $accumulator;
    _Object_free($2030);
    $2031 = HEAP32[40>>2]|0;
    $accumulator = $2031;
    $2032 = $pc;
    $2033 = $2032;
    $2034 = HEAP32[$2033>>2]|0;
    $2035 = (($2032) + 4)|0;
    $2036 = $2035;
    $2037 = HEAP32[$2036>>2]|0;
    $2038 = (_i64Add(($2034|0),($2037|0),5,0)|0);
    $2039 = tempRet0;
    $2040 = $pc;
    $2041 = $2040;
    HEAP32[$2041>>2] = $2038;
    $2042 = (($2040) + 4)|0;
    $2043 = $2042;
    HEAP32[$2043>>2] = $2039;
    continue;
   }
   $2044 = $i;
   $2045 = $2044;
   HEAP32[$2045>>2] = -1;
   $2046 = (($2044) + 4)|0;
   $2047 = $2046;
   HEAP32[$2047>>2] = -1;
   L31: while(1) {
    $2048 = $accumulator;
    $v = $2048;
    $2049 = $hash_val;
    $2050 = $2049;
    $2051 = HEAP32[$2050>>2]|0;
    $2052 = (($2049) + 4)|0;
    $2053 = $2052;
    $2054 = HEAP32[$2053>>2]|0;
    $2055 = $v;
    $data1050 = (($2055) + 8|0);
    $vec1052 = (($data1050) + 16|0);
    $2056 = HEAP32[$vec1052>>2]|0;
    $arrayidx1053 = (($2056) + ($2051<<2)|0);
    $2057 = HEAP32[$arrayidx1053>>2]|0;
    $table_pairs = $2057;
    while(1) {
     $2058 = $table_pairs;
     $cmp1055 = ($2058|0)!=(0|0);
     if (!($cmp1055)) {
      break;
     }
     $2059 = $table_pairs;
     $2060 = HEAP32[$2059>>2]|0;
     $2061 = $temp;
     $cmp1059 = ($2060|0)==($2061|0);
     if ($cmp1059) {
      break L31;
     }
     $2062 = $temp;
     $data1062 = (($2062) + 8|0);
     $2063 = HEAP32[$data1062>>2]|0;
     $2064 = $table_pairs;
     $2065 = HEAP32[$2064>>2]|0;
     $data1066 = (($2065) + 8|0);
     $2066 = HEAP32[$data1066>>2]|0;
     $call1069 = (_strcmp($2063,$2066)|0);
     $cmp1070 = ($call1069|0)==(0);
     if ($cmp1070) {
      break L31;
     }
     $2086 = $table_pairs;
     $next1080 = (($2086) + 8|0);
     $2087 = HEAP32[$next1080>>2]|0;
     $table_pairs = $2087;
    }
    $2088 = $i;
    $2089 = $2088;
    $2090 = HEAP32[$2089>>2]|0;
    $2091 = (($2088) + 4)|0;
    $2092 = $2091;
    $2093 = HEAP32[$2092>>2]|0;
    $2094 = ($2090|0)==(0);
    $2095 = ($2093|0)==(0);
    $2096 = $2094 & $2095;
    if (!($2096)) {
     label = 174;
     break L25;
    }
    $2097 = $temp;
    $data1085 = (($2097) + 8|0);
    $2098 = HEAP32[$data1085>>2]|0;
    $2099 = $v;
    $data1088 = (($2099) + 8|0);
    $2100 = $data1088;
    $2101 = $2100;
    $2102 = HEAP32[$2101>>2]|0;
    $2103 = (($2100) + 4)|0;
    $2104 = $2103;
    $2105 = HEAP32[$2104>>2]|0;
    $2106 = (_hash($2098,$2102,$2105)|0);
    $2107 = tempRet0;
    $2108 = $hash_val;
    $2109 = $2108;
    HEAP32[$2109>>2] = $2106;
    $2110 = (($2108) + 4)|0;
    $2111 = $2110;
    HEAP32[$2111>>2] = $2107;
    $2112 = $i;
    $2113 = $2112;
    $2114 = HEAP32[$2113>>2]|0;
    $2115 = (($2112) + 4)|0;
    $2116 = $2115;
    $2117 = HEAP32[$2116>>2]|0;
    $2118 = (_i64Add(($2114|0),($2117|0),1,0)|0);
    $2119 = tempRet0;
    $2120 = $i;
    $2121 = $2120;
    HEAP32[$2121>>2] = $2118;
    $2122 = (($2120) + 4)|0;
    $2123 = $2122;
    HEAP32[$2123>>2] = $2119;
   }
   $2067 = $table_pairs;
   $value1073 = (($2067) + 4|0);
   $2068 = HEAP32[$value1073>>2]|0;
   $accumulator = $2068;
   $2069 = $accumulator;
   $use_count1074 = (($2069) + 4|0);
   $2070 = HEAP32[$use_count1074>>2]|0;
   $inc1075 = (($2070) + 1)|0;
   HEAP32[$use_count1074>>2] = $inc1075;
   $2071 = $v;
   _Object_free($2071);
   $2072 = $accumulator;
   $use_count1076 = (($2072) + 4|0);
   $2073 = HEAP32[$use_count1076>>2]|0;
   $dec1077 = (($2073) + -1)|0;
   HEAP32[$use_count1076>>2] = $dec1077;
   $2074 = $pc;
   $2075 = $2074;
   $2076 = HEAP32[$2075>>2]|0;
   $2077 = (($2074) + 4)|0;
   $2078 = $2077;
   $2079 = HEAP32[$2078>>2]|0;
   $2080 = (_i64Add(($2076|0),($2079|0),5,0)|0);
   $2081 = tempRet0;
   $2082 = $pc;
   $2083 = $2082;
   HEAP32[$2083>>2] = $2080;
   $2084 = (($2082) + 4)|0;
   $2085 = $2084;
   HEAP32[$2085>>2] = $2081;
  }
  switch (label|0) {
   case 20: {
    label = 0;
    $298 = $inst;
    $conv68 = $298 << 16 >> 16;
    $and69 = 4095 & $conv68;
    $conv70 = $and69&65535;
    $frame_index = $conv70;
    $299 = $pc;
    $300 = $299;
    $301 = HEAP32[$300>>2]|0;
    $302 = (($299) + 4)|0;
    $303 = $302;
    $304 = HEAP32[$303>>2]|0;
    $305 = (_i64Add(($301|0),($304|0),1,0)|0);
    $306 = tempRet0;
    $307 = $instructions;
    $arrayidx73 = (($307) + ($305<<1)|0);
    $308 = HEAP16[$arrayidx73>>1]|0;
    $value_index = $308;
    $309 = $value_index;
    $conv74 = $309&65535;
    $310 = $frame_index;
    $idxprom75 = $310&65535;
    $311 = $env$addr;
    $312 = HEAP32[$311>>2]|0;
    $arrayidx77 = (($312) + ($idxprom75<<2)|0);
    $313 = HEAP32[$arrayidx77>>2]|0;
    $length78 = (($313) + 4|0);
    $314 = HEAP32[$length78>>2]|0;
    $cmp79 = ($conv74|0)<($314|0);
    if (!($cmp79)) {
     label = 22;
     break L22;
    }
    $315 = $value_index;
    $idxprom82 = $315&65535;
    $316 = $frame_index;
    $idxprom83 = $316&65535;
    $317 = $env$addr;
    $318 = HEAP32[$317>>2]|0;
    $arrayidx85 = (($318) + ($idxprom83<<2)|0);
    $319 = HEAP32[$arrayidx85>>2]|0;
    $320 = HEAP32[$319>>2]|0;
    $arrayidx87 = (($320) + ($idxprom82<<2)|0);
    $321 = HEAP32[$arrayidx87>>2]|0;
    $v = $321;
    $322 = $v;
    $use_count88 = (($322) + 4|0);
    $323 = HEAP32[$use_count88>>2]|0;
    $dec = (($323) + -1)|0;
    HEAP32[$use_count88>>2] = $dec;
    $324 = $v;
    _Object_free($324);
    $331 = $accumulator;
    $332 = $value_index;
    $idxprom98 = $332&65535;
    $333 = $frame_index;
    $idxprom99 = $333&65535;
    $334 = $env$addr;
    $335 = HEAP32[$334>>2]|0;
    $arrayidx101 = (($335) + ($idxprom99<<2)|0);
    $336 = HEAP32[$arrayidx101>>2]|0;
    $337 = HEAP32[$336>>2]|0;
    $arrayidx103 = (($337) + ($idxprom98<<2)|0);
    HEAP32[$arrayidx103>>2] = $331;
    $338 = $accumulator;
    $use_count104 = (($338) + 4|0);
    $339 = HEAP32[$use_count104>>2]|0;
    $inc105 = (($339) + 1)|0;
    HEAP32[$use_count104>>2] = $inc105;
    $340 = $pc;
    $341 = $340;
    $342 = HEAP32[$341>>2]|0;
    $343 = (($340) + 4)|0;
    $344 = $343;
    $345 = HEAP32[$344>>2]|0;
    $346 = (_i64Add(($342|0),($345|0),2,0)|0);
    $347 = tempRet0;
    $348 = $pc;
    $349 = $348;
    HEAP32[$349>>2] = $346;
    $350 = (($348) + 4)|0;
    $351 = $350;
    HEAP32[$351>>2] = $347;
    $352 = HEAP32[40>>2]|0;
    $accumulator = $352;
    continue L22;
    break;
   }
   case 24: {
    label = 0;
    $353 = $inst;
    $conv108 = $353 << 16 >> 16;
    $and109 = 4095 & $conv108;
    $conv110 = $and109&65535;
    $frame_index = $conv110;
    $354 = $pc;
    $355 = $354;
    $356 = HEAP32[$355>>2]|0;
    $357 = (($354) + 4)|0;
    $358 = $357;
    $359 = HEAP32[$358>>2]|0;
    $360 = (_i64Add(($356|0),($359|0),1,0)|0);
    $361 = tempRet0;
    $362 = $instructions;
    $arrayidx113 = (($362) + ($360<<1)|0);
    $363 = HEAP16[$arrayidx113>>1]|0;
    $value_index = $363;
    $364 = $accumulator;
    _Object_free($364);
    $365 = $value_index;
    $idxprom114 = $365&65535;
    $366 = $frame_index;
    $idxprom115 = $366&65535;
    $367 = $env$addr;
    $368 = HEAP32[$367>>2]|0;
    $arrayidx117 = (($368) + ($idxprom115<<2)|0);
    $369 = HEAP32[$arrayidx117>>2]|0;
    $370 = HEAP32[$369>>2]|0;
    $arrayidx119 = (($370) + ($idxprom114<<2)|0);
    $371 = HEAP32[$arrayidx119>>2]|0;
    $accumulator = $371;
    $372 = $accumulator;
    $tobool = ($372|0)!=(0|0);
    if (!($tobool)) {
     $373 = HEAP32[40>>2]|0;
     $accumulator = $373;
    }
    $374 = $pc;
    $375 = $374;
    $376 = HEAP32[$375>>2]|0;
    $377 = (($374) + 4)|0;
    $378 = $377;
    $379 = HEAP32[$378>>2]|0;
    $380 = (_i64Add(($376|0),($379|0),2,0)|0);
    $381 = tempRet0;
    $382 = $pc;
    $383 = $382;
    HEAP32[$383>>2] = $380;
    $384 = (($382) + 4)|0;
    $385 = $384;
    HEAP32[$385>>2] = $381;
    continue L22;
    break;
   }
   case 27: {
    label = 0;
    $386 = $inst;
    $conv124 = $386 << 16 >> 16;
    if ((($conv124|0) == 8448)) {
     $387 = $accumulator;
     _Object_free($387);
     $388 = $pc;
     $389 = $388;
     $390 = HEAP32[$389>>2]|0;
     $391 = (($388) + 4)|0;
     $392 = $391;
     $393 = HEAP32[$392>>2]|0;
     $394 = (_i64Add(($390|0),($393|0),1,0)|0);
     $395 = tempRet0;
     $396 = $instructions;
     $arrayidx128 = (($396) + ($394<<1)|0);
     $397 = HEAP16[$arrayidx128>>1]|0;
     $398 = $397&65535;
     $399 = (_bitshift64Shl(($398|0),0,48)|0);
     $400 = tempRet0;
     $401 = $pc;
     $402 = $401;
     $403 = HEAP32[$402>>2]|0;
     $404 = (($401) + 4)|0;
     $405 = $404;
     $406 = HEAP32[$405>>2]|0;
     $407 = (_i64Add(($403|0),($406|0),2,0)|0);
     $408 = tempRet0;
     $409 = $instructions;
     $arrayidx132 = (($409) + ($407<<1)|0);
     $410 = HEAP16[$arrayidx132>>1]|0;
     $411 = $410&65535;
     $412 = $400 | $411;
     $413 = $pc;
     $414 = $413;
     $415 = HEAP32[$414>>2]|0;
     $416 = (($413) + 4)|0;
     $417 = $416;
     $418 = HEAP32[$417>>2]|0;
     $419 = (_i64Add(($415|0),($418|0),3,0)|0);
     $420 = tempRet0;
     $421 = $instructions;
     $arrayidx137 = (($421) + ($419<<1)|0);
     $422 = HEAP16[$arrayidx137>>1]|0;
     $423 = $422&65535;
     $424 = (_bitshift64Shl(($423|0),0,16)|0);
     $425 = tempRet0;
     $426 = $399 | $424;
     $427 = $412 | $425;
     $428 = $pc;
     $429 = $428;
     $430 = HEAP32[$429>>2]|0;
     $431 = (($428) + 4)|0;
     $432 = $431;
     $433 = HEAP32[$432>>2]|0;
     $434 = (_i64Add(($430|0),($433|0),4,0)|0);
     $435 = tempRet0;
     $436 = $instructions;
     $arrayidx143 = (($436) + ($434<<1)|0);
     $437 = HEAP16[$arrayidx143>>1]|0;
     $438 = $437&65535;
     $439 = $426 | $438;
     $440 = (_Object_initInteger($439,$427)|0);
     $accumulator = $440;
     $441 = $pc;
     $442 = $441;
     $443 = HEAP32[$442>>2]|0;
     $444 = (($441) + 4)|0;
     $445 = $444;
     $446 = HEAP32[$445>>2]|0;
     $447 = (_i64Add(($443|0),($446|0),5,0)|0);
     $448 = tempRet0;
     $449 = $pc;
     $450 = $449;
     HEAP32[$450>>2] = $447;
     $451 = (($449) + 4)|0;
     $452 = $451;
     HEAP32[$452>>2] = $448;
     continue L22;
    } else if ((($conv124|0) == 8704)) {
     $453 = $accumulator;
     _Object_free($453);
     $454 = $pc;
     $455 = $454;
     $456 = HEAP32[$455>>2]|0;
     $457 = (($454) + 4)|0;
     $458 = $457;
     $459 = HEAP32[$458>>2]|0;
     $460 = (_i64Add(($456|0),($459|0),1,0)|0);
     $461 = tempRet0;
     $462 = $instructions;
     $arrayidx151 = (($462) + ($460<<1)|0);
     $463 = HEAP16[$arrayidx151>>1]|0;
     $464 = $463&65535;
     $465 = (_bitshift64Shl(($464|0),0,48)|0);
     $466 = tempRet0;
     $467 = $pc;
     $468 = $467;
     $469 = HEAP32[$468>>2]|0;
     $470 = (($467) + 4)|0;
     $471 = $470;
     $472 = HEAP32[$471>>2]|0;
     $473 = (_i64Add(($469|0),($472|0),2,0)|0);
     $474 = tempRet0;
     $475 = $instructions;
     $arrayidx156 = (($475) + ($473<<1)|0);
     $476 = HEAP16[$arrayidx156>>1]|0;
     $477 = $476&65535;
     $478 = $466 | $477;
     $479 = $pc;
     $480 = $479;
     $481 = HEAP32[$480>>2]|0;
     $482 = (($479) + 4)|0;
     $483 = $482;
     $484 = HEAP32[$483>>2]|0;
     $485 = (_i64Add(($481|0),($484|0),3,0)|0);
     $486 = tempRet0;
     $487 = $instructions;
     $arrayidx162 = (($487) + ($485<<1)|0);
     $488 = HEAP16[$arrayidx162>>1]|0;
     $489 = $488&65535;
     $490 = (_bitshift64Shl(($489|0),0,16)|0);
     $491 = tempRet0;
     $492 = $465 | $490;
     $493 = $478 | $491;
     $494 = $pc;
     $495 = $494;
     $496 = HEAP32[$495>>2]|0;
     $497 = (($494) + 4)|0;
     $498 = $497;
     $499 = HEAP32[$498>>2]|0;
     $500 = (_i64Add(($496|0),($499|0),4,0)|0);
     $501 = tempRet0;
     $502 = $instructions;
     $arrayidx168 = (($502) + ($500<<1)|0);
     $503 = HEAP16[$arrayidx168>>1]|0;
     $504 = $503&65535;
     $505 = $492 | $504;
     $506 = $integer__;
     $507 = $506;
     HEAP32[$507>>2] = $505;
     $508 = (($506) + 4)|0;
     $509 = $508;
     HEAP32[$509>>2] = $493;
     $510 = +HEAPF64[$integer__>>3];
     $call171 = (_Object_initDouble($510)|0);
     $accumulator = $call171;
     $511 = $pc;
     $512 = $511;
     $513 = HEAP32[$512>>2]|0;
     $514 = (($511) + 4)|0;
     $515 = $514;
     $516 = HEAP32[$515>>2]|0;
     $517 = (_i64Add(($513|0),($516|0),5,0)|0);
     $518 = tempRet0;
     $519 = $pc;
     $520 = $519;
     HEAP32[$520>>2] = $517;
     $521 = (($519) + 4)|0;
     $522 = $521;
     HEAP32[$522>>2] = $518;
     continue L22;
    } else if ((($conv124|0) == 9472)) {
     $523 = $accumulator;
     _Object_free($523);
     $524 = $pc;
     $525 = $524;
     $526 = HEAP32[$525>>2]|0;
     $527 = (($524) + 4)|0;
     $528 = $527;
     $529 = HEAP32[$528>>2]|0;
     $530 = (_i64Add(($526|0),($529|0),1,0)|0);
     $531 = tempRet0;
     $532 = $instructions;
     $arrayidx176 = (($532) + ($530<<1)|0);
     $533 = HEAP16[$arrayidx176>>1]|0;
     $idxprom177 = $533&65535;
     $534 = HEAP32[3352>>2]|0;
     $arrayidx178 = (($534) + ($idxprom177<<2)|0);
     $535 = HEAP32[$arrayidx178>>2]|0;
     $accumulator = $535;
     $536 = $pc;
     $537 = $536;
     $538 = HEAP32[$537>>2]|0;
     $539 = (($536) + 4)|0;
     $540 = $539;
     $541 = HEAP32[$540>>2]|0;
     $542 = (_i64Add(($538|0),($541|0),2,0)|0);
     $543 = tempRet0;
     $544 = $pc;
     $545 = $544;
     HEAP32[$545>>2] = $542;
     $546 = (($544) + 4)|0;
     $547 = $546;
     HEAP32[$547>>2] = $543;
     continue L22;
    } else if ((($conv124|0) == 9216)) {
     $548 = $accumulator;
     _Object_free($548);
     $549 = HEAP32[40>>2]|0;
     $accumulator = $549;
     $550 = $pc;
     $551 = $550;
     $552 = HEAP32[$551>>2]|0;
     $553 = (($550) + 4)|0;
     $554 = $553;
     $555 = HEAP32[$554>>2]|0;
     $556 = (_i64Add(($552|0),($555|0),1,0)|0);
     $557 = tempRet0;
     $558 = $pc;
     $559 = $558;
     HEAP32[$559>>2] = $556;
     $560 = (($558) + 4)|0;
     $561 = $560;
     HEAP32[$561>>2] = $557;
     continue L22;
    } else {
     label = 32;
     break L22;
    }
    break;
   }
   case 33: {
    label = 0;
    $564 = $inst;
    $conv185 = $564 << 16 >> 16;
    $and186 = 4032 & $conv185;
    $shr187 = $and186 >> 6;
    $conv188 = $shr187&255;
    $param_num = $conv188;
    $565 = $inst;
    $conv189 = $565 << 16 >> 16;
    $and190 = 1 & $conv189;
    $tobool191 = ($and190|0)!=(0);
    if ($tobool191) {
     $566 = $inst;
     $conv192 = $566 << 16 >> 16;
     $and193 = 62 & $conv192;
     $shr194 = $and193 >> 1;
     $cond = $shr194;
    } else {
     $cond = -1;
    }
    $conv195 = $cond&255;
    $variadic_place = $conv195;
    $567 = $pc;
    $568 = $567;
    $569 = HEAP32[$568>>2]|0;
    $570 = (($567) + 4)|0;
    $571 = $570;
    $572 = HEAP32[$571>>2]|0;
    $573 = (_i64Add(($569|0),($572|0),3,0)|0);
    $574 = tempRet0;
    $575 = $start_pc$addr;
    $576 = $575;
    HEAP32[$576>>2] = $573;
    $577 = (($575) + 4)|0;
    $578 = $577;
    HEAP32[$578>>2] = $574;
    $579 = $pc;
    $580 = $579;
    $581 = HEAP32[$580>>2]|0;
    $582 = (($579) + 4)|0;
    $583 = $582;
    $584 = HEAP32[$583>>2]|0;
    $585 = (_i64Add(($581|0),($584|0),1,0)|0);
    $586 = tempRet0;
    $587 = $instructions;
    $arrayidx199 = (($587) + ($585<<1)|0);
    $588 = HEAP16[$arrayidx199>>1]|0;
    $589 = $588&65535;
    $590 = $jump_steps;
    $591 = $590;
    HEAP32[$591>>2] = $589;
    $592 = (($590) + 4)|0;
    $593 = $592;
    HEAP32[$593>>2] = 0;
    $594 = $accumulator;
    _Object_free($594);
    $595 = $param_num;
    $596 = $variadic_place;
    $597 = $start_pc$addr;
    $598 = $597;
    $599 = HEAP32[$598>>2]|0;
    $600 = (($597) + 4)|0;
    $601 = $600;
    $602 = HEAP32[$601>>2]|0;
    $603 = $env$addr;
    $call201 = (_copyEnvironment($603)|0);
    $604 = $pc;
    $605 = $604;
    $606 = HEAP32[$605>>2]|0;
    $607 = (($604) + 4)|0;
    $608 = $607;
    $609 = HEAP32[$608>>2]|0;
    $610 = (_i64Add(($606|0),($609|0),2,0)|0);
    $611 = tempRet0;
    $612 = $instructions;
    $arrayidx204 = (($612) + ($610<<1)|0);
    $613 = HEAP16[$arrayidx204>>1]|0;
    $conv205 = $613&255;
    $614 = (_Object_initUserDefinedLambda($595,$596,$599,$602,$call201,$conv205)|0);
    $accumulator = $614;
    $615 = $pc;
    $616 = $615;
    $617 = HEAP32[$616>>2]|0;
    $618 = (($615) + 4)|0;
    $619 = $618;
    $620 = HEAP32[$619>>2]|0;
    $621 = $jump_steps;
    $622 = $621;
    $623 = HEAP32[$622>>2]|0;
    $624 = (($621) + 4)|0;
    $625 = $624;
    $626 = HEAP32[$625>>2]|0;
    $627 = (_i64Add(($617|0),($620|0),($623|0),($626|0))|0);
    $628 = tempRet0;
    $629 = $pc;
    $630 = $629;
    HEAP32[$630>>2] = $627;
    $631 = (($629) + 4)|0;
    $632 = $631;
    HEAP32[$632>>2] = $628;
    continue L22;
    break;
   }
   case 37: {
    label = 0;
    $633 = $accumulator;
    $use_count209 = (($633) + 4|0);
    $634 = HEAP32[$use_count209>>2]|0;
    $inc210 = (($634) + 1)|0;
    HEAP32[$use_count209>>2] = $inc210;
    $635 = $env$addr;
    $length211 = (($635) + 4|0);
    $636 = HEAP32[$length211>>2]|0;
    $sub = (($636) - 1)|0;
    $637 = $env$addr;
    $638 = HEAP32[$637>>2]|0;
    $arrayidx213 = (($638) + ($sub<<2)|0);
    $639 = HEAP32[$arrayidx213>>2]|0;
    $temp_frame = $639;
    $640 = $temp_frame;
    $use_count214 = (($640) + 8|0);
    $641 = HEAP32[$use_count214>>2]|0;
    $dec215 = (($641) + -1)|0;
    HEAP32[$use_count214>>2] = $dec215;
    $642 = $temp_frame;
    _EF_free($642);
    $643 = $env$addr;
    $644 = HEAP32[$643>>2]|0;
    _free($644);
    $645 = $env$addr;
    _free($645);
    $646 = $accumulator;
    $use_count217 = (($646) + 4|0);
    $647 = HEAP32[$use_count217>>2]|0;
    $dec218 = (($647) + -1)|0;
    HEAP32[$use_count217>>2] = $dec218;
    $648 = $continuation_return_pc_length;
    $conv219 = $648 << 16 >> 16;
    $sub220 = (($conv219) - 1)|0;
    $arrayidx221 = (($continuation_return_pc) + ($sub220<<3)|0);
    $649 = $arrayidx221;
    $650 = $649;
    $651 = HEAP32[$650>>2]|0;
    $652 = (($649) + 4)|0;
    $653 = $652;
    $654 = HEAP32[$653>>2]|0;
    $655 = $pc;
    $656 = $655;
    HEAP32[$656>>2] = $651;
    $657 = (($655) + 4)|0;
    $658 = $657;
    HEAP32[$658>>2] = $654;
    $659 = $continuation_return_pc_length;
    $conv222 = $659 << 16 >> 16;
    $sub223 = (($conv222) - 1)|0;
    $conv224 = $sub223&65535;
    $continuation_return_pc_length = $conv224;
    $660 = $continuation_env_length;
    $conv225 = $660 << 16 >> 16;
    $sub226 = (($conv225) - 1)|0;
    $arrayidx227 = (($continuation_env) + ($sub226<<2)|0);
    $661 = HEAP32[$arrayidx227>>2]|0;
    $env$addr = $661;
    $662 = $continuation_env_length;
    $conv228 = $662 << 16 >> 16;
    $sub229 = (($conv228) - 1)|0;
    $conv230 = $sub229&65535;
    $continuation_env_length = $conv230;
    continue L22;
    break;
   }
   case 38: {
    label = 0;
    $663 = $accumulator;
    $664 = HEAP32[$663>>2]|0;
    switch ($664|0) {
    case 6:  {
     $665 = $accumulator;
     $data = (($665) + 8|0);
     $frame_size = (($data) + 20|0);
     $666 = HEAP8[$frame_size>>0]|0;
     $conv233 = $666&255;
     $call234 = (_EF_init_with_size($conv233)|0);
     $current_frame_pointer = $call234;
     $667 = $current_frame_pointer;
     $668 = $frames_list_length;
     $idxprom235 = $668 << 16 >> 16;
     $arrayidx236 = (($frames_list) + ($idxprom235<<2)|0);
     HEAP32[$arrayidx236>>2] = $667;
     $669 = $frames_list_length;
     $conv237 = $669 << 16 >> 16;
     $add238 = (($conv237) + 1)|0;
     $conv239 = $add238&65535;
     $frames_list_length = $conv239;
     $670 = $current_frame_pointer;
     $use_count240 = (($670) + 8|0);
     $671 = HEAP32[$use_count240>>2]|0;
     $inc241 = (($671) + 1)|0;
     HEAP32[$use_count240>>2] = $inc241;
     $672 = $accumulator;
     $673 = $functions_list_length;
     $idxprom242 = $673 << 16 >> 16;
     $arrayidx243 = (($functions_list) + ($idxprom242<<2)|0);
     HEAP32[$arrayidx243>>2] = $672;
     $674 = $functions_list_length;
     $inc244 = (($674) + 1)<<16>>16;
     $functions_list_length = $inc244;
     $675 = $accumulator;
     $use_count245 = (($675) + 4|0);
     $676 = HEAP32[$use_count245>>2]|0;
     $inc246 = (($676) + 1)|0;
     HEAP32[$use_count245>>2] = $inc246;
     $677 = $pc;
     $678 = $677;
     $679 = HEAP32[$678>>2]|0;
     $680 = (($677) + 4)|0;
     $681 = $680;
     $682 = HEAP32[$681>>2]|0;
     $683 = (_i64Add(($679|0),($682|0),1,0)|0);
     $684 = tempRet0;
     $685 = $pc;
     $686 = $685;
     HEAP32[$686>>2] = $683;
     $687 = (($685) + 4)|0;
     $688 = $687;
     HEAP32[$688>>2] = $684;
     continue L22;
     break;
    }
    case 10: case 1: case 9: case 8: case 7: case 4:  {
     $689 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
     $current_frame_pointer = $689;
     $690 = $current_frame_pointer;
     $691 = $frames_list_length;
     $idxprom249 = $691 << 16 >> 16;
     $arrayidx250 = (($frames_list) + ($idxprom249<<2)|0);
     HEAP32[$arrayidx250>>2] = $690;
     $692 = $frames_list_length;
     $inc251 = (($692) + 1)<<16>>16;
     $frames_list_length = $inc251;
     $693 = $current_frame_pointer;
     $use_count252 = (($693) + 8|0);
     $694 = HEAP32[$use_count252>>2]|0;
     $inc253 = (($694) + 1)|0;
     HEAP32[$use_count252>>2] = $inc253;
     $695 = $accumulator;
     $696 = $functions_list_length;
     $idxprom254 = $696 << 16 >> 16;
     $arrayidx255 = (($functions_list) + ($idxprom254<<2)|0);
     HEAP32[$arrayidx255>>2] = $695;
     $697 = $functions_list_length;
     $inc256 = (($697) + 1)<<16>>16;
     $functions_list_length = $inc256;
     $698 = $accumulator;
     $use_count257 = (($698) + 4|0);
     $699 = HEAP32[$use_count257>>2]|0;
     $inc258 = (($699) + 1)|0;
     HEAP32[$use_count257>>2] = $inc258;
     $700 = $pc;
     $701 = $700;
     $702 = HEAP32[$701>>2]|0;
     $703 = (($700) + 4)|0;
     $704 = $703;
     $705 = HEAP32[$704>>2]|0;
     $706 = (_i64Add(($702|0),($705|0),1,0)|0);
     $707 = tempRet0;
     $708 = $pc;
     $709 = $708;
     HEAP32[$709>>2] = $706;
     $710 = (($708) + 4)|0;
     $711 = $710;
     HEAP32[$711>>2] = $707;
     continue L22;
     break;
    }
    default: {
     label = 41;
     break L22;
    }
    }
    break;
   }
   case 42: {
    label = 0;
    $714 = $accumulator;
    $use_count263 = (($714) + 4|0);
    $715 = HEAP32[$use_count263>>2]|0;
    $inc264 = (($715) + 1)|0;
    HEAP32[$use_count263>>2] = $inc264;
    $716 = $accumulator;
    $717 = $current_frame_pointer;
    $length265 = (($717) + 4|0);
    $718 = HEAP32[$length265>>2]|0;
    $719 = $current_frame_pointer;
    $720 = HEAP32[$719>>2]|0;
    $arrayidx267 = (($720) + ($718<<2)|0);
    HEAP32[$arrayidx267>>2] = $716;
    $721 = $current_frame_pointer;
    $length268 = (($721) + 4|0);
    $722 = HEAP32[$length268>>2]|0;
    $inc269 = (($722) + 1)|0;
    HEAP32[$length268>>2] = $inc269;
    $723 = $pc;
    $724 = $723;
    $725 = HEAP32[$724>>2]|0;
    $726 = (($723) + 4)|0;
    $727 = $726;
    $728 = HEAP32[$727>>2]|0;
    $729 = (_i64Add(($725|0),($728|0),1,0)|0);
    $730 = tempRet0;
    $731 = $pc;
    $732 = $731;
    HEAP32[$732>>2] = $729;
    $733 = (($731) + 4)|0;
    $734 = $733;
    HEAP32[$734>>2] = $730;
    continue L22;
    break;
   }
   case 43: {
    label = 0;
    $735 = $inst;
    $conv272 = $735 << 16 >> 16;
    $and273 = 4095 & $conv272;
    $conv274 = $and273&255;
    $param_num = $conv274;
    $736 = $functions_list_length;
    $conv275 = $736 << 16 >> 16;
    $sub276 = (($conv275) - 1)|0;
    $arrayidx277 = (($functions_list) + ($sub276<<2)|0);
    $737 = HEAP32[$arrayidx277>>2]|0;
    $v = $737;
    $738 = $functions_list_length;
    $conv278 = $738 << 16 >> 16;
    $sub279 = (($conv278) - 1)|0;
    $arrayidx280 = (($functions_list) + ($sub279<<2)|0);
    HEAP32[$arrayidx280>>2] = 0;
    $739 = $functions_list_length;
    $dec281 = (($739) + -1)<<16>>16;
    $functions_list_length = $dec281;
    $740 = $v;
    $use_count282 = (($740) + 4|0);
    $741 = HEAP32[$use_count282>>2]|0;
    $dec283 = (($741) + -1)|0;
    HEAP32[$use_count282>>2] = $dec283;
    $742 = HEAP32[40>>2]|0;
    $accumulator = $742;
    $743 = $v;
    $744 = HEAP32[$743>>2]|0;
    L67: do {
     switch ($744|0) {
     case 4:  {
      $745 = $pc;
      $746 = $745;
      $747 = HEAP32[$746>>2]|0;
      $748 = (($745) + 4)|0;
      $749 = $748;
      $750 = HEAP32[$749>>2]|0;
      $751 = (_i64Add(($747|0),($750|0),1,0)|0);
      $752 = tempRet0;
      $753 = $pc;
      $754 = $753;
      HEAP32[$754>>2] = $751;
      $755 = (($753) + 4)|0;
      $756 = $755;
      HEAP32[$756>>2] = $752;
      $757 = $current_frame_pointer;
      $length287 = (($757) + 4|0);
      $758 = HEAP32[$length287>>2]|0;
      $sub288 = (($758) - 1)|0;
      $759 = $current_frame_pointer;
      $760 = HEAP32[$759>>2]|0;
      $arrayidx290 = (($760) + ($sub288<<2)|0);
      $761 = HEAP32[$arrayidx290>>2]|0;
      $temp = $761;
      $762 = $temp;
      $data291 = (($762) + 8|0);
      $763 = $data291;
      $764 = $763;
      $765 = HEAP32[$764>>2]|0;
      $766 = (($763) + 4)|0;
      $767 = $766;
      $768 = HEAP32[$767>>2]|0;
      $769 = $integer_;
      $770 = $769;
      HEAP32[$770>>2] = $765;
      $771 = (($769) + 4)|0;
      $772 = $771;
      HEAP32[$772>>2] = $768;
      $773 = $integer_;
      $774 = $773;
      $775 = HEAP32[$774>>2]|0;
      $776 = (($773) + 4)|0;
      $777 = $776;
      $778 = HEAP32[$777>>2]|0;
      $779 = $v;
      $data294 = (($779) + 8|0);
      $780 = HEAP32[$data294>>2]|0;
      $arrayidx296 = (($780) + ($775)|0);
      $781 = HEAP8[$arrayidx296>>0]|0;
      HEAP8[$b_>>0] = $781;
      $782 = (_Object_initString($b_,1,0)|0);
      $accumulator = $782;
      $783 = $temp;
      $use_count299 = (($783) + 4|0);
      $784 = HEAP32[$use_count299>>2]|0;
      $dec300 = (($784) + -1)|0;
      HEAP32[$use_count299>>2] = $dec300;
      $785 = $temp;
      _Object_free($785);
      $786 = $current_frame_pointer;
      $length301 = (($786) + 4|0);
      $787 = HEAP32[$length301>>2]|0;
      $dec302 = (($787) + -1)|0;
      HEAP32[$length301>>2] = $dec302;
      $788 = $current_frame_pointer;
      $use_count303 = (($788) + 8|0);
      $789 = HEAP32[$use_count303>>2]|0;
      $dec304 = (($789) + -1)|0;
      HEAP32[$use_count303>>2] = $dec304;
      $790 = $current_frame_pointer;
      _EF_free($790);
      $791 = $frames_list_length;
      $dec305 = (($791) + -1)<<16>>16;
      $frames_list_length = $dec305;
      $792 = $frames_list_length;
      $conv306 = $792 << 16 >> 16;
      $sub307 = (($conv306) - 1)|0;
      $arrayidx308 = (($frames_list) + ($sub307<<2)|0);
      $793 = HEAP32[$arrayidx308>>2]|0;
      $current_frame_pointer = $793;
      $794 = $v;
      _Object_free($794);
      continue L22;
      break;
     }
     case 7:  {
      $795 = $v;
      $data310 = (($795) + 8|0);
      $796 = HEAP32[$data310>>2]|0;
      $func_ptr = $796;
      $797 = $func_ptr;
      $798 = $current_frame_pointer;
      $length312 = (($798) + 4|0);
      $799 = HEAP32[$length312>>2]|0;
      $800 = $param_num;
      $conv313 = $800 << 24 >> 24;
      $sub314 = (($799) - ($conv313))|0;
      $801 = $current_frame_pointer;
      $802 = HEAP32[$801>>2]|0;
      $arrayidx316 = (($802) + ($sub314<<2)|0);
      $803 = $param_num;
      $conv317 = $803 << 24 >> 24;
      $call318 = (FUNCTION_TABLE_iii[$797 & 127]($arrayidx316,$conv317)|0);
      $accumulator = $call318;
      label = 46;
      break;
     }
     case 8:  {
      $872 = $pc;
      $873 = $872;
      $874 = HEAP32[$873>>2]|0;
      $875 = (($872) + 4)|0;
      $876 = $875;
      $877 = HEAP32[$876>>2]|0;
      $878 = (_i64Add(($874|0),($877|0),1,0)|0);
      $879 = tempRet0;
      $880 = $pc;
      $881 = $880;
      HEAP32[$881>>2] = $878;
      $882 = (($880) + 4)|0;
      $883 = $882;
      HEAP32[$883>>2] = $879;
      $884 = $param_num;
      $conv348 = $884 << 24 >> 24;
      if ((($conv348|0) == 1)) {
       $885 = $current_frame_pointer;
       $length350 = (($885) + 4|0);
       $886 = HEAP32[$length350>>2]|0;
       $sub351 = (($886) - 1)|0;
       $887 = $current_frame_pointer;
       $888 = HEAP32[$887>>2]|0;
       $arrayidx353 = (($888) + ($sub351<<2)|0);
       $889 = HEAP32[$arrayidx353>>2]|0;
       $temp = $889;
       $890 = $temp;
       $data354 = (($890) + 8|0);
       $891 = $data354;
       $892 = $891;
       $893 = HEAP32[$892>>2]|0;
       $894 = (($891) + 4)|0;
       $895 = $894;
       $896 = HEAP32[$895>>2]|0;
       $897 = $integer_;
       $898 = $897;
       HEAP32[$898>>2] = $893;
       $899 = (($897) + 4)|0;
       $900 = $899;
       HEAP32[$900>>2] = $896;
       $901 = $integer_;
       $902 = $901;
       $903 = HEAP32[$902>>2]|0;
       $904 = (($901) + 4)|0;
       $905 = $904;
       $906 = HEAP32[$905>>2]|0;
       $907 = $v;
       $data358 = (($907) + 8|0);
       $908 = HEAP32[$data358>>2]|0;
       $arrayidx360 = (($908) + ($903<<2)|0);
       $909 = HEAP32[$arrayidx360>>2]|0;
       $accumulator = $909;
       $910 = $temp;
       $use_count361 = (($910) + 4|0);
       $911 = HEAP32[$use_count361>>2]|0;
       $dec362 = (($911) + -1)|0;
       HEAP32[$use_count361>>2] = $dec362;
       $912 = $temp;
       _Object_free($912);
       $913 = $current_frame_pointer;
       $length363 = (($913) + 4|0);
       $914 = HEAP32[$length363>>2]|0;
       $dec364 = (($914) + -1)|0;
       HEAP32[$length363>>2] = $dec364;
       $915 = $current_frame_pointer;
       $use_count365 = (($915) + 8|0);
       $916 = HEAP32[$use_count365>>2]|0;
       $dec366 = (($916) + -1)|0;
       HEAP32[$use_count365>>2] = $dec366;
       $917 = $current_frame_pointer;
       _EF_free($917);
       $918 = $frames_list_length;
       $dec367 = (($918) + -1)<<16>>16;
       $frames_list_length = $dec367;
       $919 = $frames_list_length;
       $conv368 = $919 << 16 >> 16;
       $sub369 = (($conv368) - 1)|0;
       $arrayidx370 = (($frames_list) + ($sub369<<2)|0);
       $920 = HEAP32[$arrayidx370>>2]|0;
       $current_frame_pointer = $920;
       $921 = $v;
       _Object_free($921);
       continue L22;
      } else if (!((($conv348|0) == 2))) {
       label = 58;
       break L22;
      }
      $922 = $current_frame_pointer;
      $length372 = (($922) + 4|0);
      $923 = HEAP32[$length372>>2]|0;
      $sub373 = (($923) - 2)|0;
      $924 = $current_frame_pointer;
      $925 = HEAP32[$924>>2]|0;
      $arrayidx375 = (($925) + ($sub373<<2)|0);
      $926 = HEAP32[$arrayidx375>>2]|0;
      $temp = $926;
      $927 = $current_frame_pointer;
      $length376 = (($927) + 4|0);
      $928 = HEAP32[$length376>>2]|0;
      $sub377 = (($928) - 1)|0;
      $929 = $current_frame_pointer;
      $930 = HEAP32[$929>>2]|0;
      $arrayidx379 = (($930) + ($sub377<<2)|0);
      $931 = HEAP32[$arrayidx379>>2]|0;
      $temp2 = $931;
      $932 = $temp;
      $data380 = (($932) + 8|0);
      $933 = $data380;
      $934 = $933;
      $935 = HEAP32[$934>>2]|0;
      $936 = (($933) + 4)|0;
      $937 = $936;
      $938 = HEAP32[$937>>2]|0;
      $939 = $integer_;
      $940 = $939;
      HEAP32[$940>>2] = $935;
      $941 = (($939) + 4)|0;
      $942 = $941;
      HEAP32[$942>>2] = $938;
      $943 = $integer_;
      $944 = $943;
      $945 = HEAP32[$944>>2]|0;
      $946 = (($943) + 4)|0;
      $947 = $946;
      $948 = HEAP32[$947>>2]|0;
      $949 = $v;
      $data384 = (($949) + 8|0);
      $950 = HEAP32[$data384>>2]|0;
      $arrayidx387 = (($950) + ($945<<2)|0);
      $951 = HEAP32[$arrayidx387>>2]|0;
      $use_count388 = (($951) + 4|0);
      $952 = HEAP32[$use_count388>>2]|0;
      $dec389 = (($952) + -1)|0;
      HEAP32[$use_count388>>2] = $dec389;
      $953 = $integer_;
      $954 = $953;
      $955 = HEAP32[$954>>2]|0;
      $956 = (($953) + 4)|0;
      $957 = $956;
      $958 = HEAP32[$957>>2]|0;
      $959 = $v;
      $data391 = (($959) + 8|0);
      $960 = HEAP32[$data391>>2]|0;
      $arrayidx394 = (($960) + ($955<<2)|0);
      $961 = HEAP32[$arrayidx394>>2]|0;
      _Object_free($961);
      $962 = $temp2;
      $963 = $integer_;
      $964 = $963;
      $965 = HEAP32[$964>>2]|0;
      $966 = (($963) + 4)|0;
      $967 = $966;
      $968 = HEAP32[$967>>2]|0;
      $969 = $v;
      $data396 = (($969) + 8|0);
      $970 = HEAP32[$data396>>2]|0;
      $arrayidx399 = (($970) + ($965<<2)|0);
      HEAP32[$arrayidx399>>2] = $962;
      $971 = $temp2;
      $use_count400 = (($971) + 4|0);
      $972 = HEAP32[$use_count400>>2]|0;
      $inc401 = (($972) + 1)|0;
      HEAP32[$use_count400>>2] = $inc401;
      $973 = $i;
      $974 = $973;
      HEAP32[$974>>2] = 0;
      $975 = (($973) + 4)|0;
      $976 = $975;
      HEAP32[$976>>2] = 0;
      while(1) {
       $977 = $i;
       $978 = $977;
       $979 = HEAP32[$978>>2]|0;
       $980 = (($977) + 4)|0;
       $981 = $980;
       $982 = HEAP32[$981>>2]|0;
       $983 = $param_num;
       $984 = $983 << 24 >> 24;
       $985 = ($984|0)<(0);
       $986 = $985 << 31 >> 31;
       $987 = ($982>>>0)<($986>>>0);
       $988 = ($982|0)==($986|0);
       $989 = ($979>>>0)<($984>>>0);
       $990 = $988 & $989;
       $991 = $987 | $990;
       if (!($991)) {
        break;
       }
       $992 = $current_frame_pointer;
       $length407 = (($992) + 4|0);
       $993 = HEAP32[$length407>>2]|0;
       $sub408 = (($993) - 1)|0;
       $994 = $current_frame_pointer;
       $995 = HEAP32[$994>>2]|0;
       $arrayidx410 = (($995) + ($sub408<<2)|0);
       $996 = HEAP32[$arrayidx410>>2]|0;
       $temp = $996;
       $997 = $temp;
       $use_count411 = (($997) + 4|0);
       $998 = HEAP32[$use_count411>>2]|0;
       $dec412 = (($998) + -1)|0;
       HEAP32[$use_count411>>2] = $dec412;
       $999 = $temp;
       _Object_free($999);
       $1000 = $current_frame_pointer;
       $length413 = (($1000) + 4|0);
       $1001 = HEAP32[$length413>>2]|0;
       $dec414 = (($1001) + -1)|0;
       HEAP32[$length413>>2] = $dec414;
       $1002 = $i;
       $1003 = $1002;
       $1004 = HEAP32[$1003>>2]|0;
       $1005 = (($1002) + 4)|0;
       $1006 = $1005;
       $1007 = HEAP32[$1006>>2]|0;
       $1008 = (_i64Add(($1004|0),($1007|0),1,0)|0);
       $1009 = tempRet0;
       $1010 = $i;
       $1011 = $1010;
       HEAP32[$1011>>2] = $1008;
       $1012 = (($1010) + 4)|0;
       $1013 = $1012;
       HEAP32[$1013>>2] = $1009;
      }
      $1014 = $current_frame_pointer;
      $use_count418 = (($1014) + 8|0);
      $1015 = HEAP32[$use_count418>>2]|0;
      $dec419 = (($1015) + -1)|0;
      HEAP32[$use_count418>>2] = $dec419;
      $1016 = $current_frame_pointer;
      _EF_free($1016);
      $1017 = $frames_list_length;
      $dec420 = (($1017) + -1)<<16>>16;
      $frames_list_length = $dec420;
      $1018 = $frames_list_length;
      $conv421 = $1018 << 16 >> 16;
      $sub422 = (($conv421) - 1)|0;
      $arrayidx423 = (($frames_list) + ($sub422<<2)|0);
      $1019 = HEAP32[$arrayidx423>>2]|0;
      $current_frame_pointer = $1019;
      $1020 = $v;
      _Object_free($1020);
      continue L22;
      break;
     }
     case 9:  {
      $1023 = $pc;
      $1024 = $1023;
      $1025 = HEAP32[$1024>>2]|0;
      $1026 = (($1023) + 4)|0;
      $1027 = $1026;
      $1028 = HEAP32[$1027>>2]|0;
      $1029 = (_i64Add(($1025|0),($1028|0),1,0)|0);
      $1030 = tempRet0;
      $1031 = $pc;
      $1032 = $1031;
      HEAP32[$1032>>2] = $1029;
      $1033 = (($1031) + 4)|0;
      $1034 = $1033;
      HEAP32[$1034>>2] = $1030;
      $1035 = $param_num;
      $conv428 = $1035 << 24 >> 24;
      if ((($conv428|0) == 2)) {
       $1184 = $current_frame_pointer;
       $length510 = (($1184) + 4|0);
       $1185 = HEAP32[$length510>>2]|0;
       $sub511 = (($1185) - 2)|0;
       $1186 = $current_frame_pointer;
       $1187 = HEAP32[$1186>>2]|0;
       $arrayidx513 = (($1187) + ($sub511<<2)|0);
       $1188 = HEAP32[$arrayidx513>>2]|0;
       $temp = $1188;
       $1189 = $current_frame_pointer;
       $length514 = (($1189) + 4|0);
       $1190 = HEAP32[$length514>>2]|0;
       $sub515 = (($1190) - 1)|0;
       $1191 = $current_frame_pointer;
       $1192 = HEAP32[$1191>>2]|0;
       $arrayidx517 = (($1192) + ($sub515<<2)|0);
       $1193 = HEAP32[$arrayidx517>>2]|0;
       $temp2 = $1193;
       $1194 = $v;
       $1195 = $temp;
       $1196 = $temp2;
       _Table_setval($1194,$1195,$1196);
       $1197 = $i;
       $1198 = $1197;
       HEAP32[$1198>>2] = 0;
       $1199 = (($1197) + 4)|0;
       $1200 = $1199;
       HEAP32[$1200>>2] = 0;
       while(1) {
        $1201 = $i;
        $1202 = $1201;
        $1203 = HEAP32[$1202>>2]|0;
        $1204 = (($1201) + 4)|0;
        $1205 = $1204;
        $1206 = HEAP32[$1205>>2]|0;
        $1207 = $param_num;
        $1208 = $1207 << 24 >> 24;
        $1209 = ($1208|0)<(0);
        $1210 = $1209 << 31 >> 31;
        $1211 = ($1206>>>0)<($1210>>>0);
        $1212 = ($1206|0)==($1210|0);
        $1213 = ($1203>>>0)<($1208>>>0);
        $1214 = $1212 & $1213;
        $1215 = $1211 | $1214;
        if (!($1215)) {
         break;
        }
        $1216 = $current_frame_pointer;
        $length523 = (($1216) + 4|0);
        $1217 = HEAP32[$length523>>2]|0;
        $sub524 = (($1217) - 1)|0;
        $1218 = $current_frame_pointer;
        $1219 = HEAP32[$1218>>2]|0;
        $arrayidx526 = (($1219) + ($sub524<<2)|0);
        $1220 = HEAP32[$arrayidx526>>2]|0;
        $temp = $1220;
        $1221 = $temp;
        $use_count527 = (($1221) + 4|0);
        $1222 = HEAP32[$use_count527>>2]|0;
        $dec528 = (($1222) + -1)|0;
        HEAP32[$use_count527>>2] = $dec528;
        $1223 = $temp;
        _Object_free($1223);
        $1224 = $current_frame_pointer;
        $length529 = (($1224) + 4|0);
        $1225 = HEAP32[$length529>>2]|0;
        $dec530 = (($1225) + -1)|0;
        HEAP32[$length529>>2] = $dec530;
        $1226 = $i;
        $1227 = $1226;
        $1228 = HEAP32[$1227>>2]|0;
        $1229 = (($1226) + 4)|0;
        $1230 = $1229;
        $1231 = HEAP32[$1230>>2]|0;
        $1232 = (_i64Add(($1228|0),($1231|0),1,0)|0);
        $1233 = tempRet0;
        $1234 = $i;
        $1235 = $1234;
        HEAP32[$1235>>2] = $1232;
        $1236 = (($1234) + 4)|0;
        $1237 = $1236;
        HEAP32[$1237>>2] = $1233;
       }
       $1238 = $current_frame_pointer;
       $use_count534 = (($1238) + 8|0);
       $1239 = HEAP32[$use_count534>>2]|0;
       $dec535 = (($1239) + -1)|0;
       HEAP32[$use_count534>>2] = $dec535;
       $1240 = $current_frame_pointer;
       _EF_free($1240);
       $1241 = $frames_list_length;
       $dec536 = (($1241) + -1)<<16>>16;
       $frames_list_length = $dec536;
       $1242 = $frames_list_length;
       $conv537 = $1242 << 16 >> 16;
       $sub538 = (($conv537) - 1)|0;
       $arrayidx539 = (($frames_list) + ($sub538<<2)|0);
       $1243 = HEAP32[$arrayidx539>>2]|0;
       $current_frame_pointer = $1243;
       $1244 = $v;
       _Object_free($1244);
       continue L22;
      } else if (!((($conv428|0) == 1))) {
       label = 76;
       break L22;
      }
      $1036 = $current_frame_pointer;
      $length430 = (($1036) + 4|0);
      $1037 = HEAP32[$length430>>2]|0;
      $sub431 = (($1037) - 1)|0;
      $1038 = $current_frame_pointer;
      $1039 = HEAP32[$1038>>2]|0;
      $arrayidx433 = (($1039) + ($sub431<<2)|0);
      $1040 = HEAP32[$arrayidx433>>2]|0;
      $temp = $1040;
      $1041 = $temp;
      $data434 = (($1041) + 8|0);
      $1042 = HEAP32[$data434>>2]|0;
      $1043 = $v;
      $data437 = (($1043) + 8|0);
      $1044 = $data437;
      $1045 = $1044;
      $1046 = HEAP32[$1045>>2]|0;
      $1047 = (($1044) + 4)|0;
      $1048 = $1047;
      $1049 = HEAP32[$1048>>2]|0;
      $1050 = (_hash($1042,$1046,$1049)|0);
      $1051 = tempRet0;
      $1052 = $hash_val;
      $1053 = $1052;
      HEAP32[$1053>>2] = $1050;
      $1054 = (($1052) + 4)|0;
      $1055 = $1054;
      HEAP32[$1055>>2] = $1051;
      $1056 = $hash_val;
      $1057 = $1056;
      $1058 = HEAP32[$1057>>2]|0;
      $1059 = (($1056) + 4)|0;
      $1060 = $1059;
      $1061 = HEAP32[$1060>>2]|0;
      $1062 = $v;
      $data440 = (($1062) + 8|0);
      $vec = (($data440) + 16|0);
      $1063 = HEAP32[$vec>>2]|0;
      $arrayidx442 = (($1063) + ($1058<<2)|0);
      $1064 = HEAP32[$arrayidx442>>2]|0;
      $table_pairs = $1064;
      while(1) {
       $1065 = $table_pairs;
       $cmp444 = ($1065|0)!=(0|0);
       if (!($cmp444)) {
        label = 69;
        break;
       }
       $1066 = $table_pairs;
       $1067 = HEAP32[$1066>>2]|0;
       $1068 = $temp;
       $cmp447 = ($1067|0)==($1068|0);
       if ($cmp447) {
        label = 64;
        break;
       }
       $1069 = $temp;
       $data449 = (($1069) + 8|0);
       $1070 = HEAP32[$data449>>2]|0;
       $1071 = $table_pairs;
       $1072 = HEAP32[$1071>>2]|0;
       $data453 = (($1072) + 8|0);
       $1073 = HEAP32[$data453>>2]|0;
       $call456 = (_strcmp($1070,$1073)|0);
       $cmp457 = ($call456|0)==(0);
       if ($cmp457) {
        label = 64;
        break;
       }
       $1169 = $table_pairs;
       $next = (($1169) + 8|0);
       $1170 = HEAP32[$next>>2]|0;
       $table_pairs = $1170;
      }
      if ((label|0) == 64) {
       label = 0;
       $1074 = $table_pairs;
       $value = (($1074) + 4|0);
       $1075 = HEAP32[$value>>2]|0;
       $accumulator = $1075;
       $1076 = $pc;
       $1077 = $1076;
       $1078 = HEAP32[$1077>>2]|0;
       $1079 = (($1076) + 4)|0;
       $1080 = $1079;
       $1081 = HEAP32[$1080>>2]|0;
       $1082 = (_i64Subtract(($1078|0),($1081|0),5,0)|0);
       $1083 = tempRet0;
       $1084 = $instructions;
       $arrayidx462 = (($1084) + ($1082<<1)|0);
       $1085 = HEAP16[$arrayidx462>>1]|0;
       $conv463 = $1085&65535;
       $cmp464 = ($conv463|0)==(20480);
       if ($cmp464) {
        $1086 = $pc;
        $1087 = $1086;
        $1088 = HEAP32[$1087>>2]|0;
        $1089 = (($1086) + 4)|0;
        $1090 = $1089;
        $1091 = HEAP32[$1090>>2]|0;
        $1092 = (_i64Subtract(($1088|0),($1091|0),4,0)|0);
        $1093 = tempRet0;
        $1094 = $instructions;
        $arrayidx468 = (($1094) + ($1092<<1)|0);
        $1095 = HEAP16[$arrayidx468>>1]|0;
        $conv469 = $1095&65535;
        $cmp470 = ($conv469|0)==(20480);
        if ($cmp470) {
         $1096 = $pc;
         $1097 = $1096;
         $1098 = HEAP32[$1097>>2]|0;
         $1099 = (($1096) + 4)|0;
         $1100 = $1099;
         $1101 = HEAP32[$1100>>2]|0;
         $1102 = (_i64Subtract(($1098|0),($1101|0),5,0)|0);
         $1103 = tempRet0;
         $1104 = $instructions;
         $arrayidx475 = (($1104) + ($1102<<1)|0);
         HEAP16[$arrayidx475>>1] = -8192;
         $1105 = $pc;
         $1106 = $1105;
         $1107 = HEAP32[$1106>>2]|0;
         $1108 = (($1105) + 4)|0;
         $1109 = $1108;
         $1110 = HEAP32[$1109>>2]|0;
         $1111 = (_i64Subtract(($1107|0),($1110|0),3,0)|0);
         $1112 = tempRet0;
         $1113 = $instructions;
         $arrayidx478 = (($1113) + ($1111<<1)|0);
         $1114 = HEAP16[$arrayidx478>>1]|0;
         $1115 = $pc;
         $1116 = $1115;
         $1117 = HEAP32[$1116>>2]|0;
         $1118 = (($1115) + 4)|0;
         $1119 = $1118;
         $1120 = HEAP32[$1119>>2]|0;
         $1121 = (_i64Subtract(($1117|0),($1120|0),4,0)|0);
         $1122 = tempRet0;
         $1123 = $instructions;
         $arrayidx481 = (($1123) + ($1121<<1)|0);
         HEAP16[$arrayidx481>>1] = $1114;
         $1124 = $hash_val;
         $1125 = $1124;
         $1126 = HEAP32[$1125>>2]|0;
         $1127 = (($1124) + 4)|0;
         $1128 = $1127;
         $1129 = HEAP32[$1128>>2]|0;
         $1130 = $1126 & -65536;
         $1131 = (_bitshift64Lshr(($1130|0),0,16)|0);
         $1132 = tempRet0;
         $1133 = $1131&65535;
         $1134 = $pc;
         $1135 = $1134;
         $1136 = HEAP32[$1135>>2]|0;
         $1137 = (($1134) + 4)|0;
         $1138 = $1137;
         $1139 = HEAP32[$1138>>2]|0;
         $1140 = (_i64Subtract(($1136|0),($1139|0),3,0)|0);
         $1141 = tempRet0;
         $1142 = $instructions;
         $arrayidx487 = (($1142) + ($1140<<1)|0);
         HEAP16[$arrayidx487>>1] = $1133;
         $1143 = $hash_val;
         $1144 = $1143;
         $1145 = HEAP32[$1144>>2]|0;
         $1146 = (($1143) + 4)|0;
         $1147 = $1146;
         $1148 = HEAP32[$1147>>2]|0;
         $1149 = $1145 & 65535;
         $1150 = $1149&65535;
         $1151 = $pc;
         $1152 = $1151;
         $1153 = HEAP32[$1152>>2]|0;
         $1154 = (($1151) + 4)|0;
         $1155 = $1154;
         $1156 = HEAP32[$1155>>2]|0;
         $1157 = (_i64Subtract(($1153|0),($1156|0),2,0)|0);
         $1158 = tempRet0;
         $1159 = $instructions;
         $arrayidx492 = (($1159) + ($1157<<1)|0);
         HEAP16[$arrayidx492>>1] = $1150;
         $1160 = $pc;
         $1161 = $1160;
         $1162 = HEAP32[$1161>>2]|0;
         $1163 = (($1160) + 4)|0;
         $1164 = $1163;
         $1165 = HEAP32[$1164>>2]|0;
         $1166 = (_i64Subtract(($1162|0),($1165|0),1,0)|0);
         $1167 = tempRet0;
         $1168 = $instructions;
         $arrayidx495 = (($1168) + ($1166<<1)|0);
         HEAP16[$arrayidx495>>1] = 0;
        }
       }
      }
      else if ((label|0) == 69) {
       label = 0;
       $1171 = HEAP32[40>>2]|0;
       $accumulator = $1171;
      }
      $1172 = $temp;
      $use_count499 = (($1172) + 4|0);
      $1173 = HEAP32[$use_count499>>2]|0;
      $dec500 = (($1173) + -1)|0;
      HEAP32[$use_count499>>2] = $dec500;
      $1174 = $temp;
      _Object_free($1174);
      $1175 = $current_frame_pointer;
      $length501 = (($1175) + 4|0);
      $1176 = HEAP32[$length501>>2]|0;
      $dec502 = (($1176) + -1)|0;
      HEAP32[$length501>>2] = $dec502;
      $1177 = $current_frame_pointer;
      $use_count503 = (($1177) + 8|0);
      $1178 = HEAP32[$use_count503>>2]|0;
      $dec504 = (($1178) + -1)|0;
      HEAP32[$use_count503>>2] = $dec504;
      $1179 = $current_frame_pointer;
      _EF_free($1179);
      $1180 = $frames_list_length;
      $dec505 = (($1180) + -1)<<16>>16;
      $frames_list_length = $dec505;
      $1181 = $frames_list_length;
      $conv506 = $1181 << 16 >> 16;
      $sub507 = (($conv506) - 1)|0;
      $arrayidx508 = (($frames_list) + ($sub507<<2)|0);
      $1182 = HEAP32[$arrayidx508>>2]|0;
      $current_frame_pointer = $1182;
      $1183 = $v;
      _Object_free($1183);
      continue L22;
      break;
     }
     case 6:  {
      break;
     }
     case 1:  {
      $1382 = $v;
      $data631 = (($1382) + 8|0);
      $1383 = $data631;
      $1384 = $1383;
      $1385 = HEAP32[$1384>>2]|0;
      $1386 = (($1383) + 4)|0;
      $1387 = $1386;
      $1388 = HEAP32[$1387>>2]|0;
      if ((($1385|0) == 1)) {
       if (!((($1388|0) == 0))) {
        label = 121;
        break L22;
       }
       $1389 = $pc;
       $1390 = $1389;
       $1391 = HEAP32[$1390>>2]|0;
       $1392 = (($1389) + 4)|0;
       $1393 = $1392;
       $1394 = HEAP32[$1393>>2]|0;
       $1395 = (_i64Add(($1391|0),($1394|0),1,0)|0);
       $1396 = tempRet0;
       $1397 = $pc;
       $1398 = $1397;
       HEAP32[$1398>>2] = $1395;
       $1399 = (($1397) + 4)|0;
       $1400 = $1399;
       HEAP32[$1400>>2] = $1396;
       $1401 = $current_frame_pointer;
       $length636 = (($1401) + 4|0);
       $1402 = HEAP32[$length636>>2]|0;
       $1403 = $param_num;
       $conv637 = $1403 << 24 >> 24;
       $sub638 = (($1402) - ($conv637))|0;
       $1404 = $current_frame_pointer;
       $1405 = HEAP32[$1404>>2]|0;
       $arrayidx640 = (($1405) + ($sub638<<2)|0);
       $1406 = HEAP32[$arrayidx640>>2]|0;
       $temp = $1406;
       $1407 = $vt$addr;
       $cmp641 = ($1407|0)==(0|0);
       if ($cmp641) {
        label = 98;
        break L22;
       }
       $1410 = $temp;
       $1411 = HEAP32[$1410>>2]|0;
       $cmp647 = ($1411|0)==(4);
       if ($cmp647) {
        $1412 = $temp;
        $data650 = (($1412) + 8|0);
        $1413 = HEAP32[$data650>>2]|0;
        $call653 = (_lexer($1413)|0);
        $call654 = (_parser($call653)|0);
        $cond658 = $call654;
       } else {
        $1414 = $temp;
        $1415 = HEAP32[40>>2]|0;
        $call656 = (_cons($1414,$1415)|0);
        $cond658 = $call656;
       }
       $temp = $cond658;
       $1416 = $instructions_$addr;
       $length659 = (($1416) + 8|0);
       $1417 = $length659;
       $1418 = $1417;
       $1419 = HEAP32[$1418>>2]|0;
       $1420 = (($1417) + 4)|0;
       $1421 = $1420;
       $1422 = HEAP32[$1421>>2]|0;
       $1423 = $instructions_$addr;
       $start_pc660 = (($1423) + 24|0);
       $1424 = $start_pc660;
       $1425 = $1424;
       HEAP32[$1425>>2] = $1419;
       $1426 = (($1424) + 4)|0;
       $1427 = $1426;
       HEAP32[$1427>>2] = $1422;
       $1428 = $instructions_$addr;
       $1429 = $temp;
       $1430 = $vt$addr;
       $1431 = $original_env;
       $1432 = $mt$addr;
       $1433 = $module$addr;
       $call661 = (_compiler_begin($1428,$1429,$1430,0,0,1,$1431,$1432,$1433)|0);
       $accumulator = $call661;
       $1434 = $start_pc$addr;
       $1435 = $1434;
       $1436 = HEAP32[$1435>>2]|0;
       $1437 = (($1434) + 4)|0;
       $1438 = $1437;
       $1439 = HEAP32[$1438>>2]|0;
       $1440 = $instructions_$addr;
       $start_pc662 = (($1440) + 24|0);
       $1441 = $start_pc662;
       $1442 = $1441;
       HEAP32[$1442>>2] = $1436;
       $1443 = (($1441) + 4)|0;
       $1444 = $1443;
       HEAP32[$1444>>2] = $1439;
       $1445 = $accumulator;
       $use_count663 = (($1445) + 4|0);
       $1446 = HEAP32[$use_count663>>2]|0;
       $inc664 = (($1446) + 1)|0;
       HEAP32[$use_count663>>2] = $inc664;
       $1447 = $i;
       $1448 = $1447;
       HEAP32[$1448>>2] = 0;
       $1449 = (($1447) + 4)|0;
       $1450 = $1449;
       HEAP32[$1450>>2] = 0;
       while(1) {
        $1451 = $i;
        $1452 = $1451;
        $1453 = HEAP32[$1452>>2]|0;
        $1454 = (($1451) + 4)|0;
        $1455 = $1454;
        $1456 = HEAP32[$1455>>2]|0;
        $1457 = $param_num;
        $1458 = $1457 << 24 >> 24;
        $1459 = ($1458|0)<(0);
        $1460 = $1459 << 31 >> 31;
        $1461 = ($1456>>>0)<($1460>>>0);
        $1462 = ($1456|0)==($1460|0);
        $1463 = ($1453>>>0)<($1458>>>0);
        $1464 = $1462 & $1463;
        $1465 = $1461 | $1464;
        if (!($1465)) {
         break;
        }
        $1466 = $current_frame_pointer;
        $length670 = (($1466) + 4|0);
        $1467 = HEAP32[$length670>>2]|0;
        $sub671 = (($1467) - 1)|0;
        $1468 = $current_frame_pointer;
        $1469 = HEAP32[$1468>>2]|0;
        $arrayidx673 = (($1469) + ($sub671<<2)|0);
        $1470 = HEAP32[$arrayidx673>>2]|0;
        $temp = $1470;
        $1471 = $temp;
        $use_count674 = (($1471) + 4|0);
        $1472 = HEAP32[$use_count674>>2]|0;
        $dec675 = (($1472) + -1)|0;
        HEAP32[$use_count674>>2] = $dec675;
        $1473 = $temp;
        _Object_free($1473);
        $1474 = $current_frame_pointer;
        $length676 = (($1474) + 4|0);
        $1475 = HEAP32[$length676>>2]|0;
        $sub677 = (($1475) - 1)|0;
        $1476 = $current_frame_pointer;
        $1477 = HEAP32[$1476>>2]|0;
        $arrayidx679 = (($1477) + ($sub677<<2)|0);
        HEAP32[$arrayidx679>>2] = 0;
        $1478 = $current_frame_pointer;
        $length680 = (($1478) + 4|0);
        $1479 = HEAP32[$length680>>2]|0;
        $dec681 = (($1479) + -1)|0;
        HEAP32[$length680>>2] = $dec681;
        $1480 = $i;
        $1481 = $1480;
        $1482 = HEAP32[$1481>>2]|0;
        $1483 = (($1480) + 4)|0;
        $1484 = $1483;
        $1485 = HEAP32[$1484>>2]|0;
        $1486 = (_i64Add(($1482|0),($1485|0),1,0)|0);
        $1487 = tempRet0;
        $1488 = $i;
        $1489 = $1488;
        HEAP32[$1489>>2] = $1486;
        $1490 = (($1488) + 4)|0;
        $1491 = $1490;
        HEAP32[$1491>>2] = $1487;
       }
       $1492 = $accumulator;
       $use_count685 = (($1492) + 4|0);
       $1493 = HEAP32[$use_count685>>2]|0;
       $dec686 = (($1493) + -1)|0;
       HEAP32[$use_count685>>2] = $dec686;
       $1494 = $current_frame_pointer;
       $use_count687 = (($1494) + 8|0);
       $1495 = HEAP32[$use_count687>>2]|0;
       $dec688 = (($1495) + -1)|0;
       HEAP32[$use_count687>>2] = $dec688;
       $1496 = $current_frame_pointer;
       _EF_free($1496);
       $1497 = $frames_list_length;
       $dec689 = (($1497) + -1)<<16>>16;
       $frames_list_length = $dec689;
       $1498 = $frames_list_length;
       $conv690 = $1498 << 16 >> 16;
       $sub691 = (($conv690) - 1)|0;
       $arrayidx692 = (($frames_list) + ($sub691<<2)|0);
       $1499 = HEAP32[$arrayidx692>>2]|0;
       $current_frame_pointer = $1499;
       continue L22;
      } else if (!((($1385|0) == 2))) {
       label = 121;
       break L22;
      }
      if (!((($1388|0) == 0))) {
       label = 121;
       break L22;
      }
      $1500 = $current_frame_pointer;
      $length694 = (($1500) + 4|0);
      $1501 = HEAP32[$length694>>2]|0;
      $1502 = $param_num;
      $conv695 = $1502 << 24 >> 24;
      $sub696 = (($1501) - ($conv695))|0;
      $1503 = $current_frame_pointer;
      $1504 = HEAP32[$1503>>2]|0;
      $arrayidx698 = (($1504) + ($sub696<<2)|0);
      $1505 = HEAP32[$arrayidx698>>2]|0;
      $v = $1505;
      $1506 = $current_frame_pointer;
      $length699 = (($1506) + 4|0);
      $1507 = HEAP32[$length699>>2]|0;
      $1508 = $param_num;
      $conv700 = $1508 << 24 >> 24;
      $sub701 = (($1507) - ($conv700))|0;
      $add702 = (($sub701) + 1)|0;
      $1509 = $current_frame_pointer;
      $1510 = HEAP32[$1509>>2]|0;
      $arrayidx704 = (($1510) + ($add702<<2)|0);
      $1511 = HEAP32[$arrayidx704>>2]|0;
      $temp = $1511;
      $1512 = $v;
      $1513 = HEAP32[$1512>>2]|0;
      if ((($1513|0) == 7)) {
       $param_num = 0;
       while(1) {
        $1514 = $temp;
        $1515 = HEAP32[40>>2]|0;
        $cmp708 = ($1514|0)!=($1515|0);
        if (!($cmp708)) {
         break;
        }
        $1516 = $temp;
        $data711 = (($1516) + 8|0);
        $1517 = HEAP32[$data711>>2]|0;
        $1518 = $current_frame_pointer;
        $length712 = (($1518) + 4|0);
        $1519 = HEAP32[$length712>>2]|0;
        $1520 = $current_frame_pointer;
        $1521 = HEAP32[$1520>>2]|0;
        $arrayidx714 = (($1521) + ($1519<<2)|0);
        HEAP32[$arrayidx714>>2] = $1517;
        $1522 = $temp;
        $data715 = (($1522) + 8|0);
        $1523 = HEAP32[$data715>>2]|0;
        $use_count718 = (($1523) + 4|0);
        $1524 = HEAP32[$use_count718>>2]|0;
        $inc719 = (($1524) + 1)|0;
        HEAP32[$use_count718>>2] = $inc719;
        $1525 = $current_frame_pointer;
        $length720 = (($1525) + 4|0);
        $1526 = HEAP32[$length720>>2]|0;
        $inc721 = (($1526) + 1)|0;
        HEAP32[$length720>>2] = $inc721;
        $1527 = $temp;
        $data722 = (($1527) + 8|0);
        $cdr = (($data722) + 4|0);
        $1528 = HEAP32[$cdr>>2]|0;
        $temp = $1528;
        $1529 = $param_num;
        $inc724 = (($1529) + 1)<<24>>24;
        $param_num = $inc724;
       }
       $1530 = $v;
       $data726 = (($1530) + 8|0);
       $1531 = HEAP32[$data726>>2]|0;
       $1532 = $current_frame_pointer;
       $length729 = (($1532) + 4|0);
       $1533 = HEAP32[$length729>>2]|0;
       $1534 = $param_num;
       $conv730 = $1534 << 24 >> 24;
       $sub731 = (($1533) - ($conv730))|0;
       $1535 = $current_frame_pointer;
       $1536 = HEAP32[$1535>>2]|0;
       $arrayidx733 = (($1536) + ($sub731<<2)|0);
       $1537 = $param_num;
       $conv734 = $1537 << 24 >> 24;
       $call735 = (FUNCTION_TABLE_iii[$1531 & 127]($arrayidx733,$conv734)|0);
       $accumulator = $call735;
       $1538 = $param_num;
       $conv736 = $1538 << 24 >> 24;
       $add737 = (($conv736) + 2)|0;
       $conv738 = $add737&255;
       $param_num = $conv738;
       label = 46;
       break L67;
      } else if (!((($1513|0) == 6))) {
       label = 120;
       break L22;
      }
      $1539 = HEAP32[40>>2]|0;
      $accumulator = $1539;
      $call740 = (_EF_init_with_size(64)|0);
      $temp_frame = $call740;
      while(1) {
       $1540 = $temp;
       $1541 = HEAP32[40>>2]|0;
       $cmp742 = ($1540|0)!=($1541|0);
       if (!($cmp742)) {
        break;
       }
       $1542 = $temp;
       $data745 = (($1542) + 8|0);
       $1543 = HEAP32[$data745>>2]|0;
       $1544 = $temp_frame;
       $length748 = (($1544) + 4|0);
       $1545 = HEAP32[$length748>>2]|0;
       $1546 = $temp_frame;
       $1547 = HEAP32[$1546>>2]|0;
       $arrayidx750 = (($1547) + ($1545<<2)|0);
       HEAP32[$arrayidx750>>2] = $1543;
       $1548 = $temp;
       $data751 = (($1548) + 8|0);
       $1549 = HEAP32[$data751>>2]|0;
       $use_count754 = (($1549) + 4|0);
       $1550 = HEAP32[$use_count754>>2]|0;
       $inc755 = (($1550) + 1)|0;
       HEAP32[$use_count754>>2] = $inc755;
       $1551 = $temp;
       $data756 = (($1551) + 8|0);
       $cdr758 = (($data756) + 4|0);
       $1552 = HEAP32[$cdr758>>2]|0;
       $temp = $1552;
       $1553 = $temp_frame;
       $length759 = (($1553) + 4|0);
       $1554 = HEAP32[$length759>>2]|0;
       $inc760 = (($1554) + 1)|0;
       HEAP32[$length759>>2] = $inc760;
      }
      $1555 = $temp_frame;
      $use_count762 = (($1555) + 8|0);
      $1556 = HEAP32[$use_count762>>2]|0;
      $inc763 = (($1556) + 1)|0;
      HEAP32[$use_count762>>2] = $inc763;
      $1557 = $i;
      $1558 = $1557;
      HEAP32[$1558>>2] = 0;
      $1559 = (($1557) + 4)|0;
      $1560 = $1559;
      HEAP32[$1560>>2] = 0;
      while(1) {
       $1561 = $i;
       $1562 = $1561;
       $1563 = HEAP32[$1562>>2]|0;
       $1564 = (($1561) + 4)|0;
       $1565 = $1564;
       $1566 = HEAP32[$1565>>2]|0;
       $1567 = $param_num;
       $1568 = $1567 << 24 >> 24;
       $1569 = ($1568|0)<(0);
       $1570 = $1569 << 31 >> 31;
       $1571 = ($1566>>>0)<($1570>>>0);
       $1572 = ($1566|0)==($1570|0);
       $1573 = ($1563>>>0)<($1568>>>0);
       $1574 = $1572 & $1573;
       $1575 = $1571 | $1574;
       if (!($1575)) {
        break;
       }
       $1576 = $current_frame_pointer;
       $length769 = (($1576) + 4|0);
       $1577 = HEAP32[$length769>>2]|0;
       $sub770 = (($1577) - 1)|0;
       $1578 = $current_frame_pointer;
       $1579 = HEAP32[$1578>>2]|0;
       $arrayidx772 = (($1579) + ($sub770<<2)|0);
       $1580 = HEAP32[$arrayidx772>>2]|0;
       $temp = $1580;
       $1581 = $temp;
       $use_count773 = (($1581) + 4|0);
       $1582 = HEAP32[$use_count773>>2]|0;
       $dec774 = (($1582) + -1)|0;
       HEAP32[$use_count773>>2] = $dec774;
       $1583 = $temp;
       _Object_free($1583);
       $1584 = $current_frame_pointer;
       $length775 = (($1584) + 4|0);
       $1585 = HEAP32[$length775>>2]|0;
       $dec776 = (($1585) + -1)|0;
       HEAP32[$length775>>2] = $dec776;
       $1586 = $i;
       $1587 = $1586;
       $1588 = HEAP32[$1587>>2]|0;
       $1589 = (($1586) + 4)|0;
       $1590 = $1589;
       $1591 = HEAP32[$1590>>2]|0;
       $1592 = (_i64Add(($1588|0),($1591|0),1,0)|0);
       $1593 = tempRet0;
       $1594 = $i;
       $1595 = $1594;
       HEAP32[$1595>>2] = $1592;
       $1596 = (($1594) + 4)|0;
       $1597 = $1596;
       HEAP32[$1597>>2] = $1593;
      }
      $1598 = $current_frame_pointer;
      $use_count780 = (($1598) + 8|0);
      $1599 = HEAP32[$use_count780>>2]|0;
      $dec781 = (($1599) + -1)|0;
      HEAP32[$use_count780>>2] = $dec781;
      $1600 = $current_frame_pointer;
      _EF_free($1600);
      $1601 = $temp_frame;
      $current_frame_pointer = $1601;
      break;
     }
     case 10:  {
      $1606 = $pc;
      $1607 = $1606;
      $1608 = HEAP32[$1607>>2]|0;
      $1609 = (($1606) + 4)|0;
      $1610 = $1609;
      $1611 = HEAP32[$1610>>2]|0;
      $1612 = (_i64Add(($1608|0),($1611|0),1,0)|0);
      $1613 = tempRet0;
      $1614 = $pc;
      $1615 = $1614;
      HEAP32[$1615>>2] = $1612;
      $1616 = (($1614) + 4)|0;
      $1617 = $1616;
      HEAP32[$1617>>2] = $1613;
      $1618 = $param_num;
      $conv788 = $1618 << 24 >> 24;
      if ((($conv788|0) == 2)) {
       $1726 = $current_frame_pointer;
       $length893 = (($1726) + 4|0);
       $1727 = HEAP32[$length893>>2]|0;
       $sub894 = (($1727) - 2)|0;
       $1728 = $current_frame_pointer;
       $1729 = HEAP32[$1728>>2]|0;
       $arrayidx896 = (($1729) + ($sub894<<2)|0);
       $1730 = HEAP32[$arrayidx896>>2]|0;
       $temp = $1730;
       $1731 = $current_frame_pointer;
       $length897 = (($1731) + 4|0);
       $1732 = HEAP32[$length897>>2]|0;
       $sub898 = (($1732) - 1)|0;
       $1733 = $current_frame_pointer;
       $1734 = HEAP32[$1733>>2]|0;
       $arrayidx900 = (($1734) + ($sub898<<2)|0);
       $1735 = HEAP32[$arrayidx900>>2]|0;
       $temp2 = $1735;
       $1736 = $v;
       $1737 = $temp;
       $1738 = $temp2;
       _Table_setval($1736,$1737,$1738);
       $1739 = $i;
       $1740 = $1739;
       HEAP32[$1740>>2] = 0;
       $1741 = (($1739) + 4)|0;
       $1742 = $1741;
       HEAP32[$1742>>2] = 0;
       while(1) {
        $1743 = $i;
        $1744 = $1743;
        $1745 = HEAP32[$1744>>2]|0;
        $1746 = (($1743) + 4)|0;
        $1747 = $1746;
        $1748 = HEAP32[$1747>>2]|0;
        $1749 = $param_num;
        $1750 = $1749 << 24 >> 24;
        $1751 = ($1750|0)<(0);
        $1752 = $1751 << 31 >> 31;
        $1753 = ($1748>>>0)<($1752>>>0);
        $1754 = ($1748|0)==($1752|0);
        $1755 = ($1745>>>0)<($1750>>>0);
        $1756 = $1754 & $1755;
        $1757 = $1753 | $1756;
        if (!($1757)) {
         break;
        }
        $1758 = $current_frame_pointer;
        $length906 = (($1758) + 4|0);
        $1759 = HEAP32[$length906>>2]|0;
        $sub907 = (($1759) - 1)|0;
        $1760 = $current_frame_pointer;
        $1761 = HEAP32[$1760>>2]|0;
        $arrayidx909 = (($1761) + ($sub907<<2)|0);
        $1762 = HEAP32[$arrayidx909>>2]|0;
        $temp = $1762;
        $1763 = $temp;
        $use_count910 = (($1763) + 4|0);
        $1764 = HEAP32[$use_count910>>2]|0;
        $dec911 = (($1764) + -1)|0;
        HEAP32[$use_count910>>2] = $dec911;
        $1765 = $temp;
        _Object_free($1765);
        $1766 = $current_frame_pointer;
        $length912 = (($1766) + 4|0);
        $1767 = HEAP32[$length912>>2]|0;
        $dec913 = (($1767) + -1)|0;
        HEAP32[$length912>>2] = $dec913;
        $1768 = $i;
        $1769 = $1768;
        $1770 = HEAP32[$1769>>2]|0;
        $1771 = (($1768) + 4)|0;
        $1772 = $1771;
        $1773 = HEAP32[$1772>>2]|0;
        $1774 = (_i64Add(($1770|0),($1773|0),1,0)|0);
        $1775 = tempRet0;
        $1776 = $i;
        $1777 = $1776;
        HEAP32[$1777>>2] = $1774;
        $1778 = (($1776) + 4)|0;
        $1779 = $1778;
        HEAP32[$1779>>2] = $1775;
       }
       $1780 = $current_frame_pointer;
       $use_count917 = (($1780) + 8|0);
       $1781 = HEAP32[$use_count917>>2]|0;
       $dec918 = (($1781) + -1)|0;
       HEAP32[$use_count917>>2] = $dec918;
       $1782 = $current_frame_pointer;
       _EF_free($1782);
       $1783 = $frames_list_length;
       $dec919 = (($1783) + -1)<<16>>16;
       $frames_list_length = $dec919;
       $1784 = $frames_list_length;
       $conv920 = $1784 << 16 >> 16;
       $sub921 = (($conv920) - 1)|0;
       $arrayidx922 = (($frames_list) + ($sub921<<2)|0);
       $1785 = HEAP32[$arrayidx922>>2]|0;
       $current_frame_pointer = $1785;
       $1786 = $v;
       _Object_free($1786);
       continue L22;
      } else if (!((($conv788|0) == 1))) {
       label = 147;
       break L22;
      }
      $1619 = $current_frame_pointer;
      $length790 = (($1619) + 4|0);
      $1620 = HEAP32[$length790>>2]|0;
      $sub791 = (($1620) - 1)|0;
      $1621 = $current_frame_pointer;
      $1622 = HEAP32[$1621>>2]|0;
      $arrayidx793 = (($1622) + ($sub791<<2)|0);
      $1623 = HEAP32[$arrayidx793>>2]|0;
      $temp = $1623;
      $1624 = $v;
      $temp2 = $1624;
      L143: while(1) {
       $1625 = $temp;
       $data794 = (($1625) + 8|0);
       $1626 = HEAP32[$data794>>2]|0;
       $1627 = $v;
       $data797 = (($1627) + 8|0);
       $1628 = $data797;
       $1629 = $1628;
       $1630 = HEAP32[$1629>>2]|0;
       $1631 = (($1628) + 4)|0;
       $1632 = $1631;
       $1633 = HEAP32[$1632>>2]|0;
       $1634 = (_hash($1626,$1630,$1633)|0);
       $1635 = tempRet0;
       $1636 = $hash_val;
       $1637 = $1636;
       HEAP32[$1637>>2] = $1634;
       $1638 = (($1636) + 4)|0;
       $1639 = $1638;
       HEAP32[$1639>>2] = $1635;
       $1640 = $hash_val;
       $1641 = $1640;
       $1642 = HEAP32[$1641>>2]|0;
       $1643 = (($1640) + 4)|0;
       $1644 = $1643;
       $1645 = HEAP32[$1644>>2]|0;
       $1646 = $v;
       $data802 = (($1646) + 8|0);
       $vec804 = (($data802) + 16|0);
       $1647 = HEAP32[$vec804>>2]|0;
       $arrayidx805 = (($1647) + ($1642<<2)|0);
       $1648 = HEAP32[$arrayidx805>>2]|0;
       $table_pairs = $1648;
       while(1) {
        $1649 = $table_pairs;
        $cmp807 = ($1649|0)!=(0|0);
        if (!($cmp807)) {
         break;
        }
        $1650 = $table_pairs;
        $1651 = HEAP32[$1650>>2]|0;
        $1652 = $temp;
        $cmp811 = ($1651|0)==($1652|0);
        if ($cmp811) {
         label = 128;
         break L143;
        }
        $1653 = $temp;
        $data814 = (($1653) + 8|0);
        $1654 = HEAP32[$data814>>2]|0;
        $1655 = $table_pairs;
        $1656 = HEAP32[$1655>>2]|0;
        $data818 = (($1656) + 8|0);
        $1657 = HEAP32[$data818>>2]|0;
        $call821 = (_strcmp($1654,$1657)|0);
        $cmp822 = ($call821|0)==(0);
        if ($cmp822) {
         label = 128;
         break L143;
        }
        $1660 = $table_pairs;
        $next827 = (($1660) + 8|0);
        $1661 = HEAP32[$next827>>2]|0;
        $table_pairs = $1661;
       }
       $1662 = $v;
       $data829 = (($1662) + 8|0);
       $proto = (($data829) + 20|0);
       $1663 = HEAP32[$proto>>2]|0;
       $1664 = HEAP32[40>>2]|0;
       $cmp831 = ($1663|0)==($1664|0);
       if ($cmp831) {
        label = 131;
        break;
       }
       $1666 = $v;
       $data835 = (($1666) + 8|0);
       $proto837 = (($data835) + 20|0);
       $1667 = HEAP32[$proto837>>2]|0;
       $v = $1667;
      }
      if ((label|0) == 128) {
       label = 0;
       $1658 = $table_pairs;
       $value825 = (($1658) + 4|0);
       $1659 = HEAP32[$value825>>2]|0;
       $accumulator = $1659;
      }
      else if ((label|0) == 131) {
       label = 0;
       $1665 = HEAP32[40>>2]|0;
       $accumulator = $1665;
      }
      $1668 = $temp;
      $use_count839 = (($1668) + 4|0);
      $1669 = HEAP32[$use_count839>>2]|0;
      $dec840 = (($1669) + -1)|0;
      HEAP32[$use_count839>>2] = $dec840;
      $1670 = $temp;
      _Object_free($1670);
      $1671 = $current_frame_pointer;
      $length841 = (($1671) + 4|0);
      $1672 = HEAP32[$length841>>2]|0;
      $dec842 = (($1672) + -1)|0;
      HEAP32[$length841>>2] = $dec842;
      $1673 = $current_frame_pointer;
      $use_count843 = (($1673) + 8|0);
      $1674 = HEAP32[$use_count843>>2]|0;
      $dec844 = (($1674) + -1)|0;
      HEAP32[$use_count843>>2] = $dec844;
      $1675 = $current_frame_pointer;
      _EF_free($1675);
      $1676 = $frames_list_length;
      $dec845 = (($1676) + -1)<<16>>16;
      $frames_list_length = $dec845;
      $1677 = $frames_list_length;
      $conv846 = $1677 << 16 >> 16;
      $sub847 = (($conv846) - 1)|0;
      $arrayidx848 = (($frames_list) + ($sub847<<2)|0);
      $1678 = HEAP32[$arrayidx848>>2]|0;
      $current_frame_pointer = $1678;
      $1679 = $pc;
      $1680 = $1679;
      $1681 = HEAP32[$1680>>2]|0;
      $1682 = (($1679) + 4)|0;
      $1683 = $1682;
      $1684 = HEAP32[$1683>>2]|0;
      $1685 = $instructions;
      $arrayidx850 = (($1685) + ($1681<<1)|0);
      $1686 = HEAP16[$arrayidx850>>1]|0;
      $conv851 = $1686&65535;
      $cmp852 = ($conv851|0)==(20480);
      if ($cmp852) {
       $1687 = $accumulator;
       $1688 = HEAP32[$1687>>2]|0;
       $cmp856 = ($1688|0)==(6);
       if ($cmp856) {
        $1689 = $accumulator;
        $1690 = HEAP32[$1689>>2]|0;
        $cmp860 = ($1690|0)==(6);
        if ($cmp860) {
         $1691 = $accumulator;
         $data863 = (($1691) + 8|0);
         $frame_size865 = (($data863) + 20|0);
         $1692 = HEAP8[$frame_size865>>0]|0;
         $conv866 = $1692&255;
         $call867 = (_EF_init_with_size($conv866)|0);
         $current_frame_pointer = $call867;
        } else {
         $1693 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
         $current_frame_pointer = $1693;
        }
        $1694 = $current_frame_pointer;
        $1695 = $frames_list_length;
        $idxprom870 = $1695 << 16 >> 16;
        $arrayidx871 = (($frames_list) + ($idxprom870<<2)|0);
        HEAP32[$arrayidx871>>2] = $1694;
        $1696 = $frames_list_length;
        $conv872 = $1696 << 16 >> 16;
        $add873 = (($conv872) + 1)|0;
        $conv874 = $add873&65535;
        $frames_list_length = $conv874;
        $1697 = $current_frame_pointer;
        $use_count875 = (($1697) + 8|0);
        $1698 = HEAP32[$use_count875>>2]|0;
        $inc876 = (($1698) + 1)|0;
        HEAP32[$use_count875>>2] = $inc876;
        $1699 = $accumulator;
        $1700 = $functions_list_length;
        $idxprom877 = $1700 << 16 >> 16;
        $arrayidx878 = (($functions_list) + ($idxprom877<<2)|0);
        HEAP32[$arrayidx878>>2] = $1699;
        $1701 = $functions_list_length;
        $inc879 = (($1701) + 1)<<16>>16;
        $functions_list_length = $inc879;
        $1702 = $accumulator;
        $use_count880 = (($1702) + 4|0);
        $1703 = HEAP32[$use_count880>>2]|0;
        $inc881 = (($1703) + 1)|0;
        HEAP32[$use_count880>>2] = $inc881;
        $1704 = $temp2;
        $1705 = $current_frame_pointer;
        $length882 = (($1705) + 4|0);
        $1706 = HEAP32[$length882>>2]|0;
        $1707 = $current_frame_pointer;
        $1708 = HEAP32[$1707>>2]|0;
        $arrayidx884 = (($1708) + ($1706<<2)|0);
        HEAP32[$arrayidx884>>2] = $1704;
        $1709 = $current_frame_pointer;
        $length885 = (($1709) + 4|0);
        $1710 = HEAP32[$length885>>2]|0;
        $inc886 = (($1710) + 1)|0;
        HEAP32[$length885>>2] = $inc886;
        $1711 = $temp2;
        $use_count887 = (($1711) + 4|0);
        $1712 = HEAP32[$use_count887>>2]|0;
        $inc888 = (($1712) + 1)|0;
        HEAP32[$use_count887>>2] = $inc888;
        $1713 = $pc;
        $1714 = $1713;
        $1715 = HEAP32[$1714>>2]|0;
        $1716 = (($1713) + 4)|0;
        $1717 = $1716;
        $1718 = HEAP32[$1717>>2]|0;
        $1719 = (_i64Add(($1715|0),($1718|0),1,0)|0);
        $1720 = tempRet0;
        $1721 = $pc;
        $1722 = $1721;
        HEAP32[$1722>>2] = $1719;
        $1723 = (($1721) + 4)|0;
        $1724 = $1723;
        HEAP32[$1724>>2] = $1720;
        continue L22;
       }
      }
      $1725 = $temp2;
      _Object_free($1725);
      continue L22;
      break;
     }
     default: {
      label = 148;
      break L22;
     }
     }
    } while(0);
    if ((label|0) == 46) {
     label = 0;
     $804 = $accumulator;
     $use_count319 = (($804) + 4|0);
     $805 = HEAP32[$use_count319>>2]|0;
     $inc320 = (($805) + 1)|0;
     HEAP32[$use_count319>>2] = $inc320;
     $806 = $i;
     $807 = $806;
     HEAP32[$807>>2] = 0;
     $808 = (($806) + 4)|0;
     $809 = $808;
     HEAP32[$809>>2] = 0;
     while(1) {
      $810 = $i;
      $811 = $810;
      $812 = HEAP32[$811>>2]|0;
      $813 = (($810) + 4)|0;
      $814 = $813;
      $815 = HEAP32[$814>>2]|0;
      $816 = $param_num;
      $817 = $816 << 24 >> 24;
      $818 = ($817|0)<(0);
      $819 = $818 << 31 >> 31;
      $820 = ($815>>>0)<($819>>>0);
      $821 = ($815|0)==($819|0);
      $822 = ($812>>>0)<($817>>>0);
      $823 = $821 & $822;
      $824 = $820 | $823;
      if (!($824)) {
       break;
      }
      $825 = $current_frame_pointer;
      $length324 = (($825) + 4|0);
      $826 = HEAP32[$length324>>2]|0;
      $sub325 = (($826) - 1)|0;
      $827 = $current_frame_pointer;
      $828 = HEAP32[$827>>2]|0;
      $arrayidx327 = (($828) + ($sub325<<2)|0);
      $829 = HEAP32[$arrayidx327>>2]|0;
      $temp = $829;
      $830 = $temp;
      $use_count328 = (($830) + 4|0);
      $831 = HEAP32[$use_count328>>2]|0;
      $dec329 = (($831) + -1)|0;
      HEAP32[$use_count328>>2] = $dec329;
      $832 = $temp;
      _Object_free($832);
      $833 = $current_frame_pointer;
      $length330 = (($833) + 4|0);
      $834 = HEAP32[$length330>>2]|0;
      $sub331 = (($834) - 1)|0;
      $835 = $current_frame_pointer;
      $836 = HEAP32[$835>>2]|0;
      $arrayidx333 = (($836) + ($sub331<<2)|0);
      HEAP32[$arrayidx333>>2] = 0;
      $837 = $current_frame_pointer;
      $length334 = (($837) + 4|0);
      $838 = HEAP32[$length334>>2]|0;
      $dec335 = (($838) + -1)|0;
      HEAP32[$length334>>2] = $dec335;
      $839 = $i;
      $840 = $839;
      $841 = HEAP32[$840>>2]|0;
      $842 = (($839) + 4)|0;
      $843 = $842;
      $844 = HEAP32[$843>>2]|0;
      $845 = (_i64Add(($841|0),($844|0),1,0)|0);
      $846 = tempRet0;
      $847 = $i;
      $848 = $847;
      HEAP32[$848>>2] = $845;
      $849 = (($847) + 4)|0;
      $850 = $849;
      HEAP32[$850>>2] = $846;
     }
     $851 = $accumulator;
     $use_count337 = (($851) + 4|0);
     $852 = HEAP32[$use_count337>>2]|0;
     $dec338 = (($852) + -1)|0;
     HEAP32[$use_count337>>2] = $dec338;
     $853 = $pc;
     $854 = $853;
     $855 = HEAP32[$854>>2]|0;
     $856 = (($853) + 4)|0;
     $857 = $856;
     $858 = HEAP32[$857>>2]|0;
     $859 = (_i64Add(($855|0),($858|0),1,0)|0);
     $860 = tempRet0;
     $861 = $pc;
     $862 = $861;
     HEAP32[$862>>2] = $859;
     $863 = (($861) + 4)|0;
     $864 = $863;
     HEAP32[$864>>2] = $860;
     $865 = $current_frame_pointer;
     $use_count340 = (($865) + 8|0);
     $866 = HEAP32[$use_count340>>2]|0;
     $dec341 = (($866) + -1)|0;
     HEAP32[$use_count340>>2] = $dec341;
     $867 = $current_frame_pointer;
     _EF_free($867);
     $868 = $frames_list_length;
     $dec342 = (($868) + -1)<<16>>16;
     $frames_list_length = $dec342;
     $869 = $frames_list_length;
     $conv343 = $869 << 16 >> 16;
     $sub344 = (($conv343) - 1)|0;
     $arrayidx345 = (($frames_list) + ($sub344<<2)|0);
     $870 = HEAP32[$arrayidx345>>2]|0;
     $current_frame_pointer = $870;
     $871 = $v;
     _Object_free($871);
     continue L22;
    }
    $1247 = $v;
    $data543 = (($1247) + 8|0);
    $1248 = HEAP8[$data543>>0]|0;
    $conv546 = $1248&255;
    $required_param_num = $conv546;
    $1249 = $v;
    $data547 = (($1249) + 8|0);
    $variadic_place549 = (($data547) + 1|0);
    $1250 = HEAP8[$variadic_place549>>0]|0;
    $conv550 = $1250 << 24 >> 24;
    $required_variadic_place = $conv550;
    $1251 = $v;
    $data551 = (($1251) + 8|0);
    $start_pc553 = (($data551) + 8|0);
    $1252 = $start_pc553;
    $1253 = $1252;
    $1254 = HEAP32[$1253>>2]|0;
    $1255 = (($1252) + 4)|0;
    $1256 = $1255;
    $1257 = HEAP32[$1256>>2]|0;
    $1258 = $start_pc$addr;
    $1259 = $1258;
    HEAP32[$1259>>2] = $1254;
    $1260 = (($1258) + 4)|0;
    $1261 = $1260;
    HEAP32[$1261>>2] = $1257;
    $1262 = $v;
    $data554 = (($1262) + 8|0);
    $env556 = (($data554) + 16|0);
    $1263 = HEAP32[$env556>>2]|0;
    $1264 = $current_frame_pointer;
    $call557 = (_copyEnvironmentAndPushFrame($1263,$1264)|0);
    $new_env = $call557;
    $1265 = $required_variadic_place;
    $cmp558 = ($1265|0)==(-1);
    if ($cmp558) {
     $1266 = $param_num;
     $conv561 = $1266 << 24 >> 24;
     $sub562 = (($conv561) - 1)|0;
     $1267 = $required_param_num;
     $cmp563 = ($sub562|0)>($1267|0);
     if ($cmp563) {
      label = 80;
      break L22;
     }
    }
    $1270 = $required_variadic_place;
    $cmp568 = ($1270|0)!=(-1);
    if ($cmp568) {
     $1271 = HEAP32[40>>2]|0;
     $v = $1271;
     $1272 = $current_frame_pointer;
     $length571 = (($1272) + 4|0);
     $1273 = HEAP32[$length571>>2]|0;
     $sub572 = (($1273) - 1)|0;
     $m = $sub572;
     while(1) {
      $1274 = $m;
      $1275 = $required_variadic_place;
      $cmp574 = ($1274|0)>=($1275|0);
      if (!($cmp574)) {
       break;
      }
      $1276 = $m;
      $1277 = $current_frame_pointer;
      $1278 = HEAP32[$1277>>2]|0;
      $arrayidx578 = (($1278) + ($1276<<2)|0);
      $1279 = HEAP32[$arrayidx578>>2]|0;
      $use_count579 = (($1279) + 4|0);
      $1280 = HEAP32[$use_count579>>2]|0;
      $dec580 = (($1280) + -1)|0;
      HEAP32[$use_count579>>2] = $dec580;
      $1281 = $m;
      $1282 = $current_frame_pointer;
      $1283 = HEAP32[$1282>>2]|0;
      $arrayidx582 = (($1283) + ($1281<<2)|0);
      $1284 = HEAP32[$arrayidx582>>2]|0;
      $1285 = $v;
      $call583 = (_cons($1284,$1285)|0);
      $v = $call583;
      $1286 = $m;
      $sub585 = (($1286) - 1)|0;
      $m = $sub585;
     }
     $1287 = $v;
     $1288 = $required_variadic_place;
     $1289 = $current_frame_pointer;
     $1290 = HEAP32[$1289>>2]|0;
     $arrayidx588 = (($1290) + ($1288<<2)|0);
     HEAP32[$arrayidx588>>2] = $1287;
     $1291 = $v;
     $use_count589 = (($1291) + 4|0);
     $1292 = HEAP32[$use_count589>>2]|0;
     $inc590 = (($1292) + 1)|0;
     HEAP32[$use_count589>>2] = $inc590;
     $1293 = $required_variadic_place;
     $add591 = (($1293) + 1)|0;
     $1294 = $current_frame_pointer;
     $length592 = (($1294) + 4|0);
     HEAP32[$length592>>2] = $add591;
    }
    $1295 = $current_frame_pointer;
    $length594 = (($1295) + 4|0);
    $1296 = HEAP32[$length594>>2]|0;
    $1297 = $required_param_num;
    $cmp595 = ($1296|0)<($1297|0);
    if ($cmp595) {
     $1298 = $param_num;
     $1299 = $1298 << 24 >> 24;
     $1300 = ($1299|0)<(0);
     $1301 = $1300 << 31 >> 31;
     $1302 = $i;
     $1303 = $1302;
     HEAP32[$1303>>2] = $1299;
     $1304 = (($1302) + 4)|0;
     $1305 = $1304;
     HEAP32[$1305>>2] = $1301;
     while(1) {
      $1306 = $i;
      $1307 = $1306;
      $1308 = HEAP32[$1307>>2]|0;
      $1309 = (($1306) + 4)|0;
      $1310 = $1309;
      $1311 = HEAP32[$1310>>2]|0;
      $1312 = $required_param_num;
      $1313 = ($1312|0)<(0);
      $1314 = $1313 << 31 >> 31;
      $1315 = ($1311>>>0)<($1314>>>0);
      $1316 = ($1311|0)==($1314|0);
      $1317 = ($1308>>>0)<($1312>>>0);
      $1318 = $1316 & $1317;
      $1319 = $1315 | $1318;
      if (!($1319)) {
       break;
      }
      $1320 = HEAP32[40>>2]|0;
      $1321 = $i;
      $1322 = $1321;
      $1323 = HEAP32[$1322>>2]|0;
      $1324 = (($1321) + 4)|0;
      $1325 = $1324;
      $1326 = HEAP32[$1325>>2]|0;
      $1327 = $current_frame_pointer;
      $1328 = HEAP32[$1327>>2]|0;
      $arrayidx606 = (($1328) + ($1323<<2)|0);
      HEAP32[$arrayidx606>>2] = $1320;
      $1329 = HEAP32[40>>2]|0;
      $use_count607 = (($1329) + 4|0);
      $1330 = HEAP32[$use_count607>>2]|0;
      $inc608 = (($1330) + 1)|0;
      HEAP32[$use_count607>>2] = $inc608;
      $1331 = $i;
      $1332 = $1331;
      $1333 = HEAP32[$1332>>2]|0;
      $1334 = (($1331) + 4)|0;
      $1335 = $1334;
      $1336 = HEAP32[$1335>>2]|0;
      $1337 = (_i64Add(($1333|0),($1336|0),1,0)|0);
      $1338 = tempRet0;
      $1339 = $i;
      $1340 = $1339;
      HEAP32[$1340>>2] = $1337;
      $1341 = (($1339) + 4)|0;
      $1342 = $1341;
      HEAP32[$1342>>2] = $1338;
     }
     $1343 = $required_param_num;
     $1344 = $param_num;
     $conv612 = $1344 << 24 >> 24;
     $sub613 = (($1343) - ($conv612))|0;
     $1345 = $current_frame_pointer;
     $length614 = (($1345) + 4|0);
     $1346 = HEAP32[$length614>>2]|0;
     $add615 = (($1346) + ($sub613))|0;
     HEAP32[$length614>>2] = $add615;
    }
    $1347 = $pc;
    $1348 = $1347;
    $1349 = HEAP32[$1348>>2]|0;
    $1350 = (($1347) + 4)|0;
    $1351 = $1350;
    $1352 = HEAP32[$1351>>2]|0;
    $1353 = (_i64Add(($1349|0),($1352|0),1,0)|0);
    $1354 = tempRet0;
    $1355 = $continuation_return_pc_length;
    $idxprom618 = $1355 << 16 >> 16;
    $arrayidx619 = (($continuation_return_pc) + ($idxprom618<<3)|0);
    $1356 = $arrayidx619;
    $1357 = $1356;
    HEAP32[$1357>>2] = $1353;
    $1358 = (($1356) + 4)|0;
    $1359 = $1358;
    HEAP32[$1359>>2] = $1354;
    $1360 = $continuation_return_pc_length;
    $inc620 = (($1360) + 1)<<16>>16;
    $continuation_return_pc_length = $inc620;
    $1361 = $env$addr;
    $1362 = $continuation_env_length;
    $idxprom621 = $1362 << 16 >> 16;
    $arrayidx622 = (($continuation_env) + ($idxprom621<<2)|0);
    HEAP32[$arrayidx622>>2] = $1361;
    $1363 = $continuation_env_length;
    $inc623 = (($1363) + 1)<<16>>16;
    $continuation_env_length = $inc623;
    $1364 = $new_env;
    $env$addr = $1364;
    $1365 = $start_pc$addr;
    $1366 = $1365;
    $1367 = HEAP32[$1366>>2]|0;
    $1368 = (($1365) + 4)|0;
    $1369 = $1368;
    $1370 = HEAP32[$1369>>2]|0;
    $1371 = $pc;
    $1372 = $1371;
    HEAP32[$1372>>2] = $1367;
    $1373 = (($1371) + 4)|0;
    $1374 = $1373;
    HEAP32[$1374>>2] = $1370;
    $1375 = $current_frame_pointer;
    $use_count624 = (($1375) + 8|0);
    $1376 = HEAP32[$use_count624>>2]|0;
    $dec625 = (($1376) + -1)|0;
    HEAP32[$use_count624>>2] = $dec625;
    $1377 = $current_frame_pointer;
    _EF_free($1377);
    $1378 = $frames_list_length;
    $dec626 = (($1378) + -1)<<16>>16;
    $frames_list_length = $dec626;
    $1379 = $frames_list_length;
    $conv627 = $1379 << 16 >> 16;
    $sub628 = (($conv627) - 1)|0;
    $arrayidx629 = (($frames_list) + ($sub628<<2)|0);
    $1380 = HEAP32[$arrayidx629>>2]|0;
    $current_frame_pointer = $1380;
    $1381 = $v;
    _Object_free($1381);
    continue L22;
    break;
   }
   case 149: {
    label = 0;
    $1791 = $pc;
    $1792 = $1791;
    $1793 = HEAP32[$1792>>2]|0;
    $1794 = (($1791) + 4)|0;
    $1795 = $1794;
    $1796 = HEAP32[$1795>>2]|0;
    $1797 = $pc;
    $1798 = $1797;
    $1799 = HEAP32[$1798>>2]|0;
    $1800 = (($1797) + 4)|0;
    $1801 = $1800;
    $1802 = HEAP32[$1801>>2]|0;
    $1803 = (_i64Add(($1799|0),($1802|0),1,0)|0);
    $1804 = tempRet0;
    $1805 = $instructions;
    $arrayidx930 = (($1805) + ($1803<<1)|0);
    $1806 = HEAP16[$arrayidx930>>1]|0;
    $conv931 = $1806&65535;
    $shl932 = $conv931 << 16;
    $1807 = $pc;
    $1808 = $1807;
    $1809 = HEAP32[$1808>>2]|0;
    $1810 = (($1807) + 4)|0;
    $1811 = $1810;
    $1812 = HEAP32[$1811>>2]|0;
    $1813 = (_i64Add(($1809|0),($1812|0),2,0)|0);
    $1814 = tempRet0;
    $1815 = $instructions;
    $arrayidx935 = (($1815) + ($1813<<1)|0);
    $1816 = HEAP16[$arrayidx935>>1]|0;
    $conv936 = $1816&65535;
    $or937 = $shl932 | $conv936;
    $1817 = ($or937|0)<(0);
    $1818 = $1817 << 31 >> 31;
    $1819 = (_i64Add(($1793|0),($1796|0),($or937|0),($1818|0))|0);
    $1820 = tempRet0;
    $1821 = $pc;
    $1822 = $1821;
    HEAP32[$1822>>2] = $1819;
    $1823 = (($1821) + 4)|0;
    $1824 = $1823;
    HEAP32[$1824>>2] = $1820;
    continue L22;
    break;
   }
   case 150: {
    label = 0;
    $1825 = $accumulator;
    $1826 = HEAP32[$1825>>2]|0;
    $cmp942 = ($1826|0)==(0);
    if ($cmp942) {
     $1827 = $pc;
     $1828 = $1827;
     $1829 = HEAP32[$1828>>2]|0;
     $1830 = (($1827) + 4)|0;
     $1831 = $1830;
     $1832 = HEAP32[$1831>>2]|0;
     $1833 = $pc;
     $1834 = $1833;
     $1835 = HEAP32[$1834>>2]|0;
     $1836 = (($1833) + 4)|0;
     $1837 = $1836;
     $1838 = HEAP32[$1837>>2]|0;
     $1839 = (_i64Add(($1835|0),($1838|0),1,0)|0);
     $1840 = tempRet0;
     $1841 = $instructions;
     $arrayidx947 = (($1841) + ($1839<<1)|0);
     $1842 = HEAP16[$arrayidx947>>1]|0;
     $1843 = $1842&65535;
     $1844 = (_i64Add(($1829|0),($1832|0),($1843|0),0)|0);
     $1845 = tempRet0;
     $1846 = $pc;
     $1847 = $1846;
     HEAP32[$1847>>2] = $1844;
     $1848 = (($1846) + 4)|0;
     $1849 = $1848;
     HEAP32[$1849>>2] = $1845;
     continue L22;
    } else {
     $1850 = $pc;
     $1851 = $1850;
     $1852 = HEAP32[$1851>>2]|0;
     $1853 = (($1850) + 4)|0;
     $1854 = $1853;
     $1855 = HEAP32[$1854>>2]|0;
     $1856 = (_i64Add(($1852|0),($1855|0),2,0)|0);
     $1857 = tempRet0;
     $1858 = $pc;
     $1859 = $1858;
     HEAP32[$1859>>2] = $1856;
     $1860 = (($1858) + 4)|0;
     $1861 = $1860;
     HEAP32[$1861>>2] = $1857;
     continue L22;
    }
    break;
   }
   case 153: {
    label = 0;
    $1862 = $pc;
    $1863 = $1862;
    $1864 = HEAP32[$1863>>2]|0;
    $1865 = (($1862) + 4)|0;
    $1866 = $1865;
    $1867 = HEAP32[$1866>>2]|0;
    $1868 = (_i64Add(($1864|0),($1867|0),1,0)|0);
    $1869 = tempRet0;
    $1870 = $instructions;
    $arrayidx955 = (($1870) + ($1868<<1)|0);
    $1871 = HEAP16[$arrayidx955>>1]|0;
    $idxprom956 = $1871&65535;
    $1872 = $env$addr;
    $length957 = (($1872) + 4|0);
    $1873 = HEAP32[$length957>>2]|0;
    $sub958 = (($1873) - 1)|0;
    $1874 = $env$addr;
    $1875 = HEAP32[$1874>>2]|0;
    $arrayidx960 = (($1875) + ($sub958<<2)|0);
    $1876 = HEAP32[$arrayidx960>>2]|0;
    $1877 = HEAP32[$1876>>2]|0;
    $arrayidx962 = (($1877) + ($idxprom956<<2)|0);
    $1878 = HEAP32[$arrayidx962>>2]|0;
    $temp = $1878;
    $1879 = $accumulator;
    $use_count963 = (($1879) + 4|0);
    $1880 = HEAP32[$use_count963>>2]|0;
    $inc964 = (($1880) + 1)|0;
    HEAP32[$use_count963>>2] = $inc964;
    $1881 = $temp;
    $tobool965 = ($1881|0)!=(0|0);
    if ($tobool965) {
     $1882 = $temp;
     $use_count967 = (($1882) + 4|0);
     $1883 = HEAP32[$use_count967>>2]|0;
     $dec968 = (($1883) + -1)|0;
     HEAP32[$use_count967>>2] = $dec968;
     $1884 = $temp;
     _Object_free($1884);
    } else {
     $1885 = $env$addr;
     $length970 = (($1885) + 4|0);
     $1886 = HEAP32[$length970>>2]|0;
     $sub971 = (($1886) - 1)|0;
     $1887 = $env$addr;
     $1888 = HEAP32[$1887>>2]|0;
     $arrayidx973 = (($1888) + ($sub971<<2)|0);
     $1889 = HEAP32[$arrayidx973>>2]|0;
     $length974 = (($1889) + 4|0);
     $1890 = HEAP32[$length974>>2]|0;
     $inc975 = (($1890) + 1)|0;
     HEAP32[$length974>>2] = $inc975;
    }
    $1891 = $accumulator;
    $1892 = $pc;
    $1893 = $1892;
    $1894 = HEAP32[$1893>>2]|0;
    $1895 = (($1892) + 4)|0;
    $1896 = $1895;
    $1897 = HEAP32[$1896>>2]|0;
    $1898 = (_i64Add(($1894|0),($1897|0),1,0)|0);
    $1899 = tempRet0;
    $1900 = $instructions;
    $arrayidx979 = (($1900) + ($1898<<1)|0);
    $1901 = HEAP16[$arrayidx979>>1]|0;
    $idxprom980 = $1901&65535;
    $1902 = $env$addr;
    $length981 = (($1902) + 4|0);
    $1903 = HEAP32[$length981>>2]|0;
    $sub982 = (($1903) - 1)|0;
    $1904 = $env$addr;
    $1905 = HEAP32[$1904>>2]|0;
    $arrayidx984 = (($1905) + ($sub982<<2)|0);
    $1906 = HEAP32[$arrayidx984>>2]|0;
    $1907 = HEAP32[$1906>>2]|0;
    $arrayidx986 = (($1907) + ($idxprom980<<2)|0);
    HEAP32[$arrayidx986>>2] = $1891;
    $1908 = $pc;
    $1909 = $1908;
    $1910 = HEAP32[$1909>>2]|0;
    $1911 = (($1908) + 4)|0;
    $1912 = $1911;
    $1913 = HEAP32[$1912>>2]|0;
    $1914 = (_i64Add(($1910|0),($1913|0),2,0)|0);
    $1915 = tempRet0;
    $1916 = $pc;
    $1917 = $1916;
    HEAP32[$1917>>2] = $1914;
    $1918 = (($1916) + 4)|0;
    $1919 = $1918;
    HEAP32[$1919>>2] = $1915;
    $1920 = HEAP32[40>>2]|0;
    $accumulator = $1920;
    continue L22;
    break;
   }
   case 157: {
    label = 0;
    $1921 = $pc;
    $1922 = $1921;
    $1923 = HEAP32[$1922>>2]|0;
    $1924 = (($1921) + 4)|0;
    $1925 = $1924;
    $1926 = HEAP32[$1925>>2]|0;
    $1927 = $instructions;
    $arrayidx990 = (($1927) + ($1923<<1)|0);
    $1928 = HEAP16[$arrayidx990>>1]|0;
    $conv991 = $1928&65535;
    $and992 = $conv991 & 4095;
    $conv993 = $and992&65535;
    $offset = $conv993;
    $1929 = $offset;
    $idxprom994 = $1929&65535;
    $1930 = $env$addr;
    $length995 = (($1930) + 4|0);
    $1931 = HEAP32[$length995>>2]|0;
    $sub996 = (($1931) - 1)|0;
    $1932 = $env$addr;
    $1933 = HEAP32[$1932>>2]|0;
    $arrayidx998 = (($1933) + ($sub996<<2)|0);
    $1934 = HEAP32[$arrayidx998>>2]|0;
    $1935 = HEAP32[$1934>>2]|0;
    $arrayidx1000 = (($1935) + ($idxprom994<<2)|0);
    $1936 = HEAP32[$arrayidx1000>>2]|0;
    $temp = $1936;
    $1937 = $accumulator;
    $use_count1001 = (($1937) + 4|0);
    $1938 = HEAP32[$use_count1001>>2]|0;
    $inc1002 = (($1938) + 1)|0;
    HEAP32[$use_count1001>>2] = $inc1002;
    $1939 = $temp;
    $tobool1003 = ($1939|0)!=(0|0);
    if ($tobool1003) {
     $1940 = $temp;
     $use_count1005 = (($1940) + 4|0);
     $1941 = HEAP32[$use_count1005>>2]|0;
     $dec1006 = (($1941) + -1)|0;
     HEAP32[$use_count1005>>2] = $dec1006;
     $1942 = $temp;
     _Object_free($1942);
    } else {
     $1943 = $env$addr;
     $length1008 = (($1943) + 4|0);
     $1944 = HEAP32[$length1008>>2]|0;
     $sub1009 = (($1944) - 1)|0;
     $1945 = $env$addr;
     $1946 = HEAP32[$1945>>2]|0;
     $arrayidx1011 = (($1946) + ($sub1009<<2)|0);
     $1947 = HEAP32[$arrayidx1011>>2]|0;
     $length1012 = (($1947) + 4|0);
     $1948 = HEAP32[$length1012>>2]|0;
     $inc1013 = (($1948) + 1)|0;
     HEAP32[$length1012>>2] = $inc1013;
    }
    $1949 = $accumulator;
    $1950 = $offset;
    $idxprom1015 = $1950&65535;
    $1951 = $env$addr;
    $length1016 = (($1951) + 4|0);
    $1952 = HEAP32[$length1016>>2]|0;
    $sub1017 = (($1952) - 1)|0;
    $1953 = $env$addr;
    $1954 = HEAP32[$1953>>2]|0;
    $arrayidx1019 = (($1954) + ($sub1017<<2)|0);
    $1955 = HEAP32[$arrayidx1019>>2]|0;
    $1956 = HEAP32[$1955>>2]|0;
    $arrayidx1021 = (($1956) + ($idxprom1015<<2)|0);
    HEAP32[$arrayidx1021>>2] = $1949;
    $1957 = $pc;
    $1958 = $1957;
    $1959 = HEAP32[$1958>>2]|0;
    $1960 = (($1957) + 4)|0;
    $1961 = $1960;
    $1962 = HEAP32[$1961>>2]|0;
    $1963 = (_i64Add(($1959|0),($1962|0),1,0)|0);
    $1964 = tempRet0;
    $1965 = $pc;
    $1966 = $1965;
    HEAP32[$1966>>2] = $1963;
    $1967 = (($1965) + 4)|0;
    $1968 = $1967;
    HEAP32[$1968>>2] = $1964;
    $1969 = HEAP32[40>>2]|0;
    $accumulator = $1969;
    continue L22;
    break;
   }
   case 161: {
    label = 0;
    continue L22;
    break;
   }
   case 162: {
    label = 0;
    continue L22;
    break;
   }
   case 174: {
    label = 0;
    $2124 = HEAP32[40>>2]|0;
    $accumulator = $2124;
    $2125 = $v;
    _Object_free($2125);
    $2126 = $pc;
    $2127 = $2126;
    $2128 = HEAP32[$2127>>2]|0;
    $2129 = (($2126) + 4)|0;
    $2130 = $2129;
    $2131 = HEAP32[$2130>>2]|0;
    $2132 = (_i64Add(($2128|0),($2131|0),5,0)|0);
    $2133 = tempRet0;
    $2134 = $pc;
    $2135 = $2134;
    HEAP32[$2135>>2] = $2132;
    $2136 = (($2134) + 4)|0;
    $2137 = $2136;
    HEAP32[$2137>>2] = $2133;
    continue L22;
    break;
   }
   case 175: {
    label = 0;
    $2138 = $accumulator;
    $use_count1096 = (($2138) + 4|0);
    $2139 = HEAP32[$use_count1096>>2]|0;
    $inc1097 = (($2139) + 1)|0;
    HEAP32[$use_count1096>>2] = $inc1097;
    $2140 = $accumulator;
    $2141 = $pc;
    $2142 = $2141;
    $2143 = HEAP32[$2142>>2]|0;
    $2144 = (($2141) + 4)|0;
    $2145 = $2144;
    $2146 = HEAP32[$2145>>2]|0;
    $2147 = (_i64Add(($2143|0),($2146|0),1,0)|0);
    $2148 = tempRet0;
    $2149 = $instructions;
    $arrayidx1100 = (($2149) + ($2147<<1)|0);
    $2150 = HEAP16[$arrayidx1100>>1]|0;
    $idxprom1101 = $2150&65535;
    $2151 = $global_frame;
    $2152 = HEAP32[$2151>>2]|0;
    $arrayidx1103 = (($2152) + ($idxprom1101<<2)|0);
    HEAP32[$arrayidx1103>>2] = $2140;
    $2153 = $global_frame;
    $length1104 = (($2153) + 4|0);
    $2154 = HEAP32[$length1104>>2]|0;
    $inc1105 = (($2154) + 1)|0;
    HEAP32[$length1104>>2] = $inc1105;
    $2155 = $pc;
    $2156 = $2155;
    $2157 = HEAP32[$2156>>2]|0;
    $2158 = (($2155) + 4)|0;
    $2159 = $2158;
    $2160 = HEAP32[$2159>>2]|0;
    $2161 = (_i64Add(($2157|0),($2160|0),3,0)|0);
    $2162 = tempRet0;
    $2163 = $pc;
    $2164 = $2163;
    HEAP32[$2164>>2] = $2161;
    $2165 = (($2163) + 4)|0;
    $2166 = $2165;
    HEAP32[$2166>>2] = $2162;
    continue L22;
    break;
   }
  }
 }
 switch (label|0) {
  case 22: {
   (_printf((8264|0),($vararg_buffer1|0))|0);
   $325 = $value_index;
   $conv91 = $325&65535;
   $326 = $frame_index;
   $idxprom92 = $326&65535;
   $327 = $env$addr;
   $328 = HEAP32[$327>>2]|0;
   $arrayidx94 = (($328) + ($idxprom92<<2)|0);
   $329 = HEAP32[$arrayidx94>>2]|0;
   $length95 = (($329) + 4|0);
   $330 = HEAP32[$length95>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $conv91;
   $vararg_ptr5 = (($vararg_buffer3) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $330;
   (_printf((8360|0),($vararg_buffer3|0))|0);
   _exit(0);
   // unreachable;
   break;
  }
  case 32: {
   (_printf((8400|0),($vararg_buffer6|0))|0);
   $562 = $accumulator;
   _Object_free($562);
   $563 = HEAP32[40>>2]|0;
   $accumulator = $563;
   $2170 = $accumulator;
   $use_count1111 = (($2170) + 4|0);
   $2171 = HEAP32[$use_count1111>>2]|0;
   $add1112 = (($2171) + 1)|0;
   HEAP32[$use_count1111>>2] = $add1112;
   $2172 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   $use_count1113 = (($2172) + 8|0);
   $2173 = HEAP32[$use_count1113>>2]|0;
   $dec1114 = (($2173) + -1)|0;
   HEAP32[$use_count1113>>2] = $dec1114;
   $2174 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   _EF_free($2174);
   $2175 = $accumulator;
   $use_count1115 = (($2175) + 4|0);
   $2176 = HEAP32[$use_count1115>>2]|0;
   $sub1116 = (($2176) - 1)|0;
   HEAP32[$use_count1115>>2] = $sub1116;
   $2177 = $accumulator;
   STACKTOP = sp;return ($2177|0);
   break;
  }
  case 41: {
   (_printf((8432|0),($vararg_buffer8|0))|0);
   $712 = $accumulator;
   _Object_free($712);
   $713 = HEAP32[40>>2]|0;
   $accumulator = $713;
   $2170 = $accumulator;
   $use_count1111 = (($2170) + 4|0);
   $2171 = HEAP32[$use_count1111>>2]|0;
   $add1112 = (($2171) + 1)|0;
   HEAP32[$use_count1111>>2] = $add1112;
   $2172 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   $use_count1113 = (($2172) + 8|0);
   $2173 = HEAP32[$use_count1113>>2]|0;
   $dec1114 = (($2173) + -1)|0;
   HEAP32[$use_count1113>>2] = $dec1114;
   $2174 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   _EF_free($2174);
   $2175 = $accumulator;
   $use_count1115 = (($2175) + 4|0);
   $2176 = HEAP32[$use_count1115>>2]|0;
   $sub1116 = (($2176) - 1)|0;
   HEAP32[$use_count1115>>2] = $sub1116;
   $2177 = $accumulator;
   STACKTOP = sp;return ($2177|0);
   break;
  }
  case 58: {
   (_printf((8456|0),($vararg_buffer10|0))|0);
   $1021 = $accumulator;
   _Object_free($1021);
   $1022 = HEAP32[40>>2]|0;
   $accumulator = $1022;
   $2170 = $accumulator;
   $use_count1111 = (($2170) + 4|0);
   $2171 = HEAP32[$use_count1111>>2]|0;
   $add1112 = (($2171) + 1)|0;
   HEAP32[$use_count1111>>2] = $add1112;
   $2172 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   $use_count1113 = (($2172) + 8|0);
   $2173 = HEAP32[$use_count1113>>2]|0;
   $dec1114 = (($2173) + -1)|0;
   HEAP32[$use_count1113>>2] = $dec1114;
   $2174 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   _EF_free($2174);
   $2175 = $accumulator;
   $use_count1115 = (($2175) + 4|0);
   $2176 = HEAP32[$use_count1115>>2]|0;
   $sub1116 = (($2176) - 1)|0;
   HEAP32[$use_count1115>>2] = $sub1116;
   $2177 = $accumulator;
   STACKTOP = sp;return ($2177|0);
   break;
  }
  case 76: {
   (_printf((8496|0),($vararg_buffer12|0))|0);
   $1245 = $accumulator;
   _Object_free($1245);
   $1246 = HEAP32[40>>2]|0;
   $accumulator = $1246;
   $2170 = $accumulator;
   $use_count1111 = (($2170) + 4|0);
   $2171 = HEAP32[$use_count1111>>2]|0;
   $add1112 = (($2171) + 1)|0;
   HEAP32[$use_count1111>>2] = $add1112;
   $2172 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   $use_count1113 = (($2172) + 8|0);
   $2173 = HEAP32[$use_count1113>>2]|0;
   $dec1114 = (($2173) + -1)|0;
   HEAP32[$use_count1113>>2] = $dec1114;
   $2174 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   _EF_free($2174);
   $2175 = $accumulator;
   $use_count1115 = (($2175) + 4|0);
   $2176 = HEAP32[$use_count1115>>2]|0;
   $sub1116 = (($2176) - 1)|0;
   HEAP32[$use_count1115>>2] = $sub1116;
   $2177 = $accumulator;
   STACKTOP = sp;return ($2177|0);
   break;
  }
  case 80: {
   (_printf((8528|0),($vararg_buffer14|0))|0);
   $1268 = $accumulator;
   _Object_free($1268);
   $1269 = HEAP32[40>>2]|0;
   $accumulator = $1269;
   $2170 = $accumulator;
   $use_count1111 = (($2170) + 4|0);
   $2171 = HEAP32[$use_count1111>>2]|0;
   $add1112 = (($2171) + 1)|0;
   HEAP32[$use_count1111>>2] = $add1112;
   $2172 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   $use_count1113 = (($2172) + 8|0);
   $2173 = HEAP32[$use_count1113>>2]|0;
   $dec1114 = (($2173) + -1)|0;
   HEAP32[$use_count1113>>2] = $dec1114;
   $2174 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   _EF_free($2174);
   $2175 = $accumulator;
   $use_count1115 = (($2175) + 4|0);
   $2176 = HEAP32[$use_count1115>>2]|0;
   $sub1116 = (($2176) - 1)|0;
   HEAP32[$use_count1115>>2] = $sub1116;
   $2177 = $accumulator;
   STACKTOP = sp;return ($2177|0);
   break;
  }
  case 98: {
   (_printf((8568|0),($vararg_buffer16|0))|0);
   $1408 = $accumulator;
   _Object_free($1408);
   $1409 = HEAP32[40>>2]|0;
   $accumulator = $1409;
   $2170 = $accumulator;
   $use_count1111 = (($2170) + 4|0);
   $2171 = HEAP32[$use_count1111>>2]|0;
   $add1112 = (($2171) + 1)|0;
   HEAP32[$use_count1111>>2] = $add1112;
   $2172 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   $use_count1113 = (($2172) + 8|0);
   $2173 = HEAP32[$use_count1113>>2]|0;
   $dec1114 = (($2173) + -1)|0;
   HEAP32[$use_count1113>>2] = $dec1114;
   $2174 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   _EF_free($2174);
   $2175 = $accumulator;
   $use_count1115 = (($2175) + 4|0);
   $2176 = HEAP32[$use_count1115>>2]|0;
   $sub1116 = (($2176) - 1)|0;
   HEAP32[$use_count1115>>2] = $sub1116;
   $2177 = $accumulator;
   STACKTOP = sp;return ($2177|0);
   break;
  }
  case 120: {
   (_printf((8616|0),($vararg_buffer18|0))|0);
   $1602 = $accumulator;
   _Object_free($1602);
   $1603 = HEAP32[40>>2]|0;
   $accumulator = $1603;
   $2170 = $accumulator;
   $use_count1111 = (($2170) + 4|0);
   $2171 = HEAP32[$use_count1111>>2]|0;
   $add1112 = (($2171) + 1)|0;
   HEAP32[$use_count1111>>2] = $add1112;
   $2172 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   $use_count1113 = (($2172) + 8|0);
   $2173 = HEAP32[$use_count1113>>2]|0;
   $dec1114 = (($2173) + -1)|0;
   HEAP32[$use_count1113>>2] = $dec1114;
   $2174 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   _EF_free($2174);
   $2175 = $accumulator;
   $use_count1115 = (($2175) + 4|0);
   $2176 = HEAP32[$use_count1115>>2]|0;
   $sub1116 = (($2176) - 1)|0;
   HEAP32[$use_count1115>>2] = $sub1116;
   $2177 = $accumulator;
   STACKTOP = sp;return ($2177|0);
   break;
  }
  case 121: {
   (_printf((8640|0),($vararg_buffer20|0))|0);
   $1604 = $accumulator;
   _Object_free($1604);
   $1605 = HEAP32[40>>2]|0;
   $accumulator = $1605;
   $2170 = $accumulator;
   $use_count1111 = (($2170) + 4|0);
   $2171 = HEAP32[$use_count1111>>2]|0;
   $add1112 = (($2171) + 1)|0;
   HEAP32[$use_count1111>>2] = $add1112;
   $2172 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   $use_count1113 = (($2172) + 8|0);
   $2173 = HEAP32[$use_count1113>>2]|0;
   $dec1114 = (($2173) + -1)|0;
   HEAP32[$use_count1113>>2] = $dec1114;
   $2174 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   _EF_free($2174);
   $2175 = $accumulator;
   $use_count1115 = (($2175) + 4|0);
   $2176 = HEAP32[$use_count1115>>2]|0;
   $sub1116 = (($2176) - 1)|0;
   HEAP32[$use_count1115>>2] = $sub1116;
   $2177 = $accumulator;
   STACKTOP = sp;return ($2177|0);
   break;
  }
  case 147: {
   (_printf((8456|0),($vararg_buffer22|0))|0);
   $1787 = $accumulator;
   _Object_free($1787);
   $1788 = HEAP32[40>>2]|0;
   $accumulator = $1788;
   $2170 = $accumulator;
   $use_count1111 = (($2170) + 4|0);
   $2171 = HEAP32[$use_count1111>>2]|0;
   $add1112 = (($2171) + 1)|0;
   HEAP32[$use_count1111>>2] = $add1112;
   $2172 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   $use_count1113 = (($2172) + 8|0);
   $2173 = HEAP32[$use_count1113>>2]|0;
   $dec1114 = (($2173) + -1)|0;
   HEAP32[$use_count1113>>2] = $dec1114;
   $2174 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   _EF_free($2174);
   $2175 = $accumulator;
   $use_count1115 = (($2175) + 4|0);
   $2176 = HEAP32[$use_count1115>>2]|0;
   $sub1116 = (($2176) - 1)|0;
   HEAP32[$use_count1115>>2] = $sub1116;
   $2177 = $accumulator;
   STACKTOP = sp;return ($2177|0);
   break;
  }
  case 148: {
   (_printf((8664|0),($vararg_buffer24|0))|0);
   $1789 = $accumulator;
   _Object_free($1789);
   $1790 = HEAP32[40>>2]|0;
   $accumulator = $1790;
   $2170 = $accumulator;
   $use_count1111 = (($2170) + 4|0);
   $2171 = HEAP32[$use_count1111>>2]|0;
   $add1112 = (($2171) + 1)|0;
   HEAP32[$use_count1111>>2] = $add1112;
   $2172 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   $use_count1113 = (($2172) + 8|0);
   $2173 = HEAP32[$use_count1113>>2]|0;
   $dec1114 = (($2173) + -1)|0;
   HEAP32[$use_count1113>>2] = $dec1114;
   $2174 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   _EF_free($2174);
   $2175 = $accumulator;
   $use_count1115 = (($2175) + 4|0);
   $2176 = HEAP32[$use_count1115>>2]|0;
   $sub1116 = (($2176) - 1)|0;
   HEAP32[$use_count1115>>2] = $sub1116;
   $2177 = $accumulator;
   STACKTOP = sp;return ($2177|0);
   break;
  }
  case 176: {
   $2167 = $opcode;
   $conv1108 = $2167 << 16 >> 16;
   HEAP32[$vararg_buffer26>>2] = $conv1108;
   (_printf((8688|0),($vararg_buffer26|0))|0);
   $2168 = $accumulator;
   _Object_free($2168);
   $2169 = HEAP32[40>>2]|0;
   $accumulator = $2169;
   $2170 = $accumulator;
   $use_count1111 = (($2170) + 4|0);
   $2171 = HEAP32[$use_count1111>>2]|0;
   $add1112 = (($2171) + 1)|0;
   HEAP32[$use_count1111>>2] = $add1112;
   $2172 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   $use_count1113 = (($2172) + 8|0);
   $2173 = HEAP32[$use_count1113>>2]|0;
   $dec1114 = (($2173) + -1)|0;
   HEAP32[$use_count1113>>2] = $dec1114;
   $2174 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   _EF_free($2174);
   $2175 = $accumulator;
   $use_count1115 = (($2175) + 4|0);
   $2176 = HEAP32[$use_count1115>>2]|0;
   $sub1116 = (($2176) - 1)|0;
   HEAP32[$use_count1115>>2] = $sub1116;
   $2177 = $accumulator;
   STACKTOP = sp;return ($2177|0);
   break;
  }
  case 177: {
   $2170 = $accumulator;
   $use_count1111 = (($2170) + 4|0);
   $2171 = HEAP32[$use_count1111>>2]|0;
   $add1112 = (($2171) + 1)|0;
   HEAP32[$use_count1111>>2] = $add1112;
   $2172 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   $use_count1113 = (($2172) + 8|0);
   $2173 = HEAP32[$use_count1113>>2]|0;
   $dec1114 = (($2173) + -1)|0;
   HEAP32[$use_count1113>>2] = $dec1114;
   $2174 = $BUILTIN_PRIMITIVE_PROCEDURE_STACK;
   _EF_free($2174);
   $2175 = $accumulator;
   $use_count1115 = (($2175) + 4|0);
   $2176 = HEAP32[$use_count1115>>2]|0;
   $sub1116 = (($2176) - 1)|0;
   HEAP32[$use_count1115>>2] = $sub1116;
   $2177 = $accumulator;
   STACKTOP = sp;return ($2177|0);
   break;
  }
 }
 return 0|0;
}
function _list_append($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $a$addr = 0, $b$addr = 0, $call = 0, $call3 = 0, $cdr = 0, $cmp = 0, $data = 0, $data1 = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a$addr = $a;
 $b$addr = $b;
 $0 = $a$addr;
 $1 = HEAP32[40>>2]|0;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  $2 = $b$addr;
  $retval = $2;
  $8 = $retval;
  STACKTOP = sp;return ($8|0);
 } else {
  $3 = $a$addr;
  $data = (($3) + 8|0);
  $4 = HEAP32[$data>>2]|0;
  $5 = $a$addr;
  $data1 = (($5) + 8|0);
  $cdr = (($data1) + 4|0);
  $6 = HEAP32[$cdr>>2]|0;
  $7 = $b$addr;
  $call = (_list_append($6,$7)|0);
  $call3 = (_cons($4,$call)|0);
  $retval = $call3;
  $8 = $retval;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _compiler($insts,$l,$vt,$tail_call_flag,$parent_func_name,$function_for_compilation,$env,$mt,$module) {
 $insts = $insts|0;
 $l = $l|0;
 $vt = $vt|0;
 $tail_call_flag = $tail_call_flag|0;
 $parent_func_name = $parent_func_name|0;
 $function_for_compilation = $function_for_compilation|0;
 $env = $env|0;
 $mt = $mt|0;
 $module = $module|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0.0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $abs_path = 0;
 var $abs_path773 = 0, $add = 0, $add1173 = 0, $add1362 = 0, $add1387 = 0, $add1397 = 0, $add1550 = 0, $add70 = 0, $add76 = 0, $alter = 0, $and1625 = 0, $and631 = 0, $and64 = 0, $and73 = 0, $arrayidx1008 = 0, $arrayidx1019 = 0, $arrayidx1025 = 0, $arrayidx1060 = 0, $arrayidx1071 = 0, $arrayidx1087 = 0;
 var $arrayidx1100 = 0, $arrayidx1163 = 0, $arrayidx1178 = 0, $arrayidx1224 = 0, $arrayidx1231 = 0, $arrayidx1236 = 0, $arrayidx1242 = 0, $arrayidx1248 = 0, $arrayidx1256 = 0, $arrayidx1258 = 0, $arrayidx1265 = 0, $arrayidx1267 = 0, $arrayidx1271 = 0, $arrayidx1273 = 0, $arrayidx1281 = 0, $arrayidx1286 = 0, $arrayidx1291 = 0, $arrayidx1295 = 0, $arrayidx1299 = 0, $arrayidx1306 = 0;
 var $arrayidx1308 = 0, $arrayidx1335 = 0, $arrayidx1346 = 0, $arrayidx1352 = 0, $arrayidx1355 = 0, $arrayidx1359 = 0, $arrayidx1369 = 0, $arrayidx1395 = 0, $arrayidx1417 = 0, $arrayidx1420 = 0, $arrayidx1422 = 0, $arrayidx1435 = 0, $arrayidx1450 = 0, $arrayidx1480 = 0, $arrayidx1492 = 0, $arrayidx1514 = 0, $arrayidx1536 = 0, $arrayidx1610 = 0, $arrayidx1620 = 0, $arrayidx418 = 0;
 var $arrayidx420 = 0, $arrayidx437 = 0, $arrayidx444 = 0, $arrayidx452 = 0, $arrayidx461 = 0, $arrayidx482 = 0, $arrayidx518 = 0, $arrayidx62 = 0, $arrayidx626 = 0, $arrayidx634 = 0, $arrayidx67 = 0, $arrayidx703 = 0, $arrayidx71 = 0, $arrayidx710 = 0, $arrayidx717 = 0, $arrayidx839 = 0, $arrayidx846 = 0, $arrayidx853 = 0, $arrayidx893 = 0, $arrayidx900 = 0;
 var $arrayidx907 = 0, $arrayidx97 = 0, $assignments = 0, $bf$ashr = 0, $bf$cast = 0, $bf$clear = 0, $bf$load = 0, $bf$load1502 = 0, $bf$shl = 0, $call = 0, $call1001 = 0, $call1009 = 0, $call102 = 0, $call1027 = 0, $call1036 = 0, $call1061 = 0, $call108 = 0, $call1084 = 0, $call1085 = 0, $call1086 = 0;
 var $call1101 = 0, $call1111 = 0, $call1112 = 0, $call1113 = 0, $call1114 = 0, $call1117 = 0, $call1121 = 0, $call1131 = 0, $call1132 = 0, $call1147 = 0, $call1156 = 0, $call1207 = 0, $call1315 = 0, $call1347 = 0, $call1366 = 0, $call1367 = 0, $call1383 = 0, $call1391 = 0, $call1392 = 0, $call1426 = 0;
 var $call1481 = 0, $call1482 = 0, $call1483 = 0, $call159 = 0, $call1629 = 0, $call181 = 0, $call187 = 0, $call204 = 0, $call211 = 0, $call218 = 0, $call220 = 0, $call242 = 0, $call248 = 0, $call266 = 0, $call273 = 0, $call280 = 0, $call282 = 0, $call299 = 0, $call306 = 0, $call313 = 0;
 var $call320 = 0, $call327 = 0, $call334 = 0, $call341 = 0, $call37 = 0, $call391 = 0, $call392 = 0, $call40 = 0, $call421 = 0, $call429 = 0, $call462 = 0, $call470 = 0, $call497 = 0, $call507 = 0, $call522 = 0, $call534 = 0, $call560 = 0, $call590 = 0, $call603 = 0, $call613 = 0;
 var $call621 = 0, $call637 = 0, $call663 = 0, $call667 = 0, $call694 = 0, $call696 = 0, $call734 = 0, $call740 = 0, $call744 = 0, $call748 = 0, $call752 = 0, $call758 = 0, $call761 = 0, $call770 = 0, $call798 = 0, $call802 = 0, $call829 = 0, $call832 = 0, $call873 = 0, $call882 = 0;
 var $call921 = 0, $call926 = 0, $call933 = 0, $call937 = 0, $call943 = 0, $call949 = 0, $call950 = 0, $call953 = 0, $cdr = 0, $cdr1033 = 0, $cdr1042 = 0, $cdr1080 = 0, $cdr1090 = 0, $cdr1093 = 0, $cdr1107 = 0, $cdr1110 = 0, $cdr1127 = 0, $cdr1166 = 0, $cdr1188 = 0, $cdr1213 = 0;
 var $cdr1216 = 0, $cdr1321 = 0, $cdr1327 = 0, $cdr1330 = 0, $cdr141 = 0, $cdr1425 = 0, $cdr144 = 0, $cdr1441 = 0, $cdr1454 = 0, $cdr1601 = 0, $cdr1614 = 0, $cdr165 = 0, $cdr226 = 0, $cdr288 = 0, $cdr352 = 0, $cdr355 = 0, $cdr363 = 0, $cdr366 = 0, $cdr369 = 0, $cdr375 = 0;
 var $cdr378 = 0, $cdr384 = 0, $cdr387 = 0, $cdr390 = 0, $cdr396 = 0, $cdr399 = 0, $cdr540 = 0, $cdr550 = 0, $cdr556 = 0, $cdr559 = 0, $cdr565 = 0, $cdr571 = 0, $cdr574 = 0, $cdr643 = 0, $cdr653 = 0, $cdr670 = 0, $cdr676 = 0, $cdr687 = 0, $cdr778 = 0, $cdr788 = 0;
 var $cdr805 = 0, $cdr811 = 0, $cdr822 = 0, $cdr959 = 0, $cdr965 = 0, $cdr968 = 0, $cdr974 = 0, $cdr977 = 0, $cdr980 = 0, $cdr988 = 0, $cdr991 = 0, $cdr994 = 0, $chunk = 0, $clauses = 0, $clauses1356 = 0, $clauses1360 = 0, $cmp1028 = 0, $cmp103 = 0, $cmp1037 = 0, $cmp1047 = 0;
 var $cmp1062 = 0, $cmp109 = 0, $cmp1097 = 0, $cmp1118 = 0, $cmp1122 = 0, $cmp1135 = 0, $cmp1143 = 0, $cmp1157 = 0, $cmp116 = 0, $cmp1192 = 0, $cmp1200 = 0, $cmp1225 = 0, $cmp1250 = 0, $cmp1259 = 0, $cmp1302 = 0, $cmp1316 = 0, $cmp1339 = 0, $cmp1348 = 0, $cmp1376 = 0, $cmp1403 = 0;
 var $cmp1414 = 0, $cmp1444 = 0, $cmp1456 = 0, $cmp1467 = 0, $cmp1471 = 0, $cmp1477 = 0, $cmp1506 = 0, $cmp1519 = 0, $cmp1523 = 0, $cmp1528 = 0, $cmp1543 = 0, $cmp1561 = 0, $cmp1565 = 0, $cmp1570 = 0, $cmp160 = 0, $cmp1604 = 0, $cmp1617 = 0, $cmp170 = 0, $cmp174 = 0, $cmp178 = 0;
 var $cmp184 = 0, $cmp195 = 0, $cmp221 = 0, $cmp231 = 0, $cmp235 = 0, $cmp239 = 0, $cmp245 = 0, $cmp256 = 0, $cmp283 = 0, $cmp293 = 0, $cmp300 = 0, $cmp307 = 0, $cmp31 = 0, $cmp314 = 0, $cmp321 = 0, $cmp328 = 0, $cmp335 = 0, $cmp342 = 0, $cmp357 = 0, $cmp370 = 0;
 var $cmp406 = 0, $cmp41 = 0, $cmp412 = 0, $cmp422 = 0, $cmp448 = 0, $cmp453 = 0, $cmp463 = 0, $cmp476 = 0, $cmp488 = 0, $cmp498 = 0, $cmp508 = 0, $cmp524 = 0, $cmp529 = 0, $cmp535 = 0, $cmp545 = 0, $cmp583 = 0, $cmp594 = 0, $cmp604 = 0, $cmp614 = 0, $cmp623 = 0;
 var $cmp638 = 0, $cmp648 = 0, $cmp664 = 0, $cmp705 = 0, $cmp712 = 0, $cmp719 = 0, $cmp735 = 0, $cmp753 = 0, $cmp762 = 0, $cmp766 = 0, $cmp77 = 0, $cmp783 = 0, $cmp799 = 0, $cmp841 = 0, $cmp848 = 0, $cmp855 = 0, $cmp86 = 0, $cmp876 = 0, $cmp883 = 0, $cmp895 = 0;
 var $cmp902 = 0, $cmp909 = 0, $cmp922 = 0, $cmp944 = 0, $cmp954 = 0, $cmp982 = 0, $cond = 0, $cond1198 = 0, $cond1202 = 0, $conseq = 0, $content = 0, $content930 = 0, $conv1204 = 0, $conv1238 = 0, $conv1464 = 0, $conv1489 = 0, $conv1495 = 0, $conv1549 = 0, $conv1551 = 0, $conv1555 = 0;
 var $conv1556 = 0, $conv1576 = 0, $conv1577 = 0, $conv1627 = 0, $conv194 = 0, $conv255 = 0, $conv30 = 0, $conv411 = 0, $conv439 = 0, $conv521 = 0, $conv523 = 0, $conv622 = 0, $conv627 = 0, $conv63 = 0, $conv633 = 0, $conv635 = 0, $conv65 = 0, $conv68 = 0, $conv704 = 0, $conv711 = 0;
 var $conv718 = 0, $conv72 = 0, $conv74 = 0, $conv840 = 0, $conv847 = 0, $conv854 = 0, $conv874 = 0, $conv875 = 0, $conv894 = 0, $conv901 = 0, $conv908 = 0, $conv96 = 0, $conv98 = 0, $count_params = 0, $counter = 0, $data = 0, $data1031 = 0, $data1040 = 0, $data1043 = 0, $data1049 = 0;
 var $data105 = 0, $data1052 = 0, $data1075 = 0, $data1078 = 0, $data1081 = 0, $data1088 = 0, $data1091 = 0, $data1105 = 0, $data1108 = 0, $data1125 = 0, $data1128 = 0, $data1139 = 0, $data114 = 0, $data1150 = 0, $data1153 = 0, $data1164 = 0, $data1167 = 0, $data1170 = 0, $data1179 = 0, $data1182 = 0;
 var $data1186 = 0, $data119 = 0, $data1211 = 0, $data1214 = 0, $data122 = 0, $data128 = 0, $data130 = 0, $data1319 = 0, $data1322 = 0, $data1325 = 0, $data1328 = 0, $data133 = 0, $data1342 = 0, $data1363 = 0, $data1388 = 0, $data139 = 0, $data1399 = 0, $data14 = 0, $data1406 = 0, $data1409 = 0;
 var $data142 = 0, $data1423 = 0, $data1439 = 0, $data1447 = 0, $data145 = 0, $data1452 = 0, $data148 = 0, $data153 = 0, $data156 = 0, $data1593 = 0, $data1599 = 0, $data1607 = 0, $data1612 = 0, $data163 = 0, $data166 = 0, $data190 = 0, $data198 = 0, $data206 = 0, $data224 = 0, $data227 = 0;
 var $data251 = 0, $data259 = 0, $data268 = 0, $data28 = 0, $data286 = 0, $data289 = 0, $data296 = 0, $data303 = 0, $data310 = 0, $data317 = 0, $data324 = 0, $data331 = 0, $data338 = 0, $data34 = 0, $data345 = 0, $data350 = 0, $data353 = 0, $data361 = 0, $data364 = 0, $data367 = 0;
 var $data373 = 0, $data376 = 0, $data379 = 0, $data382 = 0, $data385 = 0, $data388 = 0, $data394 = 0, $data397 = 0, $data400 = 0, $data415 = 0, $data425 = 0, $data44 = 0, $data457 = 0, $data466 = 0, $data48 = 0, $data483 = 0, $data491 = 0, $data494 = 0, $data501 = 0, $data504 = 0;
 var $data511 = 0, $data538 = 0, $data541 = 0, $data548 = 0, $data551 = 0, $data554 = 0, $data557 = 0, $data563 = 0, $data566 = 0, $data569 = 0, $data572 = 0, $data575 = 0, $data578 = 0, $data586 = 0, $data597 = 0, $data600 = 0, $data607 = 0, $data610 = 0, $data617 = 0, $data641 = 0;
 var $data644 = 0, $data651 = 0, $data654 = 0, $data657 = 0, $data660 = 0, $data668 = 0, $data671 = 0, $data674 = 0, $data677 = 0, $data680 = 0, $data685 = 0, $data688 = 0, $data691 = 0, $data776 = 0, $data779 = 0, $data786 = 0, $data789 = 0, $data792 = 0, $data795 = 0, $data803 = 0;
 var $data806 = 0, $data809 = 0, $data812 = 0, $data815 = 0, $data82 = 0, $data820 = 0, $data823 = 0, $data826 = 0, $data89 = 0, $data957 = 0, $data960 = 0, $data963 = 0, $data966 = 0, $data969 = 0, $data972 = 0, $data975 = 0, $data978 = 0, $data986 = 0, $data989 = 0, $data99 = 0;
 var $data992 = 0, $data995 = 0, $dec = 0, $dec1103 = 0, $dec1357 = 0, $dec1372 = 0, $dec1485 = 0, $def_array = 0, $double_ = 0, $env$addr = 0, $expand = 0, $file = 0, $file880 = 0, $file_name = 0, $file_name775 = 0, $file_name_length = 0, $file_name_length831 = 0, $file_name_ptr = 0, $file_name_ptr774 = 0, $find_end = 0;
 var $frame = 0, $frame1331 = 0, $function_ = 0, $function_for_compilation$addr = 0, $i = 0, $idxprom = 0, $inc1067 = 0, $inc1094 = 0, $inc1185 = 0, $inc1276 = 0, $inc1310 = 0, $inc1451 = 0, $inc1474 = 0, $inc1491 = 0, $inc1497 = 0, $inc1499 = 0, $inc1516 = 0, $inc1538 = 0, $inc1558 = 0, $inc1579 = 0;
 var $inc1611 = 0, $inc1623 = 0, $inc433 = 0, $index1 = 0, $index2 = 0, $index3 = 0, $insts$addr = 0, $int_ = 0, $is_def = 0, $is_tail_call = 0, $is_tail_call1501 = 0, $j = 0, $jump_steps = 0, $l$addr = 0, $length = 0, $length1000 = 0, $length1003 = 0, $length1011 = 0, $length1160 = 0, $length1175 = 0;
 var $length1205 = 0, $length1206 = 0, $length1218 = 0, $length1233 = 0, $length1237 = 0, $length1245 = 0, $length1249 = 0, $length1253 = 0, $length1262 = 0, $length1268 = 0, $length1278 = 0, $length1283 = 0, $length1288 = 0, $length1292 = 0, $length1296 = 0, $length1301 = 0, $length1332 = 0, $length1336 = 0, $length1374 = 0, $length1393 = 0;
 var $length1396 = 0, $length1432 = 0, $length1436 = 0, $length1461 = 0, $length1510 = 0, $length1532 = 0, $length1546 = 0, $length1552 = 0, $length1573 = 0, $length1583 = 0, $length200 = 0, $length261 = 0, $length405 = 0, $length410 = 0, $length435 = 0, $length438 = 0, $length441 = 0, $length445 = 0, $length479 = 0, $length515 = 0;
 var $length519 = 0, $length528 = 0, $length765 = 0, $module$addr = 0, $mt$addr = 0, $mt_ = 0, $mul1380 = 0, $new_module = 0, $o = 0, $o942 = 0, $offset = 0, $offset628 = 0, $offset869 = 0, $or = 0, $or1191 = 0, $or1199 = 0, $or1203 = 0, $or1463 = 0, $or1488 = 0, $or1494 = 0;
 var $or1548 = 0, $or1554 = 0, $or1575 = 0, $or1626 = 0, $or632 = 0, $or95 = 0, $p = 0, $p1438 = 0, $p1598 = 0, $p941 = 0, $param_num1437 = 0, $param_num1597 = 0, $params = 0, $params1442 = 0, $params1602 = 0, $parent_func_name$addr = 0, $retval = 0, $s = 0, $set_index = 0, $shl = 0;
 var $shl1190 = 0, $shl1196 = 0, $shl69 = 0, $size = 0, $size1375 = 0, $size1379 = 0, $size1382 = 0, $size932 = 0, $start_index = 0, $start_pc = 0, $start_pc1208 = 0, $start_pc1582 = 0, $string = 0, $sub = 0, $sub1095 = 0, $sub1161 = 0, $sub1176 = 0, $sub1234 = 0, $sub1246 = 0, $sub1254 = 0;
 var $sub1263 = 0, $sub1269 = 0, $sub1279 = 0, $sub1284 = 0, $sub1289 = 0, $sub1293 = 0, $sub1297 = 0, $sub1333 = 0, $sub1337 = 0, $sub1433 = 0, $sub1462 = 0, $sub1475 = 0, $sub1511 = 0, $sub1533 = 0, $sub1547 = 0, $sub1553 = 0, $sub1574 = 0, $sub442 = 0, $sub446 = 0, $sub480 = 0;
 var $sub516 = 0, $sub520 = 0, $tag = 0, $tail_call_flag$addr = 0, $temp = 0, $temp_ = 0, $test = 0, $tobool = 0, $tobool1074 = 0, $tobool1430 = 0, $tobool1503 = 0, $top_frame = 0, $track_index = 0, $unsigned_int_ = 0, $use_count = 0, $use_count1361 = 0, $use_count1386 = 0, $v = 0, $var_existed = 0, $var_name = 0;
 var $var_names1046 = 0, $var_value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer4 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0;
 var $vararg_buffer50 = 0, $vararg_buffer7 = 0, $variadic_place = 0, $variadic_place1209 = 0, $variadic_place1470 = 0, $variadic_place1518 = 0, $variadic_place1560 = 0, $vt$addr = 0, $vt1210 = 0, $vt1509 = 0, $vt1512 = 0, $vt1531 = 0, $vt1534 = 0, $vt_ = 0, $vt_find = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer50 = sp + 64|0;
 $vararg_buffer48 = sp + 32|0;
 $vararg_buffer45 = sp + 48|0;
 $vararg_buffer43 = sp;
 $vararg_buffer41 = sp + 56|0;
 $vararg_buffer38 = sp + 40|0;
 $vararg_buffer35 = sp + 232|0;
 $vararg_buffer32 = sp + 112|0;
 $vararg_buffer30 = sp + 176|0;
 $vararg_buffer28 = sp + 16|0;
 $vararg_buffer25 = sp + 8|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer19 = sp + 88|0;
 $vararg_buffer16 = sp + 96|0;
 $vararg_buffer13 = sp + 104|0;
 $vararg_buffer10 = sp + 240|0;
 $vararg_buffer7 = sp + 120|0;
 $vararg_buffer4 = sp + 128|0;
 $vararg_buffer1 = sp + 136|0;
 $vararg_buffer = sp + 144|0;
 $index1 = sp + 248|0;
 $index2 = sp + 24|0;
 $index3 = sp + 224|0;
 $jump_steps = sp + 216|0;
 $start_pc = sp + 208|0;
 $length = sp + 200|0;
 $vt_find = sp + 288|0;
 $int_ = sp + 192|0;
 $double_ = sp + 184|0;
 $abs_path = sp + 1536|0;
 $file_name = sp + 2304|0;
 $file_name_length = sp + 168|0;
 $size = sp + 160|0;
 $abs_path773 = sp + 2048|0;
 $file_name775 = sp + 1792|0;
 $file_name_length831 = sp + 152|0;
 $size932 = sp + 72|0;
 $var_names1046 = sp + 1000|0;
 $def_array = sp + 1256|0;
 $params1442 = sp + 400|0;
 $params1602 = sp + 664|0;
 $insts$addr = $insts;
 $l$addr = $l;
 $vt$addr = $vt;
 $tail_call_flag$addr = $tail_call_flag;
 $parent_func_name$addr = $parent_func_name;
 $function_for_compilation$addr = $function_for_compilation;
 $env$addr = $env;
 $mt$addr = $mt;
 $module$addr = $module;
 $0 = $l$addr;
 $1 = HEAP32[$0>>2]|0;
 switch ($1|0) {
 case 1:  {
  $3 = $l$addr;
  $data = (($3) + 8|0);
  $4 = $data;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = $int_;
  $11 = $10;
  HEAP32[$11>>2] = $6;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = $9;
  $14 = $int_;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)>(0);
  $21 = ($19|0)==(0);
  $22 = ($16>>>0)>=(0);
  $23 = $21 & $22;
  $24 = $20 | $23;
  if ($24) {
   $25 = $int_;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($25) + 4)|0;
   $29 = $28;
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)<(0);
   $32 = ($30|0)==(0);
   $33 = ($27>>>0)<(250);
   $34 = $32 & $33;
   $35 = $31 | $34;
   if ($35) {
    $36 = $insts$addr;
    _Insts_push($36,9472);
    $37 = $insts$addr;
    $38 = $int_;
    $39 = $38;
    $40 = HEAP32[$39>>2]|0;
    $41 = (($38) + 4)|0;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = $40&65535;
    _Insts_push($37,$44);
    $retval = 0;
    $1758 = $retval;
    STACKTOP = sp;return ($1758|0);
   }
  }
  $45 = $insts$addr;
  _Insts_push($45,8448);
  $46 = $insts$addr;
  $47 = $int_;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = (($47) + 4)|0;
  $51 = $50;
  $52 = HEAP32[$51>>2]|0;
  $53 = -65536 & $52;
  $54 = (_bitshift64Lshr(0,($53|0),48)|0);
  $55 = tempRet0;
  $56 = $54&65535;
  _Insts_push($46,$56);
  $57 = $insts$addr;
  $58 = $int_;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  $61 = (($58) + 4)|0;
  $62 = $61;
  $63 = HEAP32[$62>>2]|0;
  $64 = 65535 & $63;
  $65 = $64&65535;
  _Insts_push($57,$65);
  $66 = $insts$addr;
  $67 = $int_;
  $68 = $67;
  $69 = HEAP32[$68>>2]|0;
  $70 = (($67) + 4)|0;
  $71 = $70;
  $72 = HEAP32[$71>>2]|0;
  $73 = -65536 & $69;
  $74 = (_bitshift64Ashr(($73|0),0,16)|0);
  $75 = tempRet0;
  $76 = $74&65535;
  _Insts_push($66,$76);
  $77 = $insts$addr;
  $78 = $int_;
  $79 = $78;
  $80 = HEAP32[$79>>2]|0;
  $81 = (($78) + 4)|0;
  $82 = $81;
  $83 = HEAP32[$82>>2]|0;
  $84 = 65535 & $80;
  $85 = $84&65535;
  _Insts_push($77,$85);
  $retval = 0;
  $1758 = $retval;
  STACKTOP = sp;return ($1758|0);
  break;
 }
 case 0:  {
  $2 = $insts$addr;
  _Insts_push($2,9216);
  $retval = 0;
  $1758 = $retval;
  STACKTOP = sp;return ($1758|0);
  break;
 }
 case 2:  {
  $86 = $l$addr;
  $data14 = (($86) + 8|0);
  $87 = +HEAPF64[$data14>>3];
  HEAPF64[$double_>>3] = $87;
  $unsigned_int_ = $double_;
  $88 = $insts$addr;
  _Insts_push($88,8704);
  $89 = $insts$addr;
  $90 = $unsigned_int_;
  $91 = $90;
  $92 = $91;
  $93 = HEAP32[$92>>2]|0;
  $94 = (($91) + 4)|0;
  $95 = $94;
  $96 = HEAP32[$95>>2]|0;
  $97 = -65536 & $96;
  $98 = (_bitshift64Lshr(0,($97|0),48)|0);
  $99 = tempRet0;
  $100 = $98&65535;
  _Insts_push($89,$100);
  $101 = $insts$addr;
  $102 = $unsigned_int_;
  $103 = $102;
  $104 = $103;
  $105 = HEAP32[$104>>2]|0;
  $106 = (($103) + 4)|0;
  $107 = $106;
  $108 = HEAP32[$107>>2]|0;
  $109 = 65535 & $108;
  $110 = $109&65535;
  _Insts_push($101,$110);
  $111 = $insts$addr;
  $112 = $unsigned_int_;
  $113 = $112;
  $114 = $113;
  $115 = HEAP32[$114>>2]|0;
  $116 = (($113) + 4)|0;
  $117 = $116;
  $118 = HEAP32[$117>>2]|0;
  $119 = -65536 & $115;
  $120 = (_bitshift64Lshr(($119|0),0,16)|0);
  $121 = tempRet0;
  $122 = $120&65535;
  _Insts_push($111,$122);
  $123 = $insts$addr;
  $124 = $unsigned_int_;
  $125 = $124;
  $126 = $125;
  $127 = HEAP32[$126>>2]|0;
  $128 = (($125) + 4)|0;
  $129 = $128;
  $130 = HEAP32[$129>>2]|0;
  $131 = 65535 & $127;
  $132 = $131&65535;
  _Insts_push($123,$132);
  $retval = 0;
  $1758 = $retval;
  STACKTOP = sp;return ($1758|0);
  break;
 }
 case 5:  {
  $265 = $l$addr;
  $data114 = (($265) + 8|0);
  $266 = HEAP32[$data114>>2]|0;
  $267 = HEAP32[$266>>2]|0;
  $cmp116 = ($267|0)==(1);
  if ($cmp116) {
   $268 = $l$addr;
   $data119 = (($268) + 8|0);
   $269 = HEAP32[$data119>>2]|0;
   $data122 = (($269) + 8|0);
   $270 = $data122;
   $271 = $270;
   $272 = HEAP32[$271>>2]|0;
   $273 = (($270) + 4)|0;
   $274 = $273;
   $275 = HEAP32[$274>>2]|0;
   $276 = ($272|0)==(0);
   $277 = ($275|0)==(0);
   $278 = $276 & $277;
   if ($278) {
    $279 = $insts$addr;
    $280 = $l$addr;
    $data128 = (($280) + 8|0);
    $cdr = (($data128) + 4|0);
    $281 = HEAP32[$cdr>>2]|0;
    $data130 = (($281) + 8|0);
    $282 = HEAP32[$data130>>2]|0;
    $data133 = (($282) + 8|0);
    $283 = $data133;
    $284 = $283;
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + 4)|0;
    $287 = $286;
    $288 = HEAP32[$287>>2]|0;
    $289 = 4095 & $285;
    $290 = 4096 | $289;
    $291 = $290&65535;
    _Insts_push($279,$291);
    $292 = $insts$addr;
    $293 = $l$addr;
    $data139 = (($293) + 8|0);
    $cdr141 = (($data139) + 4|0);
    $294 = HEAP32[$cdr141>>2]|0;
    $data142 = (($294) + 8|0);
    $cdr144 = (($data142) + 4|0);
    $295 = HEAP32[$cdr144>>2]|0;
    $data145 = (($295) + 8|0);
    $296 = HEAP32[$data145>>2]|0;
    $data148 = (($296) + 8|0);
    $297 = $data148;
    $298 = $297;
    $299 = HEAP32[$298>>2]|0;
    $300 = (($297) + 4)|0;
    $301 = $300;
    $302 = HEAP32[$301>>2]|0;
    $303 = $299&65535;
    _Insts_push($292,$303);
    $retval = 0;
    $1758 = $retval;
    STACKTOP = sp;return ($1758|0);
   }
  }
  $304 = $l$addr;
  $data153 = (($304) + 8|0);
  $305 = HEAP32[$data153>>2]|0;
  $data156 = (($305) + 8|0);
  $306 = HEAP32[$data156>>2]|0;
  $tag = $306;
  $307 = $tag;
  $call159 = (_strcmp($307,3128)|0);
  $cmp160 = ($call159|0)==(0);
  if ($cmp160) {
   $308 = $l$addr;
   $data163 = (($308) + 8|0);
   $cdr165 = (($data163) + 4|0);
   $309 = HEAP32[$cdr165>>2]|0;
   $data166 = (($309) + 8|0);
   $310 = HEAP32[$data166>>2]|0;
   $v = $310;
   $311 = $v;
   $312 = HEAP32[$311>>2]|0;
   $cmp170 = ($312|0)==(0);
   if (!($cmp170)) {
    $313 = $v;
    $314 = HEAP32[$313>>2]|0;
    $cmp174 = ($314|0)==(1);
    if (!($cmp174)) {
     $315 = $v;
     $316 = HEAP32[$315>>2]|0;
     $cmp178 = ($316|0)==(2);
     if (!($cmp178)) {
      $326 = $v;
      $327 = HEAP32[$326>>2]|0;
      $cmp184 = ($327|0)==(5);
      if ($cmp184) {
       $328 = $v;
       $call187 = (_quote_list($328)|0);
       $temp = $call187;
       $329 = $insts$addr;
       $330 = $temp;
       $331 = $vt$addr;
       $332 = $tail_call_flag$addr;
       $333 = $parent_func_name$addr;
       $334 = $function_for_compilation$addr;
       $335 = $env$addr;
       $336 = $mt$addr;
       $337 = $module$addr;
       (_compiler($329,$330,$331,$332,$333,$334,$335,$336,$337)|0);
       $338 = $temp;
       _Object_free($338);
       $retval = 0;
       $1758 = $retval;
       STACKTOP = sp;return ($1758|0);
      }
      $339 = $v;
      $data190 = (($339) + 8|0);
      $340 = HEAP32[$data190>>2]|0;
      $341 = HEAP8[$340>>0]|0;
      $conv194 = $341 << 24 >> 24;
      $cmp195 = ($conv194|0)!=(39);
      if ($cmp195) {
       $342 = $v;
       $data198 = (($342) + 8|0);
       $length200 = (($data198) + 8|0);
       $343 = $length200;
       $344 = $343;
       $345 = HEAP32[$344>>2]|0;
       $346 = (($343) + 4)|0;
       $347 = $346;
       $348 = HEAP32[$347>>2]|0;
       $349 = (_i64Add(2,0,($345|0),($348|0))|0);
       $350 = tempRet0;
       $351 = (_i64Add(($349|0),($350|0),1,0)|0);
       $352 = tempRet0;
       $353 = (___muldi3(1,0,($351|0),($352|0))|0);
       $354 = tempRet0;
       $call204 = (_malloc($353)|0);
       $string = $call204;
       $355 = $string;
       (_strcpy(($355|0),(112|0))|0);
       $356 = $string;
       $357 = $v;
       $data206 = (($357) + 8|0);
       $358 = HEAP32[$data206>>2]|0;
       (_strcat(($356|0),($358|0))|0);
       $359 = $string;
       (_strcat(($359|0),(112|0))|0);
       $360 = $string;
       $361 = $string;
       $call211 = (_strlen(($361|0))|0);
       $362 = (_Object_initString($360,$call211,0)|0);
       $v = $362;
       $363 = $insts$addr;
       $364 = $v;
       $365 = $vt$addr;
       $366 = $tail_call_flag$addr;
       $367 = $parent_func_name$addr;
       $368 = $function_for_compilation$addr;
       $369 = $env$addr;
       $370 = $mt$addr;
       $371 = $module$addr;
       (_compiler($363,$364,$365,$366,$367,$368,$369,$370,$371)|0);
       $372 = $v;
       _Object_free($372);
       $373 = $string;
       _free($373);
       $retval = 0;
       $1758 = $retval;
       STACKTOP = sp;return ($1758|0);
      }
      $374 = $insts$addr;
      $375 = $v;
      $376 = $vt$addr;
      $377 = $tail_call_flag$addr;
      $378 = $parent_func_name$addr;
      $379 = $function_for_compilation$addr;
      $380 = $env$addr;
      $381 = $mt$addr;
      $382 = $module$addr;
      $call218 = (_compiler($374,$375,$376,$377,$378,$379,$380,$381,$382)|0);
      $retval = $call218;
      $1758 = $retval;
      STACKTOP = sp;return ($1758|0);
     }
    }
   }
   $317 = $insts$addr;
   $318 = $v;
   $319 = $vt$addr;
   $320 = $tail_call_flag$addr;
   $321 = $parent_func_name$addr;
   $322 = $function_for_compilation$addr;
   $323 = $env$addr;
   $324 = $mt$addr;
   $325 = $module$addr;
   $call181 = (_compiler($317,$318,$319,$320,$321,$322,$323,$324,$325)|0);
   $retval = $call181;
   $1758 = $retval;
   STACKTOP = sp;return ($1758|0);
  }
  $383 = $tag;
  $call220 = (_strcmp($383,3160)|0);
  $cmp221 = ($call220|0)==(0);
  if ($cmp221) {
   $384 = $l$addr;
   $data224 = (($384) + 8|0);
   $cdr226 = (($data224) + 4|0);
   $385 = HEAP32[$cdr226>>2]|0;
   $data227 = (($385) + 8|0);
   $386 = HEAP32[$data227>>2]|0;
   $v = $386;
   $387 = $v;
   $388 = HEAP32[$387>>2]|0;
   $cmp231 = ($388|0)==(0);
   if (!($cmp231)) {
    $389 = $v;
    $390 = HEAP32[$389>>2]|0;
    $cmp235 = ($390|0)==(1);
    if (!($cmp235)) {
     $391 = $v;
     $392 = HEAP32[$391>>2]|0;
     $cmp239 = ($392|0)==(2);
     if (!($cmp239)) {
      $402 = $v;
      $403 = HEAP32[$402>>2]|0;
      $cmp245 = ($403|0)==(5);
      if ($cmp245) {
       $404 = $v;
       $call248 = (_quasiquote_list($404)|0);
       $temp = $call248;
       $405 = $insts$addr;
       $406 = $temp;
       $407 = $vt$addr;
       $408 = $tail_call_flag$addr;
       $409 = $parent_func_name$addr;
       $410 = $function_for_compilation$addr;
       $411 = $env$addr;
       $412 = $mt$addr;
       $413 = $module$addr;
       (_compiler($405,$406,$407,$408,$409,$410,$411,$412,$413)|0);
       $414 = $temp;
       _Object_free($414);
       $retval = 0;
       $1758 = $retval;
       STACKTOP = sp;return ($1758|0);
      }
      $415 = $v;
      $data251 = (($415) + 8|0);
      $416 = HEAP32[$data251>>2]|0;
      $417 = HEAP8[$416>>0]|0;
      $conv255 = $417 << 24 >> 24;
      $cmp256 = ($conv255|0)!=(39);
      if ($cmp256) {
       $418 = $v;
       $data259 = (($418) + 8|0);
       $length261 = (($data259) + 8|0);
       $419 = $length261;
       $420 = $419;
       $421 = HEAP32[$420>>2]|0;
       $422 = (($419) + 4)|0;
       $423 = $422;
       $424 = HEAP32[$423>>2]|0;
       $425 = (_i64Add(2,0,($421|0),($424|0))|0);
       $426 = tempRet0;
       $427 = (_i64Add(($425|0),($426|0),1,0)|0);
       $428 = tempRet0;
       $429 = (___muldi3(1,0,($427|0),($428|0))|0);
       $430 = tempRet0;
       $call266 = (_malloc($429)|0);
       $string = $call266;
       $431 = $string;
       (_strcpy(($431|0),(112|0))|0);
       $432 = $string;
       $433 = $v;
       $data268 = (($433) + 8|0);
       $434 = HEAP32[$data268>>2]|0;
       (_strcat(($432|0),($434|0))|0);
       $435 = $string;
       (_strcat(($435|0),(112|0))|0);
       $436 = $string;
       $437 = $string;
       $call273 = (_strlen(($437|0))|0);
       $438 = (_Object_initString($436,$call273,0)|0);
       $v = $438;
       $439 = $insts$addr;
       $440 = $v;
       $441 = $vt$addr;
       $442 = $tail_call_flag$addr;
       $443 = $parent_func_name$addr;
       $444 = $function_for_compilation$addr;
       $445 = $env$addr;
       $446 = $mt$addr;
       $447 = $module$addr;
       (_compiler($439,$440,$441,$442,$443,$444,$445,$446,$447)|0);
       $448 = $v;
       _Object_free($448);
       $449 = $string;
       _free($449);
       $retval = 0;
       $1758 = $retval;
       STACKTOP = sp;return ($1758|0);
      }
      $450 = $insts$addr;
      $451 = $v;
      $452 = $vt$addr;
      $453 = $tail_call_flag$addr;
      $454 = $parent_func_name$addr;
      $455 = $function_for_compilation$addr;
      $456 = $env$addr;
      $457 = $mt$addr;
      $458 = $module$addr;
      $call280 = (_compiler($450,$451,$452,$453,$454,$455,$456,$457,$458)|0);
      $retval = $call280;
      $1758 = $retval;
      STACKTOP = sp;return ($1758|0);
     }
    }
   }
   $393 = $insts$addr;
   $394 = $v;
   $395 = $vt$addr;
   $396 = $tail_call_flag$addr;
   $397 = $parent_func_name$addr;
   $398 = $function_for_compilation$addr;
   $399 = $env$addr;
   $400 = $mt$addr;
   $401 = $module$addr;
   $call242 = (_compiler($393,$394,$395,$396,$397,$398,$399,$400,$401)|0);
   $retval = $call242;
   $1758 = $retval;
   STACKTOP = sp;return ($1758|0);
  }
  $459 = $tag;
  $call282 = (_strcmp($459,3184)|0);
  $cmp283 = ($call282|0)==(0);
  if ($cmp283) {
   $460 = $l$addr;
   $data286 = (($460) + 8|0);
   $cdr288 = (($data286) + 4|0);
   $461 = HEAP32[$cdr288>>2]|0;
   $data289 = (($461) + 8|0);
   $462 = HEAP32[$data289>>2]|0;
   $var_name = $462;
   $463 = $var_name;
   $464 = HEAP32[$463>>2]|0;
   $cmp293 = ($464|0)==(4);
   do {
    if ($cmp293) {
     $465 = $var_name;
     $data296 = (($465) + 8|0);
     $466 = HEAP32[$data296>>2]|0;
     $call299 = (_strcmp($466,3128)|0);
     $cmp300 = ($call299|0)==(0);
     if (!($cmp300)) {
      $467 = $var_name;
      $data303 = (($467) + 8|0);
      $468 = HEAP32[$data303>>2]|0;
      $call306 = (_strcmp($468,3160)|0);
      $cmp307 = ($call306|0)==(0);
      if (!($cmp307)) {
       $469 = $var_name;
       $data310 = (($469) + 8|0);
       $470 = HEAP32[$data310>>2]|0;
       $call313 = (_strcmp($470,3144)|0);
       $cmp314 = ($call313|0)==(0);
       if (!($cmp314)) {
        $471 = $var_name;
        $data317 = (($471) + 8|0);
        $472 = HEAP32[$data317>>2]|0;
        $call320 = (_strcmp($472,3216)|0);
        $cmp321 = ($call320|0)==(0);
        if (!($cmp321)) {
         $473 = $var_name;
         $data324 = (($473) + 8|0);
         $474 = HEAP32[$data324>>2]|0;
         $call327 = (_strcmp($474,7712)|0);
         $cmp328 = ($call327|0)==(0);
         if (!($cmp328)) {
          $475 = $var_name;
          $data331 = (($475) + 8|0);
          $476 = HEAP32[$data331>>2]|0;
          $call334 = (_strcmp($476,3184)|0);
          $cmp335 = ($call334|0)==(0);
          if (!($cmp335)) {
           $477 = $var_name;
           $data338 = (($477) + 8|0);
           $478 = HEAP32[$data338>>2]|0;
           $call341 = (_strcmp($478,3200)|0);
           $cmp342 = ($call341|0)==(0);
           if (!($cmp342)) {
            break;
           }
          }
         }
        }
       }
      }
     }
     $479 = $var_name;
     $data345 = (($479) + 8|0);
     $480 = HEAP32[$data345>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $480;
     (_printf((7720|0),($vararg_buffer1|0))|0);
     $retval = 0;
     $1758 = $retval;
     STACKTOP = sp;return ($1758|0);
    }
   } while(0);
   $481 = $l$addr;
   $data350 = (($481) + 8|0);
   $cdr352 = (($data350) + 4|0);
   $482 = HEAP32[$cdr352>>2]|0;
   $data353 = (($482) + 8|0);
   $cdr355 = (($data353) + 4|0);
   $483 = HEAP32[$cdr355>>2]|0;
   $484 = HEAP32[$483>>2]|0;
   $cmp357 = ($484|0)==(0);
   if ($cmp357) {
    $485 = HEAP32[40>>2]|0;
    $var_value = $485;
   } else {
    $486 = $l$addr;
    $data361 = (($486) + 8|0);
    $cdr363 = (($data361) + 4|0);
    $487 = HEAP32[$cdr363>>2]|0;
    $data364 = (($487) + 8|0);
    $cdr366 = (($data364) + 4|0);
    $488 = HEAP32[$cdr366>>2]|0;
    $data367 = (($488) + 8|0);
    $cdr369 = (($data367) + 4|0);
    $489 = HEAP32[$cdr369>>2]|0;
    $490 = HEAP32[40>>2]|0;
    $cmp370 = ($489|0)!=($490|0);
    if ($cmp370) {
     $491 = HEAP32[952>>2]|0;
     $492 = $l$addr;
     $data373 = (($492) + 8|0);
     $cdr375 = (($data373) + 4|0);
     $493 = HEAP32[$cdr375>>2]|0;
     $data376 = (($493) + 8|0);
     $cdr378 = (($data376) + 4|0);
     $494 = HEAP32[$cdr378>>2]|0;
     $data379 = (($494) + 8|0);
     $495 = HEAP32[$data379>>2]|0;
     $496 = $l$addr;
     $data382 = (($496) + 8|0);
     $cdr384 = (($data382) + 4|0);
     $497 = HEAP32[$cdr384>>2]|0;
     $data385 = (($497) + 8|0);
     $cdr387 = (($data385) + 4|0);
     $498 = HEAP32[$cdr387>>2]|0;
     $data388 = (($498) + 8|0);
     $cdr390 = (($data388) + 4|0);
     $499 = HEAP32[$cdr390>>2]|0;
     $call391 = (_cons($495,$499)|0);
     $call392 = (_cons($491,$call391)|0);
     $var_value = $call392;
    } else {
     $500 = $l$addr;
     $data394 = (($500) + 8|0);
     $cdr396 = (($data394) + 4|0);
     $501 = HEAP32[$cdr396>>2]|0;
     $data397 = (($501) + 8|0);
     $cdr399 = (($data397) + 4|0);
     $502 = HEAP32[$cdr399>>2]|0;
     $data400 = (($502) + 8|0);
     $503 = HEAP32[$data400>>2]|0;
     $var_value = $503;
    }
   }
   $var_existed = 0;
   $504 = $vt$addr;
   $length405 = (($504) + 256|0);
   $505 = HEAP32[$length405>>2]|0;
   $cmp406 = ($505|0)==(1);
   do {
    if ($cmp406) {
     $i = 0;
     while(1) {
      $506 = $i;
      $507 = $module$addr;
      $length410 = (($507) + 4|0);
      $508 = HEAP16[$length410>>1]|0;
      $conv411 = $508&65535;
      $cmp412 = ($506|0)<($conv411|0);
      if (!($cmp412)) {
       label = 78;
       break;
      }
      $509 = $var_name;
      $data415 = (($509) + 8|0);
      $510 = HEAP32[$data415>>2]|0;
      $511 = $i;
      $512 = $module$addr;
      $513 = HEAP32[$512>>2]|0;
      $arrayidx418 = (($513) + ($511<<1)|0);
      $514 = HEAP16[$arrayidx418>>1]|0;
      $idxprom = $514&65535;
      $515 = $vt$addr;
      $516 = HEAP32[$515>>2]|0;
      $517 = HEAP32[$516>>2]|0;
      $arrayidx420 = (($517) + ($idxprom<<2)|0);
      $518 = HEAP32[$arrayidx420>>2]|0;
      $call421 = (_strcmp($510,$518)|0);
      $cmp422 = ($call421|0)==(0);
      if ($cmp422) {
       break;
      }
      $524 = $i;
      $inc433 = (($524) + 1)|0;
      $i = $inc433;
     }
     if ((label|0) == 78) {
      $525 = $module$addr;
      $526 = $vt$addr;
      $length435 = (($526) + 256|0);
      $527 = HEAP32[$length435>>2]|0;
      $sub = (($527) - 1)|0;
      $528 = $vt$addr;
      $arrayidx437 = (($528) + ($sub<<2)|0);
      $529 = HEAP32[$arrayidx437>>2]|0;
      $length438 = (($529) + 4|0);
      $530 = HEAP32[$length438>>2]|0;
      $conv439 = $530&65535;
      _Module_addOffset($525,$conv439);
      break;
     }
     $519 = $var_name;
     $data425 = (($519) + 8|0);
     $520 = HEAP32[$data425>>2]|0;
     HEAP32[$vararg_buffer4>>2] = $520;
     (_printf((7768|0),($vararg_buffer4|0))|0);
     $521 = $l$addr;
     $call429 = (_to_string($521)|0);
     $string = $call429;
     $522 = $string;
     HEAP32[$vararg_buffer7>>2] = $522;
     (_printf((7816|0),($vararg_buffer7|0))|0);
     $523 = $string;
     _free($523);
     $retval = 0;
     $1758 = $retval;
     STACKTOP = sp;return ($1758|0);
    } else {
     $531 = $vt$addr;
     $length441 = (($531) + 256|0);
     $532 = HEAP32[$length441>>2]|0;
     $sub442 = (($532) - 1)|0;
     $533 = $vt$addr;
     $arrayidx444 = (($533) + ($sub442<<2)|0);
     $534 = HEAP32[$arrayidx444>>2]|0;
     $frame = $534;
     $535 = $frame;
     $length445 = (($535) + 4|0);
     $536 = HEAP32[$length445>>2]|0;
     $sub446 = (($536) - 1)|0;
     $j = $sub446;
     while(1) {
      $537 = $j;
      $cmp448 = ($537|0)>=(0);
      if (!($cmp448)) {
       label = 87;
       break;
      }
      $538 = $j;
      $539 = $frame;
      $540 = HEAP32[$539>>2]|0;
      $arrayidx452 = (($540) + ($538<<2)|0);
      $541 = HEAP32[$arrayidx452>>2]|0;
      $cmp453 = ($541|0)==(0|0);
      if ($cmp453) {
      } else {
       $542 = $var_name;
       $data457 = (($542) + 8|0);
       $543 = HEAP32[$data457>>2]|0;
       $544 = $j;
       $545 = $frame;
       $546 = HEAP32[$545>>2]|0;
       $arrayidx461 = (($546) + ($544<<2)|0);
       $547 = HEAP32[$arrayidx461>>2]|0;
       $call462 = (_strcmp($543,$547)|0);
       $cmp463 = ($call462|0)==(0);
       if ($cmp463) {
        break;
       }
      }
      $553 = $j;
      $dec = (($553) + -1)|0;
      $j = $dec;
     }
     if ((label|0) == 87) {
      break;
     }
     $548 = $var_name;
     $data466 = (($548) + 8|0);
     $549 = HEAP32[$data466>>2]|0;
     HEAP32[$vararg_buffer10>>2] = $549;
     (_printf((7768|0),($vararg_buffer10|0))|0);
     $550 = $l$addr;
     $call470 = (_to_string($550)|0);
     $string = $call470;
     $551 = $string;
     HEAP32[$vararg_buffer13>>2] = $551;
     (_printf((7816|0),($vararg_buffer13|0))|0);
     $552 = $string;
     _free($552);
     $retval = 0;
     $1758 = $retval;
     STACKTOP = sp;return ($1758|0);
    }
   } while(0);
   $554 = $var_existed;
   $cmp476 = ($554|0)==(0);
   if ($cmp476) {
    $555 = $vt$addr;
    $length479 = (($555) + 256|0);
    $556 = HEAP32[$length479>>2]|0;
    $sub480 = (($556) - 1)|0;
    $557 = $vt$addr;
    $arrayidx482 = (($557) + ($sub480<<2)|0);
    $558 = HEAP32[$arrayidx482>>2]|0;
    $559 = $var_name;
    $data483 = (($559) + 8|0);
    $560 = HEAP32[$data483>>2]|0;
    _VTF_push($558,$560);
   }
   $561 = $var_value;
   $562 = HEAP32[$561>>2]|0;
   $cmp488 = ($562|0)==(5);
   do {
    if ($cmp488) {
     $563 = $var_value;
     $data491 = (($563) + 8|0);
     $564 = HEAP32[$data491>>2]|0;
     $data494 = (($564) + 8|0);
     $565 = HEAP32[$data494>>2]|0;
     $call497 = (_strcmp($565,3216)|0);
     $cmp498 = ($call497|0)==(0);
     if (!($cmp498)) {
      $566 = $var_value;
      $data501 = (($566) + 8|0);
      $567 = HEAP32[$data501>>2]|0;
      $data504 = (($567) + 8|0);
      $568 = HEAP32[$data504>>2]|0;
      $call507 = (_strcmp($568,7712)|0);
      $cmp508 = ($call507|0)==(0);
      if (!($cmp508)) {
       break;
      }
     }
     $569 = $var_name;
     $data511 = (($569) + 8|0);
     $570 = HEAP32[$data511>>2]|0;
     $parent_func_name$addr = $570;
    }
   } while(0);
   $571 = $vt$addr;
   $length515 = (($571) + 256|0);
   $572 = HEAP32[$length515>>2]|0;
   $sub516 = (($572) - 1)|0;
   $573 = $vt$addr;
   $arrayidx518 = (($573) + ($sub516<<2)|0);
   $574 = HEAP32[$arrayidx518>>2]|0;
   $length519 = (($574) + 4|0);
   $575 = HEAP32[$length519>>2]|0;
   $sub520 = (($575) - 1)|0;
   $conv521 = $sub520&65535;
   $set_index = $conv521;
   $576 = $insts$addr;
   $577 = $var_value;
   $578 = $vt$addr;
   $579 = $tail_call_flag$addr;
   $580 = $parent_func_name$addr;
   $581 = $function_for_compilation$addr;
   $582 = $env$addr;
   $583 = $mt$addr;
   $584 = $module$addr;
   $call522 = (_compiler($576,$577,$578,$579,$580,$581,$582,$583,$584)|0);
   $conv523 = $call522 << 16 >> 16;
   $i = $conv523;
   $585 = $i;
   $cmp524 = ($585|0)==(1);
   if ($cmp524) {
    $586 = $set_index;
    $587 = HEAP32[3424>>2]|0;
    $offset = (($587) + 8|0);
    HEAP16[$offset>>1] = $586;
   }
   $588 = $vt$addr;
   $length528 = (($588) + 256|0);
   $589 = HEAP32[$length528>>2]|0;
   $cmp529 = ($589|0)==(1);
   if ($cmp529) {
    $590 = $insts$addr;
    _Insts_push($590,-4096);
    $591 = $insts$addr;
    $592 = $set_index;
    _Insts_push($591,$592);
    $593 = $insts$addr;
    _Insts_push($593,0);
    $retval = 0;
    $1758 = $retval;
    STACKTOP = sp;return ($1758|0);
   } else {
    $594 = $insts$addr;
    _Insts_push($594,-24576);
    $595 = $insts$addr;
    $596 = $set_index;
    _Insts_push($595,$596);
    $retval = 0;
    $1758 = $retval;
    STACKTOP = sp;return ($1758|0);
   }
  }
  $597 = $tag;
  $call534 = (_strcmp($597,3200)|0);
  $cmp535 = ($call534|0)==(0);
  if ($cmp535) {
   $598 = $l$addr;
   $data538 = (($598) + 8|0);
   $cdr540 = (($data538) + 4|0);
   $599 = HEAP32[$cdr540>>2]|0;
   $data541 = (($599) + 8|0);
   $600 = HEAP32[$data541>>2]|0;
   $601 = HEAP32[$600>>2]|0;
   $cmp545 = ($601|0)==(5);
   if ($cmp545) {
    $602 = $l$addr;
    $data548 = (($602) + 8|0);
    $cdr550 = (($data548) + 4|0);
    $603 = HEAP32[$cdr550>>2]|0;
    $data551 = (($603) + 8|0);
    $604 = HEAP32[$data551>>2]|0;
    $605 = $l$addr;
    $data554 = (($605) + 8|0);
    $cdr556 = (($data554) + 4|0);
    $606 = HEAP32[$cdr556>>2]|0;
    $data557 = (($606) + 8|0);
    $cdr559 = (($data557) + 4|0);
    $607 = HEAP32[$cdr559>>2]|0;
    $call560 = (_list_append($604,$607)|0);
    $temp_ = $call560;
    $608 = $insts$addr;
    $609 = $temp_;
    $610 = $vt$addr;
    $611 = $tail_call_flag$addr;
    $612 = $parent_func_name$addr;
    $613 = $function_for_compilation$addr;
    $614 = $env$addr;
    $615 = $mt$addr;
    $616 = $module$addr;
    (_compiler($608,$609,$610,$611,$612,$613,$614,$615,$616)|0);
    $617 = $temp_;
    _Object_free($617);
    $retval = 0;
    $1758 = $retval;
    STACKTOP = sp;return ($1758|0);
   }
   $618 = $l$addr;
   $data563 = (($618) + 8|0);
   $cdr565 = (($data563) + 4|0);
   $619 = HEAP32[$cdr565>>2]|0;
   $data566 = (($619) + 8|0);
   $620 = HEAP32[$data566>>2]|0;
   $var_name = $620;
   $621 = $l$addr;
   $data569 = (($621) + 8|0);
   $cdr571 = (($data569) + 4|0);
   $622 = HEAP32[$cdr571>>2]|0;
   $data572 = (($622) + 8|0);
   $cdr574 = (($data572) + 4|0);
   $623 = HEAP32[$cdr574>>2]|0;
   $data575 = (($623) + 8|0);
   $624 = HEAP32[$data575>>2]|0;
   $var_value = $624;
   $625 = $vt$addr;
   $626 = $var_name;
   $data578 = (($626) + 8|0);
   $627 = HEAP32[$data578>>2]|0;
   $628 = $module$addr;
   _VT_find($625,$627,$vt_find,$628);
   $629 = HEAP32[$vt_find>>2]|0;
   $cmp583 = ($629|0)==(-1);
   if ($cmp583) {
    $630 = $var_name;
    $data586 = (($630) + 8|0);
    $631 = HEAP32[$data586>>2]|0;
    HEAP32[$vararg_buffer16>>2] = $631;
    (_printf((7840|0),($vararg_buffer16|0))|0);
    $632 = $l$addr;
    $call590 = (_to_string($632)|0);
    $string = $call590;
    $633 = $string;
    HEAP32[$vararg_buffer19>>2] = $633;
    (_printf((7880|0),($vararg_buffer19|0))|0);
    $634 = $string;
    _free($634);
    $retval = 0;
    $1758 = $retval;
    STACKTOP = sp;return ($1758|0);
   }
   $635 = $var_value;
   $636 = HEAP32[$635>>2]|0;
   $cmp594 = ($636|0)==(5);
   do {
    if ($cmp594) {
     $637 = $var_value;
     $data597 = (($637) + 8|0);
     $638 = HEAP32[$data597>>2]|0;
     $data600 = (($638) + 8|0);
     $639 = HEAP32[$data600>>2]|0;
     $call603 = (_strcmp($639,3216)|0);
     $cmp604 = ($call603|0)==(0);
     if (!($cmp604)) {
      $640 = $var_value;
      $data607 = (($640) + 8|0);
      $641 = HEAP32[$data607>>2]|0;
      $data610 = (($641) + 8|0);
      $642 = HEAP32[$data610>>2]|0;
      $call613 = (_strcmp($642,7712)|0);
      $cmp614 = ($call613|0)==(0);
      if (!($cmp614)) {
       break;
      }
     }
     $643 = $var_name;
     $data617 = (($643) + 8|0);
     $644 = HEAP32[$data617>>2]|0;
     $parent_func_name$addr = $644;
    }
   } while(0);
   $645 = $insts$addr;
   $646 = $var_value;
   $647 = $vt$addr;
   $648 = $tail_call_flag$addr;
   $649 = $parent_func_name$addr;
   $650 = $function_for_compilation$addr;
   $651 = $env$addr;
   $652 = $mt$addr;
   $653 = $module$addr;
   $call621 = (_compiler($645,$646,$647,$648,$649,$650,$651,$652,$653)|0);
   $conv622 = $call621 << 16 >> 16;
   $i = $conv622;
   $654 = $i;
   $cmp623 = ($654|0)==(1);
   if ($cmp623) {
    $arrayidx626 = (($vt_find) + 4|0);
    $655 = HEAP32[$arrayidx626>>2]|0;
    $conv627 = $655&65535;
    $656 = HEAP32[3424>>2]|0;
    $offset628 = (($656) + 8|0);
    HEAP16[$offset628>>1] = $conv627;
   }
   $657 = $insts$addr;
   $658 = HEAP32[$vt_find>>2]|0;
   $and631 = 4095 & $658;
   $or632 = 0 | $and631;
   $conv633 = $or632&65535;
   _Insts_push($657,$conv633);
   $659 = $insts$addr;
   $arrayidx634 = (($vt_find) + 4|0);
   $660 = HEAP32[$arrayidx634>>2]|0;
   $conv635 = $660&65535;
   _Insts_push($659,$conv635);
   $retval = 0;
   $1758 = $retval;
   STACKTOP = sp;return ($1758|0);
  }
  $661 = $tag;
  $call637 = (_strcmp($661,7896)|0);
  $cmp638 = ($call637|0)==(0);
  if ($cmp638) {
   $662 = $l$addr;
   $data641 = (($662) + 8|0);
   $cdr643 = (($data641) + 4|0);
   $663 = HEAP32[$cdr643>>2]|0;
   $data644 = (($663) + 8|0);
   $664 = HEAP32[$data644>>2]|0;
   $665 = HEAP32[$664>>2]|0;
   $cmp648 = ($665|0)==(5);
   if ($cmp648) {
    $666 = $l$addr;
    $data651 = (($666) + 8|0);
    $cdr653 = (($data651) + 4|0);
    $667 = HEAP32[$cdr653>>2]|0;
    $data654 = (($667) + 8|0);
    $668 = HEAP32[$data654>>2]|0;
    $data657 = (($668) + 8|0);
    $669 = HEAP32[$data657>>2]|0;
    $data660 = (($669) + 8|0);
    $670 = HEAP32[$data660>>2]|0;
    $call663 = (_strcmp($670,3128)|0);
    $cmp664 = ($call663|0)==(0);
    if ($cmp664) {
     $call667 = (_malloc(256)|0);
     $file_name_ptr = $call667;
     $671 = $file_name_ptr;
     $672 = $l$addr;
     $data668 = (($672) + 8|0);
     $cdr670 = (($data668) + 4|0);
     $673 = HEAP32[$cdr670>>2]|0;
     $data671 = (($673) + 8|0);
     $674 = HEAP32[$data671>>2]|0;
     $data674 = (($674) + 8|0);
     $cdr676 = (($data674) + 4|0);
     $675 = HEAP32[$cdr676>>2]|0;
     $data677 = (($675) + 8|0);
     $676 = HEAP32[$data677>>2]|0;
     $data680 = (($676) + 8|0);
     $677 = HEAP32[$data680>>2]|0;
     (_strcpy(($671|0),($677|0))|0);
    } else {
     label = 115;
    }
   } else {
    label = 115;
   }
   if ((label|0) == 115) {
    $678 = $l$addr;
    $data685 = (($678) + 8|0);
    $cdr687 = (($data685) + 4|0);
    $679 = HEAP32[$cdr687>>2]|0;
    $data688 = (($679) + 8|0);
    $680 = HEAP32[$data688>>2]|0;
    $data691 = (($680) + 8|0);
    $681 = HEAP32[$data691>>2]|0;
    $call694 = (_format_string($681)|0);
    $file_name_ptr = $call694;
   }
   $682 = $file_name_ptr;
   $call696 = (_strlen(($682|0))|0);
   $683 = $file_name_length;
   $684 = $683;
   HEAP32[$684>>2] = $call696;
   $685 = (($683) + 4)|0;
   $686 = $685;
   HEAP32[$686>>2] = 0;
   $687 = $file_name_length;
   $688 = $687;
   $689 = HEAP32[$688>>2]|0;
   $690 = (($687) + 4)|0;
   $691 = $690;
   $692 = HEAP32[$691>>2]|0;
   $693 = ($692>>>0)>(0);
   $694 = ($692|0)==(0);
   $695 = ($689>>>0)>(3);
   $696 = $694 & $695;
   $697 = $693 | $696;
   if ($697) {
    $698 = $file_name_length;
    $699 = $698;
    $700 = HEAP32[$699>>2]|0;
    $701 = (($698) + 4)|0;
    $702 = $701;
    $703 = HEAP32[$702>>2]|0;
    $704 = (_i64Subtract(($700|0),($703|0),1,0)|0);
    $705 = tempRet0;
    $706 = $file_name_ptr;
    $arrayidx703 = (($706) + ($704)|0);
    $707 = HEAP8[$arrayidx703>>0]|0;
    $conv704 = $707 << 24 >> 24;
    $cmp705 = ($conv704|0)==(97);
    if ($cmp705) {
     $708 = $file_name_length;
     $709 = $708;
     $710 = HEAP32[$709>>2]|0;
     $711 = (($708) + 4)|0;
     $712 = $711;
     $713 = HEAP32[$712>>2]|0;
     $714 = (_i64Subtract(($710|0),($713|0),2,0)|0);
     $715 = tempRet0;
     $716 = $file_name_ptr;
     $arrayidx710 = (($716) + ($714)|0);
     $717 = HEAP8[$arrayidx710>>0]|0;
     $conv711 = $717 << 24 >> 24;
     $cmp712 = ($conv711|0)==(119);
     if ($cmp712) {
      $718 = $file_name_length;
      $719 = $718;
      $720 = HEAP32[$719>>2]|0;
      $721 = (($718) + 4)|0;
      $722 = $721;
      $723 = HEAP32[$722>>2]|0;
      $724 = (_i64Subtract(($720|0),($723|0),3,0)|0);
      $725 = tempRet0;
      $726 = $file_name_ptr;
      $arrayidx717 = (($726) + ($724)|0);
      $727 = HEAP8[$arrayidx717>>0]|0;
      $conv718 = $727 << 24 >> 24;
      $cmp719 = ($conv718|0)==(46);
      if ($cmp719) {
       $728 = $file_name_ptr;
       (_strcpy(($file_name|0),($728|0))|0);
      } else {
       label = 121;
      }
     } else {
      label = 121;
     }
    } else {
     label = 121;
    }
   } else {
    label = 121;
   }
   if ((label|0) == 121) {
    $729 = $file_name_ptr;
    (_strcpy(($file_name|0),($729|0))|0);
    (_strcat(($file_name|0),(7904|0))|0);
   }
   (_realpath(($file_name|0),($abs_path|0))|0);
   $call734 = (_fopen(($abs_path|0),(7912|0))|0);
   $file = $call734;
   $730 = $file;
   $cmp735 = ($730|0)==(0|0);
   if ($cmp735) {
    HEAP32[$vararg_buffer22>>2] = $file_name;
    (_printf((7920|0),($vararg_buffer22|0))|0);
    $731 = $insts$addr;
    _Insts_push($731,9216);
    $732 = $file_name_ptr;
    _free($732);
    $733 = $l$addr;
    $call740 = (_to_string($733)|0);
    $string = $call740;
    $734 = $string;
    HEAP32[$vararg_buffer25>>2] = $734;
    (_printf((7952|0),($vararg_buffer25|0))|0);
    $735 = $string;
    _free($735);
    $retval = 0;
    $1758 = $retval;
    STACKTOP = sp;return ($1758|0);
   }
   $736 = $file;
   (_fseek(($736|0),0,2)|0);
   $737 = $file;
   $call744 = (_ftell(($737|0))|0);
   $738 = ($call744|0)<(0);
   $739 = $738 << 31 >> 31;
   $740 = $size;
   $741 = $740;
   HEAP32[$741>>2] = $call744;
   $742 = (($740) + 4)|0;
   $743 = $742;
   HEAP32[$743>>2] = $739;
   $744 = $file;
   _rewind(($744|0));
   $745 = $size;
   $746 = $745;
   $747 = HEAP32[$746>>2]|0;
   $748 = (($745) + 4)|0;
   $749 = $748;
   $750 = HEAP32[$749>>2]|0;
   $751 = (_i64Add(($747|0),($750|0),1,0)|0);
   $752 = tempRet0;
   $call748 = (_calloc($751,1)|0);
   $content = $call748;
   $753 = $content;
   $754 = $size;
   $755 = $754;
   $756 = HEAP32[$755>>2]|0;
   $757 = (($754) + 4)|0;
   $758 = $757;
   $759 = HEAP32[$758>>2]|0;
   $760 = $file;
   (_fread(($753|0),1,($756|0),($760|0))|0);
   $761 = $file;
   (_fclose(($761|0))|0);
   $762 = $content;
   $call752 = (_lexer($762)|0);
   $p = $call752;
   $763 = $p;
   $cmp753 = ($763|0)==(0|0);
   if ($cmp753) {
    (_printf((672|0),($vararg_buffer28|0))|0);
   }
   $764 = $p;
   $call758 = (_parser($764)|0);
   $o = $call758;
   $765 = $insts$addr;
   $766 = $o;
   $767 = $vt$addr;
   $768 = $env$addr;
   $769 = $mt$addr;
   $770 = $module$addr;
   (_compiler_begin($765,$766,$767,0,0,0,$768,$769,$770)|0);
   $771 = $content;
   _free($771);
   $retval = 0;
   $1758 = $retval;
   STACKTOP = sp;return ($1758|0);
  }
  $772 = $tag;
  $call761 = (_strcmp($772,7968)|0);
  $cmp762 = ($call761|0)==(0);
  if ($cmp762) {
   $773 = $vt$addr;
   $length765 = (($773) + 256|0);
   $774 = HEAP32[$length765>>2]|0;
   $cmp766 = ($774|0)!=(1);
   if ($cmp766) {
    (_printf((7976|0),($vararg_buffer30|0))|0);
    $775 = $l$addr;
    $call770 = (_to_string($775)|0);
    $string = $call770;
    $776 = $string;
    HEAP32[$vararg_buffer32>>2] = $776;
    (_printf((7952|0),($vararg_buffer32|0))|0);
    $777 = $string;
    _free($777);
    $retval = 0;
    $1758 = $retval;
    STACKTOP = sp;return ($1758|0);
   }
   $778 = $l$addr;
   $data776 = (($778) + 8|0);
   $cdr778 = (($data776) + 4|0);
   $779 = HEAP32[$cdr778>>2]|0;
   $data779 = (($779) + 8|0);
   $780 = HEAP32[$data779>>2]|0;
   $781 = HEAP32[$780>>2]|0;
   $cmp783 = ($781|0)==(5);
   if ($cmp783) {
    $782 = $l$addr;
    $data786 = (($782) + 8|0);
    $cdr788 = (($data786) + 4|0);
    $783 = HEAP32[$cdr788>>2]|0;
    $data789 = (($783) + 8|0);
    $784 = HEAP32[$data789>>2]|0;
    $data792 = (($784) + 8|0);
    $785 = HEAP32[$data792>>2]|0;
    $data795 = (($785) + 8|0);
    $786 = HEAP32[$data795>>2]|0;
    $call798 = (_strcmp($786,3128)|0);
    $cmp799 = ($call798|0)==(0);
    if ($cmp799) {
     $call802 = (_malloc(256)|0);
     $file_name_ptr774 = $call802;
     $787 = $file_name_ptr774;
     $788 = $l$addr;
     $data803 = (($788) + 8|0);
     $cdr805 = (($data803) + 4|0);
     $789 = HEAP32[$cdr805>>2]|0;
     $data806 = (($789) + 8|0);
     $790 = HEAP32[$data806>>2]|0;
     $data809 = (($790) + 8|0);
     $cdr811 = (($data809) + 4|0);
     $791 = HEAP32[$cdr811>>2]|0;
     $data812 = (($791) + 8|0);
     $792 = HEAP32[$data812>>2]|0;
     $data815 = (($792) + 8|0);
     $793 = HEAP32[$data815>>2]|0;
     (_strcpy(($787|0),($793|0))|0);
    } else {
     label = 133;
    }
   } else {
    label = 133;
   }
   if ((label|0) == 133) {
    $794 = $l$addr;
    $data820 = (($794) + 8|0);
    $cdr822 = (($data820) + 4|0);
    $795 = HEAP32[$cdr822>>2]|0;
    $data823 = (($795) + 8|0);
    $796 = HEAP32[$data823>>2]|0;
    $data826 = (($796) + 8|0);
    $797 = HEAP32[$data826>>2]|0;
    $call829 = (_format_string($797)|0);
    $file_name_ptr774 = $call829;
   }
   $798 = $file_name_ptr774;
   $call832 = (_strlen(($798|0))|0);
   $799 = $file_name_length831;
   $800 = $799;
   HEAP32[$800>>2] = $call832;
   $801 = (($799) + 4)|0;
   $802 = $801;
   HEAP32[$802>>2] = 0;
   $803 = $file_name_length831;
   $804 = $803;
   $805 = HEAP32[$804>>2]|0;
   $806 = (($803) + 4)|0;
   $807 = $806;
   $808 = HEAP32[$807>>2]|0;
   $809 = ($808>>>0)>(0);
   $810 = ($808|0)==(0);
   $811 = ($805>>>0)>(3);
   $812 = $810 & $811;
   $813 = $809 | $812;
   if ($813) {
    $814 = $file_name_length831;
    $815 = $814;
    $816 = HEAP32[$815>>2]|0;
    $817 = (($814) + 4)|0;
    $818 = $817;
    $819 = HEAP32[$818>>2]|0;
    $820 = (_i64Subtract(($816|0),($819|0),1,0)|0);
    $821 = tempRet0;
    $822 = $file_name_ptr774;
    $arrayidx839 = (($822) + ($820)|0);
    $823 = HEAP8[$arrayidx839>>0]|0;
    $conv840 = $823 << 24 >> 24;
    $cmp841 = ($conv840|0)==(97);
    if ($cmp841) {
     $824 = $file_name_length831;
     $825 = $824;
     $826 = HEAP32[$825>>2]|0;
     $827 = (($824) + 4)|0;
     $828 = $827;
     $829 = HEAP32[$828>>2]|0;
     $830 = (_i64Subtract(($826|0),($829|0),2,0)|0);
     $831 = tempRet0;
     $832 = $file_name_ptr774;
     $arrayidx846 = (($832) + ($830)|0);
     $833 = HEAP8[$arrayidx846>>0]|0;
     $conv847 = $833 << 24 >> 24;
     $cmp848 = ($conv847|0)==(119);
     if ($cmp848) {
      $834 = $file_name_length831;
      $835 = $834;
      $836 = HEAP32[$835>>2]|0;
      $837 = (($834) + 4)|0;
      $838 = $837;
      $839 = HEAP32[$838>>2]|0;
      $840 = (_i64Subtract(($836|0),($839|0),3,0)|0);
      $841 = tempRet0;
      $842 = $file_name_ptr774;
      $arrayidx853 = (($842) + ($840)|0);
      $843 = HEAP8[$arrayidx853>>0]|0;
      $conv854 = $843 << 24 >> 24;
      $cmp855 = ($conv854|0)==(46);
      if ($cmp855) {
       $844 = $file_name_ptr774;
       (_strcpy(($file_name775|0),($844|0))|0);
      } else {
       label = 139;
      }
     } else {
      label = 139;
     }
    } else {
     label = 139;
    }
   } else {
    label = 139;
   }
   if ((label|0) == 139) {
    $845 = $file_name_ptr774;
    (_strcpy(($file_name775|0),($845|0))|0);
    (_strcat(($file_name775|0),(7904|0))|0);
   }
   (_realpath(($file_name775|0),($abs_path773|0))|0);
   $846 = $vt$addr;
   $847 = HEAP32[$846>>2]|0;
   $call873 = (_checkModuleLoaded(3424,$abs_path773,$847)|0);
   $conv874 = $call873&65535;
   $offset869 = $conv874;
   $848 = $offset869;
   $conv875 = $848&65535;
   $cmp876 = ($conv875|0)>(0);
   if ($cmp876) {
    $849 = $insts$addr;
    _Insts_push($849,4096);
    $850 = $insts$addr;
    $851 = $offset869;
    _Insts_push($850,$851);
    $852 = $file_name_ptr774;
    _free($852);
    $retval = 0;
    $1758 = $retval;
    STACKTOP = sp;return ($1758|0);
   }
   $call882 = (_fopen(($file_name775|0),(7912|0))|0);
   $file880 = $call882;
   $853 = $file880;
   $cmp883 = ($853|0)==(0|0);
   do {
    if ($cmp883) {
     (_strcpy(($file_name775|0),(8016|0))|0);
     $854 = $file_name_length831;
     $855 = $854;
     $856 = HEAP32[$855>>2]|0;
     $857 = (($854) + 4)|0;
     $858 = $857;
     $859 = HEAP32[$858>>2]|0;
     $860 = ($859>>>0)>(0);
     $861 = ($859|0)==(0);
     $862 = ($856>>>0)>(3);
     $863 = $861 & $862;
     $864 = $860 | $863;
     if ($864) {
      $865 = $file_name_length831;
      $866 = $865;
      $867 = HEAP32[$866>>2]|0;
      $868 = (($865) + 4)|0;
      $869 = $868;
      $870 = HEAP32[$869>>2]|0;
      $871 = (_i64Subtract(($867|0),($870|0),1,0)|0);
      $872 = tempRet0;
      $873 = $file_name_ptr774;
      $arrayidx893 = (($873) + ($871)|0);
      $874 = HEAP8[$arrayidx893>>0]|0;
      $conv894 = $874 << 24 >> 24;
      $cmp895 = ($conv894|0)==(97);
      if ($cmp895) {
       $875 = $file_name_length831;
       $876 = $875;
       $877 = HEAP32[$876>>2]|0;
       $878 = (($875) + 4)|0;
       $879 = $878;
       $880 = HEAP32[$879>>2]|0;
       $881 = (_i64Subtract(($877|0),($880|0),2,0)|0);
       $882 = tempRet0;
       $883 = $file_name_ptr774;
       $arrayidx900 = (($883) + ($881)|0);
       $884 = HEAP8[$arrayidx900>>0]|0;
       $conv901 = $884 << 24 >> 24;
       $cmp902 = ($conv901|0)==(119);
       if ($cmp902) {
        $885 = $file_name_length831;
        $886 = $885;
        $887 = HEAP32[$886>>2]|0;
        $888 = (($885) + 4)|0;
        $889 = $888;
        $890 = HEAP32[$889>>2]|0;
        $891 = (_i64Subtract(($887|0),($890|0),3,0)|0);
        $892 = tempRet0;
        $893 = $file_name_ptr774;
        $arrayidx907 = (($893) + ($891)|0);
        $894 = HEAP8[$arrayidx907>>0]|0;
        $conv908 = $894 << 24 >> 24;
        $cmp909 = ($conv908|0)==(46);
        if ($cmp909) {
         $895 = $file_name_ptr774;
         (_strcat(($file_name775|0),($895|0))|0);
        } else {
         label = 148;
        }
       } else {
        label = 148;
       }
      } else {
       label = 148;
      }
     } else {
      label = 148;
     }
     if ((label|0) == 148) {
      $896 = $file_name_ptr774;
      (_strcat(($file_name775|0),($896|0))|0);
      (_strcat(($file_name775|0),(7904|0))|0);
     }
     $call921 = (_fopen(($file_name775|0),(7912|0))|0);
     $file880 = $call921;
     $897 = $file880;
     $cmp922 = ($897|0)==(0|0);
     if (!($cmp922)) {
      break;
     }
     $898 = $file_name_ptr774;
     HEAP32[$vararg_buffer35>>2] = $898;
     (_printf((8040|0),($vararg_buffer35|0))|0);
     $899 = $insts$addr;
     _Insts_push($899,9216);
     $900 = $file_name_ptr774;
     _free($900);
     $901 = $l$addr;
     $call926 = (_to_string($901)|0);
     $string = $call926;
     $902 = $string;
     HEAP32[$vararg_buffer38>>2] = $902;
     (_printf((7952|0),($vararg_buffer38|0))|0);
     $903 = $string;
     _free($903);
     $retval = 0;
     $1758 = $retval;
     STACKTOP = sp;return ($1758|0);
    }
   } while(0);
   $904 = $file880;
   (_fseek(($904|0),0,2)|0);
   $905 = $file880;
   $call933 = (_ftell(($905|0))|0);
   $906 = ($call933|0)<(0);
   $907 = $906 << 31 >> 31;
   $908 = $size932;
   $909 = $908;
   HEAP32[$909>>2] = $call933;
   $910 = (($908) + 4)|0;
   $911 = $910;
   HEAP32[$911>>2] = $907;
   $912 = $file880;
   _rewind(($912|0));
   $913 = $size932;
   $914 = $913;
   $915 = HEAP32[$914>>2]|0;
   $916 = (($913) + 4)|0;
   $917 = $916;
   $918 = HEAP32[$917>>2]|0;
   $919 = (_i64Add(($915|0),($918|0),1,0)|0);
   $920 = tempRet0;
   $call937 = (_calloc($919,1)|0);
   $content930 = $call937;
   $921 = $content930;
   $922 = $size932;
   $923 = $922;
   $924 = HEAP32[$923>>2]|0;
   $925 = (($922) + 4)|0;
   $926 = $925;
   $927 = HEAP32[$926>>2]|0;
   $928 = $file880;
   (_fread(($921|0),1,($924|0),($928|0))|0);
   $929 = $file880;
   (_fclose(($929|0))|0);
   $930 = $content930;
   $call943 = (_lexer($930)|0);
   $p941 = $call943;
   $931 = $p941;
   $cmp944 = ($931|0)==(0|0);
   if ($cmp944) {
    (_printf((672|0),($vararg_buffer41|0))|0);
   }
   $932 = $p941;
   $call949 = (_parser($932)|0);
   $o942 = $call949;
   $call950 = (_Module_init()|0);
   $new_module = $call950;
   $933 = $insts$addr;
   $934 = $o942;
   $935 = $vt$addr;
   $936 = $env$addr;
   $937 = $mt$addr;
   $938 = $new_module;
   (_compiler_begin($933,$934,$935,0,0,0,$936,$937,$938)|0);
   $939 = $new_module;
   _Module_free($939);
   $940 = $content930;
   _free($940);
   $941 = $file_name_ptr774;
   _free($941);
   $retval = 1;
   $1758 = $retval;
   STACKTOP = sp;return ($1758|0);
  }
  $942 = $tag;
  $call953 = (_strcmp($942,8072)|0);
  $cmp954 = ($call953|0)==(0);
  if ($cmp954) {
   $943 = $l$addr;
   $data957 = (($943) + 8|0);
   $cdr959 = (($data957) + 4|0);
   $944 = HEAP32[$cdr959>>2]|0;
   $data960 = (($944) + 8|0);
   $945 = HEAP32[$data960>>2]|0;
   $test = $945;
   $946 = $l$addr;
   $data963 = (($946) + 8|0);
   $cdr965 = (($data963) + 4|0);
   $947 = HEAP32[$cdr965>>2]|0;
   $data966 = (($947) + 8|0);
   $cdr968 = (($data966) + 4|0);
   $948 = HEAP32[$cdr968>>2]|0;
   $data969 = (($948) + 8|0);
   $949 = HEAP32[$data969>>2]|0;
   $conseq = $949;
   $950 = $l$addr;
   $data972 = (($950) + 8|0);
   $cdr974 = (($data972) + 4|0);
   $951 = HEAP32[$cdr974>>2]|0;
   $data975 = (($951) + 8|0);
   $cdr977 = (($data975) + 4|0);
   $952 = HEAP32[$cdr977>>2]|0;
   $data978 = (($952) + 8|0);
   $cdr980 = (($data978) + 4|0);
   $953 = HEAP32[$cdr980>>2]|0;
   $954 = HEAP32[$953>>2]|0;
   $cmp982 = ($954|0)==(0);
   if ($cmp982) {
    $955 = HEAP32[40>>2]|0;
    $alter = $955;
   } else {
    $956 = $l$addr;
    $data986 = (($956) + 8|0);
    $cdr988 = (($data986) + 4|0);
    $957 = HEAP32[$cdr988>>2]|0;
    $data989 = (($957) + 8|0);
    $cdr991 = (($data989) + 4|0);
    $958 = HEAP32[$cdr991>>2]|0;
    $data992 = (($958) + 8|0);
    $cdr994 = (($data992) + 4|0);
    $959 = HEAP32[$cdr994>>2]|0;
    $data995 = (($959) + 8|0);
    $960 = HEAP32[$data995>>2]|0;
    $alter = $960;
   }
   $961 = $insts$addr;
   $962 = $test;
   $963 = $vt$addr;
   $964 = $parent_func_name$addr;
   $965 = $function_for_compilation$addr;
   $966 = $env$addr;
   $967 = $mt$addr;
   $968 = $module$addr;
   (_compiler($961,$962,$963,0,$964,$965,$966,$967,$968)|0);
   $969 = $insts$addr;
   _Insts_push($969,-28672);
   $970 = $insts$addr;
   $length1000 = (($970) + 8|0);
   $971 = $length1000;
   $972 = $971;
   $973 = HEAP32[$972>>2]|0;
   $974 = (($971) + 4)|0;
   $975 = $974;
   $976 = HEAP32[$975>>2]|0;
   $977 = $index1;
   $978 = $977;
   HEAP32[$978>>2] = $973;
   $979 = (($977) + 4)|0;
   $980 = $979;
   HEAP32[$980>>2] = $976;
   $981 = $insts$addr;
   _Insts_push($981,0);
   $982 = $insts$addr;
   $983 = $conseq;
   $984 = HEAP32[40>>2]|0;
   $call1001 = (_cons($983,$984)|0);
   $985 = $vt$addr;
   $986 = $parent_func_name$addr;
   $987 = $function_for_compilation$addr;
   $988 = $env$addr;
   $989 = $mt$addr;
   $990 = $module$addr;
   (_compiler_begin($982,$call1001,$985,$986,$987,0,$988,$989,$990)|0);
   $991 = $insts$addr;
   $length1003 = (($991) + 8|0);
   $992 = $length1003;
   $993 = $992;
   $994 = HEAP32[$993>>2]|0;
   $995 = (($992) + 4)|0;
   $996 = $995;
   $997 = HEAP32[$996>>2]|0;
   $998 = $index2;
   $999 = $998;
   HEAP32[$999>>2] = $994;
   $1000 = (($998) + 4)|0;
   $1001 = $1000;
   HEAP32[$1001>>2] = $997;
   $1002 = $insts$addr;
   _Insts_push($1002,-32768);
   $1003 = $insts$addr;
   _Insts_push($1003,0);
   $1004 = $insts$addr;
   _Insts_push($1004,0);
   $1005 = $index2;
   $1006 = $1005;
   $1007 = HEAP32[$1006>>2]|0;
   $1008 = (($1005) + 4)|0;
   $1009 = $1008;
   $1010 = HEAP32[$1009>>2]|0;
   $1011 = $index1;
   $1012 = $1011;
   $1013 = HEAP32[$1012>>2]|0;
   $1014 = (($1011) + 4)|0;
   $1015 = $1014;
   $1016 = HEAP32[$1015>>2]|0;
   $1017 = (_i64Subtract(($1007|0),($1010|0),($1013|0),($1016|0))|0);
   $1018 = tempRet0;
   $1019 = (_i64Add(($1017|0),($1018|0),4,0)|0);
   $1020 = tempRet0;
   $1021 = $jump_steps;
   $1022 = $1021;
   HEAP32[$1022>>2] = $1019;
   $1023 = (($1021) + 4)|0;
   $1024 = $1023;
   HEAP32[$1024>>2] = $1020;
   $1025 = $jump_steps;
   $1026 = $1025;
   $1027 = HEAP32[$1026>>2]|0;
   $1028 = (($1025) + 4)|0;
   $1029 = $1028;
   $1030 = HEAP32[$1029>>2]|0;
   $1031 = $1027&65535;
   $1032 = $index1;
   $1033 = $1032;
   $1034 = HEAP32[$1033>>2]|0;
   $1035 = (($1032) + 4)|0;
   $1036 = $1035;
   $1037 = HEAP32[$1036>>2]|0;
   $1038 = $insts$addr;
   $1039 = HEAP32[$1038>>2]|0;
   $arrayidx1008 = (($1039) + ($1034<<1)|0);
   HEAP16[$arrayidx1008>>1] = $1031;
   $1040 = $insts$addr;
   $1041 = $alter;
   $1042 = HEAP32[40>>2]|0;
   $call1009 = (_cons($1041,$1042)|0);
   $1043 = $vt$addr;
   $1044 = $parent_func_name$addr;
   $1045 = $function_for_compilation$addr;
   $1046 = $env$addr;
   $1047 = $mt$addr;
   $1048 = $module$addr;
   (_compiler_begin($1040,$call1009,$1043,$1044,$1045,0,$1046,$1047,$1048)|0);
   $1049 = $insts$addr;
   $length1011 = (($1049) + 8|0);
   $1050 = $length1011;
   $1051 = $1050;
   $1052 = HEAP32[$1051>>2]|0;
   $1053 = (($1050) + 4)|0;
   $1054 = $1053;
   $1055 = HEAP32[$1054>>2]|0;
   $1056 = $index3;
   $1057 = $1056;
   HEAP32[$1057>>2] = $1052;
   $1058 = (($1056) + 4)|0;
   $1059 = $1058;
   HEAP32[$1059>>2] = $1055;
   $1060 = $index3;
   $1061 = $1060;
   $1062 = HEAP32[$1061>>2]|0;
   $1063 = (($1060) + 4)|0;
   $1064 = $1063;
   $1065 = HEAP32[$1064>>2]|0;
   $1066 = $index2;
   $1067 = $1066;
   $1068 = HEAP32[$1067>>2]|0;
   $1069 = (($1066) + 4)|0;
   $1070 = $1069;
   $1071 = HEAP32[$1070>>2]|0;
   $1072 = (_i64Subtract(($1062|0),($1065|0),($1068|0),($1071|0))|0);
   $1073 = tempRet0;
   $1074 = $jump_steps;
   $1075 = $1074;
   HEAP32[$1075>>2] = $1072;
   $1076 = (($1074) + 4)|0;
   $1077 = $1076;
   HEAP32[$1077>>2] = $1073;
   $1078 = $jump_steps;
   $1079 = $1078;
   $1080 = HEAP32[$1079>>2]|0;
   $1081 = (($1078) + 4)|0;
   $1082 = $1081;
   $1083 = HEAP32[$1082>>2]|0;
   $1084 = -65536 & $1080;
   $1085 = (_bitshift64Lshr(($1084|0),0,16)|0);
   $1086 = tempRet0;
   $1087 = $1085&65535;
   $1088 = $index2;
   $1089 = $1088;
   $1090 = HEAP32[$1089>>2]|0;
   $1091 = (($1088) + 4)|0;
   $1092 = $1091;
   $1093 = HEAP32[$1092>>2]|0;
   $1094 = (_i64Add(($1090|0),($1093|0),1,0)|0);
   $1095 = tempRet0;
   $1096 = $insts$addr;
   $1097 = HEAP32[$1096>>2]|0;
   $arrayidx1019 = (($1097) + ($1094<<1)|0);
   HEAP16[$arrayidx1019>>1] = $1087;
   $1098 = $jump_steps;
   $1099 = $1098;
   $1100 = HEAP32[$1099>>2]|0;
   $1101 = (($1098) + 4)|0;
   $1102 = $1101;
   $1103 = HEAP32[$1102>>2]|0;
   $1104 = 65535 & $1100;
   $1105 = $1104&65535;
   $1106 = $index2;
   $1107 = $1106;
   $1108 = HEAP32[$1107>>2]|0;
   $1109 = (($1106) + 4)|0;
   $1110 = $1109;
   $1111 = HEAP32[$1110>>2]|0;
   $1112 = (_i64Add(($1108|0),($1111|0),2,0)|0);
   $1113 = tempRet0;
   $1114 = $insts$addr;
   $1115 = HEAP32[$1114>>2]|0;
   $arrayidx1025 = (($1115) + ($1112<<1)|0);
   HEAP16[$arrayidx1025>>1] = $1105;
   $retval = 0;
   $1758 = $retval;
   STACKTOP = sp;return ($1758|0);
  }
  $1116 = $tag;
  $call1027 = (_strcmp($1116,8080)|0);
  $cmp1028 = ($call1027|0)==(0);
  if ($cmp1028) {
   $1117 = $insts$addr;
   $1118 = $l$addr;
   $data1031 = (($1118) + 8|0);
   $cdr1033 = (($data1031) + 4|0);
   $1119 = HEAP32[$cdr1033>>2]|0;
   $1120 = $vt$addr;
   $1121 = $parent_func_name$addr;
   $1122 = $function_for_compilation$addr;
   $1123 = $env$addr;
   $1124 = $mt$addr;
   $1125 = $module$addr;
   (_compiler_begin($1117,$1119,$1120,$1121,$1122,0,$1123,$1124,$1125)|0);
   $retval = 0;
   $1758 = $retval;
   STACKTOP = sp;return ($1758|0);
  }
  $1126 = $tag;
  $call1036 = (_strcmp($1126,8088)|0);
  $cmp1037 = ($call1036|0)==(0);
  if ($cmp1037) {
   $1127 = $l$addr;
   $data1040 = (($1127) + 8|0);
   $cdr1042 = (($data1040) + 4|0);
   $1128 = HEAP32[$cdr1042>>2]|0;
   $data1043 = (($1128) + 8|0);
   $1129 = HEAP32[$data1043>>2]|0;
   $chunk = $1129;
   $1130 = $length;
   $1131 = $1130;
   HEAP32[$1131>>2] = 0;
   $1132 = (($1130) + 4)|0;
   $1133 = $1132;
   HEAP32[$1133>>2] = 0;
   $j = 0;
   $1134 = HEAP32[40>>2]|0;
   $assignments = $1134;
   while(1) {
    $1135 = $chunk;
    $1136 = HEAP32[40>>2]|0;
    $cmp1047 = ($1135|0)!=($1136|0);
    if (!($cmp1047)) {
     break;
    }
    $is_def = 1;
    $1137 = $chunk;
    $data1049 = (($1137) + 8|0);
    $1138 = HEAP32[$data1049>>2]|0;
    $data1052 = (($1138) + 8|0);
    $1139 = HEAP32[$data1052>>2]|0;
    $string = $1139;
    $var_existed = 0;
    $i = 0;
    while(1) {
     $1140 = $i;
     $1141 = ($1140|0)<(0);
     $1142 = $1141 << 31 >> 31;
     $1143 = $length;
     $1144 = $1143;
     $1145 = HEAP32[$1144>>2]|0;
     $1146 = (($1143) + 4)|0;
     $1147 = $1146;
     $1148 = HEAP32[$1147>>2]|0;
     $1149 = ($1142>>>0)<($1148>>>0);
     $1150 = ($1142|0)==($1148|0);
     $1151 = ($1140>>>0)<($1145>>>0);
     $1152 = $1150 & $1151;
     $1153 = $1149 | $1152;
     if (!($1153)) {
      break;
     }
     $1154 = $i;
     $arrayidx1060 = (($var_names1046) + ($1154<<2)|0);
     $1155 = HEAP32[$arrayidx1060>>2]|0;
     $1156 = $string;
     $call1061 = (_strcmp($1155,$1156)|0);
     $cmp1062 = ($call1061|0)==(0);
     if ($cmp1062) {
      $var_existed = 1;
      $is_def = 0;
     }
     $1157 = $i;
     $inc1067 = (($1157) + 1)|0;
     $i = $inc1067;
    }
    $1158 = $var_existed;
    $tobool = ($1158|0)!=(0);
    if (!($tobool)) {
     $1159 = $string;
     $1160 = $length;
     $1161 = $1160;
     $1162 = HEAP32[$1161>>2]|0;
     $1163 = (($1160) + 4)|0;
     $1164 = $1163;
     $1165 = HEAP32[$1164>>2]|0;
     $arrayidx1071 = (($var_names1046) + ($1162<<2)|0);
     HEAP32[$arrayidx1071>>2] = $1159;
     $1166 = $length;
     $1167 = $1166;
     $1168 = HEAP32[$1167>>2]|0;
     $1169 = (($1166) + 4)|0;
     $1170 = $1169;
     $1171 = HEAP32[$1170>>2]|0;
     $1172 = (_i64Add(($1168|0),($1171|0),1,0)|0);
     $1173 = tempRet0;
     $1174 = $length;
     $1175 = $1174;
     HEAP32[$1175>>2] = $1172;
     $1176 = (($1174) + 4)|0;
     $1177 = $1176;
     HEAP32[$1177>>2] = $1173;
    }
    $1178 = $is_def;
    $tobool1074 = ($1178|0)!=(0);
    if ($tobool1074) {
     $1179 = HEAP32[3192>>2]|0;
     $cond = $1179;
    } else {
     $1180 = HEAP32[3208>>2]|0;
     $cond = $1180;
    }
    $1181 = $chunk;
    $data1075 = (($1181) + 8|0);
    $1182 = HEAP32[$data1075>>2]|0;
    $1183 = $chunk;
    $data1078 = (($1183) + 8|0);
    $cdr1080 = (($data1078) + 4|0);
    $1184 = HEAP32[$cdr1080>>2]|0;
    $data1081 = (($1184) + 8|0);
    $1185 = HEAP32[$data1081>>2]|0;
    $1186 = HEAP32[40>>2]|0;
    $call1084 = (_cons($1185,$1186)|0);
    $call1085 = (_cons($1182,$call1084)|0);
    $call1086 = (_cons($cond,$call1085)|0);
    $1187 = $j;
    $arrayidx1087 = (($def_array) + ($1187<<2)|0);
    HEAP32[$arrayidx1087>>2] = $call1086;
    $1188 = $chunk;
    $data1088 = (($1188) + 8|0);
    $cdr1090 = (($data1088) + 4|0);
    $1189 = HEAP32[$cdr1090>>2]|0;
    $data1091 = (($1189) + 8|0);
    $cdr1093 = (($data1091) + 4|0);
    $1190 = HEAP32[$cdr1093>>2]|0;
    $chunk = $1190;
    $1191 = $j;
    $inc1094 = (($1191) + 1)|0;
    $j = $inc1094;
   }
   $1192 = $j;
   $sub1095 = (($1192) - 1)|0;
   $i = $sub1095;
   while(1) {
    $1193 = $i;
    $cmp1097 = ($1193|0)>=(0);
    if (!($cmp1097)) {
     break;
    }
    $1194 = $i;
    $arrayidx1100 = (($def_array) + ($1194<<2)|0);
    $1195 = HEAP32[$arrayidx1100>>2]|0;
    $1196 = $assignments;
    $call1101 = (_cons($1195,$1196)|0);
    $assignments = $call1101;
    $1197 = $i;
    $dec1103 = (($1197) + -1)|0;
    $i = $dec1103;
   }
   $1198 = HEAP32[952>>2]|0;
   $1199 = HEAP32[40>>2]|0;
   $1200 = $assignments;
   $1201 = $l$addr;
   $data1105 = (($1201) + 8|0);
   $cdr1107 = (($data1105) + 4|0);
   $1202 = HEAP32[$cdr1107>>2]|0;
   $data1108 = (($1202) + 8|0);
   $cdr1110 = (($data1108) + 4|0);
   $1203 = HEAP32[$cdr1110>>2]|0;
   $call1111 = (_list_append($1200,$1203)|0);
   $call1112 = (_cons($1199,$call1111)|0);
   $call1113 = (_cons($1198,$call1112)|0);
   $1204 = HEAP32[40>>2]|0;
   $call1114 = (_cons($call1113,$1204)|0);
   $temp = $call1114;
   $1205 = $insts$addr;
   $1206 = $temp;
   $1207 = $vt$addr;
   $1208 = $tail_call_flag$addr;
   $1209 = $parent_func_name$addr;
   $1210 = $function_for_compilation$addr;
   $1211 = $env$addr;
   $1212 = $mt$addr;
   $1213 = $module$addr;
   (_compiler($1205,$1206,$1207,$1208,$1209,$1210,$1211,$1212,$1213)|0);
   $1214 = $temp;
   _Object_free($1214);
   $retval = 0;
   $1758 = $retval;
   STACKTOP = sp;return ($1758|0);
  }
  $1215 = $tag;
  $call1117 = (_strcmp($1215,3216)|0);
  $cmp1118 = ($call1117|0)==(0);
  if (!($cmp1118)) {
   $1216 = $tag;
   $call1121 = (_strcmp($1216,7712)|0);
   $cmp1122 = ($call1121|0)==(0);
   if (!($cmp1122)) {
    $1440 = $tag;
    $call1315 = (_strcmp($1440,8136)|0);
    $cmp1316 = ($call1315|0)==(0);
    if ($cmp1316) {
     $1441 = $l$addr;
     $data1319 = (($1441) + 8|0);
     $cdr1321 = (($data1319) + 4|0);
     $1442 = HEAP32[$cdr1321>>2]|0;
     $data1322 = (($1442) + 8|0);
     $1443 = HEAP32[$data1322>>2]|0;
     $var_name = $1443;
     $1444 = $l$addr;
     $data1325 = (($1444) + 8|0);
     $cdr1327 = (($data1325) + 4|0);
     $1445 = HEAP32[$cdr1327>>2]|0;
     $data1328 = (($1445) + 8|0);
     $cdr1330 = (($data1328) + 4|0);
     $1446 = HEAP32[$cdr1330>>2]|0;
     $clauses = $1446;
     $1447 = $mt$addr;
     $length1332 = (($1447) + 256|0);
     $1448 = HEAP32[$length1332>>2]|0;
     $sub1333 = (($1448) - 1)|0;
     $1449 = $mt$addr;
     $arrayidx1335 = (($1449) + ($sub1333<<2)|0);
     $1450 = HEAP32[$arrayidx1335>>2]|0;
     $frame1331 = $1450;
     $1451 = $frame1331;
     $length1336 = (($1451) + 8|0);
     $1452 = HEAP32[$length1336>>2]|0;
     $sub1337 = (($1452) - 1)|0;
     $i = $sub1337;
     while(1) {
      $1453 = $i;
      $cmp1339 = ($1453|0)>=(0);
      if (!($cmp1339)) {
       break;
      }
      $1454 = $var_name;
      $data1342 = (($1454) + 8|0);
      $1455 = HEAP32[$data1342>>2]|0;
      $1456 = $i;
      $1457 = $frame1331;
      $1458 = HEAP32[$1457>>2]|0;
      $arrayidx1346 = (($1458) + ($1456<<2)|0);
      $1459 = HEAP32[$arrayidx1346>>2]|0;
      $1460 = HEAP32[$1459>>2]|0;
      $call1347 = (_strcmp($1455,$1460)|0);
      $cmp1348 = ($call1347|0)==(0);
      if ($cmp1348) {
       label = 213;
       break;
      }
      $1486 = $i;
      $dec1372 = (($1486) + -1)|0;
      $i = $dec1372;
     }
     if ((label|0) == 213) {
      $1461 = $i;
      $1462 = $frame1331;
      $1463 = HEAP32[$1462>>2]|0;
      $arrayidx1352 = (($1463) + ($1461<<2)|0);
      $1464 = HEAP32[$arrayidx1352>>2]|0;
      $1465 = HEAP32[$1464>>2]|0;
      _free($1465);
      $1466 = $i;
      $1467 = $frame1331;
      $1468 = HEAP32[$1467>>2]|0;
      $arrayidx1355 = (($1468) + ($1466<<2)|0);
      $1469 = HEAP32[$arrayidx1355>>2]|0;
      $clauses1356 = (($1469) + 4|0);
      $1470 = HEAP32[$clauses1356>>2]|0;
      $use_count = (($1470) + 4|0);
      $1471 = HEAP32[$use_count>>2]|0;
      $dec1357 = (($1471) + -1)|0;
      HEAP32[$use_count>>2] = $dec1357;
      $1472 = $i;
      $1473 = $frame1331;
      $1474 = HEAP32[$1473>>2]|0;
      $arrayidx1359 = (($1474) + ($1472<<2)|0);
      $1475 = HEAP32[$arrayidx1359>>2]|0;
      $clauses1360 = (($1475) + 4|0);
      $1476 = HEAP32[$clauses1360>>2]|0;
      _Object_free($1476);
      $1477 = $clauses;
      $use_count1361 = (($1477) + 4|0);
      $1478 = HEAP32[$use_count1361>>2]|0;
      $add1362 = (($1478) + 1)|0;
      HEAP32[$use_count1361>>2] = $add1362;
      $1479 = $var_name;
      $data1363 = (($1479) + 8|0);
      $1480 = HEAP32[$data1363>>2]|0;
      $1481 = $clauses;
      $1482 = $vt$addr;
      $call1366 = (_VT_copy($1482)|0);
      $call1367 = (_Macro_init($1480,$1481,$call1366)|0);
      $1483 = $i;
      $1484 = $frame1331;
      $1485 = HEAP32[$1484>>2]|0;
      $arrayidx1369 = (($1485) + ($1483<<2)|0);
      HEAP32[$arrayidx1369>>2] = $call1367;
      $retval = 0;
      $1758 = $retval;
      STACKTOP = sp;return ($1758|0);
     }
     $1487 = $frame1331;
     $length1374 = (($1487) + 8|0);
     $1488 = HEAP32[$length1374>>2]|0;
     $1489 = $frame1331;
     $size1375 = (($1489) + 4|0);
     $1490 = HEAP32[$size1375>>2]|0;
     $cmp1376 = ($1488|0)==($1490|0);
     if ($cmp1376) {
      $1491 = $frame1331;
      $size1379 = (($1491) + 4|0);
      $1492 = HEAP32[$size1379>>2]|0;
      $mul1380 = $1492<<1;
      HEAP32[$size1379>>2] = $mul1380;
      $1493 = $frame1331;
      $1494 = HEAP32[$1493>>2]|0;
      $1495 = $frame1331;
      $size1382 = (($1495) + 4|0);
      $1496 = HEAP32[$size1382>>2]|0;
      $call1383 = (_realloc($1494,$1496)|0);
      $1497 = $frame1331;
      HEAP32[$1497>>2] = $call1383;
     }
     $1498 = $clauses;
     $use_count1386 = (($1498) + 4|0);
     $1499 = HEAP32[$use_count1386>>2]|0;
     $add1387 = (($1499) + 1)|0;
     HEAP32[$use_count1386>>2] = $add1387;
     $1500 = $var_name;
     $data1388 = (($1500) + 8|0);
     $1501 = HEAP32[$data1388>>2]|0;
     $1502 = $clauses;
     $1503 = $vt$addr;
     $call1391 = (_VT_copy($1503)|0);
     $call1392 = (_Macro_init($1501,$1502,$call1391)|0);
     $1504 = $frame1331;
     $length1393 = (($1504) + 8|0);
     $1505 = HEAP32[$length1393>>2]|0;
     $1506 = $frame1331;
     $1507 = HEAP32[$1506>>2]|0;
     $arrayidx1395 = (($1507) + ($1505<<2)|0);
     HEAP32[$arrayidx1395>>2] = $call1392;
     $1508 = $frame1331;
     $length1396 = (($1508) + 8|0);
     $1509 = HEAP32[$length1396>>2]|0;
     $add1397 = (($1509) + 1)|0;
     HEAP32[$length1396>>2] = $add1397;
     $retval = 0;
     $1758 = $retval;
     STACKTOP = sp;return ($1758|0);
    }
    $1510 = $l$addr;
    $data1399 = (($1510) + 8|0);
    $1511 = HEAP32[$data1399>>2]|0;
    $1512 = HEAP32[$1511>>2]|0;
    $cmp1403 = ($1512|0)==(4);
    do {
     if ($cmp1403) {
      $1513 = $mt$addr;
      $1514 = $l$addr;
      $data1406 = (($1514) + 8|0);
      $1515 = HEAP32[$data1406>>2]|0;
      $data1409 = (($1515) + 8|0);
      $1516 = HEAP32[$data1409>>2]|0;
      _MT_find($1513,$1516,$vt_find);
      $1517 = HEAP32[$vt_find>>2]|0;
      $cmp1414 = ($1517|0)!=(-1);
      if (!($cmp1414)) {
       break;
      }
      $arrayidx1417 = (($vt_find) + 4|0);
      $1518 = HEAP32[$arrayidx1417>>2]|0;
      $1519 = HEAP32[$vt_find>>2]|0;
      $1520 = $mt$addr;
      $arrayidx1420 = (($1520) + ($1519<<2)|0);
      $1521 = HEAP32[$arrayidx1420>>2]|0;
      $1522 = HEAP32[$1521>>2]|0;
      $arrayidx1422 = (($1522) + ($1518<<2)|0);
      $1523 = HEAP32[$arrayidx1422>>2]|0;
      $1524 = $l$addr;
      $data1423 = (($1524) + 8|0);
      $cdr1425 = (($data1423) + 4|0);
      $1525 = HEAP32[$cdr1425>>2]|0;
      $1526 = $mt$addr;
      $1527 = $env$addr;
      $1528 = $insts$addr;
      $1529 = $module$addr;
      $call1426 = (_macro_expand_for_compilation($1523,$1525,$1526,$1527,$1528,$1529)|0);
      $expand = $call1426;
      $1530 = $insts$addr;
      $1531 = $expand;
      $1532 = $vt$addr;
      $1533 = $tail_call_flag$addr;
      $1534 = $parent_func_name$addr;
      $1535 = $function_for_compilation$addr;
      $1536 = $env$addr;
      $1537 = $mt$addr;
      $1538 = $module$addr;
      (_compiler($1530,$1531,$1532,$1533,$1534,$1535,$1536,$1537,$1538)|0);
      $1539 = $expand;
      _Object_free($1539);
      $retval = 0;
      $1758 = $retval;
      STACKTOP = sp;return ($1758|0);
     }
    } while(0);
    $1540 = $tail_call_flag$addr;
    $tobool1430 = ($1540|0)!=(0);
    if (!($tobool1430)) {
     $1720 = $insts$addr;
     $1721 = $l$addr;
     $data1593 = (($1721) + 8|0);
     $1722 = HEAP32[$data1593>>2]|0;
     $1723 = $vt$addr;
     $1724 = $parent_func_name$addr;
     $1725 = $function_for_compilation$addr;
     $1726 = $env$addr;
     $1727 = $mt$addr;
     $1728 = $module$addr;
     (_compiler($1720,$1722,$1723,0,$1724,$1725,$1726,$1727,$1728)|0);
     $1729 = $insts$addr;
     _Insts_push($1729,20480);
     $param_num1597 = 0;
     $1730 = $l$addr;
     $data1599 = (($1730) + 8|0);
     $cdr1601 = (($data1599) + 4|0);
     $1731 = HEAP32[$cdr1601>>2]|0;
     $p1598 = $1731;
     while(1) {
      $1732 = $p1598;
      $1733 = HEAP32[40>>2]|0;
      $cmp1604 = ($1732|0)!=($1733|0);
      if (!($cmp1604)) {
       break;
      }
      $1734 = $p1598;
      $data1607 = (($1734) + 8|0);
      $1735 = HEAP32[$data1607>>2]|0;
      $1736 = $param_num1597;
      $arrayidx1610 = (($params1602) + ($1736<<2)|0);
      HEAP32[$arrayidx1610>>2] = $1735;
      $1737 = $param_num1597;
      $inc1611 = (($1737) + 1)|0;
      $param_num1597 = $inc1611;
      $1738 = $p1598;
      $data1612 = (($1738) + 8|0);
      $cdr1614 = (($data1612) + 4|0);
      $1739 = HEAP32[$cdr1614>>2]|0;
      $p1598 = $1739;
     }
     $i = 0;
     while(1) {
      $1740 = $i;
      $1741 = $param_num1597;
      $cmp1617 = ($1740|0)<($1741|0);
      if (!($cmp1617)) {
       break;
      }
      $1742 = $insts$addr;
      $1743 = $i;
      $arrayidx1620 = (($params1602) + ($1743<<2)|0);
      $1744 = HEAP32[$arrayidx1620>>2]|0;
      $1745 = $vt$addr;
      $1746 = $parent_func_name$addr;
      $1747 = $function_for_compilation$addr;
      $1748 = $env$addr;
      $1749 = $mt$addr;
      $1750 = $module$addr;
      (_compiler($1742,$1744,$1745,0,$1746,$1747,$1748,$1749,$1750)|0);
      $1751 = $insts$addr;
      _Insts_push($1751,24576);
      $1752 = $i;
      $inc1623 = (($1752) + 1)|0;
      $i = $inc1623;
     }
     $1753 = $insts$addr;
     $1754 = $param_num1597;
     $and1625 = 4095 & $1754;
     $or1626 = 28672 | $and1625;
     $conv1627 = $or1626&65535;
     _Insts_push($1753,$conv1627);
     $retval = 0;
     $1758 = $retval;
     STACKTOP = sp;return ($1758|0);
    }
    $1541 = $vt$addr;
    $length1432 = (($1541) + 256|0);
    $1542 = HEAP32[$length1432>>2]|0;
    $sub1433 = (($1542) - 1)|0;
    $1543 = $vt$addr;
    $arrayidx1435 = (($1543) + ($sub1433<<2)|0);
    $1544 = HEAP32[$arrayidx1435>>2]|0;
    $length1436 = (($1544) + 4|0);
    $1545 = HEAP32[$length1436>>2]|0;
    $start_index = $1545;
    $1546 = $start_index;
    $track_index = $1546;
    $param_num1437 = 0;
    $1547 = $l$addr;
    $data1439 = (($1547) + 8|0);
    $cdr1441 = (($data1439) + 4|0);
    $1548 = HEAP32[$cdr1441>>2]|0;
    $p1438 = $1548;
    $count_params = 0;
    while(1) {
     $1549 = $p1438;
     $1550 = HEAP32[40>>2]|0;
     $cmp1444 = ($1549|0)!=($1550|0);
     if (!($cmp1444)) {
      break;
     }
     $1551 = $p1438;
     $data1447 = (($1551) + 8|0);
     $1552 = HEAP32[$data1447>>2]|0;
     $1553 = $param_num1437;
     $arrayidx1450 = (($params1442) + ($1553<<2)|0);
     HEAP32[$arrayidx1450>>2] = $1552;
     $1554 = $param_num1437;
     $inc1451 = (($1554) + 1)|0;
     $param_num1437 = $inc1451;
     $1555 = $p1438;
     $data1452 = (($1555) + 8|0);
     $cdr1454 = (($data1452) + 4|0);
     $1556 = HEAP32[$cdr1454>>2]|0;
     $p1438 = $1556;
    }
    $1557 = $param_num1437;
    $cmp1456 = ($1557|0)==(1);
    if ($cmp1456) {
     $1558 = $insts$addr;
     $1559 = HEAP32[$params1442>>2]|0;
     $1560 = $vt$addr;
     $1561 = $parent_func_name$addr;
     $1562 = $function_for_compilation$addr;
     $1563 = $env$addr;
     $1564 = $mt$addr;
     $1565 = $module$addr;
     (_compiler($1558,$1559,$1560,0,$1561,$1562,$1563,$1564,$1565)|0);
     $1566 = $insts$addr;
     $1567 = $vt$addr;
     $length1461 = (($1567) + 256|0);
     $1568 = HEAP32[$length1461>>2]|0;
     $sub1462 = (($1568) - 1)|0;
     $or1463 = 0 | $sub1462;
     $conv1464 = $or1463&65535;
     _Insts_push($1566,$conv1464);
     $1569 = $insts$addr;
     _Insts_push($1569,0);
    } else {
     $i = 0;
     while(1) {
      $1570 = $i;
      $1571 = $param_num1437;
      $cmp1467 = ($1570|0)<($1571|0);
      if (!($cmp1467)) {
       break;
      }
      $1572 = $i;
      $1573 = $function_for_compilation$addr;
      $variadic_place1470 = (($1573) + 4|0);
      $1574 = HEAP32[$variadic_place1470>>2]|0;
      $cmp1471 = ($1572|0)==($1574|0);
      if ($cmp1471) {
       $1575 = $count_params;
       $inc1474 = (($1575) + 1)|0;
       $count_params = $inc1474;
       $1576 = HEAP32[40>>2]|0;
       $p1438 = $1576;
       $1577 = $param_num1437;
       $sub1475 = (($1577) - 1)|0;
       $j = $sub1475;
       while(1) {
        $1578 = $j;
        $1579 = $i;
        $cmp1477 = ($1578|0)>=($1579|0);
        if (!($cmp1477)) {
         break;
        }
        $1580 = HEAP32[3176>>2]|0;
        $1581 = $j;
        $arrayidx1480 = (($params1442) + ($1581<<2)|0);
        $1582 = HEAP32[$arrayidx1480>>2]|0;
        $1583 = $p1438;
        $1584 = HEAP32[40>>2]|0;
        $call1481 = (_cons($1583,$1584)|0);
        $call1482 = (_cons($1582,$call1481)|0);
        $call1483 = (_cons($1580,$call1482)|0);
        $p1438 = $call1483;
        $1585 = $j;
        $dec1485 = (($1585) + -1)|0;
        $j = $dec1485;
       }
       $1586 = $insts$addr;
       $1587 = $p1438;
       $1588 = $vt$addr;
       $1589 = $parent_func_name$addr;
       $1590 = $function_for_compilation$addr;
       $1591 = $env$addr;
       $1592 = $mt$addr;
       $1593 = $module$addr;
       (_compiler($1586,$1587,$1588,0,$1589,$1590,$1591,$1592,$1593)|0);
       $1594 = $p1438;
       _Object_free($1594);
       $1595 = $insts$addr;
       $1596 = $track_index;
       $or1488 = 45056 | $1596;
       $conv1489 = $or1488&65535;
       _Insts_push($1595,$conv1489);
      } else {
       $1597 = $count_params;
       $inc1491 = (($1597) + 1)|0;
       $count_params = $inc1491;
       $1598 = $insts$addr;
       $1599 = $i;
       $arrayidx1492 = (($params1442) + ($1599<<2)|0);
       $1600 = HEAP32[$arrayidx1492>>2]|0;
       $1601 = $vt$addr;
       $1602 = $parent_func_name$addr;
       $1603 = $function_for_compilation$addr;
       $1604 = $env$addr;
       $1605 = $mt$addr;
       $1606 = $module$addr;
       (_compiler($1598,$1600,$1601,0,$1602,$1603,$1604,$1605,$1606)|0);
       $1607 = $insts$addr;
       $1608 = $track_index;
       $or1494 = 45056 | $1608;
       $conv1495 = $or1494&65535;
       _Insts_push($1607,$conv1495);
      }
      $1609 = $track_index;
      $inc1497 = (($1609) + 1)|0;
      $track_index = $inc1497;
      $1610 = $i;
      $inc1499 = (($1610) + 1)|0;
      $i = $inc1499;
     }
     $1611 = $function_for_compilation$addr;
     $is_tail_call1501 = (($1611) + 20|0);
     $bf$load1502 = HEAP8[$is_tail_call1501>>0]|0;
     $bf$shl = ($bf$load1502 << 7)&255;
     $bf$ashr = ($bf$shl<<24>>24) >> 7;
     $bf$cast = $bf$ashr << 24 >> 24;
     $tobool1503 = ($bf$cast|0)!=(0);
     if (!($tobool1503)) {
      $i = 0;
      while(1) {
       $1612 = $i;
       $1613 = $count_params;
       $cmp1506 = ($1612|0)<($1613|0);
       if (!($cmp1506)) {
        break;
       }
       $1614 = $function_for_compilation$addr;
       $vt1509 = (($1614) + 16|0);
       $1615 = HEAP32[$vt1509>>2]|0;
       $length1510 = (($1615) + 256|0);
       $1616 = HEAP32[$length1510>>2]|0;
       $sub1511 = (($1616) - 1)|0;
       $1617 = $function_for_compilation$addr;
       $vt1512 = (($1617) + 16|0);
       $1618 = HEAP32[$vt1512>>2]|0;
       $arrayidx1514 = (($1618) + ($sub1511<<2)|0);
       $1619 = HEAP32[$arrayidx1514>>2]|0;
       _VTF_push($1619,0);
       $1620 = $i;
       $inc1516 = (($1620) + 1)|0;
       $i = $inc1516;
      }
      $1621 = $function_for_compilation$addr;
      $variadic_place1518 = (($1621) + 4|0);
      $1622 = HEAP32[$variadic_place1518>>2]|0;
      $cmp1519 = ($1622|0)==(-1);
      do {
       if ($cmp1519) {
        $1623 = $i;
        $1624 = $function_for_compilation$addr;
        $1625 = HEAP32[$1624>>2]|0;
        $cmp1523 = ($1623>>>0)<($1625>>>0);
        if (!($cmp1523)) {
         break;
        }
        while(1) {
         $1626 = $i;
         $1627 = $function_for_compilation$addr;
         $1628 = HEAP32[$1627>>2]|0;
         $cmp1528 = ($1626>>>0)<($1628>>>0);
         if (!($cmp1528)) {
          break;
         }
         $1629 = $function_for_compilation$addr;
         $vt1531 = (($1629) + 16|0);
         $1630 = HEAP32[$vt1531>>2]|0;
         $length1532 = (($1630) + 256|0);
         $1631 = HEAP32[$length1532>>2]|0;
         $sub1533 = (($1631) - 1)|0;
         $1632 = $function_for_compilation$addr;
         $vt1534 = (($1632) + 16|0);
         $1633 = HEAP32[$vt1534>>2]|0;
         $arrayidx1536 = (($1633) + ($sub1533<<2)|0);
         $1634 = HEAP32[$arrayidx1536>>2]|0;
         _VTF_push($1634,0);
         $1635 = $i;
         $inc1538 = (($1635) + 1)|0;
         $i = $inc1538;
        }
       }
      } while(0);
     }
     $i = 0;
     while(1) {
      $1636 = $i;
      $1637 = $count_params;
      $cmp1543 = ($1636|0)<($1637|0);
      if (!($cmp1543)) {
       break;
      }
      $1638 = $insts$addr;
      $1639 = $vt$addr;
      $length1546 = (($1639) + 256|0);
      $1640 = HEAP32[$length1546>>2]|0;
      $sub1547 = (($1640) - 1)|0;
      $or1548 = 4096 | $sub1547;
      $conv1549 = $or1548&65535;
      _Insts_push($1638,$conv1549);
      $1641 = $insts$addr;
      $1642 = $start_index;
      $1643 = $i;
      $add1550 = (($1642) + ($1643))|0;
      $conv1551 = $add1550&65535;
      _Insts_push($1641,$conv1551);
      $1644 = $insts$addr;
      $1645 = $vt$addr;
      $length1552 = (($1645) + 256|0);
      $1646 = HEAP32[$length1552>>2]|0;
      $sub1553 = (($1646) - 1)|0;
      $or1554 = 0 | $sub1553;
      $conv1555 = $or1554&65535;
      _Insts_push($1644,$conv1555);
      $1647 = $insts$addr;
      $1648 = $i;
      $conv1556 = $1648&65535;
      _Insts_push($1647,$conv1556);
      $1649 = $i;
      $inc1558 = (($1649) + 1)|0;
      $i = $inc1558;
     }
     $1650 = $function_for_compilation$addr;
     $variadic_place1560 = (($1650) + 4|0);
     $1651 = HEAP32[$variadic_place1560>>2]|0;
     $cmp1561 = ($1651|0)==(-1);
     do {
      if ($cmp1561) {
       $1652 = $i;
       $1653 = $function_for_compilation$addr;
       $1654 = HEAP32[$1653>>2]|0;
       $cmp1565 = ($1652>>>0)<($1654>>>0);
       if (!($cmp1565)) {
        break;
       }
       while(1) {
        $1655 = $i;
        $1656 = $function_for_compilation$addr;
        $1657 = HEAP32[$1656>>2]|0;
        $cmp1570 = ($1655>>>0)<($1657>>>0);
        if (!($cmp1570)) {
         break;
        }
        $1658 = $insts$addr;
        _Insts_push($1658,9216);
        $1659 = $insts$addr;
        $1660 = $vt$addr;
        $length1573 = (($1660) + 256|0);
        $1661 = HEAP32[$length1573>>2]|0;
        $sub1574 = (($1661) - 1)|0;
        $or1575 = 0 | $sub1574;
        $conv1576 = $or1575&65535;
        _Insts_push($1659,$conv1576);
        $1662 = $insts$addr;
        $1663 = $i;
        $conv1577 = $1663&65535;
        _Insts_push($1662,$conv1577);
        $1664 = $i;
        $inc1579 = (($1664) + 1)|0;
        $i = $inc1579;
       }
      }
     } while(0);
    }
    $1665 = $function_for_compilation$addr;
    $start_pc1582 = (($1665) + 8|0);
    $1666 = $start_pc1582;
    $1667 = $1666;
    $1668 = HEAP32[$1667>>2]|0;
    $1669 = (($1666) + 4)|0;
    $1670 = $1669;
    $1671 = HEAP32[$1670>>2]|0;
    $1672 = $start_pc;
    $1673 = $1672;
    HEAP32[$1673>>2] = $1668;
    $1674 = (($1672) + 4)|0;
    $1675 = $1674;
    HEAP32[$1675>>2] = $1671;
    $1676 = $insts$addr;
    _Insts_push($1676,-32768);
    $1677 = $insts$addr;
    $length1583 = (($1677) + 8|0);
    $1678 = $length1583;
    $1679 = $1678;
    $1680 = HEAP32[$1679>>2]|0;
    $1681 = (($1678) + 4)|0;
    $1682 = $1681;
    $1683 = HEAP32[$1682>>2]|0;
    $1684 = $start_pc;
    $1685 = $1684;
    $1686 = HEAP32[$1685>>2]|0;
    $1687 = (($1684) + 4)|0;
    $1688 = $1687;
    $1689 = HEAP32[$1688>>2]|0;
    $1690 = (_i64Subtract(($1680|0),($1683|0),($1686|0),($1689|0))|0);
    $1691 = tempRet0;
    $1692 = (_i64Subtract(0,0,($1690|0),($1691|0))|0);
    $1693 = tempRet0;
    $1694 = (_i64Add(($1692|0),($1693|0),1,0)|0);
    $1695 = tempRet0;
    $1696 = $jump_steps;
    $1697 = $1696;
    HEAP32[$1697>>2] = $1694;
    $1698 = (($1696) + 4)|0;
    $1699 = $1698;
    HEAP32[$1699>>2] = $1695;
    $1700 = $insts$addr;
    $1701 = $jump_steps;
    $1702 = $1701;
    $1703 = HEAP32[$1702>>2]|0;
    $1704 = (($1701) + 4)|0;
    $1705 = $1704;
    $1706 = HEAP32[$1705>>2]|0;
    $1707 = -65536 & $1703;
    $1708 = (_bitshift64Lshr(($1707|0),0,16)|0);
    $1709 = tempRet0;
    $1710 = $1708&65535;
    _Insts_push($1700,$1710);
    $1711 = $insts$addr;
    $1712 = $jump_steps;
    $1713 = $1712;
    $1714 = HEAP32[$1713>>2]|0;
    $1715 = (($1712) + 4)|0;
    $1716 = $1715;
    $1717 = HEAP32[$1716>>2]|0;
    $1718 = 65535 & $1714;
    $1719 = $1718&65535;
    _Insts_push($1711,$1719);
    $retval = 0;
    $1758 = $retval;
    STACKTOP = sp;return ($1758|0);
   }
  }
  $1217 = $l$addr;
  $data1125 = (($1217) + 8|0);
  $cdr1127 = (($data1125) + 4|0);
  $1218 = HEAP32[$cdr1127>>2]|0;
  $data1128 = (($1218) + 8|0);
  $1219 = HEAP32[$data1128>>2]|0;
  $params = $1219;
  $variadic_place = -1;
  $counter = 0;
  $1220 = $vt$addr;
  $call1131 = (_VT_copy($1220)|0);
  $vt_ = $call1131;
  $1221 = $mt$addr;
  $call1132 = (_MT_copy($1221)|0);
  $mt_ = $call1132;
  $1222 = $vt_;
  _VT_add_new_empty_frame($1222);
  $1223 = $mt_;
  _MT_add_new_empty_frame($1223);
  while(1) {
   $1224 = $params;
   $1225 = HEAP32[40>>2]|0;
   $cmp1135 = ($1224|0)==($1225|0);
   if ($cmp1135) {
    label = 186;
    break;
   }
   $1226 = $params;
   $data1139 = (($1226) + 8|0);
   $1227 = HEAP32[$data1139>>2]|0;
   $1228 = HEAP32[$1227>>2]|0;
   $cmp1143 = ($1228|0)!=(4);
   if ($cmp1143) {
    label = 188;
    break;
   }
   $1232 = $params;
   $data1150 = (($1232) + 8|0);
   $1233 = HEAP32[$data1150>>2]|0;
   $data1153 = (($1233) + 8|0);
   $1234 = HEAP32[$data1153>>2]|0;
   $call1156 = (_strcmp($1234,7536)|0);
   $cmp1157 = ($call1156|0)==(0);
   if ($cmp1157) {
    label = 190;
    break;
   }
   $1245 = $vt_;
   $length1175 = (($1245) + 256|0);
   $1246 = HEAP32[$length1175>>2]|0;
   $sub1176 = (($1246) - 1)|0;
   $1247 = $vt_;
   $arrayidx1178 = (($1247) + ($sub1176<<2)|0);
   $1248 = HEAP32[$arrayidx1178>>2]|0;
   $1249 = $params;
   $data1179 = (($1249) + 8|0);
   $1250 = HEAP32[$data1179>>2]|0;
   $data1182 = (($1250) + 8|0);
   $1251 = HEAP32[$data1182>>2]|0;
   _VTF_push($1248,$1251);
   $1252 = $counter;
   $inc1185 = (($1252) + 1)|0;
   $counter = $inc1185;
   $1253 = $params;
   $data1186 = (($1253) + 8|0);
   $cdr1188 = (($data1186) + 4|0);
   $1254 = HEAP32[$cdr1188>>2]|0;
   $params = $1254;
  }
  if ((label|0) == 186) {
  }
  else if ((label|0) == 188) {
   (_printf((8096|0),($vararg_buffer43|0))|0);
   $1229 = $l$addr;
   $call1147 = (_to_string($1229)|0);
   $string = $call1147;
   $1230 = $string;
   HEAP32[$vararg_buffer45>>2] = $1230;
   (_printf((7952|0),($vararg_buffer45|0))|0);
   $1231 = $string;
   _free($1231);
   $retval = 0;
   $1758 = $retval;
   STACKTOP = sp;return ($1758|0);
  }
  else if ((label|0) == 190) {
   $1235 = $counter;
   $variadic_place = $1235;
   $1236 = $vt_;
   $length1160 = (($1236) + 256|0);
   $1237 = HEAP32[$length1160>>2]|0;
   $sub1161 = (($1237) - 1)|0;
   $1238 = $vt_;
   $arrayidx1163 = (($1238) + ($sub1161<<2)|0);
   $1239 = HEAP32[$arrayidx1163>>2]|0;
   $1240 = $params;
   $data1164 = (($1240) + 8|0);
   $cdr1166 = (($data1164) + 4|0);
   $1241 = HEAP32[$cdr1166>>2]|0;
   $data1167 = (($1241) + 8|0);
   $1242 = HEAP32[$data1167>>2]|0;
   $data1170 = (($1242) + 8|0);
   $1243 = HEAP32[$data1170>>2]|0;
   _VTF_push($1239,$1243);
   $1244 = $counter;
   $add1173 = (($1244) + 1)|0;
   $counter = $add1173;
  }
  $1255 = $insts$addr;
  $1256 = $counter;
  $shl1190 = $1256 << 6;
  $or1191 = 12288 | $shl1190;
  $1257 = $variadic_place;
  $cmp1192 = ($1257|0)==(-1);
  if ($cmp1192) {
   $cond1198 = 0;
  } else {
   $1258 = $variadic_place;
   $shl1196 = $1258 << 1;
   $cond1198 = $shl1196;
  }
  $or1199 = $or1191 | $cond1198;
  $1259 = $variadic_place;
  $cmp1200 = ($1259|0)==(-1);
  $cond1202 = $cmp1200 ? 0 : 1;
  $or1203 = $or1199 | $cond1202;
  $conv1204 = $or1203&65535;
  _Insts_push($1255,$conv1204);
  $1260 = $insts$addr;
  $length1205 = (($1260) + 8|0);
  $1261 = $length1205;
  $1262 = $1261;
  $1263 = HEAP32[$1262>>2]|0;
  $1264 = (($1261) + 4)|0;
  $1265 = $1264;
  $1266 = HEAP32[$1265>>2]|0;
  $1267 = $index1;
  $1268 = $1267;
  HEAP32[$1268>>2] = $1263;
  $1269 = (($1267) + 4)|0;
  $1270 = $1269;
  HEAP32[$1270>>2] = $1266;
  $1271 = $insts$addr;
  _Insts_push($1271,0);
  $1272 = $insts$addr;
  _Insts_push($1272,0);
  $1273 = $insts$addr;
  $length1206 = (($1273) + 8|0);
  $1274 = $length1206;
  $1275 = $1274;
  $1276 = HEAP32[$1275>>2]|0;
  $1277 = (($1274) + 4)|0;
  $1278 = $1277;
  $1279 = HEAP32[$1278>>2]|0;
  $1280 = $start_pc;
  $1281 = $1280;
  HEAP32[$1281>>2] = $1276;
  $1282 = (($1280) + 4)|0;
  $1283 = $1282;
  HEAP32[$1283>>2] = $1279;
  $call1207 = (_malloc(24)|0);
  $function_ = $call1207;
  $1284 = $start_pc;
  $1285 = $1284;
  $1286 = HEAP32[$1285>>2]|0;
  $1287 = (($1284) + 4)|0;
  $1288 = $1287;
  $1289 = HEAP32[$1288>>2]|0;
  $1290 = $function_;
  $start_pc1208 = (($1290) + 8|0);
  $1291 = $start_pc1208;
  $1292 = $1291;
  HEAP32[$1292>>2] = $1286;
  $1293 = (($1291) + 4)|0;
  $1294 = $1293;
  HEAP32[$1294>>2] = $1289;
  $1295 = $counter;
  $1296 = $function_;
  HEAP32[$1296>>2] = $1295;
  $1297 = $variadic_place;
  $1298 = $function_;
  $variadic_place1209 = (($1298) + 4|0);
  HEAP32[$variadic_place1209>>2] = $1297;
  $1299 = $vt_;
  $1300 = $function_;
  $vt1210 = (($1300) + 16|0);
  HEAP32[$vt1210>>2] = $1299;
  $1301 = $function_;
  $is_tail_call = (($1301) + 20|0);
  $bf$load = HEAP8[$is_tail_call>>0]|0;
  $bf$clear = $bf$load & -2;
  HEAP8[$is_tail_call>>0] = $bf$clear;
  $1302 = $insts$addr;
  $1303 = $l$addr;
  $data1211 = (($1303) + 8|0);
  $cdr1213 = (($data1211) + 4|0);
  $1304 = HEAP32[$cdr1213>>2]|0;
  $data1214 = (($1304) + 8|0);
  $cdr1216 = (($data1214) + 4|0);
  $1305 = HEAP32[$cdr1216>>2]|0;
  $1306 = $vt_;
  $1307 = $parent_func_name$addr;
  $1308 = $function_;
  $1309 = $env$addr;
  $1310 = $mt_;
  $1311 = $module$addr;
  (_compiler_begin($1302,$1305,$1306,$1307,$1308,0,$1309,$1310,$1311)|0);
  $1312 = $insts$addr;
  _Insts_push($1312,16384);
  $1313 = $insts$addr;
  $length1218 = (($1313) + 8|0);
  $1314 = $length1218;
  $1315 = $1314;
  $1316 = HEAP32[$1315>>2]|0;
  $1317 = (($1314) + 4)|0;
  $1318 = $1317;
  $1319 = HEAP32[$1318>>2]|0;
  $1320 = $index2;
  $1321 = $1320;
  HEAP32[$1321>>2] = $1316;
  $1322 = (($1320) + 4)|0;
  $1323 = $1322;
  HEAP32[$1323>>2] = $1319;
  $1324 = $index2;
  $1325 = $1324;
  $1326 = HEAP32[$1325>>2]|0;
  $1327 = (($1324) + 4)|0;
  $1328 = $1327;
  $1329 = HEAP32[$1328>>2]|0;
  $1330 = $index1;
  $1331 = $1330;
  $1332 = HEAP32[$1331>>2]|0;
  $1333 = (($1330) + 4)|0;
  $1334 = $1333;
  $1335 = HEAP32[$1334>>2]|0;
  $1336 = (_i64Subtract(($1326|0),($1329|0),($1332|0),($1335|0))|0);
  $1337 = tempRet0;
  $1338 = (_i64Add(($1336|0),($1337|0),1,0)|0);
  $1339 = tempRet0;
  $1340 = $1338&65535;
  $1341 = $index1;
  $1342 = $1341;
  $1343 = HEAP32[$1342>>2]|0;
  $1344 = (($1341) + 4)|0;
  $1345 = $1344;
  $1346 = HEAP32[$1345>>2]|0;
  $1347 = $insts$addr;
  $1348 = HEAP32[$1347>>2]|0;
  $arrayidx1224 = (($1348) + ($1343<<1)|0);
  HEAP16[$arrayidx1224>>1] = $1340;
  $1349 = $variadic_place;
  $cmp1225 = ($1349|0)!=(-1);
  if ($cmp1225) {
   $1350 = $index1;
   $1351 = $1350;
   $1352 = HEAP32[$1351>>2]|0;
   $1353 = (($1350) + 4)|0;
   $1354 = $1353;
   $1355 = HEAP32[$1354>>2]|0;
   $1356 = (_i64Add(($1352|0),($1355|0),1,0)|0);
   $1357 = tempRet0;
   $1358 = $insts$addr;
   $1359 = HEAP32[$1358>>2]|0;
   $arrayidx1231 = (($1359) + ($1356<<1)|0);
   HEAP16[$arrayidx1231>>1] = 64;
  } else {
   $1360 = $vt_;
   $length1233 = (($1360) + 256|0);
   $1361 = HEAP32[$length1233>>2]|0;
   $sub1234 = (($1361) - 1)|0;
   $1362 = $vt_;
   $arrayidx1236 = (($1362) + ($sub1234<<2)|0);
   $1363 = HEAP32[$arrayidx1236>>2]|0;
   $length1237 = (($1363) + 4|0);
   $1364 = HEAP32[$length1237>>2]|0;
   $conv1238 = $1364&65535;
   $1365 = $index1;
   $1366 = $1365;
   $1367 = HEAP32[$1366>>2]|0;
   $1368 = (($1365) + 4)|0;
   $1369 = $1368;
   $1370 = HEAP32[$1369>>2]|0;
   $1371 = (_i64Add(($1367|0),($1370|0),1,0)|0);
   $1372 = tempRet0;
   $1373 = $insts$addr;
   $1374 = HEAP32[$1373>>2]|0;
   $arrayidx1242 = (($1374) + ($1371<<1)|0);
   HEAP16[$arrayidx1242>>1] = $conv1238;
  }
  $i = 0;
  while(1) {
   $1375 = $i;
   $1376 = $vt_;
   $length1245 = (($1376) + 256|0);
   $1377 = HEAP32[$length1245>>2]|0;
   $sub1246 = (($1377) - 1)|0;
   $1378 = $vt_;
   $arrayidx1248 = (($1378) + ($sub1246<<2)|0);
   $1379 = HEAP32[$arrayidx1248>>2]|0;
   $length1249 = (($1379) + 4|0);
   $1380 = HEAP32[$length1249>>2]|0;
   $cmp1250 = ($1375>>>0)<($1380>>>0);
   if (!($cmp1250)) {
    break;
   }
   $1381 = $i;
   $1382 = $vt_;
   $length1253 = (($1382) + 256|0);
   $1383 = HEAP32[$length1253>>2]|0;
   $sub1254 = (($1383) - 1)|0;
   $1384 = $vt_;
   $arrayidx1256 = (($1384) + ($sub1254<<2)|0);
   $1385 = HEAP32[$arrayidx1256>>2]|0;
   $1386 = HEAP32[$1385>>2]|0;
   $arrayidx1258 = (($1386) + ($1381<<2)|0);
   $1387 = HEAP32[$arrayidx1258>>2]|0;
   $cmp1259 = ($1387|0)!=(0|0);
   if ($cmp1259) {
    $1388 = $i;
    $1389 = $vt_;
    $length1262 = (($1389) + 256|0);
    $1390 = HEAP32[$length1262>>2]|0;
    $sub1263 = (($1390) - 1)|0;
    $1391 = $vt_;
    $arrayidx1265 = (($1391) + ($sub1263<<2)|0);
    $1392 = HEAP32[$arrayidx1265>>2]|0;
    $1393 = HEAP32[$1392>>2]|0;
    $arrayidx1267 = (($1393) + ($1388<<2)|0);
    $1394 = HEAP32[$arrayidx1267>>2]|0;
    _free($1394);
    $1395 = $i;
    $1396 = $vt_;
    $length1268 = (($1396) + 256|0);
    $1397 = HEAP32[$length1268>>2]|0;
    $sub1269 = (($1397) - 1)|0;
    $1398 = $vt_;
    $arrayidx1271 = (($1398) + ($sub1269<<2)|0);
    $1399 = HEAP32[$arrayidx1271>>2]|0;
    $1400 = HEAP32[$1399>>2]|0;
    $arrayidx1273 = (($1400) + ($1395<<2)|0);
    HEAP32[$arrayidx1273>>2] = 0;
   }
   $1401 = $i;
   $inc1276 = (($1401) + 1)|0;
   $i = $inc1276;
  }
  $1402 = $vt_;
  $length1278 = (($1402) + 256|0);
  $1403 = HEAP32[$length1278>>2]|0;
  $sub1279 = (($1403) - 1)|0;
  $1404 = $vt_;
  $arrayidx1281 = (($1404) + ($sub1279<<2)|0);
  $1405 = HEAP32[$arrayidx1281>>2]|0;
  $1406 = HEAP32[$1405>>2]|0;
  _free($1406);
  $1407 = $vt_;
  $length1283 = (($1407) + 256|0);
  $1408 = HEAP32[$length1283>>2]|0;
  $sub1284 = (($1408) - 1)|0;
  $1409 = $vt_;
  $arrayidx1286 = (($1409) + ($sub1284<<2)|0);
  $1410 = HEAP32[$arrayidx1286>>2]|0;
  HEAP32[$1410>>2] = 0;
  $1411 = $vt_;
  $length1288 = (($1411) + 256|0);
  $1412 = HEAP32[$length1288>>2]|0;
  $sub1289 = (($1412) - 1)|0;
  $1413 = $vt_;
  $arrayidx1291 = (($1413) + ($sub1289<<2)|0);
  $1414 = HEAP32[$arrayidx1291>>2]|0;
  _free($1414);
  $1415 = $vt_;
  $length1292 = (($1415) + 256|0);
  $1416 = HEAP32[$length1292>>2]|0;
  $sub1293 = (($1416) - 1)|0;
  $1417 = $vt_;
  $arrayidx1295 = (($1417) + ($sub1293<<2)|0);
  HEAP32[$arrayidx1295>>2] = 0;
  $1418 = $vt_;
  _free($1418);
  $1419 = $mt_;
  $length1296 = (($1419) + 256|0);
  $1420 = HEAP32[$length1296>>2]|0;
  $sub1297 = (($1420) - 1)|0;
  $1421 = $mt_;
  $arrayidx1299 = (($1421) + ($sub1297<<2)|0);
  $1422 = HEAP32[$arrayidx1299>>2]|0;
  $top_frame = $1422;
  $i = 0;
  while(1) {
   $1423 = $i;
   $1424 = $top_frame;
   $length1301 = (($1424) + 8|0);
   $1425 = HEAP32[$length1301>>2]|0;
   $cmp1302 = ($1423>>>0)<($1425>>>0);
   if (!($cmp1302)) {
    break;
   }
   $1426 = $i;
   $1427 = $top_frame;
   $1428 = HEAP32[$1427>>2]|0;
   $arrayidx1306 = (($1428) + ($1426<<2)|0);
   $1429 = HEAP32[$arrayidx1306>>2]|0;
   _Macro_free($1429);
   $1430 = $i;
   $1431 = $top_frame;
   $1432 = HEAP32[$1431>>2]|0;
   $arrayidx1308 = (($1432) + ($1430<<2)|0);
   HEAP32[$arrayidx1308>>2] = 0;
   $1433 = $i;
   $inc1310 = (($1433) + 1)|0;
   $i = $inc1310;
  }
  $1434 = $top_frame;
  $1435 = HEAP32[$1434>>2]|0;
  _free($1435);
  $1436 = $top_frame;
  HEAP32[$1436>>2] = 0;
  $1437 = $top_frame;
  _free($1437);
  $1438 = $mt_;
  _free($1438);
  $vt_ = 0;
  $mt_ = 0;
  $1439 = $function_;
  _free($1439);
  $function_ = 0;
  $retval = 0;
  $1758 = $retval;
  STACKTOP = sp;return ($1758|0);
  break;
 }
 case 4:  {
  $133 = $l$addr;
  $data28 = (($133) + 8|0);
  $134 = HEAP32[$data28>>2]|0;
  $135 = HEAP8[$134>>0]|0;
  $conv30 = $135 << 24 >> 24;
  $cmp31 = ($conv30|0)==(34);
  if (!($cmp31)) {
   $249 = $vt$addr;
   $250 = $l$addr;
   $data82 = (($250) + 8|0);
   $251 = HEAP32[$data82>>2]|0;
   $252 = $module$addr;
   _VT_find($249,$251,$vt_find,$252);
   $253 = HEAP32[$vt_find>>2]|0;
   $cmp86 = ($253|0)==(-1);
   if ($cmp86) {
    $254 = $l$addr;
    $data89 = (($254) + 8|0);
    $255 = HEAP32[$data89>>2]|0;
    HEAP32[$vararg_buffer>>2] = $255;
    (_printf((7656|0),($vararg_buffer|0))|0);
    $retval = 0;
    $1758 = $retval;
    STACKTOP = sp;return ($1758|0);
   }
   $256 = $insts$addr;
   $257 = HEAP32[$vt_find>>2]|0;
   $or95 = 4096 | $257;
   $conv96 = $or95&65535;
   _Insts_push($256,$conv96);
   $258 = $insts$addr;
   $arrayidx97 = (($vt_find) + 4|0);
   $259 = HEAP32[$arrayidx97>>2]|0;
   $conv98 = $259&65535;
   _Insts_push($258,$conv98);
   $260 = $l$addr;
   $data99 = (($260) + 8|0);
   $261 = HEAP32[$data99>>2]|0;
   $call102 = (_strcmp($261,7688)|0);
   $cmp103 = ($call102|0)==(0);
   if ($cmp103) {
    label = 26;
   } else {
    $262 = $l$addr;
    $data105 = (($262) + 8|0);
    $263 = HEAP32[$data105>>2]|0;
    $call108 = (_strcmp($263,7696)|0);
    $cmp109 = ($call108|0)==(0);
    if ($cmp109) {
     label = 26;
    }
   }
   if ((label|0) == 26) {
    $264 = $insts$addr;
    _Insts_push($264,16384);
   }
   $retval = 0;
   $1758 = $retval;
   STACKTOP = sp;return ($1758|0);
  }
  $136 = $l$addr;
  $data34 = (($136) + 8|0);
  $137 = HEAP32[$data34>>2]|0;
  $call = (_format_string($137)|0);
  $s = $call;
  $138 = $s;
  $call37 = (_strlen(($138|0))|0);
  $139 = $length;
  $140 = $139;
  HEAP32[$140>>2] = $call37;
  $141 = (($139) + 4)|0;
  $142 = $141;
  HEAP32[$142>>2] = 0;
  $143 = $s;
  $144 = $length;
  $145 = $144;
  $146 = HEAP32[$145>>2]|0;
  $147 = (($144) + 4)|0;
  $148 = $147;
  $149 = HEAP32[$148>>2]|0;
  $150 = (_Object_initString($143,$146,$149)|0);
  $v = $150;
  $151 = HEAP32[3336>>2]|0;
  $152 = $v;
  $call40 = (_Table_getval($151,$152)|0);
  $var_value = $call40;
  $153 = $var_value;
  $154 = HEAP32[40>>2]|0;
  $cmp41 = ($153|0)!=($154|0);
  if ($cmp41) {
   $155 = $insts$addr;
   _Insts_push($155,9472);
   $156 = $insts$addr;
   $157 = $var_value;
   $data44 = (($157) + 8|0);
   $158 = $data44;
   $159 = $158;
   $160 = HEAP32[$159>>2]|0;
   $161 = (($158) + 4)|0;
   $162 = $161;
   $163 = HEAP32[$162>>2]|0;
   $164 = $160&65535;
   _Insts_push($156,$164);
   $165 = $v;
   $data48 = (($165) + 8|0);
   $166 = HEAP32[$data48>>2]|0;
   _free($166);
   $167 = $v;
   _free($167);
   $168 = $s;
   _free($168);
   $retval = 0;
   $1758 = $retval;
   STACKTOP = sp;return ($1758|0);
  }
  $169 = $insts$addr;
  _Insts_push($169,9472);
  $170 = $insts$addr;
  $171 = 3344;
  $172 = $171;
  $173 = HEAP32[$172>>2]|0;
  $174 = (($171) + 4)|0;
  $175 = $174;
  $176 = HEAP32[$175>>2]|0;
  $177 = $173&65535;
  _Insts_push($170,$177);
  $178 = HEAP32[3336>>2]|0;
  $179 = $v;
  $180 = 3344;
  $181 = $180;
  $182 = HEAP32[$181>>2]|0;
  $183 = (($180) + 4)|0;
  $184 = $183;
  $185 = HEAP32[$184>>2]|0;
  $186 = (_Object_initInteger($182,$185)|0);
  _Table_setval($178,$179,$186);
  $187 = 3344;
  $188 = $187;
  $189 = HEAP32[$188>>2]|0;
  $190 = (($187) + 4)|0;
  $191 = $190;
  $192 = HEAP32[$191>>2]|0;
  $193 = (_i64Add(($189|0),($192|0),1,0)|0);
  $194 = tempRet0;
  $195 = 3344;
  $196 = $195;
  HEAP32[$196>>2] = $193;
  $197 = (($195) + 4)|0;
  $198 = $197;
  HEAP32[$198>>2] = $194;
  $199 = HEAP32[3376>>2]|0;
  _Insts_push($199,8960);
  $200 = HEAP32[3376>>2]|0;
  $201 = $length;
  $202 = $201;
  $203 = HEAP32[$202>>2]|0;
  $204 = (($201) + 4)|0;
  $205 = $204;
  $206 = HEAP32[$205>>2]|0;
  $207 = $203&65535;
  _Insts_push($200,$207);
  $find_end = 0;
  $i = 0;
  while(1) {
   $208 = $i;
   $209 = ($208|0)<(0);
   $210 = $209 << 31 >> 31;
   $211 = $length;
   $212 = $211;
   $213 = HEAP32[$212>>2]|0;
   $214 = (($211) + 4)|0;
   $215 = $214;
   $216 = HEAP32[$215>>2]|0;
   $217 = ($210>>>0)<($216>>>0);
   $218 = ($210|0)==($216|0);
   $219 = ($208>>>0)<($213>>>0);
   $220 = $218 & $219;
   $221 = $217 | $220;
   if (!($221)) {
    break;
   }
   $222 = $i;
   $add = (($222) + 1)|0;
   $223 = ($add|0)<(0);
   $224 = $223 << 31 >> 31;
   $225 = $length;
   $226 = $225;
   $227 = HEAP32[$226>>2]|0;
   $228 = (($225) + 4)|0;
   $229 = $228;
   $230 = HEAP32[$229>>2]|0;
   $231 = ($add|0)==($227|0);
   $232 = ($224|0)==($230|0);
   $233 = $231 & $232;
   if ($233) {
    label = 15;
    break;
   }
   $238 = HEAP32[3376>>2]|0;
   $239 = $i;
   $240 = $s;
   $arrayidx67 = (($240) + ($239)|0);
   $241 = HEAP8[$arrayidx67>>0]|0;
   $conv68 = $241 << 24 >> 24;
   $shl69 = $conv68 << 8;
   $242 = $i;
   $add70 = (($242) + 1)|0;
   $243 = $s;
   $arrayidx71 = (($243) + ($add70)|0);
   $244 = HEAP8[$arrayidx71>>0]|0;
   $conv72 = $244 << 24 >> 24;
   $and73 = $conv72 & 255;
   $or = $shl69 | $and73;
   $conv74 = $or&65535;
   _Insts_push($238,$conv74);
   $245 = $i;
   $add76 = (($245) + 2)|0;
   $i = $add76;
  }
  if ((label|0) == 15) {
   $234 = HEAP32[3376>>2]|0;
   $235 = $i;
   $236 = $s;
   $arrayidx62 = (($236) + ($235)|0);
   $237 = HEAP8[$arrayidx62>>0]|0;
   $conv63 = $237 << 24 >> 24;
   $shl = $conv63 << 8;
   $and64 = $shl & 65280;
   $conv65 = $and64&65535;
   _Insts_push($234,$conv65);
   $find_end = 1;
  }
  $246 = $find_end;
  $cmp77 = ($246|0)==(0);
  if ($cmp77) {
   $247 = HEAP32[3376>>2]|0;
   _Insts_push($247,0);
  }
  $248 = $s;
  _free($248);
  $retval = 0;
  $1758 = $retval;
  STACKTOP = sp;return ($1758|0);
  break;
 }
 default: {
  (_printf((8152|0),($vararg_buffer48|0))|0);
  $1755 = $l$addr;
  $call1629 = (_to_string($1755)|0);
  $string = $call1629;
  $1756 = $string;
  HEAP32[$vararg_buffer50>>2] = $1756;
  (_printf((7952|0),($vararg_buffer50|0))|0);
  $1757 = $string;
  _free($1757);
  $retval = 0;
  $1758 = $retval;
  STACKTOP = sp;return ($1758|0);
 }
 }
 return 0|0;
}
function _Walley_RunString($input_string) {
 $input_string = $input_string|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $call3 = 0, $cmp = 0, $input_string$addr = 0, $o = 0, $p = 0, $return_value = 0, $run_eval = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $input_string$addr = $input_string;
 $run_eval = 1;
 $0 = $input_string$addr;
 $call = (_lexer($0)|0);
 $p = $call;
 $1 = $p;
 $cmp = ($1|0)==(0|0);
 if ($cmp) {
  (_printf((672|0),($vararg_buffer|0))|0);
 }
 $2 = $p;
 $call2 = (_parser($2)|0);
 $o = $call2;
 $3 = HEAP32[3392>>2]|0;
 $4 = $o;
 $5 = HEAP32[3400>>2]|0;
 $6 = $run_eval;
 $7 = HEAP32[3408>>2]|0;
 $8 = HEAP32[3416>>2]|0;
 $9 = HEAP32[3120>>2]|0;
 $call3 = (_compiler_begin($3,$4,$5,0,0,$6,$7,$8,$9)|0);
 $return_value = $call3;
 $10 = $return_value;
 STACKTOP = sp;return ($10|0);
}
function _Walley_RunStringAndReturnString($input_string) {
 $input_string = $input_string|0;
 var $0 = 0, $call = 0, $call1 = 0, $input_string$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $input_string$addr = $input_string;
 $0 = $input_string$addr;
 $call = (_Walley_RunString($0)|0);
 $call1 = (_to_string($call)|0);
 STACKTOP = sp;return ($call1|0);
}
function _atoll($s) {
 $s = $s|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $call = 0, $call6 = 0, $call67 = 0, $conv = 0, $conv1 = 0, $conv10 = 0, $conv5 = 0, $conv56 = 0, $incdec$ptr = 0, $incdec$ptr9 = 0, $neg$0 = 0, $neg$1$ph = 0, $s$addr$0 = 0, $s$addr$1$ph = 0, $s$addr$19 = 0, $sub = 0, $tobool = 0, $tobool14 = 0, $tobool7 = 0, $tobool78 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $s$addr$0 = $s;
 while(1) {
  $0 = HEAP8[$s$addr$0>>0]|0;
  $conv = $0 << 24 >> 24;
  $call = (_isspace($conv)|0);
  $tobool = ($call|0)==(0);
  $incdec$ptr = (($s$addr$0) + 1|0);
  if ($tobool) {
   break;
  } else {
   $s$addr$0 = $incdec$ptr;
  }
 }
 $1 = HEAP8[$s$addr$0>>0]|0;
 $conv1 = $1 << 24 >> 24;
 if ((($conv1|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else if ((($conv1|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else {
  $2 = $1;$neg$1$ph = 0;$s$addr$1$ph = $s$addr$0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$incdec$ptr>>0]|0;
  $2 = $$pre;$neg$1$ph = $neg$0;$s$addr$1$ph = $incdec$ptr;
 }
 $conv56 = $2 << 24 >> 24;
 $call67 = (_isdigit($conv56)|0);
 $tobool78 = ($call67|0)==(0);
 if ($tobool78) {
  $13 = 0;$14 = 0;
 } else {
  $3 = 0;$4 = 0;$s$addr$19 = $s$addr$1$ph;
  while(1) {
   $5 = (___muldi3(($3|0),($4|0),10,0)|0);
   $6 = tempRet0;
   $incdec$ptr9 = (($s$addr$19) + 1|0);
   $7 = HEAP8[$s$addr$19>>0]|0;
   $conv10 = $7 << 24 >> 24;
   $sub = (($conv10) + -48)|0;
   $8 = ($sub|0)<(0);
   $9 = $8 << 31 >> 31;
   $10 = (_i64Subtract(($5|0),($6|0),($sub|0),($9|0))|0);
   $11 = tempRet0;
   $12 = HEAP8[$incdec$ptr9>>0]|0;
   $conv5 = $12 << 24 >> 24;
   $call6 = (_isdigit($conv5)|0);
   $tobool7 = ($call6|0)==(0);
   if ($tobool7) {
    $13 = $10;$14 = $11;
    break;
   } else {
    $3 = $10;$4 = $11;$s$addr$19 = $incdec$ptr9;
   }
  }
 }
 $tobool14 = ($neg$1$ph|0)!=(0);
 $15 = (_i64Subtract(0,0,($13|0),($14|0))|0);
 $16 = tempRet0;
 $17 = $tobool14 ? $13 : $15;
 $18 = $tobool14 ? $14 : $16;
 tempRet0 = $18;
 STACKTOP = sp;return ($17|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $call = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___strchrnul($s,$c)|0);
 $0 = HEAP8[$call>>0]|0;
 $1 = $c&255;
 $cmp = ($0<<24>>24)==($1<<24>>24);
 $cond = $cmp ? $call : 0;
 STACKTOP = sp;return ($cond|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $and = 0, $and14 = 0, $and15 = 0, $and24 = 0, $and9 = 0, $and925 = 0, $call = 0, $cmp = 0, $cmp26 = 0, $conv1 = 0;
 var $incdec$ptr = 0, $incdec$ptr19 = 0, $incdec$ptr31 = 0, $lnot = 0, $mul = 0, $neg = 0, $neg13 = 0, $neg23 = 0, $or$cond = 0, $rem = 0, $rem30 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$032 = 0, $s$addr$1 = 0, $sub = 0, $sub11 = 0, $sub22 = 0, $tobool = 0, $tobool10 = 0;
 var $tobool1026 = 0, $tobool2 = 0, $tobool23 = 0, $tobool231 = 0, $tobool3 = 0, $w$0$lcssa = 0, $w$027 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $tobool = ($conv1|0)==(0);
 if ($tobool) {
  $call = (_strlen(($s|0))|0);
  $add$ptr = (($s) + ($call)|0);
  $retval$0 = $add$ptr;
  STACKTOP = sp;return ($retval$0|0);
 }
 $0 = $s;
 $rem30 = $0 & 3;
 $tobool231 = ($rem30|0)==(0);
 L5: do {
  if ($tobool231) {
   $s$addr$0$lcssa = $s;
  } else {
   $1 = $c&255;
   $s$addr$032 = $s;
   while(1) {
    $3 = HEAP8[$s$addr$032>>0]|0;
    $tobool3 = ($3<<24>>24)==(0);
    if ($tobool3) {
     $retval$0 = $s$addr$032;
     label = 13;
     break;
    }
    $cmp = ($3<<24>>24)==($1<<24>>24);
    $incdec$ptr = (($s$addr$032) + 1|0);
    if ($cmp) {
     $retval$0 = $s$addr$032;
     label = 13;
     break;
    }
    $2 = $incdec$ptr;
    $rem = $2 & 3;
    $tobool2 = ($rem|0)==(0);
    if ($tobool2) {
     $s$addr$0$lcssa = $incdec$ptr;
     break L5;
    } else {
     $s$addr$032 = $incdec$ptr;
    }
   }
   if ((label|0) == 13) {
    STACKTOP = sp;return ($retval$0|0);
   }
  }
 } while(0);
 $mul = Math_imul($conv1, 16843009)|0;
 $4 = HEAP32[$s$addr$0$lcssa>>2]|0;
 $sub22 = (($4) + -16843009)|0;
 $neg23 = $4 & -2139062144;
 $and24 = $neg23 ^ -2139062144;
 $and925 = $and24 & $sub22;
 $tobool1026 = ($and925|0)==(0);
 L15: do {
  if ($tobool1026) {
   $6 = $4;$w$027 = $s$addr$0$lcssa;
   while(1) {
    $xor = $6 ^ $mul;
    $sub11 = (($xor) + -16843009)|0;
    $neg13 = $xor & -2139062144;
    $and14 = $neg13 ^ -2139062144;
    $and15 = $and14 & $sub11;
    $lnot = ($and15|0)==(0);
    $incdec$ptr19 = (($w$027) + 4|0);
    if (!($lnot)) {
     $w$0$lcssa = $w$027;
     break L15;
    }
    $5 = HEAP32[$incdec$ptr19>>2]|0;
    $sub = (($5) + -16843009)|0;
    $neg = $5 & -2139062144;
    $and = $neg ^ -2139062144;
    $and9 = $and & $sub;
    $tobool10 = ($and9|0)==(0);
    if ($tobool10) {
     $6 = $5;$w$027 = $incdec$ptr19;
    } else {
     $w$0$lcssa = $incdec$ptr19;
     break;
    }
   }
  } else {
   $w$0$lcssa = $s$addr$0$lcssa;
  }
 } while(0);
 $7 = $c&255;
 $s$addr$1 = $w$0$lcssa;
 while(1) {
  $8 = HEAP8[$s$addr$1>>0]|0;
  $tobool23 = ($8<<24>>24)==(0);
  $cmp26 = ($8<<24>>24)==($7<<24>>24);
  $or$cond = $tobool23 | $cmp26;
  $incdec$ptr31 = (($s$addr$1) + 1|0);
  if ($or$cond) {
   $retval$0 = $s$addr$1;
   break;
  } else {
   $s$addr$1 = $incdec$ptr31;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _strncat($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $add$ptr = 0, $call = 0, $d$addr$0$lcssa = 0, $d$addr$010 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr2 = 0, $n$addr$09 = 0, $s$addr$08 = 0, $tobool = 0, $tobool1 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen(($d|0))|0);
 $add$ptr = (($d) + ($call)|0);
 $tobool7 = ($n|0)==(0);
 L1: do {
  if ($tobool7) {
   $d$addr$0$lcssa = $add$ptr;
  } else {
   $d$addr$010 = $add$ptr;$n$addr$09 = $n;$s$addr$08 = $s;
   while(1) {
    $0 = HEAP8[$s$addr$08>>0]|0;
    $tobool1 = ($0<<24>>24)==(0);
    if ($tobool1) {
     $d$addr$0$lcssa = $d$addr$010;
     break L1;
    }
    $dec = (($n$addr$09) + -1)|0;
    $incdec$ptr = (($s$addr$08) + 1|0);
    $incdec$ptr2 = (($d$addr$010) + 1|0);
    HEAP8[$d$addr$010>>0] = $0;
    $tobool = ($dec|0)==(0);
    if ($tobool) {
     $d$addr$0$lcssa = $incdec$ptr2;
     break;
    } else {
     $d$addr$010 = $incdec$ptr2;$n$addr$09 = $dec;$s$addr$08 = $incdec$ptr;
    }
   }
  }
 } while(0);
 HEAP8[$d$addr$0$lcssa>>0] = 0;
 STACKTOP = sp;return ($d|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$add$ptr$i = 0, $$add$ptr26$i = 0, $$add$ptr32$i = 0, $$pr$i = 0, $$pr$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr$i23 = 0, $add$ptr119$i = 0, $add$ptr119$us$i = 0, $add$ptr149$i = 0, $add$ptr149$us$i = 0, $add$ptr152$i = 0, $add$ptr152$us$i = 0, $add$ptr182$i = 0, $add$ptr182$us$i = 0, $add$ptr205$i = 0, $add$ptr205$us$i = 0, $add$ptr26$i = 0, $add$ptr32$i = 0;
 var $add13$i = 0, $add13156$i = 0, $add13156200$i = 0, $add13156200209$i = 0, $add13156200209224$i = 0, $add13156200213$i = 0, $add13156203$i = 0, $add13159$i = 0, $add15$i = 0, $add27$i = 0, $add46$i = 0, $add46144$i = 0, $add46144172$i = 0, $add46144172181$i = 0, $add46144172181196$i = 0, $add46144172185$i = 0, $add46144175$i = 0, $add46147$i = 0, $add50$i = 0, $add62$i = 0;
 var $add83$i = 0, $add84$i = 0, $add90$i = 0, $add90$mem$0$us$i = 0, $add99$i = 0, $and$i = 0, $and$us$i = 0, $arrayidx$i = 0, $arrayidx1$i = 0, $arrayidx10 = 0, $arrayidx10$i = 0, $arrayidx123$i = 0, $arrayidx123$us$i = 0, $arrayidx126$i = 0, $arrayidx126$us$i = 0, $arrayidx137$i = 0, $arrayidx137$us$i = 0, $arrayidx15 = 0, $arrayidx16$i = 0, $arrayidx163$i = 0;
 var $arrayidx163$us$i = 0, $arrayidx163131$i = 0, $arrayidx163131$us$i = 0, $arrayidx169$i = 0, $arrayidx169$us$i = 0, $arrayidx19 = 0, $arrayidx19$i = 0, $arrayidx190$i = 0, $arrayidx190$us$i = 0, $arrayidx193$i = 0, $arrayidx193$us$i = 0, $arrayidx2 = 0, $arrayidx24 = 0, $arrayidx28 = 0, $arrayidx51$i = 0, $arrayidx54$i = 0, $arrayidx6 = 0, $arrayidx8$i = 0, $byteset$i = 0, $call = 0;
 var $call$i = 0, $call108$i = 0, $call108$us$i = 0, $cmp$i = 0, $cmp$i22 = 0, $cmp$i33 = 0, $cmp$i52 = 0, $cmp104$i = 0, $cmp104$us$i = 0, $cmp114$i = 0, $cmp114$us$i = 0, $cmp14$i = 0, $cmp144$us$i = 0, $cmp155$us$i = 0, $cmp157$i = 0, $cmp157201$i = 0, $cmp157201210$i = 0, $cmp157201210221$i = 0, $cmp171$i = 0, $cmp171$us$i = 0;
 var $cmp186$i = 0, $cmp186$us$i = 0, $cmp195$i = 0, $cmp195$us$i = 0, $cmp2$i = 0, $cmp21$i = 0, $cmp24$i = 0, $cmp37$i = 0, $cmp47$i = 0, $cmp47145$i = 0, $cmp47145173$i = 0, $cmp47145173182$i = 0, $cmp56$i = 0, $cmp59$i = 0, $cmp73$i = 0, $cmp85$i = 0, $cmp95$i = 0, $conv = 0, $conv$i = 0, $conv$i24 = 0;
 var $conv$i36 = 0, $conv12$i = 0, $conv12$i30 = 0, $conv12$i47 = 0, $conv124$i = 0, $conv124$us$i = 0, $conv15$i = 0, $conv16$i = 0, $conv18$i = 0, $conv19$i = 0, $conv2$i = 0, $conv2$i26 = 0, $conv2$i39 = 0, $conv21$i = 0, $conv23$i = 0, $conv28$i = 0, $conv5$i = 0, $conv5$i18 = 0, $conv5$i28 = 0, $conv5$i42 = 0;
 var $conv8$i = 0, $conv9$i = 0, $conv9$i46 = 0, $div$i = 0, $div125$i = 0, $div125$us$i = 0, $h$addr$0$i = 0, $h$addr$0$lcssa$i = 0, $h$addr$0$lcssa$i35 = 0, $h$addr$0$lcssa$i56 = 0, $h$addr$0$us$i = 0, $h$addr$016$i = 0, $h$addr$02$i = 0, $h$addr$04$i = 0, $hw$0$in3$i = 0, $hw$017$i = 0, $hw$05$i = 0, $inc176$i = 0, $inc176$us$i = 0, $inc28$i = 0;
 var $inc42$i = 0, $inc64$i = 0, $inc79$i = 0, $incdec$ptr$i = 0, $incdec$ptr$i50 = 0, $incdec$ptr17$i = 0, $ip$0$ph218$i = 0, $ip$0$ph218288$i = 0, $ip$0$ph222$i = 0, $ip$1$ip$0$i = 0, $ip$1$ip$0$sub94$i = 0, $ip$1$ph190$i = 0, $ip$1$ph194$i = 0, $jp$0$ph149$ph211$i = 0, $jp$0$ph149202$i = 0, $jp$0$ph223$i = 0, $jp$1$ph138$ph183$i = 0, $jp$1$ph138174$i = 0, $jp$1$ph195$i = 0, $k$0158$i = 0;
 var $k$1146$i = 0, $k$2$us$i = 0, $k$3133$i = 0, $k$3133$us$i = 0, $k$4$i = 0, $k$4$us$i = 0, $l$0167$i = 0, $mem$0$us$i = 0, $notlhs$i = 0, $notrhs$us$i = 0, $or$cond$i = 0, $or$cond$i53 = 0, $or$cond126$us$i = 0, $or$i = 0, $or$i20 = 0, $or$i27 = 0, $or$i41 = 0, $or10$i = 0, $or107$i = 0, $or107296$i = 0;
 var $or107301$i = 0, $or14$i = 0, $or17$i = 0, $or18$i = 0, $or19$i = 0, $or21$i = 0, $or22$i = 0, $or24$i = 0, $or29$i = 0, $or7$i = 0, $or7$i44 = 0, $or9$i = 0, $p$0$ph$ph207$i = 0, $p$0$ph$ph207292$i = 0, $p$0$ph$ph212$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph179$i = 0, $p$1$ph$ph184$i = 0, $p$3300$i = 0, $rem$i = 0;
 var $rem130$i = 0, $rem130$us$i = 0, $retval$0 = 0, $shift$i = 0, $shl$i = 0, $shl$i19 = 0, $shl$i25 = 0, $shl$i37 = 0, $shl10$i = 0, $shl13$i = 0, $shl13$i48 = 0, $shl131$i = 0, $shl131$us$i = 0, $shl16$i = 0, $shl16$i49 = 0, $shl17$i = 0, $shl20$i = 0, $shl23$i = 0, $shl27$i = 0, $shl3$i = 0;
 var $shl3$i40 = 0, $shl6$i = 0, $shl6$i29 = 0, $shl6$i43 = 0, $sub$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$us$i = 0, $sub$ptr$lhs$cast111$i = 0, $sub$ptr$lhs$cast111$us$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$us$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$us$i = 0, $sub$ptr$sub113$i = 0, $sub$ptr$sub113$us$i = 0, $sub101$i = 0, $sub138$i = 0, $sub138$us$i = 0, $sub181$i = 0, $sub181$us$i = 0;
 var $sub189$i = 0, $sub189$us$i = 0, $sub77$i = 0, $sub93$i = 0, $sub94$i = 0, $tobool = 0, $tobool$i = 0, $tobool$i21 = 0, $tobool$i32 = 0, $tobool$i51 = 0, $tobool$lcssa$i = 0, $tobool$lcssa$i55 = 0, $tobool1 = 0, $tobool109$i = 0, $tobool109$us$i = 0, $tobool11 = 0, $tobool132$i = 0, $tobool132$us$i = 0, $tobool139$i = 0, $tobool139$us$i = 0;
 var $tobool16 = 0, $tobool165$i = 0, $tobool165$us$i = 0, $tobool165132$i = 0, $tobool165132$us$i = 0, $tobool20 = 0, $tobool22$i = 0, $tobool25 = 0, $tobool29 = 0, $tobool3 = 0, $tobool3$i = 0, $tobool7 = 0, $tobool91$i = 0, $z$0$i = 0, $z$0$us$i = 0, $z$1$i = 0, $z$1$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  $retval$0 = $h;
  STACKTOP = sp;return ($retval$0|0);
 }
 $conv = $0 << 24 >> 24;
 $call = (_strchr($h,$conv)|0);
 $tobool1 = ($call|0)==(0|0);
 if ($tobool1) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $arrayidx2 = (($n) + 1|0);
 $1 = HEAP8[$arrayidx2>>0]|0;
 $tobool3 = ($1<<24>>24)==(0);
 if ($tobool3) {
  $retval$0 = $call;
  STACKTOP = sp;return ($retval$0|0);
 }
 $arrayidx6 = (($call) + 1|0);
 $2 = HEAP8[$arrayidx6>>0]|0;
 $tobool7 = ($2<<24>>24)==(0);
 if ($tobool7) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $arrayidx10 = (($n) + 2|0);
 $3 = HEAP8[$arrayidx10>>0]|0;
 $tobool11 = ($3<<24>>24)==(0);
 if ($tobool11) {
  $conv$i = $0&255;
  $shl$i = $conv$i << 8;
  $conv2$i = $1&255;
  $or$i = $conv2$i | $shl$i;
  $4 = HEAP8[$call>>0]|0;
  $conv5$i = $4&255;
  $conv8$i = $2&255;
  $shl6$i = $conv5$i << 8;
  $or9$i = $shl6$i | $conv8$i;
  $39 = $2;$h$addr$02$i = $arrayidx6;$hw$0$in3$i = $or9$i;
  while(1) {
   $conv12$i = $hw$0$in3$i & 65535;
   $cmp$i = ($conv12$i|0)==($or$i|0);
   if ($cmp$i) {
    $6 = $39;$h$addr$0$lcssa$i = $h$addr$02$i;
    break;
   }
   $shl16$i = $conv12$i << 8;
   $incdec$ptr17$i = (($h$addr$02$i) + 1|0);
   $5 = HEAP8[$incdec$ptr17$i>>0]|0;
   $conv18$i = $5&255;
   $or19$i = $conv18$i | $shl16$i;
   $tobool$i = ($5<<24>>24)==(0);
   if ($tobool$i) {
    $6 = 0;$h$addr$0$lcssa$i = $incdec$ptr17$i;
    break;
   } else {
    $39 = $5;$h$addr$02$i = $incdec$ptr17$i;$hw$0$in3$i = $or19$i;
   }
  }
  $tobool22$i = ($6<<24>>24)==(0);
  $add$ptr$i = (($h$addr$0$lcssa$i) + -1|0);
  $$add$ptr$i = $tobool22$i ? 0 : $add$ptr$i;
  $retval$0 = $$add$ptr$i;
  STACKTOP = sp;return ($retval$0|0);
 }
 $arrayidx15 = (($call) + 2|0);
 $7 = HEAP8[$arrayidx15>>0]|0;
 $tobool16 = ($7<<24>>24)==(0);
 if ($tobool16) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $arrayidx19 = (($n) + 3|0);
 $8 = HEAP8[$arrayidx19>>0]|0;
 $tobool20 = ($8<<24>>24)==(0);
 if ($tobool20) {
  $conv$i24 = $0&255;
  $shl$i25 = $conv$i24 << 24;
  $conv2$i26 = $1&255;
  $shl3$i = $conv2$i26 << 16;
  $or$i27 = $shl3$i | $shl$i25;
  $conv5$i28 = $3&255;
  $shl6$i29 = $conv5$i28 << 8;
  $or7$i = $or$i27 | $shl6$i29;
  $9 = HEAP8[$call>>0]|0;
  $conv9$i = $9&255;
  $shl10$i = $conv9$i << 24;
  $conv12$i30 = $2&255;
  $shl13$i = $conv12$i30 << 16;
  $conv16$i = $7&255;
  $shl17$i = $conv16$i << 8;
  $or14$i = $shl17$i | $shl13$i;
  $or18$i = $or14$i | $shl10$i;
  $cmp2$i = ($or18$i|0)==($or7$i|0);
  if ($cmp2$i) {
   $h$addr$0$lcssa$i35 = $arrayidx15;$tobool$lcssa$i = 0;
  } else {
   $h$addr$04$i = $arrayidx15;$hw$05$i = $or18$i;
   while(1) {
    $incdec$ptr$i = (($h$addr$04$i) + 1|0);
    $10 = HEAP8[$incdec$ptr$i>>0]|0;
    $conv21$i = $10&255;
    $or22$i = $conv21$i | $hw$05$i;
    $shl23$i = $or22$i << 8;
    $tobool$i32 = ($10<<24>>24)==(0);
    $cmp$i33 = ($shl23$i|0)==($or7$i|0);
    $or$cond$i = $tobool$i32 | $cmp$i33;
    if ($or$cond$i) {
     $h$addr$0$lcssa$i35 = $incdec$ptr$i;$tobool$lcssa$i = $tobool$i32;
     break;
    } else {
     $h$addr$04$i = $incdec$ptr$i;$hw$05$i = $shl23$i;
    }
   }
  }
  $add$ptr26$i = (($h$addr$0$lcssa$i35) + -2|0);
  $$add$ptr26$i = $tobool$lcssa$i ? 0 : $add$ptr26$i;
  $retval$0 = $$add$ptr26$i;
  STACKTOP = sp;return ($retval$0|0);
 }
 $arrayidx24 = (($call) + 3|0);
 $11 = HEAP8[$arrayidx24>>0]|0;
 $tobool25 = ($11<<24>>24)==(0);
 if ($tobool25) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $arrayidx28 = (($n) + 4|0);
 $12 = HEAP8[$arrayidx28>>0]|0;
 $tobool29 = ($12<<24>>24)==(0);
 if ($tobool29) {
  $conv$i36 = $0&255;
  $shl$i37 = $conv$i36 << 24;
  $conv2$i39 = $1&255;
  $shl3$i40 = $conv2$i39 << 16;
  $or$i41 = $shl3$i40 | $shl$i37;
  $conv5$i42 = $3&255;
  $shl6$i43 = $conv5$i42 << 8;
  $or7$i44 = $or$i41 | $shl6$i43;
  $conv9$i46 = $8&255;
  $or10$i = $or7$i44 | $conv9$i46;
  $13 = HEAP8[$call>>0]|0;
  $conv12$i47 = $13&255;
  $shl13$i48 = $conv12$i47 << 24;
  $conv15$i = $2&255;
  $shl16$i49 = $conv15$i << 16;
  $conv19$i = $7&255;
  $shl20$i = $conv19$i << 8;
  $conv23$i = $11&255;
  $or17$i = $shl20$i | $shl16$i49;
  $or21$i = $or17$i | $conv23$i;
  $or24$i = $or21$i | $shl13$i48;
  $cmp14$i = ($or24$i|0)==($or10$i|0);
  if ($cmp14$i) {
   $h$addr$0$lcssa$i56 = $arrayidx24;$tobool$lcssa$i55 = 0;
  } else {
   $h$addr$016$i = $arrayidx24;$hw$017$i = $or24$i;
   while(1) {
    $shl27$i = $hw$017$i << 8;
    $incdec$ptr$i50 = (($h$addr$016$i) + 1|0);
    $14 = HEAP8[$incdec$ptr$i50>>0]|0;
    $conv28$i = $14&255;
    $or29$i = $conv28$i | $shl27$i;
    $tobool$i51 = ($14<<24>>24)==(0);
    $cmp$i52 = ($or29$i|0)==($or10$i|0);
    $or$cond$i53 = $tobool$i51 | $cmp$i52;
    if ($or$cond$i53) {
     $h$addr$0$lcssa$i56 = $incdec$ptr$i50;$tobool$lcssa$i55 = $tobool$i51;
     break;
    } else {
     $h$addr$016$i = $incdec$ptr$i50;$hw$017$i = $or29$i;
    }
   }
  }
  $add$ptr32$i = (($h$addr$0$lcssa$i56) + -3|0);
  $$add$ptr32$i = $tobool$lcssa$i55 ? 0 : $add$ptr32$i;
  $retval$0 = $$add$ptr32$i;
  STACKTOP = sp;return ($retval$0|0);
 }
 ;HEAP32[$byteset$i+0>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
 $16 = $0;$l$0167$i = 0;
 while(1) {
  $arrayidx1$i = (($call) + ($l$0167$i)|0);
  $15 = HEAP8[$arrayidx1$i>>0]|0;
  $tobool3$i = ($15<<24>>24)==(0);
  if ($tobool3$i) {
   $retval$0 = 0;
   label = 79;
   break;
  }
  $conv5$i18 = $16&255;
  $rem$i = $conv5$i18 & 31;
  $shl$i19 = 1 << $rem$i;
  $div$i = $conv5$i18 >>> 5;
  $arrayidx8$i = (($byteset$i) + ($div$i<<2)|0);
  $17 = HEAP32[$arrayidx8$i>>2]|0;
  $or$i20 = $17 | $shl$i19;
  HEAP32[$arrayidx8$i>>2] = $or$i20;
  $add$i = (($l$0167$i) + 1)|0;
  $arrayidx10$i = (($shift$i) + ($conv5$i18<<2)|0);
  HEAP32[$arrayidx10$i>>2] = $add$i;
  $arrayidx$i = (($n) + ($add$i)|0);
  $18 = HEAP8[$arrayidx$i>>0]|0;
  $tobool$i21 = ($18<<24>>24)==(0);
  if ($tobool$i21) {
   break;
  } else {
   $16 = $18;$l$0167$i = $add$i;
  }
 }
 if ((label|0) == 79) {
  STACKTOP = sp;return ($retval$0|0);
 }
 $cmp157201210221$i = ($add$i>>>0)>(1);
 L49: do {
  if ($cmp157201210221$i) {
   $add13156200209224$i = 1;$ip$0$ph222$i = -1;$jp$0$ph223$i = 0;
   L50: while(1) {
    $add13156200213$i = $add13156200209224$i;$jp$0$ph149$ph211$i = $jp$0$ph223$i;$p$0$ph$ph212$i = 1;
    while(1) {
     $add13156203$i = $add13156200213$i;$jp$0$ph149202$i = $jp$0$ph149$ph211$i;
     L54: while(1) {
      $add13159$i = $add13156203$i;$k$0158$i = 1;
      while(1) {
       $add15$i = (($k$0158$i) + ($ip$0$ph222$i))|0;
       $arrayidx16$i = (($n) + ($add15$i)|0);
       $19 = HEAP8[$arrayidx16$i>>0]|0;
       $arrayidx19$i = (($n) + ($add13159$i)|0);
       $20 = HEAP8[$arrayidx19$i>>0]|0;
       $cmp21$i = ($19<<24>>24)==($20<<24>>24);
       if (!($cmp21$i)) {
        break L54;
       }
       $cmp24$i = ($k$0158$i|0)==($p$0$ph$ph212$i|0);
       $inc28$i = (($k$0158$i) + 1)|0;
       if ($cmp24$i) {
        break;
       }
       $add13$i = (($inc28$i) + ($jp$0$ph149202$i))|0;
       $cmp$i22 = ($add13$i>>>0)<($add$i>>>0);
       if ($cmp$i22) {
        $add13159$i = $add13$i;$k$0158$i = $inc28$i;
       } else {
        $ip$0$ph218$i = $ip$0$ph222$i;$p$0$ph$ph207$i = $p$0$ph$ph212$i;
        break L50;
       }
      }
      $add27$i = (($jp$0$ph149202$i) + ($p$0$ph$ph212$i))|0;
      $add13156$i = (($add27$i) + 1)|0;
      $cmp157$i = ($add13156$i>>>0)<($add$i>>>0);
      if ($cmp157$i) {
       $add13156203$i = $add13156$i;$jp$0$ph149202$i = $add27$i;
      } else {
       $ip$0$ph218$i = $ip$0$ph222$i;$p$0$ph$ph207$i = $p$0$ph$ph212$i;
       break L50;
      }
     }
     $cmp37$i = ($19&255)>($20&255);
     $sub$i = (($add13159$i) - ($ip$0$ph222$i))|0;
     if (!($cmp37$i)) {
      break;
     }
     $add13156200$i = (($add13159$i) + 1)|0;
     $cmp157201$i = ($add13156200$i>>>0)<($add$i>>>0);
     if ($cmp157201$i) {
      $add13156200213$i = $add13156200$i;$jp$0$ph149$ph211$i = $add13159$i;$p$0$ph$ph212$i = $sub$i;
     } else {
      $ip$0$ph218$i = $ip$0$ph222$i;$p$0$ph$ph207$i = $sub$i;
      break L50;
     }
    }
    $inc42$i = (($jp$0$ph149202$i) + 1)|0;
    $add13156200209$i = (($jp$0$ph149202$i) + 2)|0;
    $cmp157201210$i = ($add13156200209$i>>>0)<($add$i>>>0);
    if ($cmp157201210$i) {
     $add13156200209224$i = $add13156200209$i;$ip$0$ph222$i = $jp$0$ph149202$i;$jp$0$ph223$i = $inc42$i;
    } else {
     $ip$0$ph218$i = $jp$0$ph149202$i;$p$0$ph$ph207$i = 1;
     break;
    }
   }
   $add46144172181196$i = 1;$ip$1$ph194$i = -1;$jp$1$ph195$i = 0;
   while(1) {
    $add46144172185$i = $add46144172181196$i;$jp$1$ph138$ph183$i = $jp$1$ph195$i;$p$1$ph$ph184$i = 1;
    while(1) {
     $add46144175$i = $add46144172185$i;$jp$1$ph138174$i = $jp$1$ph138$ph183$i;
     L69: while(1) {
      $add46147$i = $add46144175$i;$k$1146$i = 1;
      while(1) {
       $add50$i = (($k$1146$i) + ($ip$1$ph194$i))|0;
       $arrayidx51$i = (($n) + ($add50$i)|0);
       $21 = HEAP8[$arrayidx51$i>>0]|0;
       $arrayidx54$i = (($n) + ($add46147$i)|0);
       $22 = HEAP8[$arrayidx54$i>>0]|0;
       $cmp56$i = ($21<<24>>24)==($22<<24>>24);
       if (!($cmp56$i)) {
        break L69;
       }
       $cmp59$i = ($k$1146$i|0)==($p$1$ph$ph184$i|0);
       $inc64$i = (($k$1146$i) + 1)|0;
       if ($cmp59$i) {
        break;
       }
       $add46$i = (($inc64$i) + ($jp$1$ph138174$i))|0;
       $cmp47$i = ($add46$i>>>0)<($add$i>>>0);
       if ($cmp47$i) {
        $add46147$i = $add46$i;$k$1146$i = $inc64$i;
       } else {
        $ip$0$ph218288$i = $ip$0$ph218$i;$ip$1$ph190$i = $ip$1$ph194$i;$p$0$ph$ph207292$i = $p$0$ph$ph207$i;$p$1$ph$ph179$i = $p$1$ph$ph184$i;
        break L49;
       }
      }
      $add62$i = (($jp$1$ph138174$i) + ($p$1$ph$ph184$i))|0;
      $add46144$i = (($add62$i) + 1)|0;
      $cmp47145$i = ($add46144$i>>>0)<($add$i>>>0);
      if ($cmp47145$i) {
       $add46144175$i = $add46144$i;$jp$1$ph138174$i = $add62$i;
      } else {
       $ip$0$ph218288$i = $ip$0$ph218$i;$ip$1$ph190$i = $ip$1$ph194$i;$p$0$ph$ph207292$i = $p$0$ph$ph207$i;$p$1$ph$ph179$i = $p$1$ph$ph184$i;
       break L49;
      }
     }
     $cmp73$i = ($21&255)<($22&255);
     $sub77$i = (($add46147$i) - ($ip$1$ph194$i))|0;
     if (!($cmp73$i)) {
      break;
     }
     $add46144172$i = (($add46147$i) + 1)|0;
     $cmp47145173$i = ($add46144172$i>>>0)<($add$i>>>0);
     if ($cmp47145173$i) {
      $add46144172185$i = $add46144172$i;$jp$1$ph138$ph183$i = $add46147$i;$p$1$ph$ph184$i = $sub77$i;
     } else {
      $ip$0$ph218288$i = $ip$0$ph218$i;$ip$1$ph190$i = $ip$1$ph194$i;$p$0$ph$ph207292$i = $p$0$ph$ph207$i;$p$1$ph$ph179$i = $sub77$i;
      break L49;
     }
    }
    $inc79$i = (($jp$1$ph138174$i) + 1)|0;
    $add46144172181$i = (($jp$1$ph138174$i) + 2)|0;
    $cmp47145173182$i = ($add46144172181$i>>>0)<($add$i>>>0);
    if ($cmp47145173182$i) {
     $add46144172181196$i = $add46144172181$i;$ip$1$ph194$i = $jp$1$ph138174$i;$jp$1$ph195$i = $inc79$i;
    } else {
     $ip$0$ph218288$i = $ip$0$ph218$i;$ip$1$ph190$i = $jp$1$ph138174$i;$p$0$ph$ph207292$i = $p$0$ph$ph207$i;$p$1$ph$ph179$i = 1;
     break;
    }
   }
  } else {
   $ip$0$ph218288$i = -1;$ip$1$ph190$i = -1;$p$0$ph$ph207292$i = 1;$p$1$ph$ph179$i = 1;
  }
 } while(0);
 $add83$i = (($ip$1$ph190$i) + 1)|0;
 $add84$i = (($ip$0$ph218288$i) + 1)|0;
 $cmp85$i = ($add83$i>>>0)>($add84$i>>>0);
 $p$1$p$0$i = $cmp85$i ? $p$1$ph$ph179$i : $p$0$ph$ph207292$i;
 $ip$1$ip$0$i = $cmp85$i ? $ip$1$ph190$i : $ip$0$ph218288$i;
 $add$ptr$i23 = (($n) + ($p$1$p$0$i)|0);
 $add90$i = (($ip$1$ip$0$i) + 1)|0;
 $call$i = (_memcmp($n,$add$ptr$i23,$add90$i)|0);
 $tobool91$i = ($call$i|0)==(0);
 if ($tobool91$i) {
  $sub101$i = (($add$i) - ($p$1$p$0$i))|0;
  $or107$i = $add$i | 63;
  $notlhs$i = ($add$i|0)==($p$1$p$0$i|0);
  if ($notlhs$i) {
   $or107301$i = $or107$i;$p$3300$i = $add$i;
  } else {
   $h$addr$0$us$i = $call;$mem$0$us$i = 0;$z$0$us$i = $call;
   L83: while(1) {
    $sub$ptr$lhs$cast$us$i = $z$0$us$i;
    $sub$ptr$rhs$cast$us$i = $h$addr$0$us$i;
    $sub$ptr$sub$us$i = (($sub$ptr$lhs$cast$us$i) - ($sub$ptr$rhs$cast$us$i))|0;
    $cmp104$us$i = ($sub$ptr$sub$us$i>>>0)<($add$i>>>0);
    do {
     if ($cmp104$us$i) {
      $call108$us$i = (_memchr($z$0$us$i,0,$or107$i)|0);
      $tobool109$us$i = ($call108$us$i|0)==(0|0);
      if ($tobool109$us$i) {
       $add$ptr119$us$i = (($z$0$us$i) + ($or107$i)|0);
       $z$1$us$i = $add$ptr119$us$i;
       break;
      } else {
       $sub$ptr$lhs$cast111$us$i = $call108$us$i;
       $sub$ptr$sub113$us$i = (($sub$ptr$lhs$cast111$us$i) - ($sub$ptr$rhs$cast$us$i))|0;
       $cmp114$us$i = ($sub$ptr$sub113$us$i>>>0)<($add$i>>>0);
       if ($cmp114$us$i) {
        $retval$0 = 0;
        label = 79;
        break L83;
       } else {
        $z$1$us$i = $call108$us$i;
        break;
       }
      }
     } else {
      $z$1$us$i = $z$0$us$i;
     }
    } while(0);
    $arrayidx123$us$i = (($h$addr$0$us$i) + ($l$0167$i)|0);
    $23 = HEAP8[$arrayidx123$us$i>>0]|0;
    $conv124$us$i = $23&255;
    $div125$us$i = $conv124$us$i >>> 5;
    $arrayidx126$us$i = (($byteset$i) + ($div125$us$i<<2)|0);
    $24 = HEAP32[$arrayidx126$us$i>>2]|0;
    $rem130$us$i = $conv124$us$i & 31;
    $shl131$us$i = 1 << $rem130$us$i;
    $and$us$i = $shl131$us$i & $24;
    $tobool132$us$i = ($and$us$i|0)==(0);
    if ($tobool132$us$i) {
     $add$ptr152$us$i = (($h$addr$0$us$i) + ($add$i)|0);
     $h$addr$0$us$i = $add$ptr152$us$i;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
     continue;
    }
    $arrayidx137$us$i = (($shift$i) + ($conv124$us$i<<2)|0);
    $25 = HEAP32[$arrayidx137$us$i>>2]|0;
    $sub138$us$i = (($add$i) - ($25))|0;
    $tobool139$us$i = ($add$i|0)==($25|0);
    if (!($tobool139$us$i)) {
     $notrhs$us$i = ($mem$0$us$i|0)!=(0);
     $cmp144$us$i = ($sub138$us$i>>>0)<($p$1$p$0$i>>>0);
     $or$cond126$us$i = $notrhs$us$i & $cmp144$us$i;
     $k$2$us$i = $or$cond126$us$i ? $sub101$i : $sub138$us$i;
     $add$ptr149$us$i = (($h$addr$0$us$i) + ($k$2$us$i)|0);
     $h$addr$0$us$i = $add$ptr149$us$i;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
     continue;
    }
    $cmp155$us$i = ($add90$i>>>0)>($mem$0$us$i>>>0);
    $add90$mem$0$us$i = $cmp155$us$i ? $add90$i : $mem$0$us$i;
    $arrayidx163131$us$i = (($n) + ($add90$mem$0$us$i)|0);
    $26 = HEAP8[$arrayidx163131$us$i>>0]|0;
    $tobool165132$us$i = ($26<<24>>24)==(0);
    L97: do {
     if ($tobool165132$us$i) {
      $k$4$us$i = $add90$i;
     } else {
      $$pr$us$i = $26;$k$3133$us$i = $add90$mem$0$us$i;
      while(1) {
       $arrayidx169$us$i = (($h$addr$0$us$i) + ($k$3133$us$i)|0);
       $28 = HEAP8[$arrayidx169$us$i>>0]|0;
       $cmp171$us$i = ($$pr$us$i<<24>>24)==($28<<24>>24);
       $inc176$us$i = (($k$3133$us$i) + 1)|0;
       if (!($cmp171$us$i)) {
        break;
       }
       $arrayidx163$us$i = (($n) + ($inc176$us$i)|0);
       $27 = HEAP8[$arrayidx163$us$i>>0]|0;
       $tobool165$us$i = ($27<<24>>24)==(0);
       if ($tobool165$us$i) {
        $k$4$us$i = $add90$i;
        break L97;
       } else {
        $$pr$us$i = $27;$k$3133$us$i = $inc176$us$i;
       }
      }
      $sub181$us$i = (($k$3133$us$i) - ($ip$1$ip$0$i))|0;
      $add$ptr182$us$i = (($h$addr$0$us$i) + ($sub181$us$i)|0);
      $h$addr$0$us$i = $add$ptr182$us$i;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
      continue L83;
     }
    } while(0);
    while(1) {
     $cmp186$us$i = ($k$4$us$i>>>0)>($mem$0$us$i>>>0);
     if (!($cmp186$us$i)) {
      $retval$0 = $h$addr$0$us$i;
      label = 79;
      break L83;
     }
     $sub189$us$i = (($k$4$us$i) + -1)|0;
     $arrayidx190$us$i = (($n) + ($sub189$us$i)|0);
     $29 = HEAP8[$arrayidx190$us$i>>0]|0;
     $arrayidx193$us$i = (($h$addr$0$us$i) + ($sub189$us$i)|0);
     $30 = HEAP8[$arrayidx193$us$i>>0]|0;
     $cmp195$us$i = ($29<<24>>24)==($30<<24>>24);
     if ($cmp195$us$i) {
      $k$4$us$i = $sub189$us$i;
     } else {
      break;
     }
    }
    $add$ptr205$us$i = (($h$addr$0$us$i) + ($p$1$p$0$i)|0);
    $h$addr$0$us$i = $add$ptr205$us$i;$mem$0$us$i = $sub101$i;$z$0$us$i = $z$1$us$i;
   }
   if ((label|0) == 79) {
    STACKTOP = sp;return ($retval$0|0);
   }
  }
 } else {
  $sub93$i = (($add$i) - ($ip$1$ip$0$i))|0;
  $sub94$i = (($sub93$i) + -1)|0;
  $cmp95$i = ($ip$1$ip$0$i>>>0)>($sub94$i>>>0);
  $ip$1$ip$0$sub94$i = $cmp95$i ? $ip$1$ip$0$i : $sub94$i;
  $add99$i = (($ip$1$ip$0$sub94$i) + 1)|0;
  $or107296$i = $add$i | 63;
  $or107301$i = $or107296$i;$p$3300$i = $add99$i;
 }
 $arrayidx163131$i = (($n) + ($add90$i)|0);
 $h$addr$0$i = $call;$z$0$i = $call;
 L110: while(1) {
  $sub$ptr$lhs$cast$i = $z$0$i;
  $sub$ptr$rhs$cast$i = $h$addr$0$i;
  $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
  $cmp104$i = ($sub$ptr$sub$i>>>0)<($add$i>>>0);
  do {
   if ($cmp104$i) {
    $call108$i = (_memchr($z$0$i,0,$or107301$i)|0);
    $tobool109$i = ($call108$i|0)==(0|0);
    if ($tobool109$i) {
     $add$ptr119$i = (($z$0$i) + ($or107301$i)|0);
     $z$1$i = $add$ptr119$i;
     break;
    } else {
     $sub$ptr$lhs$cast111$i = $call108$i;
     $sub$ptr$sub113$i = (($sub$ptr$lhs$cast111$i) - ($sub$ptr$rhs$cast$i))|0;
     $cmp114$i = ($sub$ptr$sub113$i>>>0)<($add$i>>>0);
     if ($cmp114$i) {
      $retval$0 = 0;
      label = 79;
      break L110;
     } else {
      $z$1$i = $call108$i;
      break;
     }
    }
   } else {
    $z$1$i = $z$0$i;
   }
  } while(0);
  $arrayidx123$i = (($h$addr$0$i) + ($l$0167$i)|0);
  $31 = HEAP8[$arrayidx123$i>>0]|0;
  $conv124$i = $31&255;
  $div125$i = $conv124$i >>> 5;
  $arrayidx126$i = (($byteset$i) + ($div125$i<<2)|0);
  $32 = HEAP32[$arrayidx126$i>>2]|0;
  $rem130$i = $conv124$i & 31;
  $shl131$i = 1 << $rem130$i;
  $and$i = $shl131$i & $32;
  $tobool132$i = ($and$i|0)==(0);
  if ($tobool132$i) {
   $add$ptr152$i = (($h$addr$0$i) + ($add$i)|0);
   $h$addr$0$i = $add$ptr152$i;$z$0$i = $z$1$i;
   continue;
  }
  $arrayidx137$i = (($shift$i) + ($conv124$i<<2)|0);
  $33 = HEAP32[$arrayidx137$i>>2]|0;
  $tobool139$i = ($add$i|0)==($33|0);
  if (!($tobool139$i)) {
   $sub138$i = (($add$i) - ($33))|0;
   $add$ptr149$i = (($h$addr$0$i) + ($sub138$i)|0);
   $h$addr$0$i = $add$ptr149$i;$z$0$i = $z$1$i;
   continue;
  }
  $34 = HEAP8[$arrayidx163131$i>>0]|0;
  $tobool165132$i = ($34<<24>>24)==(0);
  L124: do {
   if ($tobool165132$i) {
    $k$4$i = $add90$i;
   } else {
    $$pr$i = $34;$k$3133$i = $add90$i;
    while(1) {
     $arrayidx169$i = (($h$addr$0$i) + ($k$3133$i)|0);
     $36 = HEAP8[$arrayidx169$i>>0]|0;
     $cmp171$i = ($$pr$i<<24>>24)==($36<<24>>24);
     $inc176$i = (($k$3133$i) + 1)|0;
     if (!($cmp171$i)) {
      break;
     }
     $arrayidx163$i = (($n) + ($inc176$i)|0);
     $35 = HEAP8[$arrayidx163$i>>0]|0;
     $tobool165$i = ($35<<24>>24)==(0);
     if ($tobool165$i) {
      $k$4$i = $add90$i;
      break L124;
     } else {
      $$pr$i = $35;$k$3133$i = $inc176$i;
     }
    }
    $sub181$i = (($k$3133$i) - ($ip$1$ip$0$i))|0;
    $add$ptr182$i = (($h$addr$0$i) + ($sub181$i)|0);
    $h$addr$0$i = $add$ptr182$i;$z$0$i = $z$1$i;
    continue L110;
   }
  } while(0);
  while(1) {
   $cmp186$i = ($k$4$i|0)==(0);
   if ($cmp186$i) {
    $retval$0 = $h$addr$0$i;
    label = 79;
    break L110;
   }
   $sub189$i = (($k$4$i) + -1)|0;
   $arrayidx190$i = (($n) + ($sub189$i)|0);
   $37 = HEAP8[$arrayidx190$i>>0]|0;
   $arrayidx193$i = (($h$addr$0$i) + ($sub189$i)|0);
   $38 = HEAP8[$arrayidx193$i>>0]|0;
   $cmp195$i = ($37<<24>>24)==($38<<24>>24);
   if ($cmp195$i) {
    $k$4$i = $sub189$i;
   } else {
    break;
   }
  }
  $add$ptr205$i = (($h$addr$0$i) + ($p$3300$i)|0);
  $h$addr$0$i = $add$ptr205$i;$z$0$i = $z$1$i;
 }
 if ((label|0) == 79) {
  STACKTOP = sp;return ($retval$0|0);
 }
 return 0|0;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i144 = 0, $$pre$i66$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i145Z2D = 0, $$pre$phi$i67$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F289$0$i = 0, $I252$0$i$i = 0, $I315$0$i = 0, $I57$0$c$i$i = 0, $I57$0$i$i = 0, $K105$017$i$i = 0, $K305$043$i$i = 0, $K372$024$i = 0;
 var $R$0$i = 0, $R$0$i$i = 0, $R$0$i135 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i137 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i134 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i69$i = 0, $T$016$i$i = 0, $T$023$i = 0, $T$042$i$i = 0, $add$i = 0, $add$i$i = 0, $add$i113 = 0, $add$i147 = 0, $add$ptr$i = 0;
 var $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i10$i$i = 0, $add$ptr$i11$i = 0, $add$ptr$i126 = 0, $add$ptr$i160 = 0, $add$ptr$i22$i = 0, $add$ptr$i37$i = 0, $add$ptr$sum$i$i = 0, $add$ptr$sum$i141172 = 0, $add$ptr$sum$i173 = 0, $add$ptr$sum1$i = 0, $add$ptr$sum1$i142 = 0, $add$ptr$sum10$i = 0, $add$ptr$sum104 = 0, $add$ptr$sum11$i = 0, $add$ptr$sum12$i = 0, $add$ptr$sum13$i = 0, $add$ptr$sum14$i = 0, $add$ptr$sum2$i = 0;
 var $add$ptr$sum3$i = 0, $add$ptr$sum4$i = 0, $add$ptr$sum5$i = 0, $add$ptr$sum6$i = 0, $add$ptr$sum7$i = 0, $add$ptr$sum8$i = 0, $add$ptr$sum9$i = 0, $add$ptr14$i$i = 0, $add$ptr16$i$i = 0, $add$ptr16$sum$i$i = 0, $add$ptr16$sum23$i$i = 0, $add$ptr16$sum25$i$i = 0, $add$ptr16$sum2627$i$i = 0, $add$ptr16$sum2829$i$i = 0, $add$ptr16$sum3031$i$i = 0, $add$ptr16$sum32$i$i = 0, $add$ptr16$sum4$i$i = 0, $add$ptr16$sum56$i$i = 0, $add$ptr16$sum7$i$i = 0, $add$ptr165 = 0;
 var $add$ptr165$sum = 0, $add$ptr168 = 0, $add$ptr17$i$i = 0, $add$ptr17$sum$i$i = 0, $add$ptr17$sum10$i$i = 0, $add$ptr17$sum11$i$i = 0, $add$ptr17$sum12$i$i = 0, $add$ptr17$sum13$i$i = 0, $add$ptr17$sum16$i$i = 0, $add$ptr17$sum17$i$i = 0, $add$ptr17$sum18$i$i = 0, $add$ptr17$sum19$i$i = 0, $add$ptr17$sum20$i$i = 0, $add$ptr17$sum21$i$i = 0, $add$ptr17$sum22$i$i = 0, $add$ptr17$sum23$i$i = 0, $add$ptr17$sum33$i$i = 0, $add$ptr17$sum34$i$i = 0, $add$ptr17$sum35$i$i = 0, $add$ptr17$sum8$i$i = 0;
 var $add$ptr17$sum9$i$i = 0, $add$ptr177$sum = 0, $add$ptr181 = 0, $add$ptr181$sum$i = 0, $add$ptr186$i = 0, $add$ptr190 = 0, $add$ptr190$i = 0, $add$ptr190$sum = 0, $add$ptr196 = 0, $add$ptr2$sum$i$i = 0, $add$ptr2$sum1$i$i = 0, $add$ptr205$i$i = 0, $add$ptr212$i$i = 0, $add$ptr224$i = 0, $add$ptr224$sum$i = 0, $add$ptr224$sum131$i = 0, $add$ptr224$sum132$i = 0, $add$ptr224$sum133$i = 0, $add$ptr224$sum134$i = 0, $add$ptr224$sum135$i = 0;
 var $add$ptr224$sum136$i = 0, $add$ptr224$sum137$i = 0, $add$ptr224$sum138$i = 0, $add$ptr224$sum139$i = 0, $add$ptr224$sum140$i = 0, $add$ptr224$sum141$i = 0, $add$ptr224$sum142$i = 0, $add$ptr224$sum143$i = 0, $add$ptr225$i = 0, $add$ptr2418$i$i = 0, $add$ptr2420$i$i = 0, $add$ptr255$i = 0, $add$ptr255$sum$i = 0, $add$ptr262$i = 0, $add$ptr272$sum$i = 0, $add$ptr281$i = 0, $add$ptr3$i$i = 0, $add$ptr30$i$i = 0, $add$ptr30$i52$i = 0, $add$ptr30$sum$i$i = 0;
 var $add$ptr368$i$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i28$i = 0, $add$ptr4$i43$i = 0, $add$ptr4$sum$i$i = 0, $add$ptr4$sum$i$i$i = 0, $add$ptr4$sum$i31$i = 0, $add$ptr4$sum$i49$i = 0, $add$ptr4$sum1$i$i = 0, $add$ptr4$sum1415$i$i = 0, $add$ptr436$i = 0, $add$ptr5$i$i = 0, $add$ptr6$sum$i$i = 0, $add$ptr6$sum$i$i$i = 0, $add$ptr6$sum$i33$i = 0, $add$ptr7$i$i = 0, $add$ptr82$i$i = 0, $add$ptr95 = 0, $add$ptr95$sum102 = 0;
 var $add$ptr98 = 0, $add10$i = 0, $add107$i = 0, $add13$i = 0, $add137$i = 0, $add14$i = 0, $add143 = 0, $add147$i = 0, $add17$i = 0, $add17$i150 = 0, $add177$i = 0, $add18$i = 0, $add19$i = 0, $add2 = 0, $add20$i = 0, $add206$i$i = 0, $add209$i = 0, $add212$i = 0, $add22$i = 0, $add243$i = 0;
 var $add26$i$i = 0, $add267$i = 0, $add269$i$i = 0, $add274$i$i = 0, $add278$i$i = 0, $add280$i$i = 0, $add283$i$i = 0, $add336$i = 0, $add341$i = 0, $add345$i = 0, $add347$i = 0, $add350$i = 0, $add43$i = 0, $add48$i = 0, $add50 = 0, $add51$i = 0, $add54 = 0, $add58 = 0, $add62 = 0, $add64 = 0;
 var $add74$i = 0, $add74$i$i = 0, $add77$i = 0, $add79$i$i = 0, $add8 = 0, $add81$i = 0, $add83$i$i = 0, $add85$i = 0, $add85$i$i = 0, $add88$i$i = 0, $add89$i = 0, $add9$i = 0, $add91$i = 0, $add98$i = 0, $and = 0, $and$i = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i110 = 0, $and$i12$i = 0;
 var $and$i14$i = 0, $and$i23$i = 0, $and$i38$i = 0, $and101$i = 0, $and103$i = 0, $and106 = 0, $and11$i = 0, $and119$i$i = 0, $and11914$i$i = 0, $and12$i = 0, $and13$i = 0, $and13$i$i = 0, $and133$i$i = 0, $and14 = 0, $and144 = 0, $and17$i = 0, $and191$i = 0, $and193$i = 0, $and199$i = 0, $and209$i$i = 0;
 var $and21$i = 0, $and21$i116 = 0, $and227$i$i = 0, $and233$i = 0, $and26$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and282$i$i = 0, $and291$i = 0, $and295$i$i = 0, $and3$i = 0, $and3$i$i = 0, $and3$i$i$i = 0, $and3$i25$i = 0, $and3$i40$i = 0, $and30$i = 0, $and318$i$i = 0, $and31840$i$i = 0, $and32$i = 0;
 var $and32$i$i = 0, $and33$i$i = 0, $and330$i = 0, $and335$i = 0, $and340$i = 0, $and349$i = 0, $and362$i = 0, $and37$i$i = 0, $and386$i = 0, $and38621$i = 0, $and39$i = 0, $and4 = 0, $and40$i$i = 0, $and41 = 0, $and43 = 0, $and46 = 0, $and46$i = 0, $and49 = 0, $and49$i$i = 0, $and53 = 0;
 var $and57 = 0, $and6$i = 0, $and6$i$i = 0, $and6$i44$i = 0, $and61 = 0, $and63$i = 0, $and67$i = 0, $and69$i$i = 0, $and7 = 0, $and7$i$i = 0, $and72$i = 0, $and73$i$i = 0, $and74 = 0, $and76$i = 0, $and77$$i = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and84$i = 0;
 var $and87$i$i = 0, $and88$i = 0, $and9$i = 0, $and96$i$i = 0, $and99$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i117 = 0, $arrayidx$i21$i = 0, $arrayidx$i57$i = 0, $arrayidx$sum = 0, $arrayidx$sum$i$i = 0, $arrayidx$sum$pre$i$i = 0, $arrayidx$sum1$i$i = 0, $arrayidx$sum9$i$i = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx103$sum$pre = 0, $arrayidx103$sum103 = 0;
 var $arrayidx105$i = 0, $arrayidx107$i$i = 0, $arrayidx112$i = 0, $arrayidx113$i = 0, $arrayidx121$i = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx137$i = 0, $arrayidx143$i$i = 0, $arrayidx148$i = 0, $arrayidx150$i = 0, $arrayidx151$i$i = 0, $arrayidx154$i = 0, $arrayidx154$i131 = 0, $arrayidx160$i = 0, $arrayidx164$i = 0, $arrayidx165$i = 0, $arrayidx178$i$i = 0, $arrayidx183$i = 0, $arrayidx184$i$i = 0;
 var $arrayidx195$i$i = 0, $arrayidx196$i = 0, $arrayidx196$sum$pre$i = 0, $arrayidx196$sum2$i = 0, $arrayidx203$i = 0, $arrayidx211$i = 0, $arrayidx223$i$i = 0, $arrayidx223$sum$pre$i$i = 0, $arrayidx223$sum24$i$i = 0, $arrayidx227$i = 0, $arrayidx23$i = 0, $arrayidx238$i = 0, $arrayidx244$i = 0, $arrayidx255$i = 0, $arrayidx27$i = 0, $arrayidx287$i$i = 0, $arrayidx288$i = 0, $arrayidx288$sum$pre$i = 0, $arrayidx288$sum15$i = 0, $arrayidx290$i$i = 0;
 var $arrayidx325$i$i = 0, $arrayidx354$i = 0, $arrayidx357$i = 0, $arrayidx393$i = 0, $arrayidx40$i = 0, $arrayidx44$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx66$sum = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx92$i$i = 0, $arrayidx93$i = 0, $arrayidx94$i = 0, $arrayidx96$i$i = 0, $bk = 0, $bk$i = 0, $bk$i$i = 0;
 var $bk$i128 = 0, $bk$i55$i = 0, $bk102$i$i = 0, $bk122 = 0, $bk124 = 0, $bk135$i = 0, $bk139$i$i = 0, $bk155$i$i = 0, $bk158$i$i = 0, $bk218$i = 0, $bk220$i = 0, $bk246$i$i = 0, $bk248$i$i = 0, $bk302$i$i = 0, $bk310$i = 0, $bk312$i = 0, $bk338$i$i = 0, $bk357$i$i = 0, $bk360$i$i = 0, $bk369$i = 0;
 var $bk406$i = 0, $bk425$i = 0, $bk428$i = 0, $bk43$i$i = 0, $bk47$i = 0, $bk55$i$i = 0, $bk67$i$i = 0, $bk74$i$i = 0, $bk78 = 0, $bk82$i$i = 0, $br$0$i = 0, $call$i$i = 0, $call104$i = 0, $call128$i = 0, $call129$i = 0, $call265$i = 0, $call34$$i = 0, $call34$i = 0, $call6$i$i = 0, $call65$i = 0;
 var $call80$$i = 0, $call80$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child289$sum$i$i = 0, $child356$i = 0, $child356$sum$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i107 = 0, $cmp$i11$i$i = 0, $cmp$i13$i = 0, $cmp$i146 = 0, $cmp$i15$i = 0, $cmp$i24$i = 0, $cmp$i39$i = 0, $cmp$i9$i = 0, $cmp1 = 0;
 var $cmp1$i = 0, $cmp1$i$i = 0, $cmp10 = 0, $cmp100$i$i = 0, $cmp101$i = 0, $cmp102$i = 0, $cmp104$i$i = 0, $cmp105$i = 0, $cmp106$i = 0, $cmp106$i$i = 0, $cmp107$i = 0, $cmp108$i$i = 0, $cmp112$i$i = 0, $cmp113 = 0, $cmp114$i = 0, $cmp115$i = 0, $cmp115$i162 = 0, $cmp118$i = 0, $cmp12$i = 0, $cmp120$i = 0;
 var $cmp120$i$i = 0, $cmp120$i63$i = 0, $cmp12015$i$i = 0, $cmp122$i = 0, $cmp124$i = 0, $cmp124$i$i = 0, $cmp126$i = 0, $cmp127$i = 0, $cmp128 = 0, $cmp128$i$i = 0, $cmp130$i = 0, $cmp132$i = 0, $cmp133$i$i = 0, $cmp134$i = 0, $cmp136$i = 0, $cmp137$i$i = 0, $cmp138 = 0, $cmp138$i = 0, $cmp138$i164 = 0, $cmp139$i = 0;
 var $cmp142$i = 0, $cmp144$i$i = 0, $cmp145 = 0, $cmp147$i$i = 0, $cmp148$i = 0, $cmp15 = 0, $cmp15$i = 0, $cmp150$i$i = 0, $cmp151$i = 0, $cmp154$i = 0, $cmp155 = 0, $cmp155$i = 0, $cmp155$i132 = 0, $cmp156$i = 0, $cmp156$i$i = 0, $cmp159$i = 0, $cmp159$i166 = 0, $cmp16 = 0, $cmp160$i$i = 0, $cmp161 = 0;
 var $cmp161$i = 0, $cmp165$i = 0, $cmp168$i$i = 0, $cmp170$i = 0, $cmp172$i$i = 0, $cmp174$i = 0, $cmp179$i = 0, $cmp183 = 0, $cmp183$i = 0, $cmp184$i = 0, $cmp185$i$i = 0, $cmp187$i = 0, $cmp189$i$i = 0, $cmp19$i = 0, $cmp191$i = 0, $cmp197$i = 0, $cmp2$i$i = 0, $cmp2$i$i$i = 0, $cmp20$i$i = 0, $cmp200$i = 0;
 var $cmp204$i = 0, $cmp206$i = 0, $cmp208$i = 0, $cmp21$i = 0, $cmp215$i = 0, $cmp215$i$i = 0, $cmp216$i = 0, $cmp220$i = 0, $cmp221$i = 0, $cmp225$i = 0, $cmp228$i = 0, $cmp232$i = 0, $cmp236$i$i = 0, $cmp24$i = 0, $cmp24$i$i = 0, $cmp245$i = 0, $cmp249$i = 0, $cmp250$i = 0, $cmp254$i$i = 0, $cmp258$i$i = 0;
 var $cmp26$i = 0, $cmp264$i = 0, $cmp27$i$i = 0, $cmp2719$i$i = 0, $cmp28$i = 0, $cmp28$i$i = 0, $cmp283$i = 0, $cmp29 = 0, $cmp29$i = 0, $cmp3$i$i = 0, $cmp300$i = 0, $cmp306$i$i = 0, $cmp31 = 0, $cmp318$i = 0, $cmp319$i$i = 0, $cmp31941$i$i = 0, $cmp32$i = 0, $cmp32$i152 = 0, $cmp322$i = 0, $cmp327$i$i = 0;
 var $cmp33$i = 0, $cmp332$i$i = 0, $cmp34$i = 0, $cmp34$i$i = 0, $cmp346$i$i = 0, $cmp35$i = 0, $cmp35$i154 = 0, $cmp350$i$i = 0, $cmp36$i = 0, $cmp36$i$i = 0, $cmp373$i = 0, $cmp38$i$i = 0, $cmp387$i = 0, $cmp38722$i = 0, $cmp395$i = 0, $cmp40$i = 0, $cmp40$i155 = 0, $cmp400$i = 0, $cmp41$i$i = 0, $cmp414$i = 0;
 var $cmp418$i = 0, $cmp42$i$i = 0, $cmp44$i$i = 0, $cmp45$i = 0, $cmp45$i123 = 0, $cmp46$i = 0, $cmp46$i$i = 0, $cmp46$i59$i = 0, $cmp48$i = 0, $cmp49$i = 0, $cmp5 = 0, $cmp51$i = 0, $cmp52$i = 0, $cmp54$i = 0, $cmp54$i$i = 0, $cmp54$i156 = 0, $cmp56$i = 0, $cmp57$i = 0, $cmp57$i$i = 0, $cmp59$i$i = 0;
 var $cmp60$i = 0, $cmp60$i$i = 0, $cmp62$i = 0, $cmp63$i = 0, $cmp63$i$i = 0, $cmp64$i = 0, $cmp66$i = 0, $cmp66$i158 = 0, $cmp7$i$i = 0, $cmp70 = 0, $cmp72$i = 0, $cmp75$i$i = 0, $cmp76 = 0, $cmp76$i = 0, $cmp78$i = 0, $cmp79 = 0, $cmp81$i = 0, $cmp81$i$i = 0, $cmp82$i = 0, $cmp83$i$i = 0;
 var $cmp86$i = 0, $cmp86$i$i = 0, $cmp88$i = 0, $cmp9$i$i = 0, $cmp90$i = 0, $cmp90$i161 = 0, $cmp93$i = 0, $cmp95$i = 0, $cmp96$i = 0, $cmp9626$i = 0, $cmp97$i$i = 0, $cmp99 = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i17$i = 0, $cond$i27$i = 0, $cond$i42$i = 0, $cond$v$0$i = 0;
 var $cond115$i$i = 0, $cond13$i$i = 0, $cond15$i$i = 0, $cond18$i = 0, $cond315$i$i = 0, $cond37$i$i = 0, $cond382$i = 0, $cond4$i = 0, $cond6$i = 0, $exitcond$i$i = 0, $fd$i = 0, $fd$i$i = 0, $fd$i129 = 0, $fd103$i$i = 0, $fd123 = 0, $fd138$i = 0, $fd140$i$i = 0, $fd145$i$i = 0, $fd157$i$i = 0, $fd219$i = 0;
 var $fd247$i$i = 0, $fd303$i$i = 0, $fd311$i = 0, $fd339$i$i = 0, $fd344$i$i = 0, $fd359$i$i = 0, $fd370$i = 0, $fd407$i = 0, $fd412$i = 0, $fd427$i = 0, $fd50$i = 0, $fd54$i$i = 0, $fd59$i$i = 0, $fd68$pre$i$i = 0, $fd68$pre$phi$i$iZ2D = 0, $fd69 = 0, $fd78$i$i = 0, $fd85$i$i = 0, $fd9 = 0, $head = 0;
 var $head$i = 0, $head$i$i = 0, $head$i$i$i = 0, $head$i122 = 0, $head$i18$i = 0, $head$i32$i = 0, $head$i50$i = 0, $head118$i$i = 0, $head11813$i$i = 0, $head167 = 0, $head172 = 0, $head176 = 0, $head178 = 0, $head179$i = 0, $head182$i = 0, $head187$i = 0, $head189$i = 0, $head192 = 0, $head195 = 0, $head208$i$i = 0;
 var $head211$i$i = 0, $head23$i$i = 0, $head25 = 0, $head258$i = 0, $head261$i = 0, $head270$i = 0, $head273$i = 0, $head278$i = 0, $head280$i = 0, $head29$i = 0, $head29$i$i = 0, $head31$i$i = 0, $head317$i$i = 0, $head31739$i$i = 0, $head32$i$i = 0, $head34$i$i = 0, $head385$i = 0, $head38520$i = 0, $head7$i$i = 0, $head7$i$i$i = 0;
 var $head7$i34$i = 0, $head94 = 0, $head97 = 0, $head98$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $inc$i$i = 0, $index$i = 0, $index$i$i = 0, $index$i138 = 0, $index$i64$i = 0, $index288$i$i = 0, $index355$i = 0, $mem$0 = 0, $nb$0 = 0, $neg = 0, $neg$i = 0, $neg$i$i = 0, $neg$i139 = 0, $neg$i149 = 0;
 var $neg100$i = 0, $neg13 = 0, $neg132$i$i = 0, $neg45$i = 0, $neg73 = 0, $next$i = 0, $next$i$i = 0, $next$i$i$i = 0, $next228$i = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i157 = 0, $or$cond1$i = 0, $or$cond16$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond6$not$i = 0;
 var $or$cond7$i = 0, $or$cond8$i = 0, $or$cond93$i = 0, $or$i = 0, $or$i$i = 0, $or$i$i$i = 0, $or$i163 = 0, $or$i30$i = 0, $or101$i$i = 0, $or110 = 0, $or166 = 0, $or171 = 0, $or175 = 0, $or178$i = 0, $or179 = 0, $or183$i = 0, $or186$i = 0, $or188$i = 0, $or19$i$i = 0, $or191 = 0;
 var $or194 = 0, $or204$i = 0, $or210$i$i = 0, $or22$i$i = 0, $or23 = 0, $or232$i$i = 0, $or257$i = 0, $or26 = 0, $or260$i = 0, $or269$i = 0, $or274$i = 0, $or277$i = 0, $or279$i = 0, $or28$i$i = 0, $or296$i = 0, $or300$i$i = 0, $or33$i$i = 0, $or367$i = 0, $or40 = 0, $or44$i$i = 0;
 var $or93 = 0, $or96 = 0, $parent$i = 0, $parent$i$i = 0, $parent$i127 = 0, $parent$i61$i = 0, $parent135$i = 0, $parent138$i$i = 0, $parent149$i = 0, $parent159$i$i = 0, $parent165$i$i = 0, $parent166$i = 0, $parent179$i$i = 0, $parent196$i$i = 0, $parent225$i = 0, $parent239$i = 0, $parent256$i = 0, $parent301$i$i = 0, $parent337$i$i = 0, $parent361$i$i = 0;
 var $parent368$i = 0, $parent405$i = 0, $parent429$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i120 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$328$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sflags190$i = 0, $sflags232$i = 0, $shl = 0, $shl$i = 0, $shl$i$i = 0, $shl$i111 = 0, $shl$i20$i = 0, $shl$i56$i = 0;
 var $shl102 = 0, $shl105 = 0, $shl116$i$i = 0, $shl12 = 0, $shl127$i$i = 0, $shl131$i$i = 0, $shl15$i = 0, $shl18$i = 0, $shl191$i = 0, $shl195$i = 0, $shl198$i = 0, $shl22 = 0, $shl221$i$i = 0, $shl226$i$i = 0, $shl265$i$i = 0, $shl270$i$i = 0, $shl276$i$i = 0, $shl279$i$i = 0, $shl287$i = 0, $shl290$i = 0;
 var $shl294$i$i = 0, $shl31$i = 0, $shl316$i$i = 0, $shl326$i$i = 0, $shl332$i = 0, $shl337$i = 0, $shl343$i = 0, $shl346$i = 0, $shl35 = 0, $shl361$i = 0, $shl37 = 0, $shl383$i = 0, $shl39$i$i = 0, $shl394$i = 0, $shl48$i$i = 0, $shl52$i = 0, $shl59$i = 0, $shl65 = 0, $shl70$i$i = 0, $shl72 = 0;
 var $shl75$i$i = 0, $shl81$i$i = 0, $shl84$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i = 0, $shr$i$i = 0, $shr$i106 = 0, $shr$i54$i = 0, $shr101 = 0, $shr11$i = 0, $shr11$i114 = 0, $shr110$i$i = 0, $shr12$i = 0, $shr123$i$i = 0, $shr15$i = 0, $shr16$i = 0, $shr16$i115 = 0;
 var $shr19$i = 0, $shr194$i = 0, $shr20$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr263$i$i = 0, $shr267$i$i = 0, $shr27$i = 0, $shr272$i$i = 0, $shr277$i$i = 0, $shr281$i$i = 0, $shr282$i = 0, $shr3 = 0, $shr310$i$i = 0, $shr317$i = 0, $shr322$i$i = 0, $shr329$i = 0, $shr334$i = 0, $shr339$i = 0, $shr344$i = 0;
 var $shr348$i = 0, $shr377$i = 0, $shr390$i = 0, $shr4$i = 0, $shr41$i = 0, $shr45 = 0, $shr47 = 0, $shr48 = 0, $shr5$i = 0, $shr5$i109 = 0, $shr51 = 0, $shr52 = 0, $shr55 = 0, $shr56 = 0, $shr58$i$i = 0, $shr59 = 0, $shr60 = 0, $shr63 = 0, $shr68$i$i = 0, $shr7$i = 0;
 var $shr7$i112 = 0, $shr71$i = 0, $shr72$i$i = 0, $shr74$i = 0, $shr75$i = 0, $shr77$i$i = 0, $shr78$i = 0, $shr79$i = 0, $shr8$i = 0, $shr82$i = 0, $shr82$i$i = 0, $shr83$i = 0, $shr86$i = 0, $shr86$i$i = 0, $shr87$i = 0, $shr90$i = 0, $size$i$i = 0, $size$i$i$i = 0, $size185$i = 0, $size242$i = 0;
 var $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0109$i = 0, $sp$1105$i = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $sub = 0, $sub$i = 0, $sub$i$i = 0, $sub$i105 = 0, $sub$i148 = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$lhs$cast$i46$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$rhs$cast$i47$i = 0;
 var $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i48$i = 0, $sub$ptr$sub$tsize$1$i = 0, $sub10$i = 0, $sub100$i = 0, $sub100$rsize$3$i = 0, $sub109$i = 0, $sub113$i$i = 0, $sub117$i = 0, $sub14$i = 0, $sub159 = 0, $sub16$i$i = 0, $sub169$i = 0, $sub18$i$i = 0, $sub187 = 0, $sub2$i = 0, $sub22$i = 0, $sub253$i = 0, $sub262$i$i = 0;
 var $sub266$i$i = 0, $sub271$i$i = 0, $sub275$i$i = 0, $sub30$i = 0, $sub31$i = 0, $sub31$rsize$0$i = 0, $sub313$i$i = 0, $sub328$i = 0, $sub33$i = 0, $sub333$i = 0, $sub338$i = 0, $sub342$i = 0, $sub38$i = 0, $sub380$i = 0, $sub4$i = 0, $sub42 = 0, $sub44 = 0, $sub47$i = 0, $sub5$i$i = 0, $sub5$i$i$i = 0;
 var $sub5$i29$i = 0, $sub6$i = 0, $sub62$i = 0, $sub66$i = 0, $sub67$i$i = 0, $sub69$i = 0, $sub71$i$i = 0, $sub76$i$i = 0, $sub80$i$i = 0, $sub91 = 0, $sub96$i = 0, $t$0$i = 0, $t$0$i119 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$227$i = 0, $tbase$0$i = 0, $tbase$291$i = 0, $tobool$i$i = 0;
 var $tobool107 = 0, $tobool192$i = 0, $tobool200$i = 0, $tobool228$i$i = 0, $tobool234$i = 0, $tobool27$i = 0, $tobool292$i = 0, $tobool296$i$i = 0, $tobool363$i = 0, $tobool97$i$i = 0, $tsize$0$i = 0, $tsize$0748284$i = 0, $tsize$1$i = 0, $tsize$290$i = 0, $v$0$i = 0, $v$0$i121 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$329$i = 0;
 var $xor$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($bytes>>>0)<(245);
 do {
  if ($cmp) {
   $cmp1 = ($bytes>>>0)<(11);
   if ($cmp1) {
    $cond = 16;
   } else {
    $add2 = (($bytes) + 11)|0;
    $and = $add2 & -8;
    $cond = $and;
   }
   $shr = $cond >>> 3;
   $0 = HEAP32[8720>>2]|0;
   $shr3 = $0 >>> $shr;
   $and4 = $shr3 & 3;
   $cmp5 = ($and4|0)==(0);
   if (!($cmp5)) {
    $neg = $shr3 & 1;
    $and7 = $neg ^ 1;
    $add8 = (($and7) + ($shr))|0;
    $shl = $add8 << 1;
    $arrayidx = ((8720 + ($shl<<2)|0) + 40|0);
    $arrayidx$sum = (($shl) + 2)|0;
    $1 = ((8720 + ($arrayidx$sum<<2)|0) + 40|0);
    $2 = HEAP32[$1>>2]|0;
    $fd9 = (($2) + 8|0);
    $3 = HEAP32[$fd9>>2]|0;
    $cmp10 = ($arrayidx|0)==($3|0);
    do {
     if ($cmp10) {
      $shl12 = 1 << $add8;
      $neg13 = $shl12 ^ -1;
      $and14 = $0 & $neg13;
      HEAP32[8720>>2] = $and14;
     } else {
      $4 = HEAP32[((8720 + 16|0))>>2]|0;
      $cmp15 = ($3>>>0)<($4>>>0);
      if ($cmp15) {
       _abort();
       // unreachable;
      }
      $bk = (($3) + 12|0);
      $5 = HEAP32[$bk>>2]|0;
      $cmp16 = ($5|0)==($2|0);
      if ($cmp16) {
       HEAP32[$bk>>2] = $arrayidx;
       HEAP32[$1>>2] = $3;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $shl22 = $add8 << 3;
    $or23 = $shl22 | 3;
    $head = (($2) + 4|0);
    HEAP32[$head>>2] = $or23;
    $add$ptr$sum104 = $shl22 | 4;
    $head25 = (($2) + ($add$ptr$sum104)|0);
    $6 = HEAP32[$head25>>2]|0;
    $or26 = $6 | 1;
    HEAP32[$head25>>2] = $or26;
    $mem$0 = $fd9;
    STACKTOP = sp;return ($mem$0|0);
   }
   $7 = HEAP32[((8720 + 8|0))>>2]|0;
   $cmp29 = ($cond>>>0)>($7>>>0);
   if ($cmp29) {
    $cmp31 = ($shr3|0)==(0);
    if (!($cmp31)) {
     $shl35 = $shr3 << $shr;
     $shl37 = 2 << $shr;
     $sub = (0 - ($shl37))|0;
     $or40 = $shl37 | $sub;
     $and41 = $shl35 & $or40;
     $sub42 = (0 - ($and41))|0;
     $and43 = $and41 & $sub42;
     $sub44 = (($and43) + -1)|0;
     $shr45 = $sub44 >>> 12;
     $and46 = $shr45 & 16;
     $shr47 = $sub44 >>> $and46;
     $shr48 = $shr47 >>> 5;
     $and49 = $shr48 & 8;
     $add50 = $and49 | $and46;
     $shr51 = $shr47 >>> $and49;
     $shr52 = $shr51 >>> 2;
     $and53 = $shr52 & 4;
     $add54 = $add50 | $and53;
     $shr55 = $shr51 >>> $and53;
     $shr56 = $shr55 >>> 1;
     $and57 = $shr56 & 2;
     $add58 = $add54 | $and57;
     $shr59 = $shr55 >>> $and57;
     $shr60 = $shr59 >>> 1;
     $and61 = $shr60 & 1;
     $add62 = $add58 | $and61;
     $shr63 = $shr59 >>> $and61;
     $add64 = (($add62) + ($shr63))|0;
     $shl65 = $add64 << 1;
     $arrayidx66 = ((8720 + ($shl65<<2)|0) + 40|0);
     $arrayidx66$sum = (($shl65) + 2)|0;
     $8 = ((8720 + ($arrayidx66$sum<<2)|0) + 40|0);
     $9 = HEAP32[$8>>2]|0;
     $fd69 = (($9) + 8|0);
     $10 = HEAP32[$fd69>>2]|0;
     $cmp70 = ($arrayidx66|0)==($10|0);
     do {
      if ($cmp70) {
       $shl72 = 1 << $add64;
       $neg73 = $shl72 ^ -1;
       $and74 = $0 & $neg73;
       HEAP32[8720>>2] = $and74;
      } else {
       $11 = HEAP32[((8720 + 16|0))>>2]|0;
       $cmp76 = ($10>>>0)<($11>>>0);
       if ($cmp76) {
        _abort();
        // unreachable;
       }
       $bk78 = (($10) + 12|0);
       $12 = HEAP32[$bk78>>2]|0;
       $cmp79 = ($12|0)==($9|0);
       if ($cmp79) {
        HEAP32[$bk78>>2] = $arrayidx66;
        HEAP32[$8>>2] = $10;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $shl90 = $add64 << 3;
     $sub91 = (($shl90) - ($cond))|0;
     $or93 = $cond | 3;
     $head94 = (($9) + 4|0);
     HEAP32[$head94>>2] = $or93;
     $add$ptr95 = (($9) + ($cond)|0);
     $or96 = $sub91 | 1;
     $add$ptr95$sum102 = $cond | 4;
     $head97 = (($9) + ($add$ptr95$sum102)|0);
     HEAP32[$head97>>2] = $or96;
     $add$ptr98 = (($9) + ($shl90)|0);
     HEAP32[$add$ptr98>>2] = $sub91;
     $13 = HEAP32[((8720 + 8|0))>>2]|0;
     $cmp99 = ($13|0)==(0);
     if (!($cmp99)) {
      $14 = HEAP32[((8720 + 20|0))>>2]|0;
      $shr101 = $13 >>> 3;
      $shl102 = $shr101 << 1;
      $arrayidx103 = ((8720 + ($shl102<<2)|0) + 40|0);
      $15 = HEAP32[8720>>2]|0;
      $shl105 = 1 << $shr101;
      $and106 = $15 & $shl105;
      $tobool107 = ($and106|0)==(0);
      if ($tobool107) {
       $or110 = $15 | $shl105;
       HEAP32[8720>>2] = $or110;
       $arrayidx103$sum$pre = (($shl102) + 2)|0;
       $$pre = ((8720 + ($arrayidx103$sum$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F104$0 = $arrayidx103;
      } else {
       $arrayidx103$sum103 = (($shl102) + 2)|0;
       $16 = ((8720 + ($arrayidx103$sum103<<2)|0) + 40|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = HEAP32[((8720 + 16|0))>>2]|0;
       $cmp113 = ($17>>>0)<($18>>>0);
       if ($cmp113) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $16;$F104$0 = $17;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $14;
      $bk122 = (($F104$0) + 12|0);
      HEAP32[$bk122>>2] = $14;
      $fd123 = (($14) + 8|0);
      HEAP32[$fd123>>2] = $F104$0;
      $bk124 = (($14) + 12|0);
      HEAP32[$bk124>>2] = $arrayidx103;
     }
     HEAP32[((8720 + 8|0))>>2] = $sub91;
     HEAP32[((8720 + 20|0))>>2] = $add$ptr95;
     $mem$0 = $fd69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $19 = HEAP32[((8720 + 4|0))>>2]|0;
    $cmp128 = ($19|0)==(0);
    if ($cmp128) {
     $nb$0 = $cond;
    } else {
     $sub$i = (0 - ($19))|0;
     $and$i = $19 & $sub$i;
     $sub2$i = (($and$i) + -1)|0;
     $shr$i = $sub2$i >>> 12;
     $and3$i = $shr$i & 16;
     $shr4$i = $sub2$i >>> $and3$i;
     $shr5$i = $shr4$i >>> 5;
     $and6$i = $shr5$i & 8;
     $add$i = $and6$i | $and3$i;
     $shr7$i = $shr4$i >>> $and6$i;
     $shr8$i = $shr7$i >>> 2;
     $and9$i = $shr8$i & 4;
     $add10$i = $add$i | $and9$i;
     $shr11$i = $shr7$i >>> $and9$i;
     $shr12$i = $shr11$i >>> 1;
     $and13$i = $shr12$i & 2;
     $add14$i = $add10$i | $and13$i;
     $shr15$i = $shr11$i >>> $and13$i;
     $shr16$i = $shr15$i >>> 1;
     $and17$i = $shr16$i & 1;
     $add18$i = $add14$i | $and17$i;
     $shr19$i = $shr15$i >>> $and17$i;
     $add20$i = (($add18$i) + ($shr19$i))|0;
     $arrayidx$i = ((8720 + ($add20$i<<2)|0) + 304|0);
     $20 = HEAP32[$arrayidx$i>>2]|0;
     $head$i = (($20) + 4|0);
     $21 = HEAP32[$head$i>>2]|0;
     $and21$i = $21 & -8;
     $sub22$i = (($and21$i) - ($cond))|0;
     $rsize$0$i = $sub22$i;$t$0$i = $20;$v$0$i = $20;
     while(1) {
      $arrayidx23$i = (($t$0$i) + 16|0);
      $22 = HEAP32[$arrayidx23$i>>2]|0;
      $cmp$i = ($22|0)==(0|0);
      if ($cmp$i) {
       $arrayidx27$i = (($t$0$i) + 20|0);
       $23 = HEAP32[$arrayidx27$i>>2]|0;
       $cmp28$i = ($23|0)==(0|0);
       if ($cmp28$i) {
        break;
       } else {
        $cond6$i = $23;
       }
      } else {
       $cond6$i = $22;
      }
      $head29$i = (($cond6$i) + 4|0);
      $24 = HEAP32[$head29$i>>2]|0;
      $and30$i = $24 & -8;
      $sub31$i = (($and30$i) - ($cond))|0;
      $cmp32$i = ($sub31$i>>>0)<($rsize$0$i>>>0);
      $sub31$rsize$0$i = $cmp32$i ? $sub31$i : $rsize$0$i;
      $cond$v$0$i = $cmp32$i ? $cond6$i : $v$0$i;
      $rsize$0$i = $sub31$rsize$0$i;$t$0$i = $cond6$i;$v$0$i = $cond$v$0$i;
     }
     $25 = HEAP32[((8720 + 16|0))>>2]|0;
     $cmp33$i = ($v$0$i>>>0)<($25>>>0);
     if ($cmp33$i) {
      _abort();
      // unreachable;
     }
     $add$ptr$i = (($v$0$i) + ($cond)|0);
     $cmp35$i = ($v$0$i>>>0)<($add$ptr$i>>>0);
     if (!($cmp35$i)) {
      _abort();
      // unreachable;
     }
     $parent$i = (($v$0$i) + 24|0);
     $26 = HEAP32[$parent$i>>2]|0;
     $bk$i = (($v$0$i) + 12|0);
     $27 = HEAP32[$bk$i>>2]|0;
     $cmp40$i = ($27|0)==($v$0$i|0);
     do {
      if ($cmp40$i) {
       $arrayidx61$i = (($v$0$i) + 20|0);
       $31 = HEAP32[$arrayidx61$i>>2]|0;
       $cmp62$i = ($31|0)==(0|0);
       if ($cmp62$i) {
        $arrayidx65$i = (($v$0$i) + 16|0);
        $32 = HEAP32[$arrayidx65$i>>2]|0;
        $cmp66$i = ($32|0)==(0|0);
        if ($cmp66$i) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $32;$RP$0$i = $arrayidx65$i;
        }
       } else {
        $R$0$i = $31;$RP$0$i = $arrayidx61$i;
       }
       while(1) {
        $arrayidx71$i = (($R$0$i) + 20|0);
        $33 = HEAP32[$arrayidx71$i>>2]|0;
        $cmp72$i = ($33|0)==(0|0);
        if (!($cmp72$i)) {
         $R$0$i = $33;$RP$0$i = $arrayidx71$i;
         continue;
        }
        $arrayidx75$i = (($R$0$i) + 16|0);
        $34 = HEAP32[$arrayidx75$i>>2]|0;
        $cmp76$i = ($34|0)==(0|0);
        if ($cmp76$i) {
         break;
        } else {
         $R$0$i = $34;$RP$0$i = $arrayidx75$i;
        }
       }
       $cmp81$i = ($RP$0$i>>>0)<($25>>>0);
       if ($cmp81$i) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $fd$i = (($v$0$i) + 8|0);
       $28 = HEAP32[$fd$i>>2]|0;
       $cmp45$i = ($28>>>0)<($25>>>0);
       if ($cmp45$i) {
        _abort();
        // unreachable;
       }
       $bk47$i = (($28) + 12|0);
       $29 = HEAP32[$bk47$i>>2]|0;
       $cmp48$i = ($29|0)==($v$0$i|0);
       if (!($cmp48$i)) {
        _abort();
        // unreachable;
       }
       $fd50$i = (($27) + 8|0);
       $30 = HEAP32[$fd50$i>>2]|0;
       $cmp51$i = ($30|0)==($v$0$i|0);
       if ($cmp51$i) {
        HEAP32[$bk47$i>>2] = $27;
        HEAP32[$fd50$i>>2] = $28;
        $R$1$i = $27;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $cmp90$i = ($26|0)==(0|0);
     do {
      if (!($cmp90$i)) {
       $index$i = (($v$0$i) + 28|0);
       $35 = HEAP32[$index$i>>2]|0;
       $arrayidx94$i = ((8720 + ($35<<2)|0) + 304|0);
       $36 = HEAP32[$arrayidx94$i>>2]|0;
       $cmp95$i = ($v$0$i|0)==($36|0);
       if ($cmp95$i) {
        HEAP32[$arrayidx94$i>>2] = $R$1$i;
        $cond4$i = ($R$1$i|0)==(0|0);
        if ($cond4$i) {
         $shl$i = 1 << $35;
         $neg$i = $shl$i ^ -1;
         $37 = HEAP32[((8720 + 4|0))>>2]|0;
         $and103$i = $37 & $neg$i;
         HEAP32[((8720 + 4|0))>>2] = $and103$i;
         break;
        }
       } else {
        $38 = HEAP32[((8720 + 16|0))>>2]|0;
        $cmp107$i = ($26>>>0)<($38>>>0);
        if ($cmp107$i) {
         _abort();
         // unreachable;
        }
        $arrayidx113$i = (($26) + 16|0);
        $39 = HEAP32[$arrayidx113$i>>2]|0;
        $cmp114$i = ($39|0)==($v$0$i|0);
        if ($cmp114$i) {
         HEAP32[$arrayidx113$i>>2] = $R$1$i;
        } else {
         $arrayidx121$i = (($26) + 20|0);
         HEAP32[$arrayidx121$i>>2] = $R$1$i;
        }
        $cmp126$i = ($R$1$i|0)==(0|0);
        if ($cmp126$i) {
         break;
        }
       }
       $40 = HEAP32[((8720 + 16|0))>>2]|0;
       $cmp130$i = ($R$1$i>>>0)<($40>>>0);
       if ($cmp130$i) {
        _abort();
        // unreachable;
       }
       $parent135$i = (($R$1$i) + 24|0);
       HEAP32[$parent135$i>>2] = $26;
       $arrayidx137$i = (($v$0$i) + 16|0);
       $41 = HEAP32[$arrayidx137$i>>2]|0;
       $cmp138$i = ($41|0)==(0|0);
       do {
        if (!($cmp138$i)) {
         $42 = HEAP32[((8720 + 16|0))>>2]|0;
         $cmp142$i = ($41>>>0)<($42>>>0);
         if ($cmp142$i) {
          _abort();
          // unreachable;
         } else {
          $arrayidx148$i = (($R$1$i) + 16|0);
          HEAP32[$arrayidx148$i>>2] = $41;
          $parent149$i = (($41) + 24|0);
          HEAP32[$parent149$i>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $arrayidx154$i = (($v$0$i) + 20|0);
       $43 = HEAP32[$arrayidx154$i>>2]|0;
       $cmp155$i = ($43|0)==(0|0);
       if (!($cmp155$i)) {
        $44 = HEAP32[((8720 + 16|0))>>2]|0;
        $cmp159$i = ($43>>>0)<($44>>>0);
        if ($cmp159$i) {
         _abort();
         // unreachable;
        } else {
         $arrayidx165$i = (($R$1$i) + 20|0);
         HEAP32[$arrayidx165$i>>2] = $43;
         $parent166$i = (($43) + 24|0);
         HEAP32[$parent166$i>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $cmp174$i = ($rsize$0$i>>>0)<(16);
     if ($cmp174$i) {
      $add177$i = (($rsize$0$i) + ($cond))|0;
      $or178$i = $add177$i | 3;
      $head179$i = (($v$0$i) + 4|0);
      HEAP32[$head179$i>>2] = $or178$i;
      $add$ptr181$sum$i = (($add177$i) + 4)|0;
      $head182$i = (($v$0$i) + ($add$ptr181$sum$i)|0);
      $45 = HEAP32[$head182$i>>2]|0;
      $or183$i = $45 | 1;
      HEAP32[$head182$i>>2] = $or183$i;
     } else {
      $or186$i = $cond | 3;
      $head187$i = (($v$0$i) + 4|0);
      HEAP32[$head187$i>>2] = $or186$i;
      $or188$i = $rsize$0$i | 1;
      $add$ptr$sum$i173 = $cond | 4;
      $head189$i = (($v$0$i) + ($add$ptr$sum$i173)|0);
      HEAP32[$head189$i>>2] = $or188$i;
      $add$ptr$sum1$i = (($rsize$0$i) + ($cond))|0;
      $add$ptr190$i = (($v$0$i) + ($add$ptr$sum1$i)|0);
      HEAP32[$add$ptr190$i>>2] = $rsize$0$i;
      $46 = HEAP32[((8720 + 8|0))>>2]|0;
      $cmp191$i = ($46|0)==(0);
      if (!($cmp191$i)) {
       $47 = HEAP32[((8720 + 20|0))>>2]|0;
       $shr194$i = $46 >>> 3;
       $shl195$i = $shr194$i << 1;
       $arrayidx196$i = ((8720 + ($shl195$i<<2)|0) + 40|0);
       $48 = HEAP32[8720>>2]|0;
       $shl198$i = 1 << $shr194$i;
       $and199$i = $48 & $shl198$i;
       $tobool200$i = ($and199$i|0)==(0);
       if ($tobool200$i) {
        $or204$i = $48 | $shl198$i;
        HEAP32[8720>>2] = $or204$i;
        $arrayidx196$sum$pre$i = (($shl195$i) + 2)|0;
        $$pre$i = ((8720 + ($arrayidx196$sum$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F197$0$i = $arrayidx196$i;
       } else {
        $arrayidx196$sum2$i = (($shl195$i) + 2)|0;
        $49 = ((8720 + ($arrayidx196$sum2$i<<2)|0) + 40|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = HEAP32[((8720 + 16|0))>>2]|0;
        $cmp208$i = ($50>>>0)<($51>>>0);
        if ($cmp208$i) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $49;$F197$0$i = $50;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $47;
       $bk218$i = (($F197$0$i) + 12|0);
       HEAP32[$bk218$i>>2] = $47;
       $fd219$i = (($47) + 8|0);
       HEAP32[$fd219$i>>2] = $F197$0$i;
       $bk220$i = (($47) + 12|0);
       HEAP32[$bk220$i>>2] = $arrayidx196$i;
      }
      HEAP32[((8720 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((8720 + 20|0))>>2] = $add$ptr$i;
     }
     $add$ptr225$i = (($v$0$i) + 8|0);
     $mem$0 = $add$ptr225$i;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $cond;
   }
  } else {
   $cmp138 = ($bytes>>>0)>(4294967231);
   if ($cmp138) {
    $nb$0 = -1;
   } else {
    $add143 = (($bytes) + 11)|0;
    $and144 = $add143 & -8;
    $52 = HEAP32[((8720 + 4|0))>>2]|0;
    $cmp145 = ($52|0)==(0);
    if ($cmp145) {
     $nb$0 = $and144;
    } else {
     $sub$i105 = (0 - ($and144))|0;
     $shr$i106 = $add143 >>> 8;
     $cmp$i107 = ($shr$i106|0)==(0);
     if ($cmp$i107) {
      $idx$0$i = 0;
     } else {
      $cmp1$i = ($and144>>>0)>(16777215);
      if ($cmp1$i) {
       $idx$0$i = 31;
      } else {
       $sub4$i = (($shr$i106) + 1048320)|0;
       $shr5$i109 = $sub4$i >>> 16;
       $and$i110 = $shr5$i109 & 8;
       $shl$i111 = $shr$i106 << $and$i110;
       $sub6$i = (($shl$i111) + 520192)|0;
       $shr7$i112 = $sub6$i >>> 16;
       $and8$i = $shr7$i112 & 4;
       $add$i113 = $and8$i | $and$i110;
       $shl9$i = $shl$i111 << $and8$i;
       $sub10$i = (($shl9$i) + 245760)|0;
       $shr11$i114 = $sub10$i >>> 16;
       $and12$i = $shr11$i114 & 2;
       $add13$i = $add$i113 | $and12$i;
       $sub14$i = (14 - ($add13$i))|0;
       $shl15$i = $shl9$i << $and12$i;
       $shr16$i115 = $shl15$i >>> 15;
       $add17$i = (($sub14$i) + ($shr16$i115))|0;
       $shl18$i = $add17$i << 1;
       $add19$i = (($add17$i) + 7)|0;
       $shr20$i = $and144 >>> $add19$i;
       $and21$i116 = $shr20$i & 1;
       $add22$i = $and21$i116 | $shl18$i;
       $idx$0$i = $add22$i;
      }
     }
     $arrayidx$i117 = ((8720 + ($idx$0$i<<2)|0) + 304|0);
     $53 = HEAP32[$arrayidx$i117>>2]|0;
     $cmp24$i = ($53|0)==(0|0);
     L126: do {
      if ($cmp24$i) {
       $rsize$2$i = $sub$i105;$t$1$i = 0;$v$2$i = 0;
      } else {
       $cmp26$i = ($idx$0$i|0)==(31);
       if ($cmp26$i) {
        $cond$i = 0;
       } else {
        $shr27$i = $idx$0$i >>> 1;
        $sub30$i = (25 - ($shr27$i))|0;
        $cond$i = $sub30$i;
       }
       $shl31$i = $and144 << $cond$i;
       $rsize$0$i120 = $sub$i105;$rst$0$i = 0;$sizebits$0$i = $shl31$i;$t$0$i119 = $53;$v$0$i121 = 0;
       while(1) {
        $head$i122 = (($t$0$i119) + 4|0);
        $54 = HEAP32[$head$i122>>2]|0;
        $and32$i = $54 & -8;
        $sub33$i = (($and32$i) - ($and144))|0;
        $cmp34$i = ($sub33$i>>>0)<($rsize$0$i120>>>0);
        if ($cmp34$i) {
         $cmp36$i = ($and32$i|0)==($and144|0);
         if ($cmp36$i) {
          $rsize$2$i = $sub33$i;$t$1$i = $t$0$i119;$v$2$i = $t$0$i119;
          break L126;
         } else {
          $rsize$1$i = $sub33$i;$v$1$i = $t$0$i119;
         }
        } else {
         $rsize$1$i = $rsize$0$i120;$v$1$i = $v$0$i121;
        }
        $arrayidx40$i = (($t$0$i119) + 20|0);
        $55 = HEAP32[$arrayidx40$i>>2]|0;
        $shr41$i = $sizebits$0$i >>> 31;
        $arrayidx44$i = ((($t$0$i119) + ($shr41$i<<2)|0) + 16|0);
        $56 = HEAP32[$arrayidx44$i>>2]|0;
        $cmp45$i123 = ($55|0)==(0|0);
        $cmp46$i = ($55|0)==($56|0);
        $or$cond$i = $cmp45$i123 | $cmp46$i;
        $rst$1$i = $or$cond$i ? $rst$0$i : $55;
        $cmp49$i = ($56|0)==(0|0);
        $shl52$i = $sizebits$0$i << 1;
        if ($cmp49$i) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i120 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $shl52$i;$t$0$i119 = $56;$v$0$i121 = $v$1$i;
        }
       }
      }
     } while(0);
     $cmp54$i = ($t$1$i|0)==(0|0);
     $cmp56$i = ($v$2$i|0)==(0|0);
     $or$cond16$i = $cmp54$i & $cmp56$i;
     if ($or$cond16$i) {
      $shl59$i = 2 << $idx$0$i;
      $sub62$i = (0 - ($shl59$i))|0;
      $or$i = $shl59$i | $sub62$i;
      $and63$i = $52 & $or$i;
      $cmp64$i = ($and63$i|0)==(0);
      if ($cmp64$i) {
       $nb$0 = $and144;
       break;
      }
      $sub66$i = (0 - ($and63$i))|0;
      $and67$i = $and63$i & $sub66$i;
      $sub69$i = (($and67$i) + -1)|0;
      $shr71$i = $sub69$i >>> 12;
      $and72$i = $shr71$i & 16;
      $shr74$i = $sub69$i >>> $and72$i;
      $shr75$i = $shr74$i >>> 5;
      $and76$i = $shr75$i & 8;
      $add77$i = $and76$i | $and72$i;
      $shr78$i = $shr74$i >>> $and76$i;
      $shr79$i = $shr78$i >>> 2;
      $and80$i = $shr79$i & 4;
      $add81$i = $add77$i | $and80$i;
      $shr82$i = $shr78$i >>> $and80$i;
      $shr83$i = $shr82$i >>> 1;
      $and84$i = $shr83$i & 2;
      $add85$i = $add81$i | $and84$i;
      $shr86$i = $shr82$i >>> $and84$i;
      $shr87$i = $shr86$i >>> 1;
      $and88$i = $shr87$i & 1;
      $add89$i = $add85$i | $and88$i;
      $shr90$i = $shr86$i >>> $and88$i;
      $add91$i = (($add89$i) + ($shr90$i))|0;
      $arrayidx93$i = ((8720 + ($add91$i<<2)|0) + 304|0);
      $57 = HEAP32[$arrayidx93$i>>2]|0;
      $t$2$ph$i = $57;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $cmp9626$i = ($t$2$ph$i|0)==(0|0);
     if ($cmp9626$i) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$328$i = $rsize$2$i;$t$227$i = $t$2$ph$i;$v$329$i = $v$2$i;
      while(1) {
       $head98$i = (($t$227$i) + 4|0);
       $58 = HEAP32[$head98$i>>2]|0;
       $and99$i = $58 & -8;
       $sub100$i = (($and99$i) - ($and144))|0;
       $cmp101$i = ($sub100$i>>>0)<($rsize$328$i>>>0);
       $sub100$rsize$3$i = $cmp101$i ? $sub100$i : $rsize$328$i;
       $t$2$v$3$i = $cmp101$i ? $t$227$i : $v$329$i;
       $arrayidx105$i = (($t$227$i) + 16|0);
       $59 = HEAP32[$arrayidx105$i>>2]|0;
       $cmp106$i = ($59|0)==(0|0);
       if (!($cmp106$i)) {
        $rsize$328$i = $sub100$rsize$3$i;$t$227$i = $59;$v$329$i = $t$2$v$3$i;
        continue;
       }
       $arrayidx112$i = (($t$227$i) + 20|0);
       $60 = HEAP32[$arrayidx112$i>>2]|0;
       $cmp96$i = ($60|0)==(0|0);
       if ($cmp96$i) {
        $rsize$3$lcssa$i = $sub100$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$328$i = $sub100$rsize$3$i;$t$227$i = $60;$v$329$i = $t$2$v$3$i;
       }
      }
     }
     $cmp115$i = ($v$3$lcssa$i|0)==(0|0);
     if ($cmp115$i) {
      $nb$0 = $and144;
     } else {
      $61 = HEAP32[((8720 + 8|0))>>2]|0;
      $sub117$i = (($61) - ($and144))|0;
      $cmp118$i = ($rsize$3$lcssa$i>>>0)<($sub117$i>>>0);
      if ($cmp118$i) {
       $62 = HEAP32[((8720 + 16|0))>>2]|0;
       $cmp120$i = ($v$3$lcssa$i>>>0)<($62>>>0);
       if ($cmp120$i) {
        _abort();
        // unreachable;
       }
       $add$ptr$i126 = (($v$3$lcssa$i) + ($and144)|0);
       $cmp122$i = ($v$3$lcssa$i>>>0)<($add$ptr$i126>>>0);
       if (!($cmp122$i)) {
        _abort();
        // unreachable;
       }
       $parent$i127 = (($v$3$lcssa$i) + 24|0);
       $63 = HEAP32[$parent$i127>>2]|0;
       $bk$i128 = (($v$3$lcssa$i) + 12|0);
       $64 = HEAP32[$bk$i128>>2]|0;
       $cmp127$i = ($64|0)==($v$3$lcssa$i|0);
       do {
        if ($cmp127$i) {
         $arrayidx150$i = (($v$3$lcssa$i) + 20|0);
         $68 = HEAP32[$arrayidx150$i>>2]|0;
         $cmp151$i = ($68|0)==(0|0);
         if ($cmp151$i) {
          $arrayidx154$i131 = (($v$3$lcssa$i) + 16|0);
          $69 = HEAP32[$arrayidx154$i131>>2]|0;
          $cmp155$i132 = ($69|0)==(0|0);
          if ($cmp155$i132) {
           $R$1$i137 = 0;
           break;
          } else {
           $R$0$i135 = $69;$RP$0$i134 = $arrayidx154$i131;
          }
         } else {
          $R$0$i135 = $68;$RP$0$i134 = $arrayidx150$i;
         }
         while(1) {
          $arrayidx160$i = (($R$0$i135) + 20|0);
          $70 = HEAP32[$arrayidx160$i>>2]|0;
          $cmp161$i = ($70|0)==(0|0);
          if (!($cmp161$i)) {
           $R$0$i135 = $70;$RP$0$i134 = $arrayidx160$i;
           continue;
          }
          $arrayidx164$i = (($R$0$i135) + 16|0);
          $71 = HEAP32[$arrayidx164$i>>2]|0;
          $cmp165$i = ($71|0)==(0|0);
          if ($cmp165$i) {
           break;
          } else {
           $R$0$i135 = $71;$RP$0$i134 = $arrayidx164$i;
          }
         }
         $cmp170$i = ($RP$0$i134>>>0)<($62>>>0);
         if ($cmp170$i) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i134>>2] = 0;
          $R$1$i137 = $R$0$i135;
          break;
         }
        } else {
         $fd$i129 = (($v$3$lcssa$i) + 8|0);
         $65 = HEAP32[$fd$i129>>2]|0;
         $cmp132$i = ($65>>>0)<($62>>>0);
         if ($cmp132$i) {
          _abort();
          // unreachable;
         }
         $bk135$i = (($65) + 12|0);
         $66 = HEAP32[$bk135$i>>2]|0;
         $cmp136$i = ($66|0)==($v$3$lcssa$i|0);
         if (!($cmp136$i)) {
          _abort();
          // unreachable;
         }
         $fd138$i = (($64) + 8|0);
         $67 = HEAP32[$fd138$i>>2]|0;
         $cmp139$i = ($67|0)==($v$3$lcssa$i|0);
         if ($cmp139$i) {
          HEAP32[$bk135$i>>2] = $64;
          HEAP32[$fd138$i>>2] = $65;
          $R$1$i137 = $64;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $cmp179$i = ($63|0)==(0|0);
       do {
        if (!($cmp179$i)) {
         $index$i138 = (($v$3$lcssa$i) + 28|0);
         $72 = HEAP32[$index$i138>>2]|0;
         $arrayidx183$i = ((8720 + ($72<<2)|0) + 304|0);
         $73 = HEAP32[$arrayidx183$i>>2]|0;
         $cmp184$i = ($v$3$lcssa$i|0)==($73|0);
         if ($cmp184$i) {
          HEAP32[$arrayidx183$i>>2] = $R$1$i137;
          $cond18$i = ($R$1$i137|0)==(0|0);
          if ($cond18$i) {
           $shl191$i = 1 << $72;
           $neg$i139 = $shl191$i ^ -1;
           $74 = HEAP32[((8720 + 4|0))>>2]|0;
           $and193$i = $74 & $neg$i139;
           HEAP32[((8720 + 4|0))>>2] = $and193$i;
           break;
          }
         } else {
          $75 = HEAP32[((8720 + 16|0))>>2]|0;
          $cmp197$i = ($63>>>0)<($75>>>0);
          if ($cmp197$i) {
           _abort();
           // unreachable;
          }
          $arrayidx203$i = (($63) + 16|0);
          $76 = HEAP32[$arrayidx203$i>>2]|0;
          $cmp204$i = ($76|0)==($v$3$lcssa$i|0);
          if ($cmp204$i) {
           HEAP32[$arrayidx203$i>>2] = $R$1$i137;
          } else {
           $arrayidx211$i = (($63) + 20|0);
           HEAP32[$arrayidx211$i>>2] = $R$1$i137;
          }
          $cmp216$i = ($R$1$i137|0)==(0|0);
          if ($cmp216$i) {
           break;
          }
         }
         $77 = HEAP32[((8720 + 16|0))>>2]|0;
         $cmp220$i = ($R$1$i137>>>0)<($77>>>0);
         if ($cmp220$i) {
          _abort();
          // unreachable;
         }
         $parent225$i = (($R$1$i137) + 24|0);
         HEAP32[$parent225$i>>2] = $63;
         $arrayidx227$i = (($v$3$lcssa$i) + 16|0);
         $78 = HEAP32[$arrayidx227$i>>2]|0;
         $cmp228$i = ($78|0)==(0|0);
         do {
          if (!($cmp228$i)) {
           $79 = HEAP32[((8720 + 16|0))>>2]|0;
           $cmp232$i = ($78>>>0)<($79>>>0);
           if ($cmp232$i) {
            _abort();
            // unreachable;
           } else {
            $arrayidx238$i = (($R$1$i137) + 16|0);
            HEAP32[$arrayidx238$i>>2] = $78;
            $parent239$i = (($78) + 24|0);
            HEAP32[$parent239$i>>2] = $R$1$i137;
            break;
           }
          }
         } while(0);
         $arrayidx244$i = (($v$3$lcssa$i) + 20|0);
         $80 = HEAP32[$arrayidx244$i>>2]|0;
         $cmp245$i = ($80|0)==(0|0);
         if (!($cmp245$i)) {
          $81 = HEAP32[((8720 + 16|0))>>2]|0;
          $cmp249$i = ($80>>>0)<($81>>>0);
          if ($cmp249$i) {
           _abort();
           // unreachable;
          } else {
           $arrayidx255$i = (($R$1$i137) + 20|0);
           HEAP32[$arrayidx255$i>>2] = $80;
           $parent256$i = (($80) + 24|0);
           HEAP32[$parent256$i>>2] = $R$1$i137;
           break;
          }
         }
        }
       } while(0);
       $cmp264$i = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($cmp264$i) {
         $add267$i = (($rsize$3$lcssa$i) + ($and144))|0;
         $or269$i = $add267$i | 3;
         $head270$i = (($v$3$lcssa$i) + 4|0);
         HEAP32[$head270$i>>2] = $or269$i;
         $add$ptr272$sum$i = (($add267$i) + 4)|0;
         $head273$i = (($v$3$lcssa$i) + ($add$ptr272$sum$i)|0);
         $82 = HEAP32[$head273$i>>2]|0;
         $or274$i = $82 | 1;
         HEAP32[$head273$i>>2] = $or274$i;
        } else {
         $or277$i = $and144 | 3;
         $head278$i = (($v$3$lcssa$i) + 4|0);
         HEAP32[$head278$i>>2] = $or277$i;
         $or279$i = $rsize$3$lcssa$i | 1;
         $add$ptr$sum$i141172 = $and144 | 4;
         $head280$i = (($v$3$lcssa$i) + ($add$ptr$sum$i141172)|0);
         HEAP32[$head280$i>>2] = $or279$i;
         $add$ptr$sum1$i142 = (($rsize$3$lcssa$i) + ($and144))|0;
         $add$ptr281$i = (($v$3$lcssa$i) + ($add$ptr$sum1$i142)|0);
         HEAP32[$add$ptr281$i>>2] = $rsize$3$lcssa$i;
         $shr282$i = $rsize$3$lcssa$i >>> 3;
         $cmp283$i = ($rsize$3$lcssa$i>>>0)<(256);
         if ($cmp283$i) {
          $shl287$i = $shr282$i << 1;
          $arrayidx288$i = ((8720 + ($shl287$i<<2)|0) + 40|0);
          $83 = HEAP32[8720>>2]|0;
          $shl290$i = 1 << $shr282$i;
          $and291$i = $83 & $shl290$i;
          $tobool292$i = ($and291$i|0)==(0);
          do {
           if ($tobool292$i) {
            $or296$i = $83 | $shl290$i;
            HEAP32[8720>>2] = $or296$i;
            $arrayidx288$sum$pre$i = (($shl287$i) + 2)|0;
            $$pre$i144 = ((8720 + ($arrayidx288$sum$pre$i<<2)|0) + 40|0);
            $$pre$phi$i145Z2D = $$pre$i144;$F289$0$i = $arrayidx288$i;
           } else {
            $arrayidx288$sum15$i = (($shl287$i) + 2)|0;
            $84 = ((8720 + ($arrayidx288$sum15$i<<2)|0) + 40|0);
            $85 = HEAP32[$84>>2]|0;
            $86 = HEAP32[((8720 + 16|0))>>2]|0;
            $cmp300$i = ($85>>>0)<($86>>>0);
            if (!($cmp300$i)) {
             $$pre$phi$i145Z2D = $84;$F289$0$i = $85;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i145Z2D>>2] = $add$ptr$i126;
          $bk310$i = (($F289$0$i) + 12|0);
          HEAP32[$bk310$i>>2] = $add$ptr$i126;
          $add$ptr$sum13$i = (($and144) + 8)|0;
          $fd311$i = (($v$3$lcssa$i) + ($add$ptr$sum13$i)|0);
          HEAP32[$fd311$i>>2] = $F289$0$i;
          $add$ptr$sum14$i = (($and144) + 12)|0;
          $bk312$i = (($v$3$lcssa$i) + ($add$ptr$sum14$i)|0);
          HEAP32[$bk312$i>>2] = $arrayidx288$i;
          break;
         }
         $shr317$i = $rsize$3$lcssa$i >>> 8;
         $cmp318$i = ($shr317$i|0)==(0);
         if ($cmp318$i) {
          $I315$0$i = 0;
         } else {
          $cmp322$i = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($cmp322$i) {
           $I315$0$i = 31;
          } else {
           $sub328$i = (($shr317$i) + 1048320)|0;
           $shr329$i = $sub328$i >>> 16;
           $and330$i = $shr329$i & 8;
           $shl332$i = $shr317$i << $and330$i;
           $sub333$i = (($shl332$i) + 520192)|0;
           $shr334$i = $sub333$i >>> 16;
           $and335$i = $shr334$i & 4;
           $add336$i = $and335$i | $and330$i;
           $shl337$i = $shl332$i << $and335$i;
           $sub338$i = (($shl337$i) + 245760)|0;
           $shr339$i = $sub338$i >>> 16;
           $and340$i = $shr339$i & 2;
           $add341$i = $add336$i | $and340$i;
           $sub342$i = (14 - ($add341$i))|0;
           $shl343$i = $shl337$i << $and340$i;
           $shr344$i = $shl343$i >>> 15;
           $add345$i = (($sub342$i) + ($shr344$i))|0;
           $shl346$i = $add345$i << 1;
           $add347$i = (($add345$i) + 7)|0;
           $shr348$i = $rsize$3$lcssa$i >>> $add347$i;
           $and349$i = $shr348$i & 1;
           $add350$i = $and349$i | $shl346$i;
           $I315$0$i = $add350$i;
          }
         }
         $arrayidx354$i = ((8720 + ($I315$0$i<<2)|0) + 304|0);
         $add$ptr$sum2$i = (($and144) + 28)|0;
         $index355$i = (($v$3$lcssa$i) + ($add$ptr$sum2$i)|0);
         HEAP32[$index355$i>>2] = $I315$0$i;
         $add$ptr$sum3$i = (($and144) + 16)|0;
         $child356$i = (($v$3$lcssa$i) + ($add$ptr$sum3$i)|0);
         $child356$sum$i = (($and144) + 20)|0;
         $arrayidx357$i = (($v$3$lcssa$i) + ($child356$sum$i)|0);
         HEAP32[$arrayidx357$i>>2] = 0;
         HEAP32[$child356$i>>2] = 0;
         $87 = HEAP32[((8720 + 4|0))>>2]|0;
         $shl361$i = 1 << $I315$0$i;
         $and362$i = $87 & $shl361$i;
         $tobool363$i = ($and362$i|0)==(0);
         if ($tobool363$i) {
          $or367$i = $87 | $shl361$i;
          HEAP32[((8720 + 4|0))>>2] = $or367$i;
          HEAP32[$arrayidx354$i>>2] = $add$ptr$i126;
          $add$ptr$sum4$i = (($and144) + 24)|0;
          $parent368$i = (($v$3$lcssa$i) + ($add$ptr$sum4$i)|0);
          HEAP32[$parent368$i>>2] = $arrayidx354$i;
          $add$ptr$sum5$i = (($and144) + 12)|0;
          $bk369$i = (($v$3$lcssa$i) + ($add$ptr$sum5$i)|0);
          HEAP32[$bk369$i>>2] = $add$ptr$i126;
          $add$ptr$sum6$i = (($and144) + 8)|0;
          $fd370$i = (($v$3$lcssa$i) + ($add$ptr$sum6$i)|0);
          HEAP32[$fd370$i>>2] = $add$ptr$i126;
          break;
         }
         $88 = HEAP32[$arrayidx354$i>>2]|0;
         $cmp373$i = ($I315$0$i|0)==(31);
         if ($cmp373$i) {
          $cond382$i = 0;
         } else {
          $shr377$i = $I315$0$i >>> 1;
          $sub380$i = (25 - ($shr377$i))|0;
          $cond382$i = $sub380$i;
         }
         $head38520$i = (($88) + 4|0);
         $89 = HEAP32[$head38520$i>>2]|0;
         $and38621$i = $89 & -8;
         $cmp38722$i = ($and38621$i|0)==($rsize$3$lcssa$i|0);
         L225: do {
          if ($cmp38722$i) {
           $T$0$lcssa$i = $88;
          } else {
           $shl383$i = $rsize$3$lcssa$i << $cond382$i;
           $K372$024$i = $shl383$i;$T$023$i = $88;
           while(1) {
            $shr390$i = $K372$024$i >>> 31;
            $arrayidx393$i = ((($T$023$i) + ($shr390$i<<2)|0) + 16|0);
            $90 = HEAP32[$arrayidx393$i>>2]|0;
            $cmp395$i = ($90|0)==(0|0);
            if ($cmp395$i) {
             break;
            }
            $shl394$i = $K372$024$i << 1;
            $head385$i = (($90) + 4|0);
            $91 = HEAP32[$head385$i>>2]|0;
            $and386$i = $91 & -8;
            $cmp387$i = ($and386$i|0)==($rsize$3$lcssa$i|0);
            if ($cmp387$i) {
             $T$0$lcssa$i = $90;
             break L225;
            } else {
             $K372$024$i = $shl394$i;$T$023$i = $90;
            }
           }
           $92 = HEAP32[((8720 + 16|0))>>2]|0;
           $cmp400$i = ($arrayidx393$i>>>0)<($92>>>0);
           if ($cmp400$i) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$arrayidx393$i>>2] = $add$ptr$i126;
            $add$ptr$sum10$i = (($and144) + 24)|0;
            $parent405$i = (($v$3$lcssa$i) + ($add$ptr$sum10$i)|0);
            HEAP32[$parent405$i>>2] = $T$023$i;
            $add$ptr$sum11$i = (($and144) + 12)|0;
            $bk406$i = (($v$3$lcssa$i) + ($add$ptr$sum11$i)|0);
            HEAP32[$bk406$i>>2] = $add$ptr$i126;
            $add$ptr$sum12$i = (($and144) + 8)|0;
            $fd407$i = (($v$3$lcssa$i) + ($add$ptr$sum12$i)|0);
            HEAP32[$fd407$i>>2] = $add$ptr$i126;
            break L204;
           }
          }
         } while(0);
         $fd412$i = (($T$0$lcssa$i) + 8|0);
         $93 = HEAP32[$fd412$i>>2]|0;
         $94 = HEAP32[((8720 + 16|0))>>2]|0;
         $cmp414$i = ($T$0$lcssa$i>>>0)<($94>>>0);
         if ($cmp414$i) {
          _abort();
          // unreachable;
         }
         $cmp418$i = ($93>>>0)<($94>>>0);
         if ($cmp418$i) {
          _abort();
          // unreachable;
         } else {
          $bk425$i = (($93) + 12|0);
          HEAP32[$bk425$i>>2] = $add$ptr$i126;
          HEAP32[$fd412$i>>2] = $add$ptr$i126;
          $add$ptr$sum7$i = (($and144) + 8)|0;
          $fd427$i = (($v$3$lcssa$i) + ($add$ptr$sum7$i)|0);
          HEAP32[$fd427$i>>2] = $93;
          $add$ptr$sum8$i = (($and144) + 12)|0;
          $bk428$i = (($v$3$lcssa$i) + ($add$ptr$sum8$i)|0);
          HEAP32[$bk428$i>>2] = $T$0$lcssa$i;
          $add$ptr$sum9$i = (($and144) + 24)|0;
          $parent429$i = (($v$3$lcssa$i) + ($add$ptr$sum9$i)|0);
          HEAP32[$parent429$i>>2] = 0;
          break;
         }
        }
       } while(0);
       $add$ptr436$i = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $add$ptr436$i;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $and144;
      }
     }
    }
   }
  }
 } while(0);
 $95 = HEAP32[((8720 + 8|0))>>2]|0;
 $cmp155 = ($nb$0>>>0)>($95>>>0);
 if (!($cmp155)) {
  $sub159 = (($95) - ($nb$0))|0;
  $96 = HEAP32[((8720 + 20|0))>>2]|0;
  $cmp161 = ($sub159>>>0)>(15);
  if ($cmp161) {
   $add$ptr165 = (($96) + ($nb$0)|0);
   HEAP32[((8720 + 20|0))>>2] = $add$ptr165;
   HEAP32[((8720 + 8|0))>>2] = $sub159;
   $or166 = $sub159 | 1;
   $add$ptr165$sum = (($nb$0) + 4)|0;
   $head167 = (($96) + ($add$ptr165$sum)|0);
   HEAP32[$head167>>2] = $or166;
   $add$ptr168 = (($96) + ($95)|0);
   HEAP32[$add$ptr168>>2] = $sub159;
   $or171 = $nb$0 | 3;
   $head172 = (($96) + 4|0);
   HEAP32[$head172>>2] = $or171;
  } else {
   HEAP32[((8720 + 8|0))>>2] = 0;
   HEAP32[((8720 + 20|0))>>2] = 0;
   $or175 = $95 | 3;
   $head176 = (($96) + 4|0);
   HEAP32[$head176>>2] = $or175;
   $add$ptr177$sum = (($95) + 4)|0;
   $head178 = (($96) + ($add$ptr177$sum)|0);
   $97 = HEAP32[$head178>>2]|0;
   $or179 = $97 | 1;
   HEAP32[$head178>>2] = $or179;
  }
  $add$ptr181 = (($96) + 8|0);
  $mem$0 = $add$ptr181;
  STACKTOP = sp;return ($mem$0|0);
 }
 $98 = HEAP32[((8720 + 12|0))>>2]|0;
 $cmp183 = ($nb$0>>>0)<($98>>>0);
 if ($cmp183) {
  $sub187 = (($98) - ($nb$0))|0;
  HEAP32[((8720 + 12|0))>>2] = $sub187;
  $99 = HEAP32[((8720 + 24|0))>>2]|0;
  $add$ptr190 = (($99) + ($nb$0)|0);
  HEAP32[((8720 + 24|0))>>2] = $add$ptr190;
  $or191 = $sub187 | 1;
  $add$ptr190$sum = (($nb$0) + 4)|0;
  $head192 = (($99) + ($add$ptr190$sum)|0);
  HEAP32[$head192>>2] = $or191;
  $or194 = $nb$0 | 3;
  $head195 = (($99) + 4|0);
  HEAP32[$head195>>2] = $or194;
  $add$ptr196 = (($99) + 8|0);
  $mem$0 = $add$ptr196;
  STACKTOP = sp;return ($mem$0|0);
 }
 $100 = HEAP32[9192>>2]|0;
 $cmp$i146 = ($100|0)==(0);
 do {
  if ($cmp$i146) {
   $call$i$i = (_sysconf(30)|0);
   $sub$i$i = (($call$i$i) + -1)|0;
   $and$i$i = $sub$i$i & $call$i$i;
   $cmp1$i$i = ($and$i$i|0)==(0);
   if ($cmp1$i$i) {
    HEAP32[((9192 + 8|0))>>2] = $call$i$i;
    HEAP32[((9192 + 4|0))>>2] = $call$i$i;
    HEAP32[((9192 + 12|0))>>2] = -1;
    HEAP32[((9192 + 16|0))>>2] = -1;
    HEAP32[((9192 + 20|0))>>2] = 0;
    HEAP32[((8720 + 444|0))>>2] = 0;
    $call6$i$i = (_time((0|0))|0);
    $xor$i$i = $call6$i$i & -16;
    $and7$i$i = $xor$i$i ^ 1431655768;
    HEAP32[9192>>2] = $and7$i$i;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $add$i147 = (($nb$0) + 48)|0;
 $101 = HEAP32[((9192 + 8|0))>>2]|0;
 $sub$i148 = (($nb$0) + 47)|0;
 $add9$i = (($101) + ($sub$i148))|0;
 $neg$i149 = (0 - ($101))|0;
 $and11$i = $add9$i & $neg$i149;
 $cmp12$i = ($and11$i>>>0)>($nb$0>>>0);
 if (!($cmp12$i)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $102 = HEAP32[((8720 + 440|0))>>2]|0;
 $cmp15$i = ($102|0)==(0);
 if (!($cmp15$i)) {
  $103 = HEAP32[((8720 + 432|0))>>2]|0;
  $add17$i150 = (($103) + ($and11$i))|0;
  $cmp19$i = ($add17$i150>>>0)<=($103>>>0);
  $cmp21$i = ($add17$i150>>>0)>($102>>>0);
  $or$cond1$i = $cmp19$i | $cmp21$i;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $104 = HEAP32[((8720 + 444|0))>>2]|0;
 $and26$i = $104 & 4;
 $tobool27$i = ($and26$i|0)==(0);
 L269: do {
  if ($tobool27$i) {
   $105 = HEAP32[((8720 + 24|0))>>2]|0;
   $cmp29$i = ($105|0)==(0|0);
   L271: do {
    if ($cmp29$i) {
     label = 182;
    } else {
     $sp$0$i$i = ((8720 + 448|0));
     while(1) {
      $106 = HEAP32[$sp$0$i$i>>2]|0;
      $cmp$i9$i = ($106>>>0)>($105>>>0);
      if (!($cmp$i9$i)) {
       $size$i$i = (($sp$0$i$i) + 4|0);
       $107 = HEAP32[$size$i$i>>2]|0;
       $add$ptr$i$i = (($106) + ($107)|0);
       $cmp2$i$i = ($add$ptr$i$i>>>0)>($105>>>0);
       if ($cmp2$i$i) {
        break;
       }
      }
      $next$i$i = (($sp$0$i$i) + 8|0);
      $108 = HEAP32[$next$i$i>>2]|0;
      $cmp3$i$i = ($108|0)==(0|0);
      if ($cmp3$i$i) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $108;
      }
     }
     $cmp32$i152 = ($sp$0$i$i|0)==(0|0);
     if ($cmp32$i152) {
      label = 182;
     } else {
      $113 = HEAP32[((8720 + 12|0))>>2]|0;
      $add74$i = (($add9$i) - ($113))|0;
      $and77$i = $add74$i & $neg$i149;
      $cmp78$i = ($and77$i>>>0)<(2147483647);
      if ($cmp78$i) {
       $call80$i = (_sbrk(($and77$i|0))|0);
       $114 = HEAP32[$sp$0$i$i>>2]|0;
       $115 = HEAP32[$size$i$i>>2]|0;
       $add$ptr$i160 = (($114) + ($115)|0);
       $cmp82$i = ($call80$i|0)==($add$ptr$i160|0);
       $and77$$i = $cmp82$i ? $and77$i : 0;
       $call80$$i = $cmp82$i ? $call80$i : (-1);
       $br$0$i = $call80$i;$ssize$1$i = $and77$i;$tbase$0$i = $call80$$i;$tsize$0$i = $and77$$i;
       label = 191;
      } else {
       $tsize$0748284$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $call34$i = (_sbrk(0)|0);
     $cmp35$i154 = ($call34$i|0)==((-1)|0);
     if ($cmp35$i154) {
      $tsize$0748284$i = 0;
     } else {
      $109 = $call34$i;
      $110 = HEAP32[((9192 + 4|0))>>2]|0;
      $sub38$i = (($110) + -1)|0;
      $and39$i = $sub38$i & $109;
      $cmp40$i155 = ($and39$i|0)==(0);
      if ($cmp40$i155) {
       $ssize$0$i = $and11$i;
      } else {
       $add43$i = (($sub38$i) + ($109))|0;
       $neg45$i = (0 - ($110))|0;
       $and46$i = $add43$i & $neg45$i;
       $sub47$i = (($and11$i) - ($109))|0;
       $add48$i = (($sub47$i) + ($and46$i))|0;
       $ssize$0$i = $add48$i;
      }
      $111 = HEAP32[((8720 + 432|0))>>2]|0;
      $add51$i = (($111) + ($ssize$0$i))|0;
      $cmp52$i = ($ssize$0$i>>>0)>($nb$0>>>0);
      $cmp54$i156 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i157 = $cmp52$i & $cmp54$i156;
      if ($or$cond$i157) {
       $112 = HEAP32[((8720 + 440|0))>>2]|0;
       $cmp57$i = ($112|0)==(0);
       if (!($cmp57$i)) {
        $cmp60$i = ($add51$i>>>0)<=($111>>>0);
        $cmp63$i = ($add51$i>>>0)>($112>>>0);
        $or$cond2$i = $cmp60$i | $cmp63$i;
        if ($or$cond2$i) {
         $tsize$0748284$i = 0;
         break;
        }
       }
       $call65$i = (_sbrk(($ssize$0$i|0))|0);
       $cmp66$i158 = ($call65$i|0)==($call34$i|0);
       $ssize$0$$i = $cmp66$i158 ? $ssize$0$i : 0;
       $call34$$i = $cmp66$i158 ? $call34$i : (-1);
       $br$0$i = $call65$i;$ssize$1$i = $ssize$0$i;$tbase$0$i = $call34$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0748284$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $sub109$i = (0 - ($ssize$1$i))|0;
     $cmp86$i = ($tbase$0$i|0)==((-1)|0);
     if (!($cmp86$i)) {
      $tbase$291$i = $tbase$0$i;$tsize$290$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $cmp88$i = ($br$0$i|0)!=((-1)|0);
     $cmp90$i161 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond3$i = $cmp88$i & $cmp90$i161;
     $cmp93$i = ($ssize$1$i>>>0)<($add$i147>>>0);
     $or$cond4$i = $or$cond3$i & $cmp93$i;
     do {
      if ($or$cond4$i) {
       $116 = HEAP32[((9192 + 8|0))>>2]|0;
       $sub96$i = (($sub$i148) - ($ssize$1$i))|0;
       $add98$i = (($sub96$i) + ($116))|0;
       $neg100$i = (0 - ($116))|0;
       $and101$i = $add98$i & $neg100$i;
       $cmp102$i = ($and101$i>>>0)<(2147483647);
       if ($cmp102$i) {
        $call104$i = (_sbrk(($and101$i|0))|0);
        $cmp105$i = ($call104$i|0)==((-1)|0);
        if ($cmp105$i) {
         (_sbrk(($sub109$i|0))|0);
         $tsize$0748284$i = $tsize$0$i;
         break L291;
        } else {
         $add107$i = (($and101$i) + ($ssize$1$i))|0;
         $ssize$2$i = $add107$i;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $cmp115$i162 = ($br$0$i|0)==((-1)|0);
     if ($cmp115$i162) {
      $tsize$0748284$i = $tsize$0$i;
     } else {
      $tbase$291$i = $br$0$i;$tsize$290$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $117 = HEAP32[((8720 + 444|0))>>2]|0;
   $or$i163 = $117 | 4;
   HEAP32[((8720 + 444|0))>>2] = $or$i163;
   $tsize$1$i = $tsize$0748284$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $cmp124$i = ($and11$i>>>0)<(2147483647);
  if ($cmp124$i) {
   $call128$i = (_sbrk(($and11$i|0))|0);
   $call129$i = (_sbrk(0)|0);
   $notlhs$i = ($call128$i|0)!=((-1)|0);
   $notrhs$i = ($call129$i|0)!=((-1)|0);
   $or$cond6$not$i = $notrhs$i & $notlhs$i;
   $cmp134$i = ($call128$i>>>0)<($call129$i>>>0);
   $or$cond7$i = $or$cond6$not$i & $cmp134$i;
   if ($or$cond7$i) {
    $sub$ptr$lhs$cast$i = $call129$i;
    $sub$ptr$rhs$cast$i = $call128$i;
    $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
    $add137$i = (($nb$0) + 40)|0;
    $cmp138$i164 = ($sub$ptr$sub$i>>>0)>($add137$i>>>0);
    $sub$ptr$sub$tsize$1$i = $cmp138$i164 ? $sub$ptr$sub$i : $tsize$1$i;
    if ($cmp138$i164) {
     $tbase$291$i = $call128$i;$tsize$290$i = $sub$ptr$sub$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $118 = HEAP32[((8720 + 432|0))>>2]|0;
  $add147$i = (($118) + ($tsize$290$i))|0;
  HEAP32[((8720 + 432|0))>>2] = $add147$i;
  $119 = HEAP32[((8720 + 436|0))>>2]|0;
  $cmp148$i = ($add147$i>>>0)>($119>>>0);
  if ($cmp148$i) {
   HEAP32[((8720 + 436|0))>>2] = $add147$i;
  }
  $120 = HEAP32[((8720 + 24|0))>>2]|0;
  $cmp154$i = ($120|0)==(0|0);
  L311: do {
   if ($cmp154$i) {
    $121 = HEAP32[((8720 + 16|0))>>2]|0;
    $cmp156$i = ($121|0)==(0|0);
    $cmp159$i166 = ($tbase$291$i>>>0)<($121>>>0);
    $or$cond8$i = $cmp156$i | $cmp159$i166;
    if ($or$cond8$i) {
     HEAP32[((8720 + 16|0))>>2] = $tbase$291$i;
    }
    HEAP32[((8720 + 448|0))>>2] = $tbase$291$i;
    HEAP32[((8720 + 452|0))>>2] = $tsize$290$i;
    HEAP32[((8720 + 460|0))>>2] = 0;
    $122 = HEAP32[9192>>2]|0;
    HEAP32[((8720 + 36|0))>>2] = $122;
    HEAP32[((8720 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $shl$i$i = $i$02$i$i << 1;
     $arrayidx$i$i = ((8720 + ($shl$i$i<<2)|0) + 40|0);
     $arrayidx$sum$i$i = (($shl$i$i) + 3)|0;
     $123 = ((8720 + ($arrayidx$sum$i$i<<2)|0) + 40|0);
     HEAP32[$123>>2] = $arrayidx$i$i;
     $arrayidx$sum1$i$i = (($shl$i$i) + 2)|0;
     $124 = ((8720 + ($arrayidx$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$124>>2] = $arrayidx$i$i;
     $inc$i$i = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($inc$i$i|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $inc$i$i;
     }
    }
    $sub169$i = (($tsize$290$i) + -40)|0;
    $add$ptr$i11$i = (($tbase$291$i) + 8|0);
    $125 = $add$ptr$i11$i;
    $and$i12$i = $125 & 7;
    $cmp$i13$i = ($and$i12$i|0)==(0);
    if ($cmp$i13$i) {
     $cond$i$i = 0;
    } else {
     $126 = (0 - ($125))|0;
     $and3$i$i = $126 & 7;
     $cond$i$i = $and3$i$i;
    }
    $add$ptr4$i$i = (($tbase$291$i) + ($cond$i$i)|0);
    $sub5$i$i = (($sub169$i) - ($cond$i$i))|0;
    HEAP32[((8720 + 24|0))>>2] = $add$ptr4$i$i;
    HEAP32[((8720 + 12|0))>>2] = $sub5$i$i;
    $or$i$i = $sub5$i$i | 1;
    $add$ptr4$sum$i$i = (($cond$i$i) + 4)|0;
    $head$i$i = (($tbase$291$i) + ($add$ptr4$sum$i$i)|0);
    HEAP32[$head$i$i>>2] = $or$i$i;
    $add$ptr6$sum$i$i = (($tsize$290$i) + -36)|0;
    $head7$i$i = (($tbase$291$i) + ($add$ptr6$sum$i$i)|0);
    HEAP32[$head7$i$i>>2] = 40;
    $127 = HEAP32[((9192 + 16|0))>>2]|0;
    HEAP32[((8720 + 28|0))>>2] = $127;
   } else {
    $sp$0109$i = ((8720 + 448|0));
    while(1) {
     $128 = HEAP32[$sp$0109$i>>2]|0;
     $size185$i = (($sp$0109$i) + 4|0);
     $129 = HEAP32[$size185$i>>2]|0;
     $add$ptr186$i = (($128) + ($129)|0);
     $cmp187$i = ($tbase$291$i|0)==($add$ptr186$i|0);
     if ($cmp187$i) {
      label = 214;
      break;
     }
     $next$i = (($sp$0109$i) + 8|0);
     $130 = HEAP32[$next$i>>2]|0;
     $cmp183$i = ($130|0)==(0|0);
     if ($cmp183$i) {
      break;
     } else {
      $sp$0109$i = $130;
     }
    }
    if ((label|0) == 214) {
     $sflags190$i = (($sp$0109$i) + 12|0);
     $131 = HEAP32[$sflags190$i>>2]|0;
     $and191$i = $131 & 8;
     $tobool192$i = ($and191$i|0)==(0);
     if ($tobool192$i) {
      $cmp200$i = ($120>>>0)>=($128>>>0);
      $cmp206$i = ($120>>>0)<($tbase$291$i>>>0);
      $or$cond93$i = $cmp200$i & $cmp206$i;
      if ($or$cond93$i) {
       $add209$i = (($129) + ($tsize$290$i))|0;
       HEAP32[$size185$i>>2] = $add209$i;
       $132 = HEAP32[((8720 + 12|0))>>2]|0;
       $add212$i = (($132) + ($tsize$290$i))|0;
       $add$ptr$i22$i = (($120) + 8|0);
       $133 = $add$ptr$i22$i;
       $and$i23$i = $133 & 7;
       $cmp$i24$i = ($and$i23$i|0)==(0);
       if ($cmp$i24$i) {
        $cond$i27$i = 0;
       } else {
        $134 = (0 - ($133))|0;
        $and3$i25$i = $134 & 7;
        $cond$i27$i = $and3$i25$i;
       }
       $add$ptr4$i28$i = (($120) + ($cond$i27$i)|0);
       $sub5$i29$i = (($add212$i) - ($cond$i27$i))|0;
       HEAP32[((8720 + 24|0))>>2] = $add$ptr4$i28$i;
       HEAP32[((8720 + 12|0))>>2] = $sub5$i29$i;
       $or$i30$i = $sub5$i29$i | 1;
       $add$ptr4$sum$i31$i = (($cond$i27$i) + 4)|0;
       $head$i32$i = (($120) + ($add$ptr4$sum$i31$i)|0);
       HEAP32[$head$i32$i>>2] = $or$i30$i;
       $add$ptr6$sum$i33$i = (($add212$i) + 4)|0;
       $head7$i34$i = (($120) + ($add$ptr6$sum$i33$i)|0);
       HEAP32[$head7$i34$i>>2] = 40;
       $135 = HEAP32[((9192 + 16|0))>>2]|0;
       HEAP32[((8720 + 28|0))>>2] = $135;
       break;
      }
     }
    }
    $136 = HEAP32[((8720 + 16|0))>>2]|0;
    $cmp215$i = ($tbase$291$i>>>0)<($136>>>0);
    if ($cmp215$i) {
     HEAP32[((8720 + 16|0))>>2] = $tbase$291$i;
    }
    $add$ptr224$i = (($tbase$291$i) + ($tsize$290$i)|0);
    $sp$1105$i = ((8720 + 448|0));
    while(1) {
     $137 = HEAP32[$sp$1105$i>>2]|0;
     $cmp225$i = ($137|0)==($add$ptr224$i|0);
     if ($cmp225$i) {
      label = 224;
      break;
     }
     $next228$i = (($sp$1105$i) + 8|0);
     $138 = HEAP32[$next228$i>>2]|0;
     $cmp221$i = ($138|0)==(0|0);
     if ($cmp221$i) {
      break;
     } else {
      $sp$1105$i = $138;
     }
    }
    if ((label|0) == 224) {
     $sflags232$i = (($sp$1105$i) + 12|0);
     $139 = HEAP32[$sflags232$i>>2]|0;
     $and233$i = $139 & 8;
     $tobool234$i = ($and233$i|0)==(0);
     if ($tobool234$i) {
      HEAP32[$sp$1105$i>>2] = $tbase$291$i;
      $size242$i = (($sp$1105$i) + 4|0);
      $140 = HEAP32[$size242$i>>2]|0;
      $add243$i = (($140) + ($tsize$290$i))|0;
      HEAP32[$size242$i>>2] = $add243$i;
      $add$ptr$i37$i = (($tbase$291$i) + 8|0);
      $141 = $add$ptr$i37$i;
      $and$i38$i = $141 & 7;
      $cmp$i39$i = ($and$i38$i|0)==(0);
      if ($cmp$i39$i) {
       $cond$i42$i = 0;
      } else {
       $142 = (0 - ($141))|0;
       $and3$i40$i = $142 & 7;
       $cond$i42$i = $and3$i40$i;
      }
      $add$ptr4$i43$i = (($tbase$291$i) + ($cond$i42$i)|0);
      $add$ptr224$sum$i = (($tsize$290$i) + 8)|0;
      $add$ptr5$i$i = (($tbase$291$i) + ($add$ptr224$sum$i)|0);
      $143 = $add$ptr5$i$i;
      $and6$i44$i = $143 & 7;
      $cmp7$i$i = ($and6$i44$i|0)==(0);
      if ($cmp7$i$i) {
       $cond15$i$i = 0;
      } else {
       $144 = (0 - ($143))|0;
       $and13$i$i = $144 & 7;
       $cond15$i$i = $and13$i$i;
      }
      $add$ptr224$sum131$i = (($cond15$i$i) + ($tsize$290$i))|0;
      $add$ptr16$i$i = (($tbase$291$i) + ($add$ptr224$sum131$i)|0);
      $sub$ptr$lhs$cast$i46$i = $add$ptr16$i$i;
      $sub$ptr$rhs$cast$i47$i = $add$ptr4$i43$i;
      $sub$ptr$sub$i48$i = (($sub$ptr$lhs$cast$i46$i) - ($sub$ptr$rhs$cast$i47$i))|0;
      $add$ptr4$sum$i49$i = (($cond$i42$i) + ($nb$0))|0;
      $add$ptr17$i$i = (($tbase$291$i) + ($add$ptr4$sum$i49$i)|0);
      $sub18$i$i = (($sub$ptr$sub$i48$i) - ($nb$0))|0;
      $or19$i$i = $nb$0 | 3;
      $add$ptr4$sum1$i$i = (($cond$i42$i) + 4)|0;
      $head$i50$i = (($tbase$291$i) + ($add$ptr4$sum1$i$i)|0);
      HEAP32[$head$i50$i>>2] = $or19$i$i;
      $145 = HEAP32[((8720 + 24|0))>>2]|0;
      $cmp20$i$i = ($add$ptr16$i$i|0)==($145|0);
      L348: do {
       if ($cmp20$i$i) {
        $146 = HEAP32[((8720 + 12|0))>>2]|0;
        $add$i$i = (($146) + ($sub18$i$i))|0;
        HEAP32[((8720 + 12|0))>>2] = $add$i$i;
        HEAP32[((8720 + 24|0))>>2] = $add$ptr17$i$i;
        $or22$i$i = $add$i$i | 1;
        $add$ptr17$sum35$i$i = (($add$ptr4$sum$i49$i) + 4)|0;
        $head23$i$i = (($tbase$291$i) + ($add$ptr17$sum35$i$i)|0);
        HEAP32[$head23$i$i>>2] = $or22$i$i;
       } else {
        $147 = HEAP32[((8720 + 20|0))>>2]|0;
        $cmp24$i$i = ($add$ptr16$i$i|0)==($147|0);
        if ($cmp24$i$i) {
         $148 = HEAP32[((8720 + 8|0))>>2]|0;
         $add26$i$i = (($148) + ($sub18$i$i))|0;
         HEAP32[((8720 + 8|0))>>2] = $add26$i$i;
         HEAP32[((8720 + 20|0))>>2] = $add$ptr17$i$i;
         $or28$i$i = $add26$i$i | 1;
         $add$ptr17$sum33$i$i = (($add$ptr4$sum$i49$i) + 4)|0;
         $head29$i$i = (($tbase$291$i) + ($add$ptr17$sum33$i$i)|0);
         HEAP32[$head29$i$i>>2] = $or28$i$i;
         $add$ptr17$sum34$i$i = (($add26$i$i) + ($add$ptr4$sum$i49$i))|0;
         $add$ptr30$i52$i = (($tbase$291$i) + ($add$ptr17$sum34$i$i)|0);
         HEAP32[$add$ptr30$i52$i>>2] = $add26$i$i;
         break;
        }
        $add$ptr16$sum$i$i = (($tsize$290$i) + 4)|0;
        $add$ptr224$sum132$i = (($add$ptr16$sum$i$i) + ($cond15$i$i))|0;
        $head32$i$i = (($tbase$291$i) + ($add$ptr224$sum132$i)|0);
        $149 = HEAP32[$head32$i$i>>2]|0;
        $and33$i$i = $149 & 3;
        $cmp34$i$i = ($and33$i$i|0)==(1);
        if ($cmp34$i$i) {
         $and37$i$i = $149 & -8;
         $shr$i54$i = $149 >>> 3;
         $cmp38$i$i = ($149>>>0)<(256);
         L356: do {
          if ($cmp38$i$i) {
           $add$ptr16$sum3031$i$i = $cond15$i$i | 8;
           $add$ptr224$sum142$i = (($add$ptr16$sum3031$i$i) + ($tsize$290$i))|0;
           $fd$i$i = (($tbase$291$i) + ($add$ptr224$sum142$i)|0);
           $150 = HEAP32[$fd$i$i>>2]|0;
           $add$ptr16$sum32$i$i = (($tsize$290$i) + 12)|0;
           $add$ptr224$sum143$i = (($add$ptr16$sum32$i$i) + ($cond15$i$i))|0;
           $bk$i55$i = (($tbase$291$i) + ($add$ptr224$sum143$i)|0);
           $151 = HEAP32[$bk$i55$i>>2]|0;
           $shl$i56$i = $shr$i54$i << 1;
           $arrayidx$i57$i = ((8720 + ($shl$i56$i<<2)|0) + 40|0);
           $cmp41$i$i = ($150|0)==($arrayidx$i57$i|0);
           do {
            if (!($cmp41$i$i)) {
             $152 = HEAP32[((8720 + 16|0))>>2]|0;
             $cmp42$i$i = ($150>>>0)<($152>>>0);
             if ($cmp42$i$i) {
              _abort();
              // unreachable;
             }
             $bk43$i$i = (($150) + 12|0);
             $153 = HEAP32[$bk43$i$i>>2]|0;
             $cmp44$i$i = ($153|0)==($add$ptr16$i$i|0);
             if ($cmp44$i$i) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $cmp46$i59$i = ($151|0)==($150|0);
           if ($cmp46$i59$i) {
            $shl48$i$i = 1 << $shr$i54$i;
            $neg$i$i = $shl48$i$i ^ -1;
            $154 = HEAP32[8720>>2]|0;
            $and49$i$i = $154 & $neg$i$i;
            HEAP32[8720>>2] = $and49$i$i;
            break;
           }
           $cmp54$i$i = ($151|0)==($arrayidx$i57$i|0);
           do {
            if ($cmp54$i$i) {
             $fd68$pre$i$i = (($151) + 8|0);
             $fd68$pre$phi$i$iZ2D = $fd68$pre$i$i;
            } else {
             $155 = HEAP32[((8720 + 16|0))>>2]|0;
             $cmp57$i$i = ($151>>>0)<($155>>>0);
             if ($cmp57$i$i) {
              _abort();
              // unreachable;
             }
             $fd59$i$i = (($151) + 8|0);
             $156 = HEAP32[$fd59$i$i>>2]|0;
             $cmp60$i$i = ($156|0)==($add$ptr16$i$i|0);
             if ($cmp60$i$i) {
              $fd68$pre$phi$i$iZ2D = $fd59$i$i;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $bk67$i$i = (($150) + 12|0);
           HEAP32[$bk67$i$i>>2] = $151;
           HEAP32[$fd68$pre$phi$i$iZ2D>>2] = $150;
          } else {
           $add$ptr16$sum23$i$i = $cond15$i$i | 24;
           $add$ptr224$sum133$i = (($add$ptr16$sum23$i$i) + ($tsize$290$i))|0;
           $parent$i61$i = (($tbase$291$i) + ($add$ptr224$sum133$i)|0);
           $157 = HEAP32[$parent$i61$i>>2]|0;
           $add$ptr16$sum4$i$i = (($tsize$290$i) + 12)|0;
           $add$ptr224$sum134$i = (($add$ptr16$sum4$i$i) + ($cond15$i$i))|0;
           $bk74$i$i = (($tbase$291$i) + ($add$ptr224$sum134$i)|0);
           $158 = HEAP32[$bk74$i$i>>2]|0;
           $cmp75$i$i = ($158|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp75$i$i) {
             $add$ptr16$sum56$i$i = $cond15$i$i | 16;
             $add$ptr224$sum140$i = (($add$ptr16$sum$i$i) + ($add$ptr16$sum56$i$i))|0;
             $arrayidx96$i$i = (($tbase$291$i) + ($add$ptr224$sum140$i)|0);
             $163 = HEAP32[$arrayidx96$i$i>>2]|0;
             $cmp97$i$i = ($163|0)==(0|0);
             if ($cmp97$i$i) {
              $add$ptr224$sum141$i = (($add$ptr16$sum56$i$i) + ($tsize$290$i))|0;
              $child$i$i = (($tbase$291$i) + ($add$ptr224$sum141$i)|0);
              $164 = HEAP32[$child$i$i>>2]|0;
              $cmp100$i$i = ($164|0)==(0|0);
              if ($cmp100$i$i) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $164;$RP$0$i$i = $child$i$i;
              }
             } else {
              $R$0$i$i = $163;$RP$0$i$i = $arrayidx96$i$i;
             }
             while(1) {
              $arrayidx103$i$i = (($R$0$i$i) + 20|0);
              $165 = HEAP32[$arrayidx103$i$i>>2]|0;
              $cmp104$i$i = ($165|0)==(0|0);
              if (!($cmp104$i$i)) {
               $R$0$i$i = $165;$RP$0$i$i = $arrayidx103$i$i;
               continue;
              }
              $arrayidx107$i$i = (($R$0$i$i) + 16|0);
              $166 = HEAP32[$arrayidx107$i$i>>2]|0;
              $cmp108$i$i = ($166|0)==(0|0);
              if ($cmp108$i$i) {
               break;
              } else {
               $R$0$i$i = $166;$RP$0$i$i = $arrayidx107$i$i;
              }
             }
             $167 = HEAP32[((8720 + 16|0))>>2]|0;
             $cmp112$i$i = ($RP$0$i$i>>>0)<($167>>>0);
             if ($cmp112$i$i) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $add$ptr16$sum2829$i$i = $cond15$i$i | 8;
             $add$ptr224$sum135$i = (($add$ptr16$sum2829$i$i) + ($tsize$290$i))|0;
             $fd78$i$i = (($tbase$291$i) + ($add$ptr224$sum135$i)|0);
             $159 = HEAP32[$fd78$i$i>>2]|0;
             $160 = HEAP32[((8720 + 16|0))>>2]|0;
             $cmp81$i$i = ($159>>>0)<($160>>>0);
             if ($cmp81$i$i) {
              _abort();
              // unreachable;
             }
             $bk82$i$i = (($159) + 12|0);
             $161 = HEAP32[$bk82$i$i>>2]|0;
             $cmp83$i$i = ($161|0)==($add$ptr16$i$i|0);
             if (!($cmp83$i$i)) {
              _abort();
              // unreachable;
             }
             $fd85$i$i = (($158) + 8|0);
             $162 = HEAP32[$fd85$i$i>>2]|0;
             $cmp86$i$i = ($162|0)==($add$ptr16$i$i|0);
             if ($cmp86$i$i) {
              HEAP32[$bk82$i$i>>2] = $158;
              HEAP32[$fd85$i$i>>2] = $159;
              $R$1$i$i = $158;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $cmp120$i63$i = ($157|0)==(0|0);
           if ($cmp120$i63$i) {
            break;
           }
           $add$ptr16$sum25$i$i = (($tsize$290$i) + 28)|0;
           $add$ptr224$sum136$i = (($add$ptr16$sum25$i$i) + ($cond15$i$i))|0;
           $index$i64$i = (($tbase$291$i) + ($add$ptr224$sum136$i)|0);
           $168 = HEAP32[$index$i64$i>>2]|0;
           $arrayidx123$i$i = ((8720 + ($168<<2)|0) + 304|0);
           $169 = HEAP32[$arrayidx123$i$i>>2]|0;
           $cmp124$i$i = ($add$ptr16$i$i|0)==($169|0);
           do {
            if ($cmp124$i$i) {
             HEAP32[$arrayidx123$i$i>>2] = $R$1$i$i;
             $cond37$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond37$i$i)) {
              break;
             }
             $shl131$i$i = 1 << $168;
             $neg132$i$i = $shl131$i$i ^ -1;
             $170 = HEAP32[((8720 + 4|0))>>2]|0;
             $and133$i$i = $170 & $neg132$i$i;
             HEAP32[((8720 + 4|0))>>2] = $and133$i$i;
             break L356;
            } else {
             $171 = HEAP32[((8720 + 16|0))>>2]|0;
             $cmp137$i$i = ($157>>>0)<($171>>>0);
             if ($cmp137$i$i) {
              _abort();
              // unreachable;
             }
             $arrayidx143$i$i = (($157) + 16|0);
             $172 = HEAP32[$arrayidx143$i$i>>2]|0;
             $cmp144$i$i = ($172|0)==($add$ptr16$i$i|0);
             if ($cmp144$i$i) {
              HEAP32[$arrayidx143$i$i>>2] = $R$1$i$i;
             } else {
              $arrayidx151$i$i = (($157) + 20|0);
              HEAP32[$arrayidx151$i$i>>2] = $R$1$i$i;
             }
             $cmp156$i$i = ($R$1$i$i|0)==(0|0);
             if ($cmp156$i$i) {
              break L356;
             }
            }
           } while(0);
           $173 = HEAP32[((8720 + 16|0))>>2]|0;
           $cmp160$i$i = ($R$1$i$i>>>0)<($173>>>0);
           if ($cmp160$i$i) {
            _abort();
            // unreachable;
           }
           $parent165$i$i = (($R$1$i$i) + 24|0);
           HEAP32[$parent165$i$i>>2] = $157;
           $add$ptr16$sum2627$i$i = $cond15$i$i | 16;
           $add$ptr224$sum137$i = (($add$ptr16$sum2627$i$i) + ($tsize$290$i))|0;
           $child166$i$i = (($tbase$291$i) + ($add$ptr224$sum137$i)|0);
           $174 = HEAP32[$child166$i$i>>2]|0;
           $cmp168$i$i = ($174|0)==(0|0);
           do {
            if (!($cmp168$i$i)) {
             $175 = HEAP32[((8720 + 16|0))>>2]|0;
             $cmp172$i$i = ($174>>>0)<($175>>>0);
             if ($cmp172$i$i) {
              _abort();
              // unreachable;
             } else {
              $arrayidx178$i$i = (($R$1$i$i) + 16|0);
              HEAP32[$arrayidx178$i$i>>2] = $174;
              $parent179$i$i = (($174) + 24|0);
              HEAP32[$parent179$i$i>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $add$ptr224$sum138$i = (($add$ptr16$sum$i$i) + ($add$ptr16$sum2627$i$i))|0;
           $arrayidx184$i$i = (($tbase$291$i) + ($add$ptr224$sum138$i)|0);
           $176 = HEAP32[$arrayidx184$i$i>>2]|0;
           $cmp185$i$i = ($176|0)==(0|0);
           if ($cmp185$i$i) {
            break;
           }
           $177 = HEAP32[((8720 + 16|0))>>2]|0;
           $cmp189$i$i = ($176>>>0)<($177>>>0);
           if ($cmp189$i$i) {
            _abort();
            // unreachable;
           } else {
            $arrayidx195$i$i = (($R$1$i$i) + 20|0);
            HEAP32[$arrayidx195$i$i>>2] = $176;
            $parent196$i$i = (($176) + 24|0);
            HEAP32[$parent196$i$i>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $add$ptr16$sum7$i$i = $and37$i$i | $cond15$i$i;
         $add$ptr224$sum139$i = (($add$ptr16$sum7$i$i) + ($tsize$290$i))|0;
         $add$ptr205$i$i = (($tbase$291$i) + ($add$ptr224$sum139$i)|0);
         $add206$i$i = (($and37$i$i) + ($sub18$i$i))|0;
         $oldfirst$0$i$i = $add$ptr205$i$i;$qsize$0$i$i = $add206$i$i;
        } else {
         $oldfirst$0$i$i = $add$ptr16$i$i;$qsize$0$i$i = $sub18$i$i;
        }
        $head208$i$i = (($oldfirst$0$i$i) + 4|0);
        $178 = HEAP32[$head208$i$i>>2]|0;
        $and209$i$i = $178 & -2;
        HEAP32[$head208$i$i>>2] = $and209$i$i;
        $or210$i$i = $qsize$0$i$i | 1;
        $add$ptr17$sum$i$i = (($add$ptr4$sum$i49$i) + 4)|0;
        $head211$i$i = (($tbase$291$i) + ($add$ptr17$sum$i$i)|0);
        HEAP32[$head211$i$i>>2] = $or210$i$i;
        $add$ptr17$sum8$i$i = (($qsize$0$i$i) + ($add$ptr4$sum$i49$i))|0;
        $add$ptr212$i$i = (($tbase$291$i) + ($add$ptr17$sum8$i$i)|0);
        HEAP32[$add$ptr212$i$i>>2] = $qsize$0$i$i;
        $shr214$i$i = $qsize$0$i$i >>> 3;
        $cmp215$i$i = ($qsize$0$i$i>>>0)<(256);
        if ($cmp215$i$i) {
         $shl221$i$i = $shr214$i$i << 1;
         $arrayidx223$i$i = ((8720 + ($shl221$i$i<<2)|0) + 40|0);
         $179 = HEAP32[8720>>2]|0;
         $shl226$i$i = 1 << $shr214$i$i;
         $and227$i$i = $179 & $shl226$i$i;
         $tobool228$i$i = ($and227$i$i|0)==(0);
         do {
          if ($tobool228$i$i) {
           $or232$i$i = $179 | $shl226$i$i;
           HEAP32[8720>>2] = $or232$i$i;
           $arrayidx223$sum$pre$i$i = (($shl221$i$i) + 2)|0;
           $$pre$i66$i = ((8720 + ($arrayidx223$sum$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i67$iZ2D = $$pre$i66$i;$F224$0$i$i = $arrayidx223$i$i;
          } else {
           $arrayidx223$sum24$i$i = (($shl221$i$i) + 2)|0;
           $180 = ((8720 + ($arrayidx223$sum24$i$i<<2)|0) + 40|0);
           $181 = HEAP32[$180>>2]|0;
           $182 = HEAP32[((8720 + 16|0))>>2]|0;
           $cmp236$i$i = ($181>>>0)<($182>>>0);
           if (!($cmp236$i$i)) {
            $$pre$phi$i67$iZ2D = $180;$F224$0$i$i = $181;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i67$iZ2D>>2] = $add$ptr17$i$i;
         $bk246$i$i = (($F224$0$i$i) + 12|0);
         HEAP32[$bk246$i$i>>2] = $add$ptr17$i$i;
         $add$ptr17$sum22$i$i = (($add$ptr4$sum$i49$i) + 8)|0;
         $fd247$i$i = (($tbase$291$i) + ($add$ptr17$sum22$i$i)|0);
         HEAP32[$fd247$i$i>>2] = $F224$0$i$i;
         $add$ptr17$sum23$i$i = (($add$ptr4$sum$i49$i) + 12)|0;
         $bk248$i$i = (($tbase$291$i) + ($add$ptr17$sum23$i$i)|0);
         HEAP32[$bk248$i$i>>2] = $arrayidx223$i$i;
         break;
        }
        $shr253$i$i = $qsize$0$i$i >>> 8;
        $cmp254$i$i = ($shr253$i$i|0)==(0);
        do {
         if ($cmp254$i$i) {
          $I252$0$i$i = 0;
         } else {
          $cmp258$i$i = ($qsize$0$i$i>>>0)>(16777215);
          if ($cmp258$i$i) {
           $I252$0$i$i = 31;
           break;
          }
          $sub262$i$i = (($shr253$i$i) + 1048320)|0;
          $shr263$i$i = $sub262$i$i >>> 16;
          $and264$i$i = $shr263$i$i & 8;
          $shl265$i$i = $shr253$i$i << $and264$i$i;
          $sub266$i$i = (($shl265$i$i) + 520192)|0;
          $shr267$i$i = $sub266$i$i >>> 16;
          $and268$i$i = $shr267$i$i & 4;
          $add269$i$i = $and268$i$i | $and264$i$i;
          $shl270$i$i = $shl265$i$i << $and268$i$i;
          $sub271$i$i = (($shl270$i$i) + 245760)|0;
          $shr272$i$i = $sub271$i$i >>> 16;
          $and273$i$i = $shr272$i$i & 2;
          $add274$i$i = $add269$i$i | $and273$i$i;
          $sub275$i$i = (14 - ($add274$i$i))|0;
          $shl276$i$i = $shl270$i$i << $and273$i$i;
          $shr277$i$i = $shl276$i$i >>> 15;
          $add278$i$i = (($sub275$i$i) + ($shr277$i$i))|0;
          $shl279$i$i = $add278$i$i << 1;
          $add280$i$i = (($add278$i$i) + 7)|0;
          $shr281$i$i = $qsize$0$i$i >>> $add280$i$i;
          $and282$i$i = $shr281$i$i & 1;
          $add283$i$i = $and282$i$i | $shl279$i$i;
          $I252$0$i$i = $add283$i$i;
         }
        } while(0);
        $arrayidx287$i$i = ((8720 + ($I252$0$i$i<<2)|0) + 304|0);
        $add$ptr17$sum9$i$i = (($add$ptr4$sum$i49$i) + 28)|0;
        $index288$i$i = (($tbase$291$i) + ($add$ptr17$sum9$i$i)|0);
        HEAP32[$index288$i$i>>2] = $I252$0$i$i;
        $add$ptr17$sum10$i$i = (($add$ptr4$sum$i49$i) + 16)|0;
        $child289$i$i = (($tbase$291$i) + ($add$ptr17$sum10$i$i)|0);
        $child289$sum$i$i = (($add$ptr4$sum$i49$i) + 20)|0;
        $arrayidx290$i$i = (($tbase$291$i) + ($child289$sum$i$i)|0);
        HEAP32[$arrayidx290$i$i>>2] = 0;
        HEAP32[$child289$i$i>>2] = 0;
        $183 = HEAP32[((8720 + 4|0))>>2]|0;
        $shl294$i$i = 1 << $I252$0$i$i;
        $and295$i$i = $183 & $shl294$i$i;
        $tobool296$i$i = ($and295$i$i|0)==(0);
        if ($tobool296$i$i) {
         $or300$i$i = $183 | $shl294$i$i;
         HEAP32[((8720 + 4|0))>>2] = $or300$i$i;
         HEAP32[$arrayidx287$i$i>>2] = $add$ptr17$i$i;
         $add$ptr17$sum11$i$i = (($add$ptr4$sum$i49$i) + 24)|0;
         $parent301$i$i = (($tbase$291$i) + ($add$ptr17$sum11$i$i)|0);
         HEAP32[$parent301$i$i>>2] = $arrayidx287$i$i;
         $add$ptr17$sum12$i$i = (($add$ptr4$sum$i49$i) + 12)|0;
         $bk302$i$i = (($tbase$291$i) + ($add$ptr17$sum12$i$i)|0);
         HEAP32[$bk302$i$i>>2] = $add$ptr17$i$i;
         $add$ptr17$sum13$i$i = (($add$ptr4$sum$i49$i) + 8)|0;
         $fd303$i$i = (($tbase$291$i) + ($add$ptr17$sum13$i$i)|0);
         HEAP32[$fd303$i$i>>2] = $add$ptr17$i$i;
         break;
        }
        $184 = HEAP32[$arrayidx287$i$i>>2]|0;
        $cmp306$i$i = ($I252$0$i$i|0)==(31);
        if ($cmp306$i$i) {
         $cond315$i$i = 0;
        } else {
         $shr310$i$i = $I252$0$i$i >>> 1;
         $sub313$i$i = (25 - ($shr310$i$i))|0;
         $cond315$i$i = $sub313$i$i;
        }
        $head31739$i$i = (($184) + 4|0);
        $185 = HEAP32[$head31739$i$i>>2]|0;
        $and31840$i$i = $185 & -8;
        $cmp31941$i$i = ($and31840$i$i|0)==($qsize$0$i$i|0);
        L445: do {
         if ($cmp31941$i$i) {
          $T$0$lcssa$i69$i = $184;
         } else {
          $shl316$i$i = $qsize$0$i$i << $cond315$i$i;
          $K305$043$i$i = $shl316$i$i;$T$042$i$i = $184;
          while(1) {
           $shr322$i$i = $K305$043$i$i >>> 31;
           $arrayidx325$i$i = ((($T$042$i$i) + ($shr322$i$i<<2)|0) + 16|0);
           $186 = HEAP32[$arrayidx325$i$i>>2]|0;
           $cmp327$i$i = ($186|0)==(0|0);
           if ($cmp327$i$i) {
            break;
           }
           $shl326$i$i = $K305$043$i$i << 1;
           $head317$i$i = (($186) + 4|0);
           $187 = HEAP32[$head317$i$i>>2]|0;
           $and318$i$i = $187 & -8;
           $cmp319$i$i = ($and318$i$i|0)==($qsize$0$i$i|0);
           if ($cmp319$i$i) {
            $T$0$lcssa$i69$i = $186;
            break L445;
           } else {
            $K305$043$i$i = $shl326$i$i;$T$042$i$i = $186;
           }
          }
          $188 = HEAP32[((8720 + 16|0))>>2]|0;
          $cmp332$i$i = ($arrayidx325$i$i>>>0)<($188>>>0);
          if ($cmp332$i$i) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$arrayidx325$i$i>>2] = $add$ptr17$i$i;
           $add$ptr17$sum19$i$i = (($add$ptr4$sum$i49$i) + 24)|0;
           $parent337$i$i = (($tbase$291$i) + ($add$ptr17$sum19$i$i)|0);
           HEAP32[$parent337$i$i>>2] = $T$042$i$i;
           $add$ptr17$sum20$i$i = (($add$ptr4$sum$i49$i) + 12)|0;
           $bk338$i$i = (($tbase$291$i) + ($add$ptr17$sum20$i$i)|0);
           HEAP32[$bk338$i$i>>2] = $add$ptr17$i$i;
           $add$ptr17$sum21$i$i = (($add$ptr4$sum$i49$i) + 8)|0;
           $fd339$i$i = (($tbase$291$i) + ($add$ptr17$sum21$i$i)|0);
           HEAP32[$fd339$i$i>>2] = $add$ptr17$i$i;
           break L348;
          }
         }
        } while(0);
        $fd344$i$i = (($T$0$lcssa$i69$i) + 8|0);
        $189 = HEAP32[$fd344$i$i>>2]|0;
        $190 = HEAP32[((8720 + 16|0))>>2]|0;
        $cmp346$i$i = ($T$0$lcssa$i69$i>>>0)<($190>>>0);
        if ($cmp346$i$i) {
         _abort();
         // unreachable;
        }
        $cmp350$i$i = ($189>>>0)<($190>>>0);
        if ($cmp350$i$i) {
         _abort();
         // unreachable;
        } else {
         $bk357$i$i = (($189) + 12|0);
         HEAP32[$bk357$i$i>>2] = $add$ptr17$i$i;
         HEAP32[$fd344$i$i>>2] = $add$ptr17$i$i;
         $add$ptr17$sum16$i$i = (($add$ptr4$sum$i49$i) + 8)|0;
         $fd359$i$i = (($tbase$291$i) + ($add$ptr17$sum16$i$i)|0);
         HEAP32[$fd359$i$i>>2] = $189;
         $add$ptr17$sum17$i$i = (($add$ptr4$sum$i49$i) + 12)|0;
         $bk360$i$i = (($tbase$291$i) + ($add$ptr17$sum17$i$i)|0);
         HEAP32[$bk360$i$i>>2] = $T$0$lcssa$i69$i;
         $add$ptr17$sum18$i$i = (($add$ptr4$sum$i49$i) + 24)|0;
         $parent361$i$i = (($tbase$291$i) + ($add$ptr17$sum18$i$i)|0);
         HEAP32[$parent361$i$i>>2] = 0;
         break;
        }
       }
      } while(0);
      $add$ptr4$sum1415$i$i = $cond$i42$i | 8;
      $add$ptr368$i$i = (($tbase$291$i) + ($add$ptr4$sum1415$i$i)|0);
      $mem$0 = $add$ptr368$i$i;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((8720 + 448|0));
    while(1) {
     $191 = HEAP32[$sp$0$i$i$i>>2]|0;
     $cmp$i$i$i = ($191>>>0)>($120>>>0);
     if (!($cmp$i$i$i)) {
      $size$i$i$i = (($sp$0$i$i$i) + 4|0);
      $192 = HEAP32[$size$i$i$i>>2]|0;
      $add$ptr$i$i$i = (($191) + ($192)|0);
      $cmp2$i$i$i = ($add$ptr$i$i$i>>>0)>($120>>>0);
      if ($cmp2$i$i$i) {
       break;
      }
     }
     $next$i$i$i = (($sp$0$i$i$i) + 8|0);
     $193 = HEAP32[$next$i$i$i>>2]|0;
     $sp$0$i$i$i = $193;
    }
    $add$ptr$sum$i$i = (($192) + -47)|0;
    $add$ptr2$sum$i$i = (($192) + -39)|0;
    $add$ptr3$i$i = (($191) + ($add$ptr2$sum$i$i)|0);
    $194 = $add$ptr3$i$i;
    $and$i14$i = $194 & 7;
    $cmp$i15$i = ($and$i14$i|0)==(0);
    if ($cmp$i15$i) {
     $cond$i17$i = 0;
    } else {
     $195 = (0 - ($194))|0;
     $and6$i$i = $195 & 7;
     $cond$i17$i = $and6$i$i;
    }
    $add$ptr2$sum1$i$i = (($add$ptr$sum$i$i) + ($cond$i17$i))|0;
    $add$ptr7$i$i = (($191) + ($add$ptr2$sum1$i$i)|0);
    $add$ptr82$i$i = (($120) + 16|0);
    $cmp9$i$i = ($add$ptr7$i$i>>>0)<($add$ptr82$i$i>>>0);
    $cond13$i$i = $cmp9$i$i ? $120 : $add$ptr7$i$i;
    $add$ptr14$i$i = (($cond13$i$i) + 8|0);
    $sub16$i$i = (($tsize$290$i) + -40)|0;
    $add$ptr$i10$i$i = (($tbase$291$i) + 8|0);
    $196 = $add$ptr$i10$i$i;
    $and$i$i$i = $196 & 7;
    $cmp$i11$i$i = ($and$i$i$i|0)==(0);
    if ($cmp$i11$i$i) {
     $cond$i$i$i = 0;
    } else {
     $197 = (0 - ($196))|0;
     $and3$i$i$i = $197 & 7;
     $cond$i$i$i = $and3$i$i$i;
    }
    $add$ptr4$i$i$i = (($tbase$291$i) + ($cond$i$i$i)|0);
    $sub5$i$i$i = (($sub16$i$i) - ($cond$i$i$i))|0;
    HEAP32[((8720 + 24|0))>>2] = $add$ptr4$i$i$i;
    HEAP32[((8720 + 12|0))>>2] = $sub5$i$i$i;
    $or$i$i$i = $sub5$i$i$i | 1;
    $add$ptr4$sum$i$i$i = (($cond$i$i$i) + 4)|0;
    $head$i$i$i = (($tbase$291$i) + ($add$ptr4$sum$i$i$i)|0);
    HEAP32[$head$i$i$i>>2] = $or$i$i$i;
    $add$ptr6$sum$i$i$i = (($tsize$290$i) + -36)|0;
    $head7$i$i$i = (($tbase$291$i) + ($add$ptr6$sum$i$i$i)|0);
    HEAP32[$head7$i$i$i>>2] = 40;
    $198 = HEAP32[((9192 + 16|0))>>2]|0;
    HEAP32[((8720 + 28|0))>>2] = $198;
    $head$i18$i = (($cond13$i$i) + 4|0);
    HEAP32[$head$i18$i>>2] = 27;
    ;HEAP32[$add$ptr14$i$i+0>>2]=HEAP32[((8720 + 448|0))+0>>2]|0;HEAP32[$add$ptr14$i$i+4>>2]=HEAP32[((8720 + 448|0))+4>>2]|0;HEAP32[$add$ptr14$i$i+8>>2]=HEAP32[((8720 + 448|0))+8>>2]|0;HEAP32[$add$ptr14$i$i+12>>2]=HEAP32[((8720 + 448|0))+12>>2]|0;
    HEAP32[((8720 + 448|0))>>2] = $tbase$291$i;
    HEAP32[((8720 + 452|0))>>2] = $tsize$290$i;
    HEAP32[((8720 + 460|0))>>2] = 0;
    HEAP32[((8720 + 456|0))>>2] = $add$ptr14$i$i;
    $add$ptr2418$i$i = (($cond13$i$i) + 28|0);
    HEAP32[$add$ptr2418$i$i>>2] = 7;
    $199 = (($cond13$i$i) + 32|0);
    $cmp2719$i$i = ($199>>>0)<($add$ptr$i$i$i>>>0);
    if ($cmp2719$i$i) {
     $add$ptr2420$i$i = $add$ptr2418$i$i;
     while(1) {
      $200 = (($add$ptr2420$i$i) + 4|0);
      HEAP32[$200>>2] = 7;
      $201 = (($add$ptr2420$i$i) + 8|0);
      $cmp27$i$i = ($201>>>0)<($add$ptr$i$i$i>>>0);
      if ($cmp27$i$i) {
       $add$ptr2420$i$i = $200;
      } else {
       break;
      }
     }
    }
    $cmp28$i$i = ($cond13$i$i|0)==($120|0);
    if (!($cmp28$i$i)) {
     $sub$ptr$lhs$cast$i$i = $cond13$i$i;
     $sub$ptr$rhs$cast$i$i = $120;
     $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
     $add$ptr30$i$i = (($120) + ($sub$ptr$sub$i$i)|0);
     $add$ptr30$sum$i$i = (($sub$ptr$sub$i$i) + 4)|0;
     $head31$i$i = (($120) + ($add$ptr30$sum$i$i)|0);
     $202 = HEAP32[$head31$i$i>>2]|0;
     $and32$i$i = $202 & -2;
     HEAP32[$head31$i$i>>2] = $and32$i$i;
     $or33$i$i = $sub$ptr$sub$i$i | 1;
     $head34$i$i = (($120) + 4|0);
     HEAP32[$head34$i$i>>2] = $or33$i$i;
     HEAP32[$add$ptr30$i$i>>2] = $sub$ptr$sub$i$i;
     $shr$i$i = $sub$ptr$sub$i$i >>> 3;
     $cmp36$i$i = ($sub$ptr$sub$i$i>>>0)<(256);
     if ($cmp36$i$i) {
      $shl$i20$i = $shr$i$i << 1;
      $arrayidx$i21$i = ((8720 + ($shl$i20$i<<2)|0) + 40|0);
      $203 = HEAP32[8720>>2]|0;
      $shl39$i$i = 1 << $shr$i$i;
      $and40$i$i = $203 & $shl39$i$i;
      $tobool$i$i = ($and40$i$i|0)==(0);
      do {
       if ($tobool$i$i) {
        $or44$i$i = $203 | $shl39$i$i;
        HEAP32[8720>>2] = $or44$i$i;
        $arrayidx$sum$pre$i$i = (($shl$i20$i) + 2)|0;
        $$pre$i$i = ((8720 + ($arrayidx$sum$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $arrayidx$i21$i;
       } else {
        $arrayidx$sum9$i$i = (($shl$i20$i) + 2)|0;
        $204 = ((8720 + ($arrayidx$sum9$i$i<<2)|0) + 40|0);
        $205 = HEAP32[$204>>2]|0;
        $206 = HEAP32[((8720 + 16|0))>>2]|0;
        $cmp46$i$i = ($205>>>0)<($206>>>0);
        if (!($cmp46$i$i)) {
         $$pre$phi$i$iZ2D = $204;$F$0$i$i = $205;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $120;
      $bk$i$i = (($F$0$i$i) + 12|0);
      HEAP32[$bk$i$i>>2] = $120;
      $fd54$i$i = (($120) + 8|0);
      HEAP32[$fd54$i$i>>2] = $F$0$i$i;
      $bk55$i$i = (($120) + 12|0);
      HEAP32[$bk55$i$i>>2] = $arrayidx$i21$i;
      break;
     }
     $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
     $cmp59$i$i = ($shr58$i$i|0)==(0);
     if ($cmp59$i$i) {
      $I57$0$i$i = 0;
     } else {
      $cmp63$i$i = ($sub$ptr$sub$i$i>>>0)>(16777215);
      if ($cmp63$i$i) {
       $I57$0$i$i = 31;
      } else {
       $sub67$i$i = (($shr58$i$i) + 1048320)|0;
       $shr68$i$i = $sub67$i$i >>> 16;
       $and69$i$i = $shr68$i$i & 8;
       $shl70$i$i = $shr58$i$i << $and69$i$i;
       $sub71$i$i = (($shl70$i$i) + 520192)|0;
       $shr72$i$i = $sub71$i$i >>> 16;
       $and73$i$i = $shr72$i$i & 4;
       $add74$i$i = $and73$i$i | $and69$i$i;
       $shl75$i$i = $shl70$i$i << $and73$i$i;
       $sub76$i$i = (($shl75$i$i) + 245760)|0;
       $shr77$i$i = $sub76$i$i >>> 16;
       $and78$i$i = $shr77$i$i & 2;
       $add79$i$i = $add74$i$i | $and78$i$i;
       $sub80$i$i = (14 - ($add79$i$i))|0;
       $shl81$i$i = $shl75$i$i << $and78$i$i;
       $shr82$i$i = $shl81$i$i >>> 15;
       $add83$i$i = (($sub80$i$i) + ($shr82$i$i))|0;
       $shl84$i$i = $add83$i$i << 1;
       $add85$i$i = (($add83$i$i) + 7)|0;
       $shr86$i$i = $sub$ptr$sub$i$i >>> $add85$i$i;
       $and87$i$i = $shr86$i$i & 1;
       $add88$i$i = $and87$i$i | $shl84$i$i;
       $I57$0$i$i = $add88$i$i;
      }
     }
     $arrayidx91$i$i = ((8720 + ($I57$0$i$i<<2)|0) + 304|0);
     $index$i$i = (($120) + 28|0);
     $I57$0$c$i$i = $I57$0$i$i;
     HEAP32[$index$i$i>>2] = $I57$0$c$i$i;
     $arrayidx92$i$i = (($120) + 20|0);
     HEAP32[$arrayidx92$i$i>>2] = 0;
     $207 = (($120) + 16|0);
     HEAP32[$207>>2] = 0;
     $208 = HEAP32[((8720 + 4|0))>>2]|0;
     $shl95$i$i = 1 << $I57$0$i$i;
     $and96$i$i = $208 & $shl95$i$i;
     $tobool97$i$i = ($and96$i$i|0)==(0);
     if ($tobool97$i$i) {
      $or101$i$i = $208 | $shl95$i$i;
      HEAP32[((8720 + 4|0))>>2] = $or101$i$i;
      HEAP32[$arrayidx91$i$i>>2] = $120;
      $parent$i$i = (($120) + 24|0);
      HEAP32[$parent$i$i>>2] = $arrayidx91$i$i;
      $bk102$i$i = (($120) + 12|0);
      HEAP32[$bk102$i$i>>2] = $120;
      $fd103$i$i = (($120) + 8|0);
      HEAP32[$fd103$i$i>>2] = $120;
      break;
     }
     $209 = HEAP32[$arrayidx91$i$i>>2]|0;
     $cmp106$i$i = ($I57$0$i$i|0)==(31);
     if ($cmp106$i$i) {
      $cond115$i$i = 0;
     } else {
      $shr110$i$i = $I57$0$i$i >>> 1;
      $sub113$i$i = (25 - ($shr110$i$i))|0;
      $cond115$i$i = $sub113$i$i;
     }
     $head11813$i$i = (($209) + 4|0);
     $210 = HEAP32[$head11813$i$i>>2]|0;
     $and11914$i$i = $210 & -8;
     $cmp12015$i$i = ($and11914$i$i|0)==($sub$ptr$sub$i$i|0);
     L499: do {
      if ($cmp12015$i$i) {
       $T$0$lcssa$i$i = $209;
      } else {
       $shl116$i$i = $sub$ptr$sub$i$i << $cond115$i$i;
       $K105$017$i$i = $shl116$i$i;$T$016$i$i = $209;
       while(1) {
        $shr123$i$i = $K105$017$i$i >>> 31;
        $arrayidx126$i$i = ((($T$016$i$i) + ($shr123$i$i<<2)|0) + 16|0);
        $211 = HEAP32[$arrayidx126$i$i>>2]|0;
        $cmp128$i$i = ($211|0)==(0|0);
        if ($cmp128$i$i) {
         break;
        }
        $shl127$i$i = $K105$017$i$i << 1;
        $head118$i$i = (($211) + 4|0);
        $212 = HEAP32[$head118$i$i>>2]|0;
        $and119$i$i = $212 & -8;
        $cmp120$i$i = ($and119$i$i|0)==($sub$ptr$sub$i$i|0);
        if ($cmp120$i$i) {
         $T$0$lcssa$i$i = $211;
         break L499;
        } else {
         $K105$017$i$i = $shl127$i$i;$T$016$i$i = $211;
        }
       }
       $213 = HEAP32[((8720 + 16|0))>>2]|0;
       $cmp133$i$i = ($arrayidx126$i$i>>>0)<($213>>>0);
       if ($cmp133$i$i) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$arrayidx126$i$i>>2] = $120;
        $parent138$i$i = (($120) + 24|0);
        HEAP32[$parent138$i$i>>2] = $T$016$i$i;
        $bk139$i$i = (($120) + 12|0);
        HEAP32[$bk139$i$i>>2] = $120;
        $fd140$i$i = (($120) + 8|0);
        HEAP32[$fd140$i$i>>2] = $120;
        break L311;
       }
      }
     } while(0);
     $fd145$i$i = (($T$0$lcssa$i$i) + 8|0);
     $214 = HEAP32[$fd145$i$i>>2]|0;
     $215 = HEAP32[((8720 + 16|0))>>2]|0;
     $cmp147$i$i = ($T$0$lcssa$i$i>>>0)<($215>>>0);
     if ($cmp147$i$i) {
      _abort();
      // unreachable;
     }
     $cmp150$i$i = ($214>>>0)<($215>>>0);
     if ($cmp150$i$i) {
      _abort();
      // unreachable;
     } else {
      $bk155$i$i = (($214) + 12|0);
      HEAP32[$bk155$i$i>>2] = $120;
      HEAP32[$fd145$i$i>>2] = $120;
      $fd157$i$i = (($120) + 8|0);
      HEAP32[$fd157$i$i>>2] = $214;
      $bk158$i$i = (($120) + 12|0);
      HEAP32[$bk158$i$i>>2] = $T$0$lcssa$i$i;
      $parent159$i$i = (($120) + 24|0);
      HEAP32[$parent159$i$i>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $216 = HEAP32[((8720 + 12|0))>>2]|0;
  $cmp250$i = ($216>>>0)>($nb$0>>>0);
  if ($cmp250$i) {
   $sub253$i = (($216) - ($nb$0))|0;
   HEAP32[((8720 + 12|0))>>2] = $sub253$i;
   $217 = HEAP32[((8720 + 24|0))>>2]|0;
   $add$ptr255$i = (($217) + ($nb$0)|0);
   HEAP32[((8720 + 24|0))>>2] = $add$ptr255$i;
   $or257$i = $sub253$i | 1;
   $add$ptr255$sum$i = (($nb$0) + 4)|0;
   $head258$i = (($217) + ($add$ptr255$sum$i)|0);
   HEAP32[$head258$i>>2] = $or257$i;
   $or260$i = $nb$0 | 3;
   $head261$i = (($217) + 4|0);
   HEAP32[$head261$i>>2] = $or260$i;
   $add$ptr262$i = (($217) + 8|0);
   $mem$0 = $add$ptr262$i;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $call265$i = (___errno_location()|0);
 HEAP32[$call265$i>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0;
 var $9 = 0, $F502$0 = 0, $I526$0 = 0, $I526$0$c = 0, $K575$0270 = 0, $R$0 = 0, $R$1 = 0, $R327$0 = 0, $R327$1 = 0, $RP$0 = 0, $RP355$0 = 0, $T$0$lcssa = 0, $T$0269 = 0, $add$ptr = 0, $add$ptr$sum = 0, $add$ptr$sum230 = 0, $add$ptr16 = 0, $add$ptr16$sum = 0, $add$ptr16$sum251 = 0, $add$ptr16$sum252 = 0;
 var $add$ptr16$sum253 = 0, $add$ptr16$sum254 = 0, $add$ptr16$sum255 = 0, $add$ptr16$sum256 = 0, $add$ptr16$sum257 = 0, $add$ptr16$sum258 = 0, $add$ptr257 = 0, $add$ptr477 = 0, $add$ptr490 = 0, $add$ptr6 = 0, $add$ptr6$sum = 0, $add$ptr6$sum232 = 0, $add$ptr6$sum233234 = 0, $add$ptr6$sum235 = 0, $add$ptr6$sum243 = 0, $add$ptr6$sum244 = 0, $add$ptr6$sum247248 = 0, $add$ptr6$sum249 = 0, $add17 = 0, $add243 = 0;
 var $add254 = 0, $add262 = 0, $add542 = 0, $add547 = 0, $add551 = 0, $add553 = 0, $add556 = 0, $and = 0, $and140 = 0, $and210 = 0, $and215 = 0, $and229 = 0, $and237 = 0, $and261 = 0, $and296 = 0, $and405 = 0, $and46 = 0, $and487 = 0, $and5 = 0, $and504 = 0;
 var $and537 = 0, $and541 = 0, $and546 = 0, $and555 = 0, $and566 = 0, $and584 = 0, $and584267 = 0, $and8 = 0, $arrayidx = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx157 = 0, $arrayidx182 = 0, $arrayidx188 = 0, $arrayidx198 = 0, $arrayidx274 = 0, $arrayidx357 = 0, $arrayidx369 = 0;
 var $arrayidx374 = 0, $arrayidx395 = 0, $arrayidx414 = 0, $arrayidx422 = 0, $arrayidx449 = 0, $arrayidx455 = 0, $arrayidx465 = 0, $arrayidx501 = 0, $arrayidx501$sum$pre = 0, $arrayidx501$sum242 = 0, $arrayidx559 = 0, $arrayidx562 = 0, $arrayidx591 = 0, $arrayidx99 = 0, $bk = 0, $bk270 = 0, $bk281 = 0, $bk316 = 0, $bk328 = 0, $bk338 = 0;
 var $bk34 = 0, $bk521 = 0, $bk523 = 0, $bk572 = 0, $bk603 = 0, $bk620 = 0, $bk623 = 0, $bk66 = 0, $bk73 = 0, $bk82 = 0, $child = 0, $child$sum = 0, $child171 = 0, $child171$sum = 0, $child356 = 0, $child356$sum = 0, $child438 = 0, $child438$sum = 0, $cmp = 0, $cmp$i = 0;
 var $cmp1 = 0, $cmp100 = 0, $cmp104 = 0, $cmp109 = 0, $cmp114 = 0, $cmp118 = 0, $cmp127 = 0, $cmp13 = 0, $cmp131 = 0, $cmp143 = 0, $cmp150 = 0, $cmp162 = 0, $cmp165 = 0, $cmp173 = 0, $cmp176 = 0, $cmp18 = 0, $cmp189 = 0, $cmp192 = 0, $cmp2 = 0, $cmp211 = 0;
 var $cmp22 = 0, $cmp225 = 0, $cmp240 = 0, $cmp246 = 0, $cmp25 = 0, $cmp251 = 0, $cmp264 = 0, $cmp275 = 0, $cmp278 = 0, $cmp282 = 0, $cmp29 = 0, $cmp291 = 0, $cmp300 = 0, $cmp303 = 0, $cmp307 = 0, $cmp31 = 0, $cmp329 = 0, $cmp335 = 0, $cmp339 = 0, $cmp343 = 0;
 var $cmp35 = 0, $cmp358 = 0, $cmp363 = 0, $cmp370 = 0, $cmp375 = 0, $cmp381 = 0, $cmp390 = 0, $cmp396 = 0, $cmp408 = 0, $cmp415 = 0, $cmp42 = 0, $cmp427 = 0, $cmp430 = 0, $cmp440 = 0, $cmp443 = 0, $cmp456 = 0, $cmp459 = 0, $cmp479 = 0, $cmp494 = 0, $cmp50 = 0;
 var $cmp511 = 0, $cmp528 = 0, $cmp53 = 0, $cmp532 = 0, $cmp57 = 0, $cmp576 = 0, $cmp585 = 0, $cmp585268 = 0, $cmp593 = 0, $cmp597 = 0, $cmp610 = 0, $cmp613 = 0, $cmp628 = 0, $cmp74 = 0, $cmp80 = 0, $cmp83 = 0, $cmp87 = 0, $cond = 0, $cond263 = 0, $cond264 = 0;
 var $dec = 0, $fd = 0, $fd268 = 0, $fd306 = 0, $fd317$pre = 0, $fd317$pre$phiZ2D = 0, $fd333 = 0, $fd342 = 0, $fd522 = 0, $fd56 = 0, $fd573 = 0, $fd604 = 0, $fd609 = 0, $fd622 = 0, $fd67$pre = 0, $fd67$pre$phiZ2D = 0, $fd78 = 0, $fd86 = 0, $head = 0, $head209 = 0;
 var $head216 = 0, $head228 = 0, $head245 = 0, $head256 = 0, $head476 = 0, $head489 = 0, $head583 = 0, $head583266 = 0, $index = 0, $index394 = 0, $index560 = 0, $neg = 0, $neg139 = 0, $neg295 = 0, $neg404 = 0, $next4$i = 0, $or = 0, $or244 = 0, $or255 = 0, $or475 = 0;
 var $or488 = 0, $or508 = 0, $or570 = 0, $p$0 = 0, $parent = 0, $parent170 = 0, $parent183 = 0, $parent199 = 0, $parent326 = 0, $parent437 = 0, $parent450 = 0, $parent466 = 0, $parent571 = 0, $parent602 = 0, $parent624 = 0, $psize$0 = 0, $psize$1 = 0, $shl = 0, $shl138 = 0, $shl273 = 0;
 var $shl294 = 0, $shl403 = 0, $shl45 = 0, $shl500 = 0, $shl503 = 0, $shl538 = 0, $shl543 = 0, $shl549 = 0, $shl552 = 0, $shl565 = 0, $shl582 = 0, $shl592 = 0, $shr = 0, $shr263 = 0, $shr493 = 0, $shr527 = 0, $shr536 = 0, $shr540 = 0, $shr545 = 0, $shr550 = 0;
 var $shr554 = 0, $shr578 = 0, $shr588 = 0, $sp$0$i = 0, $sp$0$in$i = 0, $sub = 0, $sub539 = 0, $sub544 = 0, $sub548 = 0, $sub581 = 0, $tobool230 = 0, $tobool238 = 0, $tobool505 = 0, $tobool567 = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($mem|0)==(0|0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $add$ptr = (($mem) + -8|0);
 $0 = HEAP32[((8720 + 16|0))>>2]|0;
 $cmp1 = ($add$ptr>>>0)<($0>>>0);
 if ($cmp1) {
  _abort();
  // unreachable;
 }
 $head = (($mem) + -4|0);
 $1 = HEAP32[$head>>2]|0;
 $and = $1 & 3;
 $cmp2 = ($and|0)==(1);
 if ($cmp2) {
  _abort();
  // unreachable;
 }
 $and5 = $1 & -8;
 $add$ptr$sum = (($and5) + -8)|0;
 $add$ptr6 = (($mem) + ($add$ptr$sum)|0);
 $and8 = $1 & 1;
 $tobool9 = ($and8|0)==(0);
 do {
  if ($tobool9) {
   $2 = HEAP32[$add$ptr>>2]|0;
   $cmp13 = ($and|0)==(0);
   if ($cmp13) {
    STACKTOP = sp;return;
   }
   $add$ptr$sum230 = (-8 - ($2))|0;
   $add$ptr16 = (($mem) + ($add$ptr$sum230)|0);
   $add17 = (($2) + ($and5))|0;
   $cmp18 = ($add$ptr16>>>0)<($0>>>0);
   if ($cmp18) {
    _abort();
    // unreachable;
   }
   $3 = HEAP32[((8720 + 20|0))>>2]|0;
   $cmp22 = ($add$ptr16|0)==($3|0);
   if ($cmp22) {
    $add$ptr6$sum = (($and5) + -4)|0;
    $head209 = (($mem) + ($add$ptr6$sum)|0);
    $28 = HEAP32[$head209>>2]|0;
    $and210 = $28 & 3;
    $cmp211 = ($and210|0)==(3);
    if (!($cmp211)) {
     $p$0 = $add$ptr16;$psize$0 = $add17;
     break;
    }
    HEAP32[((8720 + 8|0))>>2] = $add17;
    $29 = HEAP32[$head209>>2]|0;
    $and215 = $29 & -2;
    HEAP32[$head209>>2] = $and215;
    $or = $add17 | 1;
    $add$ptr16$sum = (($add$ptr$sum230) + 4)|0;
    $head216 = (($mem) + ($add$ptr16$sum)|0);
    HEAP32[$head216>>2] = $or;
    HEAP32[$add$ptr6>>2] = $add17;
    STACKTOP = sp;return;
   }
   $shr = $2 >>> 3;
   $cmp25 = ($2>>>0)<(256);
   if ($cmp25) {
    $add$ptr16$sum257 = (($add$ptr$sum230) + 8)|0;
    $fd = (($mem) + ($add$ptr16$sum257)|0);
    $4 = HEAP32[$fd>>2]|0;
    $add$ptr16$sum258 = (($add$ptr$sum230) + 12)|0;
    $bk = (($mem) + ($add$ptr16$sum258)|0);
    $5 = HEAP32[$bk>>2]|0;
    $shl = $shr << 1;
    $arrayidx = ((8720 + ($shl<<2)|0) + 40|0);
    $cmp29 = ($4|0)==($arrayidx|0);
    if (!($cmp29)) {
     $cmp31 = ($4>>>0)<($0>>>0);
     if ($cmp31) {
      _abort();
      // unreachable;
     }
     $bk34 = (($4) + 12|0);
     $6 = HEAP32[$bk34>>2]|0;
     $cmp35 = ($6|0)==($add$ptr16|0);
     if (!($cmp35)) {
      _abort();
      // unreachable;
     }
    }
    $cmp42 = ($5|0)==($4|0);
    if ($cmp42) {
     $shl45 = 1 << $shr;
     $neg = $shl45 ^ -1;
     $7 = HEAP32[8720>>2]|0;
     $and46 = $7 & $neg;
     HEAP32[8720>>2] = $and46;
     $p$0 = $add$ptr16;$psize$0 = $add17;
     break;
    }
    $cmp50 = ($5|0)==($arrayidx|0);
    if ($cmp50) {
     $fd67$pre = (($5) + 8|0);
     $fd67$pre$phiZ2D = $fd67$pre;
    } else {
     $cmp53 = ($5>>>0)<($0>>>0);
     if ($cmp53) {
      _abort();
      // unreachable;
     }
     $fd56 = (($5) + 8|0);
     $8 = HEAP32[$fd56>>2]|0;
     $cmp57 = ($8|0)==($add$ptr16|0);
     if ($cmp57) {
      $fd67$pre$phiZ2D = $fd56;
     } else {
      _abort();
      // unreachable;
     }
    }
    $bk66 = (($4) + 12|0);
    HEAP32[$bk66>>2] = $5;
    HEAP32[$fd67$pre$phiZ2D>>2] = $4;
    $p$0 = $add$ptr16;$psize$0 = $add17;
    break;
   }
   $add$ptr16$sum251 = (($add$ptr$sum230) + 24)|0;
   $parent = (($mem) + ($add$ptr16$sum251)|0);
   $9 = HEAP32[$parent>>2]|0;
   $add$ptr16$sum252 = (($add$ptr$sum230) + 12)|0;
   $bk73 = (($mem) + ($add$ptr16$sum252)|0);
   $10 = HEAP32[$bk73>>2]|0;
   $cmp74 = ($10|0)==($add$ptr16|0);
   do {
    if ($cmp74) {
     $child$sum = (($add$ptr$sum230) + 20)|0;
     $arrayidx99 = (($mem) + ($child$sum)|0);
     $14 = HEAP32[$arrayidx99>>2]|0;
     $cmp100 = ($14|0)==(0|0);
     if ($cmp100) {
      $add$ptr16$sum253 = (($add$ptr$sum230) + 16)|0;
      $child = (($mem) + ($add$ptr16$sum253)|0);
      $15 = HEAP32[$child>>2]|0;
      $cmp104 = ($15|0)==(0|0);
      if ($cmp104) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $15;$RP$0 = $child;
      }
     } else {
      $R$0 = $14;$RP$0 = $arrayidx99;
     }
     while(1) {
      $arrayidx108 = (($R$0) + 20|0);
      $16 = HEAP32[$arrayidx108>>2]|0;
      $cmp109 = ($16|0)==(0|0);
      if (!($cmp109)) {
       $R$0 = $16;$RP$0 = $arrayidx108;
       continue;
      }
      $arrayidx113 = (($R$0) + 16|0);
      $17 = HEAP32[$arrayidx113>>2]|0;
      $cmp114 = ($17|0)==(0|0);
      if ($cmp114) {
       break;
      } else {
       $R$0 = $17;$RP$0 = $arrayidx113;
      }
     }
     $cmp118 = ($RP$0>>>0)<($0>>>0);
     if ($cmp118) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $add$ptr16$sum256 = (($add$ptr$sum230) + 8)|0;
     $fd78 = (($mem) + ($add$ptr16$sum256)|0);
     $11 = HEAP32[$fd78>>2]|0;
     $cmp80 = ($11>>>0)<($0>>>0);
     if ($cmp80) {
      _abort();
      // unreachable;
     }
     $bk82 = (($11) + 12|0);
     $12 = HEAP32[$bk82>>2]|0;
     $cmp83 = ($12|0)==($add$ptr16|0);
     if (!($cmp83)) {
      _abort();
      // unreachable;
     }
     $fd86 = (($10) + 8|0);
     $13 = HEAP32[$fd86>>2]|0;
     $cmp87 = ($13|0)==($add$ptr16|0);
     if ($cmp87) {
      HEAP32[$bk82>>2] = $10;
      HEAP32[$fd86>>2] = $11;
      $R$1 = $10;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $cmp127 = ($9|0)==(0|0);
   if ($cmp127) {
    $p$0 = $add$ptr16;$psize$0 = $add17;
   } else {
    $add$ptr16$sum254 = (($add$ptr$sum230) + 28)|0;
    $index = (($mem) + ($add$ptr16$sum254)|0);
    $18 = HEAP32[$index>>2]|0;
    $arrayidx130 = ((8720 + ($18<<2)|0) + 304|0);
    $19 = HEAP32[$arrayidx130>>2]|0;
    $cmp131 = ($add$ptr16|0)==($19|0);
    if ($cmp131) {
     HEAP32[$arrayidx130>>2] = $R$1;
     $cond263 = ($R$1|0)==(0|0);
     if ($cond263) {
      $shl138 = 1 << $18;
      $neg139 = $shl138 ^ -1;
      $20 = HEAP32[((8720 + 4|0))>>2]|0;
      $and140 = $20 & $neg139;
      HEAP32[((8720 + 4|0))>>2] = $and140;
      $p$0 = $add$ptr16;$psize$0 = $add17;
      break;
     }
    } else {
     $21 = HEAP32[((8720 + 16|0))>>2]|0;
     $cmp143 = ($9>>>0)<($21>>>0);
     if ($cmp143) {
      _abort();
      // unreachable;
     }
     $arrayidx149 = (($9) + 16|0);
     $22 = HEAP32[$arrayidx149>>2]|0;
     $cmp150 = ($22|0)==($add$ptr16|0);
     if ($cmp150) {
      HEAP32[$arrayidx149>>2] = $R$1;
     } else {
      $arrayidx157 = (($9) + 20|0);
      HEAP32[$arrayidx157>>2] = $R$1;
     }
     $cmp162 = ($R$1|0)==(0|0);
     if ($cmp162) {
      $p$0 = $add$ptr16;$psize$0 = $add17;
      break;
     }
    }
    $23 = HEAP32[((8720 + 16|0))>>2]|0;
    $cmp165 = ($R$1>>>0)<($23>>>0);
    if ($cmp165) {
     _abort();
     // unreachable;
    }
    $parent170 = (($R$1) + 24|0);
    HEAP32[$parent170>>2] = $9;
    $add$ptr16$sum255 = (($add$ptr$sum230) + 16)|0;
    $child171 = (($mem) + ($add$ptr16$sum255)|0);
    $24 = HEAP32[$child171>>2]|0;
    $cmp173 = ($24|0)==(0|0);
    do {
     if (!($cmp173)) {
      $25 = HEAP32[((8720 + 16|0))>>2]|0;
      $cmp176 = ($24>>>0)<($25>>>0);
      if ($cmp176) {
       _abort();
       // unreachable;
      } else {
       $arrayidx182 = (($R$1) + 16|0);
       HEAP32[$arrayidx182>>2] = $24;
       $parent183 = (($24) + 24|0);
       HEAP32[$parent183>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $child171$sum = (($add$ptr$sum230) + 20)|0;
    $arrayidx188 = (($mem) + ($child171$sum)|0);
    $26 = HEAP32[$arrayidx188>>2]|0;
    $cmp189 = ($26|0)==(0|0);
    if ($cmp189) {
     $p$0 = $add$ptr16;$psize$0 = $add17;
    } else {
     $27 = HEAP32[((8720 + 16|0))>>2]|0;
     $cmp192 = ($26>>>0)<($27>>>0);
     if ($cmp192) {
      _abort();
      // unreachable;
     } else {
      $arrayidx198 = (($R$1) + 20|0);
      HEAP32[$arrayidx198>>2] = $26;
      $parent199 = (($26) + 24|0);
      HEAP32[$parent199>>2] = $R$1;
      $p$0 = $add$ptr16;$psize$0 = $add17;
      break;
     }
    }
   }
  } else {
   $p$0 = $add$ptr;$psize$0 = $and5;
  }
 } while(0);
 $cmp225 = ($p$0>>>0)<($add$ptr6>>>0);
 if (!($cmp225)) {
  _abort();
  // unreachable;
 }
 $add$ptr6$sum249 = (($and5) + -4)|0;
 $head228 = (($mem) + ($add$ptr6$sum249)|0);
 $30 = HEAP32[$head228>>2]|0;
 $and229 = $30 & 1;
 $tobool230 = ($and229|0)==(0);
 if ($tobool230) {
  _abort();
  // unreachable;
 }
 $and237 = $30 & 2;
 $tobool238 = ($and237|0)==(0);
 if ($tobool238) {
  $31 = HEAP32[((8720 + 24|0))>>2]|0;
  $cmp240 = ($add$ptr6|0)==($31|0);
  if ($cmp240) {
   $32 = HEAP32[((8720 + 12|0))>>2]|0;
   $add243 = (($32) + ($psize$0))|0;
   HEAP32[((8720 + 12|0))>>2] = $add243;
   HEAP32[((8720 + 24|0))>>2] = $p$0;
   $or244 = $add243 | 1;
   $head245 = (($p$0) + 4|0);
   HEAP32[$head245>>2] = $or244;
   $33 = HEAP32[((8720 + 20|0))>>2]|0;
   $cmp246 = ($p$0|0)==($33|0);
   if (!($cmp246)) {
    STACKTOP = sp;return;
   }
   HEAP32[((8720 + 20|0))>>2] = 0;
   HEAP32[((8720 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $34 = HEAP32[((8720 + 20|0))>>2]|0;
  $cmp251 = ($add$ptr6|0)==($34|0);
  if ($cmp251) {
   $35 = HEAP32[((8720 + 8|0))>>2]|0;
   $add254 = (($35) + ($psize$0))|0;
   HEAP32[((8720 + 8|0))>>2] = $add254;
   HEAP32[((8720 + 20|0))>>2] = $p$0;
   $or255 = $add254 | 1;
   $head256 = (($p$0) + 4|0);
   HEAP32[$head256>>2] = $or255;
   $add$ptr257 = (($p$0) + ($add254)|0);
   HEAP32[$add$ptr257>>2] = $add254;
   STACKTOP = sp;return;
  }
  $and261 = $30 & -8;
  $add262 = (($and261) + ($psize$0))|0;
  $shr263 = $30 >>> 3;
  $cmp264 = ($30>>>0)<(256);
  do {
   if ($cmp264) {
    $fd268 = (($mem) + ($and5)|0);
    $36 = HEAP32[$fd268>>2]|0;
    $add$ptr6$sum247248 = $and5 | 4;
    $bk270 = (($mem) + ($add$ptr6$sum247248)|0);
    $37 = HEAP32[$bk270>>2]|0;
    $shl273 = $shr263 << 1;
    $arrayidx274 = ((8720 + ($shl273<<2)|0) + 40|0);
    $cmp275 = ($36|0)==($arrayidx274|0);
    if (!($cmp275)) {
     $38 = HEAP32[((8720 + 16|0))>>2]|0;
     $cmp278 = ($36>>>0)<($38>>>0);
     if ($cmp278) {
      _abort();
      // unreachable;
     }
     $bk281 = (($36) + 12|0);
     $39 = HEAP32[$bk281>>2]|0;
     $cmp282 = ($39|0)==($add$ptr6|0);
     if (!($cmp282)) {
      _abort();
      // unreachable;
     }
    }
    $cmp291 = ($37|0)==($36|0);
    if ($cmp291) {
     $shl294 = 1 << $shr263;
     $neg295 = $shl294 ^ -1;
     $40 = HEAP32[8720>>2]|0;
     $and296 = $40 & $neg295;
     HEAP32[8720>>2] = $and296;
     break;
    }
    $cmp300 = ($37|0)==($arrayidx274|0);
    if ($cmp300) {
     $fd317$pre = (($37) + 8|0);
     $fd317$pre$phiZ2D = $fd317$pre;
    } else {
     $41 = HEAP32[((8720 + 16|0))>>2]|0;
     $cmp303 = ($37>>>0)<($41>>>0);
     if ($cmp303) {
      _abort();
      // unreachable;
     }
     $fd306 = (($37) + 8|0);
     $42 = HEAP32[$fd306>>2]|0;
     $cmp307 = ($42|0)==($add$ptr6|0);
     if ($cmp307) {
      $fd317$pre$phiZ2D = $fd306;
     } else {
      _abort();
      // unreachable;
     }
    }
    $bk316 = (($36) + 12|0);
    HEAP32[$bk316>>2] = $37;
    HEAP32[$fd317$pre$phiZ2D>>2] = $36;
   } else {
    $add$ptr6$sum232 = (($and5) + 16)|0;
    $parent326 = (($mem) + ($add$ptr6$sum232)|0);
    $43 = HEAP32[$parent326>>2]|0;
    $add$ptr6$sum233234 = $and5 | 4;
    $bk328 = (($mem) + ($add$ptr6$sum233234)|0);
    $44 = HEAP32[$bk328>>2]|0;
    $cmp329 = ($44|0)==($add$ptr6|0);
    do {
     if ($cmp329) {
      $child356$sum = (($and5) + 12)|0;
      $arrayidx357 = (($mem) + ($child356$sum)|0);
      $49 = HEAP32[$arrayidx357>>2]|0;
      $cmp358 = ($49|0)==(0|0);
      if ($cmp358) {
       $add$ptr6$sum235 = (($and5) + 8)|0;
       $child356 = (($mem) + ($add$ptr6$sum235)|0);
       $50 = HEAP32[$child356>>2]|0;
       $cmp363 = ($50|0)==(0|0);
       if ($cmp363) {
        $R327$1 = 0;
        break;
       } else {
        $R327$0 = $50;$RP355$0 = $child356;
       }
      } else {
       $R327$0 = $49;$RP355$0 = $arrayidx357;
      }
      while(1) {
       $arrayidx369 = (($R327$0) + 20|0);
       $51 = HEAP32[$arrayidx369>>2]|0;
       $cmp370 = ($51|0)==(0|0);
       if (!($cmp370)) {
        $R327$0 = $51;$RP355$0 = $arrayidx369;
        continue;
       }
       $arrayidx374 = (($R327$0) + 16|0);
       $52 = HEAP32[$arrayidx374>>2]|0;
       $cmp375 = ($52|0)==(0|0);
       if ($cmp375) {
        break;
       } else {
        $R327$0 = $52;$RP355$0 = $arrayidx374;
       }
      }
      $53 = HEAP32[((8720 + 16|0))>>2]|0;
      $cmp381 = ($RP355$0>>>0)<($53>>>0);
      if ($cmp381) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP355$0>>2] = 0;
       $R327$1 = $R327$0;
       break;
      }
     } else {
      $fd333 = (($mem) + ($and5)|0);
      $45 = HEAP32[$fd333>>2]|0;
      $46 = HEAP32[((8720 + 16|0))>>2]|0;
      $cmp335 = ($45>>>0)<($46>>>0);
      if ($cmp335) {
       _abort();
       // unreachable;
      }
      $bk338 = (($45) + 12|0);
      $47 = HEAP32[$bk338>>2]|0;
      $cmp339 = ($47|0)==($add$ptr6|0);
      if (!($cmp339)) {
       _abort();
       // unreachable;
      }
      $fd342 = (($44) + 8|0);
      $48 = HEAP32[$fd342>>2]|0;
      $cmp343 = ($48|0)==($add$ptr6|0);
      if ($cmp343) {
       HEAP32[$bk338>>2] = $44;
       HEAP32[$fd342>>2] = $45;
       $R327$1 = $44;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $cmp390 = ($43|0)==(0|0);
    if (!($cmp390)) {
     $add$ptr6$sum243 = (($and5) + 20)|0;
     $index394 = (($mem) + ($add$ptr6$sum243)|0);
     $54 = HEAP32[$index394>>2]|0;
     $arrayidx395 = ((8720 + ($54<<2)|0) + 304|0);
     $55 = HEAP32[$arrayidx395>>2]|0;
     $cmp396 = ($add$ptr6|0)==($55|0);
     if ($cmp396) {
      HEAP32[$arrayidx395>>2] = $R327$1;
      $cond264 = ($R327$1|0)==(0|0);
      if ($cond264) {
       $shl403 = 1 << $54;
       $neg404 = $shl403 ^ -1;
       $56 = HEAP32[((8720 + 4|0))>>2]|0;
       $and405 = $56 & $neg404;
       HEAP32[((8720 + 4|0))>>2] = $and405;
       break;
      }
     } else {
      $57 = HEAP32[((8720 + 16|0))>>2]|0;
      $cmp408 = ($43>>>0)<($57>>>0);
      if ($cmp408) {
       _abort();
       // unreachable;
      }
      $arrayidx414 = (($43) + 16|0);
      $58 = HEAP32[$arrayidx414>>2]|0;
      $cmp415 = ($58|0)==($add$ptr6|0);
      if ($cmp415) {
       HEAP32[$arrayidx414>>2] = $R327$1;
      } else {
       $arrayidx422 = (($43) + 20|0);
       HEAP32[$arrayidx422>>2] = $R327$1;
      }
      $cmp427 = ($R327$1|0)==(0|0);
      if ($cmp427) {
       break;
      }
     }
     $59 = HEAP32[((8720 + 16|0))>>2]|0;
     $cmp430 = ($R327$1>>>0)<($59>>>0);
     if ($cmp430) {
      _abort();
      // unreachable;
     }
     $parent437 = (($R327$1) + 24|0);
     HEAP32[$parent437>>2] = $43;
     $add$ptr6$sum244 = (($and5) + 8)|0;
     $child438 = (($mem) + ($add$ptr6$sum244)|0);
     $60 = HEAP32[$child438>>2]|0;
     $cmp440 = ($60|0)==(0|0);
     do {
      if (!($cmp440)) {
       $61 = HEAP32[((8720 + 16|0))>>2]|0;
       $cmp443 = ($60>>>0)<($61>>>0);
       if ($cmp443) {
        _abort();
        // unreachable;
       } else {
        $arrayidx449 = (($R327$1) + 16|0);
        HEAP32[$arrayidx449>>2] = $60;
        $parent450 = (($60) + 24|0);
        HEAP32[$parent450>>2] = $R327$1;
        break;
       }
      }
     } while(0);
     $child438$sum = (($and5) + 12)|0;
     $arrayidx455 = (($mem) + ($child438$sum)|0);
     $62 = HEAP32[$arrayidx455>>2]|0;
     $cmp456 = ($62|0)==(0|0);
     if (!($cmp456)) {
      $63 = HEAP32[((8720 + 16|0))>>2]|0;
      $cmp459 = ($62>>>0)<($63>>>0);
      if ($cmp459) {
       _abort();
       // unreachable;
      } else {
       $arrayidx465 = (($R327$1) + 20|0);
       HEAP32[$arrayidx465>>2] = $62;
       $parent466 = (($62) + 24|0);
       HEAP32[$parent466>>2] = $R327$1;
       break;
      }
     }
    }
   }
  } while(0);
  $or475 = $add262 | 1;
  $head476 = (($p$0) + 4|0);
  HEAP32[$head476>>2] = $or475;
  $add$ptr477 = (($p$0) + ($add262)|0);
  HEAP32[$add$ptr477>>2] = $add262;
  $64 = HEAP32[((8720 + 20|0))>>2]|0;
  $cmp479 = ($p$0|0)==($64|0);
  if ($cmp479) {
   HEAP32[((8720 + 8|0))>>2] = $add262;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $add262;
  }
 } else {
  $and487 = $30 & -2;
  HEAP32[$head228>>2] = $and487;
  $or488 = $psize$0 | 1;
  $head489 = (($p$0) + 4|0);
  HEAP32[$head489>>2] = $or488;
  $add$ptr490 = (($p$0) + ($psize$0)|0);
  HEAP32[$add$ptr490>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $shr493 = $psize$1 >>> 3;
 $cmp494 = ($psize$1>>>0)<(256);
 if ($cmp494) {
  $shl500 = $shr493 << 1;
  $arrayidx501 = ((8720 + ($shl500<<2)|0) + 40|0);
  $65 = HEAP32[8720>>2]|0;
  $shl503 = 1 << $shr493;
  $and504 = $65 & $shl503;
  $tobool505 = ($and504|0)==(0);
  if ($tobool505) {
   $or508 = $65 | $shl503;
   HEAP32[8720>>2] = $or508;
   $arrayidx501$sum$pre = (($shl500) + 2)|0;
   $$pre = ((8720 + ($arrayidx501$sum$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F502$0 = $arrayidx501;
  } else {
   $arrayidx501$sum242 = (($shl500) + 2)|0;
   $66 = ((8720 + ($arrayidx501$sum242<<2)|0) + 40|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = HEAP32[((8720 + 16|0))>>2]|0;
   $cmp511 = ($67>>>0)<($68>>>0);
   if ($cmp511) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $66;$F502$0 = $67;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $bk521 = (($F502$0) + 12|0);
  HEAP32[$bk521>>2] = $p$0;
  $fd522 = (($p$0) + 8|0);
  HEAP32[$fd522>>2] = $F502$0;
  $bk523 = (($p$0) + 12|0);
  HEAP32[$bk523>>2] = $arrayidx501;
  STACKTOP = sp;return;
 }
 $shr527 = $psize$1 >>> 8;
 $cmp528 = ($shr527|0)==(0);
 if ($cmp528) {
  $I526$0 = 0;
 } else {
  $cmp532 = ($psize$1>>>0)>(16777215);
  if ($cmp532) {
   $I526$0 = 31;
  } else {
   $sub = (($shr527) + 1048320)|0;
   $shr536 = $sub >>> 16;
   $and537 = $shr536 & 8;
   $shl538 = $shr527 << $and537;
   $sub539 = (($shl538) + 520192)|0;
   $shr540 = $sub539 >>> 16;
   $and541 = $shr540 & 4;
   $add542 = $and541 | $and537;
   $shl543 = $shl538 << $and541;
   $sub544 = (($shl543) + 245760)|0;
   $shr545 = $sub544 >>> 16;
   $and546 = $shr545 & 2;
   $add547 = $add542 | $and546;
   $sub548 = (14 - ($add547))|0;
   $shl549 = $shl543 << $and546;
   $shr550 = $shl549 >>> 15;
   $add551 = (($sub548) + ($shr550))|0;
   $shl552 = $add551 << 1;
   $add553 = (($add551) + 7)|0;
   $shr554 = $psize$1 >>> $add553;
   $and555 = $shr554 & 1;
   $add556 = $and555 | $shl552;
   $I526$0 = $add556;
  }
 }
 $arrayidx559 = ((8720 + ($I526$0<<2)|0) + 304|0);
 $index560 = (($p$0) + 28|0);
 $I526$0$c = $I526$0;
 HEAP32[$index560>>2] = $I526$0$c;
 $arrayidx562 = (($p$0) + 20|0);
 HEAP32[$arrayidx562>>2] = 0;
 $69 = (($p$0) + 16|0);
 HEAP32[$69>>2] = 0;
 $70 = HEAP32[((8720 + 4|0))>>2]|0;
 $shl565 = 1 << $I526$0;
 $and566 = $70 & $shl565;
 $tobool567 = ($and566|0)==(0);
 L199: do {
  if ($tobool567) {
   $or570 = $70 | $shl565;
   HEAP32[((8720 + 4|0))>>2] = $or570;
   HEAP32[$arrayidx559>>2] = $p$0;
   $parent571 = (($p$0) + 24|0);
   HEAP32[$parent571>>2] = $arrayidx559;
   $bk572 = (($p$0) + 12|0);
   HEAP32[$bk572>>2] = $p$0;
   $fd573 = (($p$0) + 8|0);
   HEAP32[$fd573>>2] = $p$0;
  } else {
   $71 = HEAP32[$arrayidx559>>2]|0;
   $cmp576 = ($I526$0|0)==(31);
   if ($cmp576) {
    $cond = 0;
   } else {
    $shr578 = $I526$0 >>> 1;
    $sub581 = (25 - ($shr578))|0;
    $cond = $sub581;
   }
   $head583266 = (($71) + 4|0);
   $72 = HEAP32[$head583266>>2]|0;
   $and584267 = $72 & -8;
   $cmp585268 = ($and584267|0)==($psize$1|0);
   L205: do {
    if ($cmp585268) {
     $T$0$lcssa = $71;
    } else {
     $shl582 = $psize$1 << $cond;
     $K575$0270 = $shl582;$T$0269 = $71;
     while(1) {
      $shr588 = $K575$0270 >>> 31;
      $arrayidx591 = ((($T$0269) + ($shr588<<2)|0) + 16|0);
      $73 = HEAP32[$arrayidx591>>2]|0;
      $cmp593 = ($73|0)==(0|0);
      if ($cmp593) {
       break;
      }
      $shl592 = $K575$0270 << 1;
      $head583 = (($73) + 4|0);
      $74 = HEAP32[$head583>>2]|0;
      $and584 = $74 & -8;
      $cmp585 = ($and584|0)==($psize$1|0);
      if ($cmp585) {
       $T$0$lcssa = $73;
       break L205;
      } else {
       $K575$0270 = $shl592;$T$0269 = $73;
      }
     }
     $75 = HEAP32[((8720 + 16|0))>>2]|0;
     $cmp597 = ($arrayidx591>>>0)<($75>>>0);
     if ($cmp597) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$arrayidx591>>2] = $p$0;
      $parent602 = (($p$0) + 24|0);
      HEAP32[$parent602>>2] = $T$0269;
      $bk603 = (($p$0) + 12|0);
      HEAP32[$bk603>>2] = $p$0;
      $fd604 = (($p$0) + 8|0);
      HEAP32[$fd604>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $fd609 = (($T$0$lcssa) + 8|0);
   $76 = HEAP32[$fd609>>2]|0;
   $77 = HEAP32[((8720 + 16|0))>>2]|0;
   $cmp610 = ($T$0$lcssa>>>0)<($77>>>0);
   if ($cmp610) {
    _abort();
    // unreachable;
   }
   $cmp613 = ($76>>>0)<($77>>>0);
   if ($cmp613) {
    _abort();
    // unreachable;
   } else {
    $bk620 = (($76) + 12|0);
    HEAP32[$bk620>>2] = $p$0;
    HEAP32[$fd609>>2] = $p$0;
    $fd622 = (($p$0) + 8|0);
    HEAP32[$fd622>>2] = $76;
    $bk623 = (($p$0) + 12|0);
    HEAP32[$bk623>>2] = $T$0$lcssa;
    $parent624 = (($p$0) + 24|0);
    HEAP32[$parent624>>2] = 0;
    break;
   }
  }
 } while(0);
 $78 = HEAP32[((8720 + 32|0))>>2]|0;
 $dec = (($78) + -1)|0;
 HEAP32[((8720 + 32|0))>>2] = $dec;
 $cmp628 = ($dec|0)==(0);
 if ($cmp628) {
  $sp$0$in$i = ((8720 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $cmp$i = ($sp$0$i|0)==(0|0);
  $next4$i = (($sp$0$i) + 8|0);
  if ($cmp$i) {
   break;
  } else {
   $sp$0$in$i = $next4$i;
  }
 }
 HEAP32[((8720 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $0 = 0, $and6 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp4 = 0, $cmp7 = 0, $div = 0, $head = 0, $mul = 0, $mul$ = 0, $or = 0, $req$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($n_elements|0)==(0);
 if ($cmp) {
  $req$0 = 0;
 } else {
  $mul = Math_imul($elem_size, $n_elements)|0;
  $or = $elem_size | $n_elements;
  $tobool = ($or>>>0)>(65535);
  if ($tobool) {
   $div = (($mul>>>0) / ($n_elements>>>0))&-1;
   $cmp1 = ($div|0)==($elem_size|0);
   $mul$ = $cmp1 ? $mul : -1;
   $req$0 = $mul$;
  } else {
   $req$0 = $mul;
  }
 }
 $call = (_malloc($req$0)|0);
 $cmp4 = ($call|0)==(0|0);
 if ($cmp4) {
  STACKTOP = sp;return ($call|0);
 }
 $head = (($call) + -4|0);
 $0 = HEAP32[$head>>2]|0;
 $and6 = $0 & 3;
 $cmp7 = ($and6|0)==(0);
 if ($cmp7) {
  STACKTOP = sp;return ($call|0);
 }
 _memset(($call|0),0,($req$0|0))|0;
 STACKTOP = sp;return ($call|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $add$ptr = 0, $add$ptr10 = 0, $add6 = 0, $and = 0, $and15 = 0, $and17 = 0, $call = 0, $call12 = 0, $call3 = 0, $call7 = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp18 = 0, $cmp20 = 0, $cmp5 = 0, $cmp8 = 0, $cond = 0, $cond19 = 0;
 var $cond24 = 0, $head = 0, $mem$0 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($oldmem|0)==(0|0);
 if ($cmp) {
  $call = (_malloc($bytes)|0);
  $mem$0 = $call;
  STACKTOP = sp;return ($mem$0|0);
 }
 $cmp1 = ($bytes>>>0)>(4294967231);
 if ($cmp1) {
  $call3 = (___errno_location()|0);
  HEAP32[$call3>>2] = 12;
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $cmp5 = ($bytes>>>0)<(11);
 if ($cmp5) {
  $cond = 16;
 } else {
  $add6 = (($bytes) + 11)|0;
  $and = $add6 & -8;
  $cond = $and;
 }
 $add$ptr = (($oldmem) + -8|0);
 $call7 = (_try_realloc_chunk($add$ptr,$cond)|0);
 $cmp8 = ($call7|0)==(0|0);
 if (!($cmp8)) {
  $add$ptr10 = (($call7) + 8|0);
  $mem$0 = $add$ptr10;
  STACKTOP = sp;return ($mem$0|0);
 }
 $call12 = (_malloc($bytes)|0);
 $cmp13 = ($call12|0)==(0|0);
 if ($cmp13) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $head = (($oldmem) + -4|0);
 $0 = HEAP32[$head>>2]|0;
 $and15 = $0 & -8;
 $and17 = $0 & 3;
 $cmp18 = ($and17|0)==(0);
 $cond19 = $cmp18 ? 8 : 4;
 $sub = (($and15) - ($cond19))|0;
 $cmp20 = ($sub>>>0)<($bytes>>>0);
 $cond24 = $cmp20 ? $sub : $bytes;
 _memcpy(($call12|0),($oldmem|0),($cond24|0))|0;
 _free($oldmem);
 $mem$0 = $call12;
 STACKTOP = sp;return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $R$0 = 0;
 var $R$1 = 0, $RP$0 = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$ptr$sum = 0, $add$ptr$sum10 = 0, $add$ptr$sum11 = 0, $add$ptr$sum1516 = 0, $add$ptr$sum2 = 0, $add$ptr$sum3 = 0, $add$ptr$sum7 = 0, $add$ptr$sum8 = 0, $add$ptr$sum9 = 0, $add$ptr17 = 0, $add$ptr17$sum = 0, $add$ptr298$sum6 = 0, $add$ptr303 = 0, $add$ptr303$sum = 0, $add$ptr317$sum5 = 0;
 var $add$ptr41 = 0, $add$ptr41$sum = 0, $add$ptr66 = 0, $add$ptr66$sum = 0, $add$ptr67 = 0, $add$ptr67$sum = 0, $add$ptr91$sum = 0, $add105 = 0, $add58 = 0, $and = 0, $and100 = 0, $and104 = 0, $and128 = 0, $and19 = 0, $and2 = 0, $and216 = 0, $and294 = 0, $and305 = 0, $and43 = 0, $and69 = 0;
 var $and7 = 0, $and80 = 0, $and87 = 0, $arrayidx = 0, $arrayidx179 = 0, $arrayidx186 = 0, $arrayidx190 = 0, $arrayidx206 = 0, $arrayidx226 = 0, $arrayidx234 = 0, $arrayidx261 = 0, $arrayidx267 = 0, $arrayidx278 = 0, $bk = 0, $bk118 = 0, $bk147 = 0, $bk155 = 0, $bk164 = 0, $child = 0, $child$sum = 0;
 var $child249 = 0, $child249$sum = 0, $cmp = 0, $cmp$i = 0, $cmp1$i = 0, $cmp106 = 0, $cmp11 = 0, $cmp111 = 0, $cmp114 = 0, $cmp116 = 0, $cmp119 = 0, $cmp125 = 0, $cmp13 = 0, $cmp133 = 0, $cmp136 = 0, $cmp139 = 0, $cmp15 = 0, $cmp156 = 0, $cmp162 = 0, $cmp165 = 0;
 var $cmp168 = 0, $cmp180 = 0, $cmp183 = 0, $cmp187 = 0, $cmp191 = 0, $cmp195 = 0, $cmp2$i = 0, $cmp203 = 0, $cmp207 = 0, $cmp220 = 0, $cmp227 = 0, $cmp239 = 0, $cmp243 = 0, $cmp251 = 0, $cmp255 = 0, $cmp268 = 0, $cmp272 = 0, $cmp288 = 0, $cmp3 = 0, $cmp34 = 0;
 var $cmp36 = 0, $cmp5 = 0, $cmp56 = 0, $cmp59 = 0, $cmp63 = 0, $cond = 0, $fd = 0, $fd138 = 0, $fd148$pre = 0, $fd148$pre$phiZ2D = 0, $fd159 = 0, $fd167 = 0, $head = 0, $head23 = 0, $head299 = 0, $head310 = 0, $head318 = 0, $head48 = 0, $head6 = 0, $head74 = 0;
 var $head79 = 0, $head92 = 0, $index = 0, $neg = 0, $neg215 = 0, $newp$0 = 0, $or = 0, $or$cond = 0, $or20 = 0, $or28 = 0, $or295 = 0, $or296 = 0, $or300 = 0, $or306 = 0, $or307 = 0, $or315 = 0, $or319 = 0, $or32 = 0, $or44 = 0, $or45 = 0;
 var $or50 = 0, $or70 = 0, $or71 = 0, $or76 = 0, $or88 = 0, $or89 = 0, $or93 = 0, $parent = 0, $parent248 = 0, $parent262 = 0, $parent279 = 0, $shl = 0, $shl$i = 0, $shl127 = 0, $shl214 = 0, $shr = 0, $storemerge = 0, $storemerge12 = 0, $sub = 0, $sub$i = 0;
 var $sub110 = 0, $sub40 = 0, $sub62 = 0, $tobool = 0, $tobool101 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $head = (($p) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & -8;
 $add$ptr = (($p) + ($and)|0);
 $1 = HEAP32[((8720 + 16|0))>>2]|0;
 $cmp = ($p>>>0)<($1>>>0);
 if ($cmp) {
  _abort();
  // unreachable;
 }
 $and2 = $0 & 3;
 $cmp3 = ($and2|0)!=(1);
 $cmp5 = ($p>>>0)<($add$ptr>>>0);
 $or$cond = $cmp3 & $cmp5;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $add$ptr$sum1516 = $and | 4;
 $head6 = (($p) + ($add$ptr$sum1516)|0);
 $2 = HEAP32[$head6>>2]|0;
 $and7 = $2 & 1;
 $tobool = ($and7|0)==(0);
 if ($tobool) {
  _abort();
  // unreachable;
 }
 $cmp11 = ($and2|0)==(0);
 if ($cmp11) {
  $cmp$i = ($nb>>>0)<(256);
  if ($cmp$i) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $add$i = (($nb) + 4)|0;
  $cmp1$i = ($and>>>0)<($add$i>>>0);
  if (!($cmp1$i)) {
   $sub$i = (($and) - ($nb))|0;
   $3 = HEAP32[((9192 + 8|0))>>2]|0;
   $shl$i = $3 << 1;
   $cmp2$i = ($sub$i>>>0)>($shl$i>>>0);
   if (!($cmp2$i)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $cmp13 = ($and>>>0)<($nb>>>0);
 if (!($cmp13)) {
  $sub = (($and) - ($nb))|0;
  $cmp15 = ($sub>>>0)>(15);
  if (!($cmp15)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $add$ptr17 = (($p) + ($nb)|0);
  $and19 = $0 & 1;
  $or = $and19 | $nb;
  $or20 = $or | 2;
  HEAP32[$head>>2] = $or20;
  $add$ptr17$sum = (($nb) + 4)|0;
  $head23 = (($p) + ($add$ptr17$sum)|0);
  $or28 = $sub | 3;
  HEAP32[$head23>>2] = $or28;
  $4 = HEAP32[$head6>>2]|0;
  $or32 = $4 | 1;
  HEAP32[$head6>>2] = $or32;
  _dispose_chunk($add$ptr17,$sub);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $5 = HEAP32[((8720 + 24|0))>>2]|0;
 $cmp34 = ($add$ptr|0)==($5|0);
 if ($cmp34) {
  $6 = HEAP32[((8720 + 12|0))>>2]|0;
  $add = (($6) + ($and))|0;
  $cmp36 = ($add>>>0)>($nb>>>0);
  if (!($cmp36)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $sub40 = (($add) - ($nb))|0;
  $add$ptr41 = (($p) + ($nb)|0);
  $and43 = $0 & 1;
  $or44 = $and43 | $nb;
  $or45 = $or44 | 2;
  HEAP32[$head>>2] = $or45;
  $add$ptr41$sum = (($nb) + 4)|0;
  $head48 = (($p) + ($add$ptr41$sum)|0);
  $or50 = $sub40 | 1;
  HEAP32[$head48>>2] = $or50;
  HEAP32[((8720 + 24|0))>>2] = $add$ptr41;
  HEAP32[((8720 + 12|0))>>2] = $sub40;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $7 = HEAP32[((8720 + 20|0))>>2]|0;
 $cmp56 = ($add$ptr|0)==($7|0);
 if ($cmp56) {
  $8 = HEAP32[((8720 + 8|0))>>2]|0;
  $add58 = (($8) + ($and))|0;
  $cmp59 = ($add58>>>0)<($nb>>>0);
  if ($cmp59) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $sub62 = (($add58) - ($nb))|0;
  $cmp63 = ($sub62>>>0)>(15);
  if ($cmp63) {
   $add$ptr66 = (($p) + ($nb)|0);
   $add$ptr67 = (($p) + ($add58)|0);
   $and69 = $0 & 1;
   $or70 = $and69 | $nb;
   $or71 = $or70 | 2;
   HEAP32[$head>>2] = $or71;
   $add$ptr66$sum = (($nb) + 4)|0;
   $head74 = (($p) + ($add$ptr66$sum)|0);
   $or76 = $sub62 | 1;
   HEAP32[$head74>>2] = $or76;
   HEAP32[$add$ptr67>>2] = $sub62;
   $add$ptr67$sum = (($add58) + 4)|0;
   $head79 = (($p) + ($add$ptr67$sum)|0);
   $9 = HEAP32[$head79>>2]|0;
   $and80 = $9 & -2;
   HEAP32[$head79>>2] = $and80;
   $storemerge = $add$ptr66;$storemerge12 = $sub62;
  } else {
   $and87 = $0 & 1;
   $or88 = $and87 | $add58;
   $or89 = $or88 | 2;
   HEAP32[$head>>2] = $or89;
   $add$ptr91$sum = (($add58) + 4)|0;
   $head92 = (($p) + ($add$ptr91$sum)|0);
   $10 = HEAP32[$head92>>2]|0;
   $or93 = $10 | 1;
   HEAP32[$head92>>2] = $or93;
   $storemerge = 0;$storemerge12 = 0;
  }
  HEAP32[((8720 + 8|0))>>2] = $storemerge12;
  HEAP32[((8720 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $and100 = $2 & 2;
 $tobool101 = ($and100|0)==(0);
 if (!($tobool101)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $and104 = $2 & -8;
 $add105 = (($and104) + ($and))|0;
 $cmp106 = ($add105>>>0)<($nb>>>0);
 if ($cmp106) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $sub110 = (($add105) - ($nb))|0;
 $shr = $2 >>> 3;
 $cmp111 = ($2>>>0)<(256);
 do {
  if ($cmp111) {
   $add$ptr$sum10 = (($and) + 8)|0;
   $fd = (($p) + ($add$ptr$sum10)|0);
   $11 = HEAP32[$fd>>2]|0;
   $add$ptr$sum11 = (($and) + 12)|0;
   $bk = (($p) + ($add$ptr$sum11)|0);
   $12 = HEAP32[$bk>>2]|0;
   $shl = $shr << 1;
   $arrayidx = ((8720 + ($shl<<2)|0) + 40|0);
   $cmp114 = ($11|0)==($arrayidx|0);
   if (!($cmp114)) {
    $cmp116 = ($11>>>0)<($1>>>0);
    if ($cmp116) {
     _abort();
     // unreachable;
    }
    $bk118 = (($11) + 12|0);
    $13 = HEAP32[$bk118>>2]|0;
    $cmp119 = ($13|0)==($add$ptr|0);
    if (!($cmp119)) {
     _abort();
     // unreachable;
    }
   }
   $cmp125 = ($12|0)==($11|0);
   if ($cmp125) {
    $shl127 = 1 << $shr;
    $neg = $shl127 ^ -1;
    $14 = HEAP32[8720>>2]|0;
    $and128 = $14 & $neg;
    HEAP32[8720>>2] = $and128;
    break;
   }
   $cmp133 = ($12|0)==($arrayidx|0);
   if ($cmp133) {
    $fd148$pre = (($12) + 8|0);
    $fd148$pre$phiZ2D = $fd148$pre;
   } else {
    $cmp136 = ($12>>>0)<($1>>>0);
    if ($cmp136) {
     _abort();
     // unreachable;
    }
    $fd138 = (($12) + 8|0);
    $15 = HEAP32[$fd138>>2]|0;
    $cmp139 = ($15|0)==($add$ptr|0);
    if ($cmp139) {
     $fd148$pre$phiZ2D = $fd138;
    } else {
     _abort();
     // unreachable;
    }
   }
   $bk147 = (($11) + 12|0);
   HEAP32[$bk147>>2] = $12;
   HEAP32[$fd148$pre$phiZ2D>>2] = $11;
  } else {
   $add$ptr$sum = (($and) + 24)|0;
   $parent = (($p) + ($add$ptr$sum)|0);
   $16 = HEAP32[$parent>>2]|0;
   $add$ptr$sum2 = (($and) + 12)|0;
   $bk155 = (($p) + ($add$ptr$sum2)|0);
   $17 = HEAP32[$bk155>>2]|0;
   $cmp156 = ($17|0)==($add$ptr|0);
   do {
    if ($cmp156) {
     $child$sum = (($and) + 20)|0;
     $arrayidx179 = (($p) + ($child$sum)|0);
     $21 = HEAP32[$arrayidx179>>2]|0;
     $cmp180 = ($21|0)==(0|0);
     if ($cmp180) {
      $add$ptr$sum3 = (($and) + 16)|0;
      $child = (($p) + ($add$ptr$sum3)|0);
      $22 = HEAP32[$child>>2]|0;
      $cmp183 = ($22|0)==(0|0);
      if ($cmp183) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $22;$RP$0 = $child;
      }
     } else {
      $R$0 = $21;$RP$0 = $arrayidx179;
     }
     while(1) {
      $arrayidx186 = (($R$0) + 20|0);
      $23 = HEAP32[$arrayidx186>>2]|0;
      $cmp187 = ($23|0)==(0|0);
      if (!($cmp187)) {
       $R$0 = $23;$RP$0 = $arrayidx186;
       continue;
      }
      $arrayidx190 = (($R$0) + 16|0);
      $24 = HEAP32[$arrayidx190>>2]|0;
      $cmp191 = ($24|0)==(0|0);
      if ($cmp191) {
       break;
      } else {
       $R$0 = $24;$RP$0 = $arrayidx190;
      }
     }
     $cmp195 = ($RP$0>>>0)<($1>>>0);
     if ($cmp195) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $add$ptr$sum9 = (($and) + 8)|0;
     $fd159 = (($p) + ($add$ptr$sum9)|0);
     $18 = HEAP32[$fd159>>2]|0;
     $cmp162 = ($18>>>0)<($1>>>0);
     if ($cmp162) {
      _abort();
      // unreachable;
     }
     $bk164 = (($18) + 12|0);
     $19 = HEAP32[$bk164>>2]|0;
     $cmp165 = ($19|0)==($add$ptr|0);
     if (!($cmp165)) {
      _abort();
      // unreachable;
     }
     $fd167 = (($17) + 8|0);
     $20 = HEAP32[$fd167>>2]|0;
     $cmp168 = ($20|0)==($add$ptr|0);
     if ($cmp168) {
      HEAP32[$bk164>>2] = $17;
      HEAP32[$fd167>>2] = $18;
      $R$1 = $17;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $cmp203 = ($16|0)==(0|0);
   if (!($cmp203)) {
    $add$ptr$sum7 = (($and) + 28)|0;
    $index = (($p) + ($add$ptr$sum7)|0);
    $25 = HEAP32[$index>>2]|0;
    $arrayidx206 = ((8720 + ($25<<2)|0) + 304|0);
    $26 = HEAP32[$arrayidx206>>2]|0;
    $cmp207 = ($add$ptr|0)==($26|0);
    if ($cmp207) {
     HEAP32[$arrayidx206>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $shl214 = 1 << $25;
      $neg215 = $shl214 ^ -1;
      $27 = HEAP32[((8720 + 4|0))>>2]|0;
      $and216 = $27 & $neg215;
      HEAP32[((8720 + 4|0))>>2] = $and216;
      break;
     }
    } else {
     $28 = HEAP32[((8720 + 16|0))>>2]|0;
     $cmp220 = ($16>>>0)<($28>>>0);
     if ($cmp220) {
      _abort();
      // unreachable;
     }
     $arrayidx226 = (($16) + 16|0);
     $29 = HEAP32[$arrayidx226>>2]|0;
     $cmp227 = ($29|0)==($add$ptr|0);
     if ($cmp227) {
      HEAP32[$arrayidx226>>2] = $R$1;
     } else {
      $arrayidx234 = (($16) + 20|0);
      HEAP32[$arrayidx234>>2] = $R$1;
     }
     $cmp239 = ($R$1|0)==(0|0);
     if ($cmp239) {
      break;
     }
    }
    $30 = HEAP32[((8720 + 16|0))>>2]|0;
    $cmp243 = ($R$1>>>0)<($30>>>0);
    if ($cmp243) {
     _abort();
     // unreachable;
    }
    $parent248 = (($R$1) + 24|0);
    HEAP32[$parent248>>2] = $16;
    $add$ptr$sum8 = (($and) + 16)|0;
    $child249 = (($p) + ($add$ptr$sum8)|0);
    $31 = HEAP32[$child249>>2]|0;
    $cmp251 = ($31|0)==(0|0);
    do {
     if (!($cmp251)) {
      $32 = HEAP32[((8720 + 16|0))>>2]|0;
      $cmp255 = ($31>>>0)<($32>>>0);
      if ($cmp255) {
       _abort();
       // unreachable;
      } else {
       $arrayidx261 = (($R$1) + 16|0);
       HEAP32[$arrayidx261>>2] = $31;
       $parent262 = (($31) + 24|0);
       HEAP32[$parent262>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $child249$sum = (($and) + 20)|0;
    $arrayidx267 = (($p) + ($child249$sum)|0);
    $33 = HEAP32[$arrayidx267>>2]|0;
    $cmp268 = ($33|0)==(0|0);
    if (!($cmp268)) {
     $34 = HEAP32[((8720 + 16|0))>>2]|0;
     $cmp272 = ($33>>>0)<($34>>>0);
     if ($cmp272) {
      _abort();
      // unreachable;
     } else {
      $arrayidx278 = (($R$1) + 20|0);
      HEAP32[$arrayidx278>>2] = $33;
      $parent279 = (($33) + 24|0);
      HEAP32[$parent279>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $cmp288 = ($sub110>>>0)<(16);
 if ($cmp288) {
  $35 = HEAP32[$head>>2]|0;
  $and294 = $35 & 1;
  $or295 = $add105 | $and294;
  $or296 = $or295 | 2;
  HEAP32[$head>>2] = $or296;
  $add$ptr298$sum6 = $add105 | 4;
  $head299 = (($p) + ($add$ptr298$sum6)|0);
  $36 = HEAP32[$head299>>2]|0;
  $or300 = $36 | 1;
  HEAP32[$head299>>2] = $or300;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $add$ptr303 = (($p) + ($nb)|0);
  $37 = HEAP32[$head>>2]|0;
  $and305 = $37 & 1;
  $or306 = $and305 | $nb;
  $or307 = $or306 | 2;
  HEAP32[$head>>2] = $or307;
  $add$ptr303$sum = (($nb) + 4)|0;
  $head310 = (($p) + ($add$ptr303$sum)|0);
  $or315 = $sub110 | 3;
  HEAP32[$head310>>2] = $or315;
  $add$ptr317$sum5 = $add105 | 4;
  $head318 = (($p) + ($add$ptr317$sum5)|0);
  $38 = HEAP32[$head318>>2]|0;
  $or319 = $38 | 1;
  HEAP32[$head318>>2] = $or319;
  _dispose_chunk($add$ptr303,$sub110);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $F511$0 = 0, $I539$0 = 0, $I539$0$c = 0;
 var $K591$036 = 0, $R$0 = 0, $R$1 = 0, $R325$0 = 0, $R325$1 = 0, $RP$0 = 0, $RP354$0 = 0, $T$0$lcssa = 0, $T$035 = 0, $add$ptr = 0, $add$ptr$sum = 0, $add$ptr$sum1 = 0, $add$ptr$sum12 = 0, $add$ptr$sum13 = 0, $add$ptr$sum14 = 0, $add$ptr$sum15 = 0, $add$ptr$sum16 = 0, $add$ptr$sum2 = 0, $add$ptr$sum3 = 0, $add$ptr$sum4 = 0;
 var $add$ptr250 = 0, $add$ptr483 = 0, $add$ptr498 = 0, $add$ptr5 = 0, $add$ptr5$sum = 0, $add$ptr5$sum18 = 0, $add$ptr5$sum19 = 0, $add$ptr5$sum20 = 0, $add$ptr5$sum21 = 0, $add$ptr5$sum22 = 0, $add$ptr5$sum23 = 0, $add$ptr5$sum24 = 0, $add$ptr5$sum25 = 0, $add229 = 0, $add246 = 0, $add255 = 0, $add555 = 0, $add560 = 0, $add564 = 0, $add566 = 0;
 var $add569 = 0, $add6 = 0, $and = 0, $and128 = 0, $and2 = 0, $and202 = 0, $and207 = 0, $and223 = 0, $and254 = 0, $and292 = 0, $and32 = 0, $and407 = 0, $and495 = 0, $and514 = 0, $and550 = 0, $and554 = 0, $and559 = 0, $and568 = 0, $and581 = 0, $and600 = 0;
 var $and60033 = 0, $arrayidx = 0, $arrayidx100 = 0, $arrayidx118 = 0, $arrayidx138 = 0, $arrayidx146 = 0, $arrayidx173 = 0, $arrayidx179 = 0, $arrayidx190 = 0, $arrayidx268 = 0, $arrayidx356 = 0, $arrayidx368 = 0, $arrayidx373 = 0, $arrayidx396 = 0, $arrayidx417 = 0, $arrayidx425 = 0, $arrayidx454 = 0, $arrayidx460 = 0, $arrayidx471 = 0, $arrayidx510 = 0;
 var $arrayidx510$sum$pre = 0, $arrayidx510$sum11 = 0, $arrayidx573 = 0, $arrayidx576 = 0, $arrayidx607 = 0, $arrayidx86 = 0, $arrayidx95 = 0, $bk = 0, $bk22 = 0, $bk263 = 0, $bk276 = 0, $bk314 = 0, $bk326 = 0, $bk337 = 0, $bk52 = 0, $bk533 = 0, $bk535 = 0, $bk588 = 0, $bk60 = 0, $bk620 = 0;
 var $bk639 = 0, $bk642 = 0, $bk70 = 0, $child = 0, $child$sum = 0, $child161 = 0, $child161$sum = 0, $child355 = 0, $child355$sum = 0, $child442 = 0, $child442$sum = 0, $cmp = 0, $cmp10 = 0, $cmp101 = 0, $cmp106 = 0, $cmp115 = 0, $cmp119 = 0, $cmp13 = 0, $cmp132 = 0, $cmp139 = 0;
 var $cmp151 = 0, $cmp155 = 0, $cmp163 = 0, $cmp167 = 0, $cmp17 = 0, $cmp180 = 0, $cmp184 = 0, $cmp20 = 0, $cmp203 = 0, $cmp217 = 0, $cmp226 = 0, $cmp23 = 0, $cmp234 = 0, $cmp242 = 0, $cmp257 = 0, $cmp269 = 0, $cmp273 = 0, $cmp277 = 0, $cmp28 = 0, $cmp286 = 0;
 var $cmp297 = 0, $cmp301 = 0, $cmp305 = 0, $cmp327 = 0, $cmp334 = 0, $cmp338 = 0, $cmp342 = 0, $cmp357 = 0, $cmp36 = 0, $cmp362 = 0, $cmp369 = 0, $cmp374 = 0, $cmp381 = 0, $cmp390 = 0, $cmp397 = 0, $cmp40 = 0, $cmp411 = 0, $cmp418 = 0, $cmp430 = 0, $cmp434 = 0;
 var $cmp44 = 0, $cmp444 = 0, $cmp448 = 0, $cmp461 = 0, $cmp465 = 0, $cmp486 = 0, $cmp502 = 0, $cmp523 = 0, $cmp541 = 0, $cmp545 = 0, $cmp592 = 0, $cmp601 = 0, $cmp60134 = 0, $cmp609 = 0, $cmp61 = 0, $cmp614 = 0, $cmp628 = 0, $cmp632 = 0, $cmp68 = 0, $cmp7 = 0;
 var $cmp71 = 0, $cmp75 = 0, $cmp87 = 0, $cmp91 = 0, $cmp96 = 0, $cond = 0, $cond29 = 0, $cond30 = 0, $fd = 0, $fd261 = 0, $fd304 = 0, $fd315$pre = 0, $fd315$pre$phiZ2D = 0, $fd331 = 0, $fd341 = 0, $fd43 = 0, $fd53$pre = 0, $fd53$pre$phiZ2D = 0, $fd534 = 0, $fd589 = 0;
 var $fd621 = 0, $fd626 = 0, $fd641 = 0, $fd65 = 0, $fd74 = 0, $head = 0, $head201 = 0, $head208 = 0, $head222 = 0, $head232 = 0, $head249 = 0, $head482 = 0, $head497 = 0, $head599 = 0, $head59932 = 0, $idx$neg = 0, $index = 0, $index394 = 0, $index574 = 0, $neg = 0;
 var $neg127 = 0, $neg290 = 0, $neg405 = 0, $or = 0, $or231 = 0, $or248 = 0, $or481 = 0, $or496 = 0, $or519 = 0, $or586 = 0, $p$addr$0 = 0, $parent = 0, $parent160 = 0, $parent174 = 0, $parent191 = 0, $parent324 = 0, $parent441 = 0, $parent455 = 0, $parent472 = 0, $parent587 = 0;
 var $parent619 = 0, $parent643 = 0, $psize$addr$0 = 0, $psize$addr$1 = 0, $shl = 0, $shl126 = 0, $shl266 = 0, $shl289 = 0, $shl31 = 0, $shl404 = 0, $shl508 = 0, $shl513 = 0, $shl551 = 0, $shl556 = 0, $shl562 = 0, $shl565 = 0, $shl580 = 0, $shl598 = 0, $shl608 = 0, $shr = 0;
 var $shr256 = 0, $shr501 = 0, $shr540 = 0, $shr549 = 0, $shr553 = 0, $shr558 = 0, $shr563 = 0, $shr567 = 0, $shr594 = 0, $shr604 = 0, $sub = 0, $sub552 = 0, $sub557 = 0, $sub561 = 0, $sub597 = 0, $tobool = 0, $tobool224 = 0, $tobool515 = 0, $tobool582 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $add$ptr = (($p) + ($psize)|0);
 $head = (($p) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 do {
  if ($tobool) {
   $1 = HEAP32[$p>>2]|0;
   $and2 = $0 & 3;
   $cmp = ($and2|0)==(0);
   if ($cmp) {
    STACKTOP = sp;return;
   }
   $idx$neg = (0 - ($1))|0;
   $add$ptr5 = (($p) + ($idx$neg)|0);
   $add6 = (($1) + ($psize))|0;
   $2 = HEAP32[((8720 + 16|0))>>2]|0;
   $cmp7 = ($add$ptr5>>>0)<($2>>>0);
   if ($cmp7) {
    _abort();
    // unreachable;
   }
   $3 = HEAP32[((8720 + 20|0))>>2]|0;
   $cmp10 = ($add$ptr5|0)==($3|0);
   if ($cmp10) {
    $add$ptr$sum = (($psize) + 4)|0;
    $head201 = (($p) + ($add$ptr$sum)|0);
    $28 = HEAP32[$head201>>2]|0;
    $and202 = $28 & 3;
    $cmp203 = ($and202|0)==(3);
    if (!($cmp203)) {
     $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
     break;
    }
    HEAP32[((8720 + 8|0))>>2] = $add6;
    $29 = HEAP32[$head201>>2]|0;
    $and207 = $29 & -2;
    HEAP32[$head201>>2] = $and207;
    $or = $add6 | 1;
    $add$ptr5$sum = (4 - ($1))|0;
    $head208 = (($p) + ($add$ptr5$sum)|0);
    HEAP32[$head208>>2] = $or;
    HEAP32[$add$ptr>>2] = $add6;
    STACKTOP = sp;return;
   }
   $shr = $1 >>> 3;
   $cmp13 = ($1>>>0)<(256);
   if ($cmp13) {
    $add$ptr5$sum24 = (8 - ($1))|0;
    $fd = (($p) + ($add$ptr5$sum24)|0);
    $4 = HEAP32[$fd>>2]|0;
    $add$ptr5$sum25 = (12 - ($1))|0;
    $bk = (($p) + ($add$ptr5$sum25)|0);
    $5 = HEAP32[$bk>>2]|0;
    $shl = $shr << 1;
    $arrayidx = ((8720 + ($shl<<2)|0) + 40|0);
    $cmp17 = ($4|0)==($arrayidx|0);
    if (!($cmp17)) {
     $cmp20 = ($4>>>0)<($2>>>0);
     if ($cmp20) {
      _abort();
      // unreachable;
     }
     $bk22 = (($4) + 12|0);
     $6 = HEAP32[$bk22>>2]|0;
     $cmp23 = ($6|0)==($add$ptr5|0);
     if (!($cmp23)) {
      _abort();
      // unreachable;
     }
    }
    $cmp28 = ($5|0)==($4|0);
    if ($cmp28) {
     $shl31 = 1 << $shr;
     $neg = $shl31 ^ -1;
     $7 = HEAP32[8720>>2]|0;
     $and32 = $7 & $neg;
     HEAP32[8720>>2] = $and32;
     $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
     break;
    }
    $cmp36 = ($5|0)==($arrayidx|0);
    if ($cmp36) {
     $fd53$pre = (($5) + 8|0);
     $fd53$pre$phiZ2D = $fd53$pre;
    } else {
     $cmp40 = ($5>>>0)<($2>>>0);
     if ($cmp40) {
      _abort();
      // unreachable;
     }
     $fd43 = (($5) + 8|0);
     $8 = HEAP32[$fd43>>2]|0;
     $cmp44 = ($8|0)==($add$ptr5|0);
     if ($cmp44) {
      $fd53$pre$phiZ2D = $fd43;
     } else {
      _abort();
      // unreachable;
     }
    }
    $bk52 = (($4) + 12|0);
    HEAP32[$bk52>>2] = $5;
    HEAP32[$fd53$pre$phiZ2D>>2] = $4;
    $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
    break;
   }
   $add$ptr5$sum18 = (24 - ($1))|0;
   $parent = (($p) + ($add$ptr5$sum18)|0);
   $9 = HEAP32[$parent>>2]|0;
   $add$ptr5$sum19 = (12 - ($1))|0;
   $bk60 = (($p) + ($add$ptr5$sum19)|0);
   $10 = HEAP32[$bk60>>2]|0;
   $cmp61 = ($10|0)==($add$ptr5|0);
   do {
    if ($cmp61) {
     $add$ptr5$sum20 = (16 - ($1))|0;
     $child$sum = (($add$ptr5$sum20) + 4)|0;
     $arrayidx86 = (($p) + ($child$sum)|0);
     $14 = HEAP32[$arrayidx86>>2]|0;
     $cmp87 = ($14|0)==(0|0);
     if ($cmp87) {
      $child = (($p) + ($add$ptr5$sum20)|0);
      $15 = HEAP32[$child>>2]|0;
      $cmp91 = ($15|0)==(0|0);
      if ($cmp91) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $15;$RP$0 = $child;
      }
     } else {
      $R$0 = $14;$RP$0 = $arrayidx86;
     }
     while(1) {
      $arrayidx95 = (($R$0) + 20|0);
      $16 = HEAP32[$arrayidx95>>2]|0;
      $cmp96 = ($16|0)==(0|0);
      if (!($cmp96)) {
       $R$0 = $16;$RP$0 = $arrayidx95;
       continue;
      }
      $arrayidx100 = (($R$0) + 16|0);
      $17 = HEAP32[$arrayidx100>>2]|0;
      $cmp101 = ($17|0)==(0|0);
      if ($cmp101) {
       break;
      } else {
       $R$0 = $17;$RP$0 = $arrayidx100;
      }
     }
     $cmp106 = ($RP$0>>>0)<($2>>>0);
     if ($cmp106) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $add$ptr5$sum23 = (8 - ($1))|0;
     $fd65 = (($p) + ($add$ptr5$sum23)|0);
     $11 = HEAP32[$fd65>>2]|0;
     $cmp68 = ($11>>>0)<($2>>>0);
     if ($cmp68) {
      _abort();
      // unreachable;
     }
     $bk70 = (($11) + 12|0);
     $12 = HEAP32[$bk70>>2]|0;
     $cmp71 = ($12|0)==($add$ptr5|0);
     if (!($cmp71)) {
      _abort();
      // unreachable;
     }
     $fd74 = (($10) + 8|0);
     $13 = HEAP32[$fd74>>2]|0;
     $cmp75 = ($13|0)==($add$ptr5|0);
     if ($cmp75) {
      HEAP32[$bk70>>2] = $10;
      HEAP32[$fd74>>2] = $11;
      $R$1 = $10;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $cmp115 = ($9|0)==(0|0);
   if ($cmp115) {
    $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
   } else {
    $add$ptr5$sum21 = (28 - ($1))|0;
    $index = (($p) + ($add$ptr5$sum21)|0);
    $18 = HEAP32[$index>>2]|0;
    $arrayidx118 = ((8720 + ($18<<2)|0) + 304|0);
    $19 = HEAP32[$arrayidx118>>2]|0;
    $cmp119 = ($add$ptr5|0)==($19|0);
    if ($cmp119) {
     HEAP32[$arrayidx118>>2] = $R$1;
     $cond29 = ($R$1|0)==(0|0);
     if ($cond29) {
      $shl126 = 1 << $18;
      $neg127 = $shl126 ^ -1;
      $20 = HEAP32[((8720 + 4|0))>>2]|0;
      $and128 = $20 & $neg127;
      HEAP32[((8720 + 4|0))>>2] = $and128;
      $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
      break;
     }
    } else {
     $21 = HEAP32[((8720 + 16|0))>>2]|0;
     $cmp132 = ($9>>>0)<($21>>>0);
     if ($cmp132) {
      _abort();
      // unreachable;
     }
     $arrayidx138 = (($9) + 16|0);
     $22 = HEAP32[$arrayidx138>>2]|0;
     $cmp139 = ($22|0)==($add$ptr5|0);
     if ($cmp139) {
      HEAP32[$arrayidx138>>2] = $R$1;
     } else {
      $arrayidx146 = (($9) + 20|0);
      HEAP32[$arrayidx146>>2] = $R$1;
     }
     $cmp151 = ($R$1|0)==(0|0);
     if ($cmp151) {
      $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
      break;
     }
    }
    $23 = HEAP32[((8720 + 16|0))>>2]|0;
    $cmp155 = ($R$1>>>0)<($23>>>0);
    if ($cmp155) {
     _abort();
     // unreachable;
    }
    $parent160 = (($R$1) + 24|0);
    HEAP32[$parent160>>2] = $9;
    $add$ptr5$sum22 = (16 - ($1))|0;
    $child161 = (($p) + ($add$ptr5$sum22)|0);
    $24 = HEAP32[$child161>>2]|0;
    $cmp163 = ($24|0)==(0|0);
    do {
     if (!($cmp163)) {
      $25 = HEAP32[((8720 + 16|0))>>2]|0;
      $cmp167 = ($24>>>0)<($25>>>0);
      if ($cmp167) {
       _abort();
       // unreachable;
      } else {
       $arrayidx173 = (($R$1) + 16|0);
       HEAP32[$arrayidx173>>2] = $24;
       $parent174 = (($24) + 24|0);
       HEAP32[$parent174>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $child161$sum = (($add$ptr5$sum22) + 4)|0;
    $arrayidx179 = (($p) + ($child161$sum)|0);
    $26 = HEAP32[$arrayidx179>>2]|0;
    $cmp180 = ($26|0)==(0|0);
    if ($cmp180) {
     $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
    } else {
     $27 = HEAP32[((8720 + 16|0))>>2]|0;
     $cmp184 = ($26>>>0)<($27>>>0);
     if ($cmp184) {
      _abort();
      // unreachable;
     } else {
      $arrayidx190 = (($R$1) + 20|0);
      HEAP32[$arrayidx190>>2] = $26;
      $parent191 = (($26) + 24|0);
      HEAP32[$parent191>>2] = $R$1;
      $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
      break;
     }
    }
   }
  } else {
   $p$addr$0 = $p;$psize$addr$0 = $psize;
  }
 } while(0);
 $30 = HEAP32[((8720 + 16|0))>>2]|0;
 $cmp217 = ($add$ptr>>>0)<($30>>>0);
 if ($cmp217) {
  _abort();
  // unreachable;
 }
 $add$ptr$sum1 = (($psize) + 4)|0;
 $head222 = (($p) + ($add$ptr$sum1)|0);
 $31 = HEAP32[$head222>>2]|0;
 $and223 = $31 & 2;
 $tobool224 = ($and223|0)==(0);
 if ($tobool224) {
  $32 = HEAP32[((8720 + 24|0))>>2]|0;
  $cmp226 = ($add$ptr|0)==($32|0);
  if ($cmp226) {
   $33 = HEAP32[((8720 + 12|0))>>2]|0;
   $add229 = (($33) + ($psize$addr$0))|0;
   HEAP32[((8720 + 12|0))>>2] = $add229;
   HEAP32[((8720 + 24|0))>>2] = $p$addr$0;
   $or231 = $add229 | 1;
   $head232 = (($p$addr$0) + 4|0);
   HEAP32[$head232>>2] = $or231;
   $34 = HEAP32[((8720 + 20|0))>>2]|0;
   $cmp234 = ($p$addr$0|0)==($34|0);
   if (!($cmp234)) {
    STACKTOP = sp;return;
   }
   HEAP32[((8720 + 20|0))>>2] = 0;
   HEAP32[((8720 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $35 = HEAP32[((8720 + 20|0))>>2]|0;
  $cmp242 = ($add$ptr|0)==($35|0);
  if ($cmp242) {
   $36 = HEAP32[((8720 + 8|0))>>2]|0;
   $add246 = (($36) + ($psize$addr$0))|0;
   HEAP32[((8720 + 8|0))>>2] = $add246;
   HEAP32[((8720 + 20|0))>>2] = $p$addr$0;
   $or248 = $add246 | 1;
   $head249 = (($p$addr$0) + 4|0);
   HEAP32[$head249>>2] = $or248;
   $add$ptr250 = (($p$addr$0) + ($add246)|0);
   HEAP32[$add$ptr250>>2] = $add246;
   STACKTOP = sp;return;
  }
  $and254 = $31 & -8;
  $add255 = (($and254) + ($psize$addr$0))|0;
  $shr256 = $31 >>> 3;
  $cmp257 = ($31>>>0)<(256);
  do {
   if ($cmp257) {
    $add$ptr$sum15 = (($psize) + 8)|0;
    $fd261 = (($p) + ($add$ptr$sum15)|0);
    $37 = HEAP32[$fd261>>2]|0;
    $add$ptr$sum16 = (($psize) + 12)|0;
    $bk263 = (($p) + ($add$ptr$sum16)|0);
    $38 = HEAP32[$bk263>>2]|0;
    $shl266 = $shr256 << 1;
    $arrayidx268 = ((8720 + ($shl266<<2)|0) + 40|0);
    $cmp269 = ($37|0)==($arrayidx268|0);
    if (!($cmp269)) {
     $cmp273 = ($37>>>0)<($30>>>0);
     if ($cmp273) {
      _abort();
      // unreachable;
     }
     $bk276 = (($37) + 12|0);
     $39 = HEAP32[$bk276>>2]|0;
     $cmp277 = ($39|0)==($add$ptr|0);
     if (!($cmp277)) {
      _abort();
      // unreachable;
     }
    }
    $cmp286 = ($38|0)==($37|0);
    if ($cmp286) {
     $shl289 = 1 << $shr256;
     $neg290 = $shl289 ^ -1;
     $40 = HEAP32[8720>>2]|0;
     $and292 = $40 & $neg290;
     HEAP32[8720>>2] = $and292;
     break;
    }
    $cmp297 = ($38|0)==($arrayidx268|0);
    if ($cmp297) {
     $fd315$pre = (($38) + 8|0);
     $fd315$pre$phiZ2D = $fd315$pre;
    } else {
     $cmp301 = ($38>>>0)<($30>>>0);
     if ($cmp301) {
      _abort();
      // unreachable;
     }
     $fd304 = (($38) + 8|0);
     $41 = HEAP32[$fd304>>2]|0;
     $cmp305 = ($41|0)==($add$ptr|0);
     if ($cmp305) {
      $fd315$pre$phiZ2D = $fd304;
     } else {
      _abort();
      // unreachable;
     }
    }
    $bk314 = (($37) + 12|0);
    HEAP32[$bk314>>2] = $38;
    HEAP32[$fd315$pre$phiZ2D>>2] = $37;
   } else {
    $add$ptr$sum2 = (($psize) + 24)|0;
    $parent324 = (($p) + ($add$ptr$sum2)|0);
    $42 = HEAP32[$parent324>>2]|0;
    $add$ptr$sum3 = (($psize) + 12)|0;
    $bk326 = (($p) + ($add$ptr$sum3)|0);
    $43 = HEAP32[$bk326>>2]|0;
    $cmp327 = ($43|0)==($add$ptr|0);
    do {
     if ($cmp327) {
      $child355$sum = (($psize) + 20)|0;
      $arrayidx356 = (($p) + ($child355$sum)|0);
      $47 = HEAP32[$arrayidx356>>2]|0;
      $cmp357 = ($47|0)==(0|0);
      if ($cmp357) {
       $add$ptr$sum4 = (($psize) + 16)|0;
       $child355 = (($p) + ($add$ptr$sum4)|0);
       $48 = HEAP32[$child355>>2]|0;
       $cmp362 = ($48|0)==(0|0);
       if ($cmp362) {
        $R325$1 = 0;
        break;
       } else {
        $R325$0 = $48;$RP354$0 = $child355;
       }
      } else {
       $R325$0 = $47;$RP354$0 = $arrayidx356;
      }
      while(1) {
       $arrayidx368 = (($R325$0) + 20|0);
       $49 = HEAP32[$arrayidx368>>2]|0;
       $cmp369 = ($49|0)==(0|0);
       if (!($cmp369)) {
        $R325$0 = $49;$RP354$0 = $arrayidx368;
        continue;
       }
       $arrayidx373 = (($R325$0) + 16|0);
       $50 = HEAP32[$arrayidx373>>2]|0;
       $cmp374 = ($50|0)==(0|0);
       if ($cmp374) {
        break;
       } else {
        $R325$0 = $50;$RP354$0 = $arrayidx373;
       }
      }
      $cmp381 = ($RP354$0>>>0)<($30>>>0);
      if ($cmp381) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP354$0>>2] = 0;
       $R325$1 = $R325$0;
       break;
      }
     } else {
      $add$ptr$sum14 = (($psize) + 8)|0;
      $fd331 = (($p) + ($add$ptr$sum14)|0);
      $44 = HEAP32[$fd331>>2]|0;
      $cmp334 = ($44>>>0)<($30>>>0);
      if ($cmp334) {
       _abort();
       // unreachable;
      }
      $bk337 = (($44) + 12|0);
      $45 = HEAP32[$bk337>>2]|0;
      $cmp338 = ($45|0)==($add$ptr|0);
      if (!($cmp338)) {
       _abort();
       // unreachable;
      }
      $fd341 = (($43) + 8|0);
      $46 = HEAP32[$fd341>>2]|0;
      $cmp342 = ($46|0)==($add$ptr|0);
      if ($cmp342) {
       HEAP32[$bk337>>2] = $43;
       HEAP32[$fd341>>2] = $44;
       $R325$1 = $43;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $cmp390 = ($42|0)==(0|0);
    if (!($cmp390)) {
     $add$ptr$sum12 = (($psize) + 28)|0;
     $index394 = (($p) + ($add$ptr$sum12)|0);
     $51 = HEAP32[$index394>>2]|0;
     $arrayidx396 = ((8720 + ($51<<2)|0) + 304|0);
     $52 = HEAP32[$arrayidx396>>2]|0;
     $cmp397 = ($add$ptr|0)==($52|0);
     if ($cmp397) {
      HEAP32[$arrayidx396>>2] = $R325$1;
      $cond30 = ($R325$1|0)==(0|0);
      if ($cond30) {
       $shl404 = 1 << $51;
       $neg405 = $shl404 ^ -1;
       $53 = HEAP32[((8720 + 4|0))>>2]|0;
       $and407 = $53 & $neg405;
       HEAP32[((8720 + 4|0))>>2] = $and407;
       break;
      }
     } else {
      $54 = HEAP32[((8720 + 16|0))>>2]|0;
      $cmp411 = ($42>>>0)<($54>>>0);
      if ($cmp411) {
       _abort();
       // unreachable;
      }
      $arrayidx417 = (($42) + 16|0);
      $55 = HEAP32[$arrayidx417>>2]|0;
      $cmp418 = ($55|0)==($add$ptr|0);
      if ($cmp418) {
       HEAP32[$arrayidx417>>2] = $R325$1;
      } else {
       $arrayidx425 = (($42) + 20|0);
       HEAP32[$arrayidx425>>2] = $R325$1;
      }
      $cmp430 = ($R325$1|0)==(0|0);
      if ($cmp430) {
       break;
      }
     }
     $56 = HEAP32[((8720 + 16|0))>>2]|0;
     $cmp434 = ($R325$1>>>0)<($56>>>0);
     if ($cmp434) {
      _abort();
      // unreachable;
     }
     $parent441 = (($R325$1) + 24|0);
     HEAP32[$parent441>>2] = $42;
     $add$ptr$sum13 = (($psize) + 16)|0;
     $child442 = (($p) + ($add$ptr$sum13)|0);
     $57 = HEAP32[$child442>>2]|0;
     $cmp444 = ($57|0)==(0|0);
     do {
      if (!($cmp444)) {
       $58 = HEAP32[((8720 + 16|0))>>2]|0;
       $cmp448 = ($57>>>0)<($58>>>0);
       if ($cmp448) {
        _abort();
        // unreachable;
       } else {
        $arrayidx454 = (($R325$1) + 16|0);
        HEAP32[$arrayidx454>>2] = $57;
        $parent455 = (($57) + 24|0);
        HEAP32[$parent455>>2] = $R325$1;
        break;
       }
      }
     } while(0);
     $child442$sum = (($psize) + 20)|0;
     $arrayidx460 = (($p) + ($child442$sum)|0);
     $59 = HEAP32[$arrayidx460>>2]|0;
     $cmp461 = ($59|0)==(0|0);
     if (!($cmp461)) {
      $60 = HEAP32[((8720 + 16|0))>>2]|0;
      $cmp465 = ($59>>>0)<($60>>>0);
      if ($cmp465) {
       _abort();
       // unreachable;
      } else {
       $arrayidx471 = (($R325$1) + 20|0);
       HEAP32[$arrayidx471>>2] = $59;
       $parent472 = (($59) + 24|0);
       HEAP32[$parent472>>2] = $R325$1;
       break;
      }
     }
    }
   }
  } while(0);
  $or481 = $add255 | 1;
  $head482 = (($p$addr$0) + 4|0);
  HEAP32[$head482>>2] = $or481;
  $add$ptr483 = (($p$addr$0) + ($add255)|0);
  HEAP32[$add$ptr483>>2] = $add255;
  $61 = HEAP32[((8720 + 20|0))>>2]|0;
  $cmp486 = ($p$addr$0|0)==($61|0);
  if ($cmp486) {
   HEAP32[((8720 + 8|0))>>2] = $add255;
   STACKTOP = sp;return;
  } else {
   $psize$addr$1 = $add255;
  }
 } else {
  $and495 = $31 & -2;
  HEAP32[$head222>>2] = $and495;
  $or496 = $psize$addr$0 | 1;
  $head497 = (($p$addr$0) + 4|0);
  HEAP32[$head497>>2] = $or496;
  $add$ptr498 = (($p$addr$0) + ($psize$addr$0)|0);
  HEAP32[$add$ptr498>>2] = $psize$addr$0;
  $psize$addr$1 = $psize$addr$0;
 }
 $shr501 = $psize$addr$1 >>> 3;
 $cmp502 = ($psize$addr$1>>>0)<(256);
 if ($cmp502) {
  $shl508 = $shr501 << 1;
  $arrayidx510 = ((8720 + ($shl508<<2)|0) + 40|0);
  $62 = HEAP32[8720>>2]|0;
  $shl513 = 1 << $shr501;
  $and514 = $62 & $shl513;
  $tobool515 = ($and514|0)==(0);
  if ($tobool515) {
   $or519 = $62 | $shl513;
   HEAP32[8720>>2] = $or519;
   $arrayidx510$sum$pre = (($shl508) + 2)|0;
   $$pre = ((8720 + ($arrayidx510$sum$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F511$0 = $arrayidx510;
  } else {
   $arrayidx510$sum11 = (($shl508) + 2)|0;
   $63 = ((8720 + ($arrayidx510$sum11<<2)|0) + 40|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = HEAP32[((8720 + 16|0))>>2]|0;
   $cmp523 = ($64>>>0)<($65>>>0);
   if ($cmp523) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $63;$F511$0 = $64;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$addr$0;
  $bk533 = (($F511$0) + 12|0);
  HEAP32[$bk533>>2] = $p$addr$0;
  $fd534 = (($p$addr$0) + 8|0);
  HEAP32[$fd534>>2] = $F511$0;
  $bk535 = (($p$addr$0) + 12|0);
  HEAP32[$bk535>>2] = $arrayidx510;
  STACKTOP = sp;return;
 }
 $shr540 = $psize$addr$1 >>> 8;
 $cmp541 = ($shr540|0)==(0);
 if ($cmp541) {
  $I539$0 = 0;
 } else {
  $cmp545 = ($psize$addr$1>>>0)>(16777215);
  if ($cmp545) {
   $I539$0 = 31;
  } else {
   $sub = (($shr540) + 1048320)|0;
   $shr549 = $sub >>> 16;
   $and550 = $shr549 & 8;
   $shl551 = $shr540 << $and550;
   $sub552 = (($shl551) + 520192)|0;
   $shr553 = $sub552 >>> 16;
   $and554 = $shr553 & 4;
   $add555 = $and554 | $and550;
   $shl556 = $shl551 << $and554;
   $sub557 = (($shl556) + 245760)|0;
   $shr558 = $sub557 >>> 16;
   $and559 = $shr558 & 2;
   $add560 = $add555 | $and559;
   $sub561 = (14 - ($add560))|0;
   $shl562 = $shl556 << $and559;
   $shr563 = $shl562 >>> 15;
   $add564 = (($sub561) + ($shr563))|0;
   $shl565 = $add564 << 1;
   $add566 = (($add564) + 7)|0;
   $shr567 = $psize$addr$1 >>> $add566;
   $and568 = $shr567 & 1;
   $add569 = $and568 | $shl565;
   $I539$0 = $add569;
  }
 }
 $arrayidx573 = ((8720 + ($I539$0<<2)|0) + 304|0);
 $index574 = (($p$addr$0) + 28|0);
 $I539$0$c = $I539$0;
 HEAP32[$index574>>2] = $I539$0$c;
 $arrayidx576 = (($p$addr$0) + 20|0);
 HEAP32[$arrayidx576>>2] = 0;
 $66 = (($p$addr$0) + 16|0);
 HEAP32[$66>>2] = 0;
 $67 = HEAP32[((8720 + 4|0))>>2]|0;
 $shl580 = 1 << $I539$0;
 $and581 = $67 & $shl580;
 $tobool582 = ($and581|0)==(0);
 if ($tobool582) {
  $or586 = $67 | $shl580;
  HEAP32[((8720 + 4|0))>>2] = $or586;
  HEAP32[$arrayidx573>>2] = $p$addr$0;
  $parent587 = (($p$addr$0) + 24|0);
  HEAP32[$parent587>>2] = $arrayidx573;
  $bk588 = (($p$addr$0) + 12|0);
  HEAP32[$bk588>>2] = $p$addr$0;
  $fd589 = (($p$addr$0) + 8|0);
  HEAP32[$fd589>>2] = $p$addr$0;
  STACKTOP = sp;return;
 }
 $68 = HEAP32[$arrayidx573>>2]|0;
 $cmp592 = ($I539$0|0)==(31);
 if ($cmp592) {
  $cond = 0;
 } else {
  $shr594 = $I539$0 >>> 1;
  $sub597 = (25 - ($shr594))|0;
  $cond = $sub597;
 }
 $head59932 = (($68) + 4|0);
 $69 = HEAP32[$head59932>>2]|0;
 $and60033 = $69 & -8;
 $cmp60134 = ($and60033|0)==($psize$addr$1|0);
 L194: do {
  if ($cmp60134) {
   $T$0$lcssa = $68;
  } else {
   $shl598 = $psize$addr$1 << $cond;
   $K591$036 = $shl598;$T$035 = $68;
   while(1) {
    $shr604 = $K591$036 >>> 31;
    $arrayidx607 = ((($T$035) + ($shr604<<2)|0) + 16|0);
    $70 = HEAP32[$arrayidx607>>2]|0;
    $cmp609 = ($70|0)==(0|0);
    if ($cmp609) {
     break;
    }
    $shl608 = $K591$036 << 1;
    $head599 = (($70) + 4|0);
    $71 = HEAP32[$head599>>2]|0;
    $and600 = $71 & -8;
    $cmp601 = ($and600|0)==($psize$addr$1|0);
    if ($cmp601) {
     $T$0$lcssa = $70;
     break L194;
    } else {
     $K591$036 = $shl608;$T$035 = $70;
    }
   }
   $72 = HEAP32[((8720 + 16|0))>>2]|0;
   $cmp614 = ($arrayidx607>>>0)<($72>>>0);
   if ($cmp614) {
    _abort();
    // unreachable;
   }
   HEAP32[$arrayidx607>>2] = $p$addr$0;
   $parent619 = (($p$addr$0) + 24|0);
   HEAP32[$parent619>>2] = $T$035;
   $bk620 = (($p$addr$0) + 12|0);
   HEAP32[$bk620>>2] = $p$addr$0;
   $fd621 = (($p$addr$0) + 8|0);
   HEAP32[$fd621>>2] = $p$addr$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $fd626 = (($T$0$lcssa) + 8|0);
 $73 = HEAP32[$fd626>>2]|0;
 $74 = HEAP32[((8720 + 16|0))>>2]|0;
 $cmp628 = ($T$0$lcssa>>>0)<($74>>>0);
 if ($cmp628) {
  _abort();
  // unreachable;
 }
 $cmp632 = ($73>>>0)<($74>>>0);
 if ($cmp632) {
  _abort();
  // unreachable;
 }
 $bk639 = (($73) + 12|0);
 HEAP32[$bk639>>2] = $p$addr$0;
 HEAP32[$fd626>>2] = $p$addr$0;
 $fd641 = (($p$addr$0) + 8|0);
 HEAP32[$fd641>>2] = $73;
 $bk642 = (($p$addr$0) + 12|0);
 HEAP32[$bk642>>2] = $T$0$lcssa;
 $parent643 = (($p$addr$0) + 24|0);
 HEAP32[$parent643>>2] = 0;
 STACKTOP = sp;return;
}
function _isdigit($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($c) + -48)|0;
 $cmp = ($sub>>>0)<(10);
 $conv = $cmp&1;
 STACKTOP = sp;return ($conv|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $cmp = 0, $cmp1 = 0, $lor$ext = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($c|0)==(32);
 if ($cmp) {
  $0 = 1;
 } else {
  $sub = (($c) + -9)|0;
  $cmp1 = ($sub>>>0)<(5);
  $0 = $cmp1;
 }
 $lor$ext = $0&1;
 STACKTOP = sp;return ($lor$ext|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$base = 0, $$base130 = 0, $$sum = 0, $$sum123 = 0, $$sum123150 = 0, $$sum124 = 0, $$sum125 = 0, $$sum126 = 0, $$sum127 = 0, $$sum127167 = 0, $$sum128 = 0, $$sum129 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $add = 0, $add249 = 0, $and = 0, $and174 = 0, $arrayidx = 0, $arrayidx175 = 0, $arrayidx178 = 0, $arrayidx178151 = 0, $arrayidx206 = 0, $arrayidx237 = 0, $arrayidx237168 = 0, $arrayidx266 = 0, $arrayidx305 = 0, $arrayidx311 = 0, $arrayidx93 = 0, $base$addr$1 = 0, $base$addr$1134 = 0;
 var $base$addr$1135 = 0, $c$0 = 0, $c$1 = 0, $c$1136 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$3177 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$7163 = 0, $c$8 = 0, $c$9$be = 0, $call = 0, $call105 = 0;
 var $call126 = 0, $call160 = 0, $call200 = 0, $call21 = 0, $call231 = 0, $call260 = 0, $call299 = 0, $call3 = 0, $call326 = 0, $call330 = 0, $call347 = 0, $call353 = 0, $call4 = 0, $call42 = 0, $call57 = 0, $cmp = 0, $cmp1 = 0, $cmp108 = 0, $cmp112 = 0, $cmp112184 = 0;
 var $cmp114 = 0, $cmp114$ = 0, $cmp119 = 0, $cmp132 = 0, $cmp132176 = 0, $cmp14 = 0, $cmp153 = 0, $cmp165 = 0, $cmp180 = 0, $cmp180153 = 0, $cmp183 = 0, $cmp183$ = 0, $cmp193 = 0, $cmp208 = 0, $cmp208145 = 0, $cmp224 = 0, $cmp239 = 0, $cmp239170 = 0, $cmp242 = 0, $cmp242$ = 0;
 var $cmp25 = 0, $cmp253 = 0, $cmp268 = 0, $cmp268162 = 0, $cmp292 = 0, $cmp30 = 0, $cmp307 = 0, $cmp313 = 0, $cmp319 = 0, $cmp35 = 0, $cmp45 = 0, $cmp50 = 0, $cmp61 = 0, $cmp7 = 0, $cmp95 = 0, $cond = 0, $cond44 = 0, $cond59 = 0, $conv = 0, $conv124 = 0;
 var $conv158 = 0, $conv176 = 0, $conv179 = 0, $conv179152 = 0, $conv179155 = 0, $conv19 = 0, $conv198 = 0, $conv207 = 0, $conv207144 = 0, $conv229 = 0, $conv238 = 0, $conv238169 = 0, $conv238172 = 0, $conv258 = 0, $conv267 = 0, $conv267161 = 0, $conv297 = 0, $conv306 = 0, $conv312 = 0, $conv324 = 0;
 var $conv40 = 0, $conv55 = 0, $conv94 = 0, $incdec$ptr = 0, $incdec$ptr102 = 0, $incdec$ptr123 = 0, $incdec$ptr157 = 0, $incdec$ptr18 = 0, $incdec$ptr197 = 0, $incdec$ptr228 = 0, $incdec$ptr257 = 0, $incdec$ptr296 = 0, $incdec$ptr323 = 0, $incdec$ptr336 = 0, $incdec$ptr39 = 0, $incdec$ptr54 = 0, $incdec$ptr68 = 0, $incdec$ptr77 = 0, $mul173 = 0, $mul246 = 0;
 var $neg$0 = 0, $or = 0, $or$cond = 0, $or$cond131 = 0, $or$cond132 = 0, $or$cond141 = 0, $or$cond141147 = 0, $or189 = 0, $phitmp207 = 0, $rpos = 0, $shend = 0, $shl = 0, $shr = 0, $sub = 0, $sub111 = 0, $sub111183 = 0, $sub111186 = 0, $sub131 = 0, $sub131$lcssa = 0, $sub131175 = 0;
 var $sub131179 = 0, $sub170 = 0, $tobool = 0, $tobool171 = 0, $tobool333 = 0, $tobool345 = 0, $tobool65 = 0, $tobool71 = 0, $tobool99 = 0, $x$0185 = 0, $x$1154 = 0, $x$2171 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($base>>>0)>(36);
 if ($cmp) {
  $call = (___errno_location()|0);
  HEAP32[$call>>2] = 22;
  $143 = 0;$144 = 0;
  tempRet0 = $143;
  STACKTOP = sp;return ($144|0);
 }
 $rpos = (($f) + 4|0);
 $shend = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$rpos>>2]|0;
  $3 = HEAP32[$shend>>2]|0;
  $cmp1 = ($2>>>0)<($3>>>0);
  if ($cmp1) {
   $incdec$ptr = (($2) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr;
   $4 = HEAP8[$2>>0]|0;
   $conv = $4&255;
   $cond = $conv;
  } else {
   $call3 = (___shgetc($f)|0);
   $cond = $call3;
  }
  $call4 = (_isspace($cond)|0);
  $tobool = ($call4|0)==(0);
  if ($tobool) {
   break;
  }
 }
 $cmp7 = ($cond|0)==(45);
 do {
  if ((($cond|0) == 43) | (($cond|0) == 45)) {
   $sub = $cmp7 << 31 >> 31;
   $5 = HEAP32[$rpos>>2]|0;
   $6 = HEAP32[$shend>>2]|0;
   $cmp14 = ($5>>>0)<($6>>>0);
   if ($cmp14) {
    $incdec$ptr18 = (($5) + 1|0);
    HEAP32[$rpos>>2] = $incdec$ptr18;
    $7 = HEAP8[$5>>0]|0;
    $conv19 = $7&255;
    $c$0 = $conv19;$neg$0 = $sub;
    break;
   } else {
    $call21 = (___shgetc($f)|0);
    $c$0 = $call21;$neg$0 = $sub;
    break;
   }
  } else {
   $c$0 = $cond;$neg$0 = 0;
  }
 } while(0);
 $cmp25 = ($base|0)==(0);
 $8 = $base & -17;
 $9 = ($8|0)==(0);
 $cmp30 = ($c$0|0)==(48);
 $or$cond = $9 & $cmp30;
 do {
  if ($or$cond) {
   $10 = HEAP32[$rpos>>2]|0;
   $11 = HEAP32[$shend>>2]|0;
   $cmp35 = ($10>>>0)<($11>>>0);
   if ($cmp35) {
    $incdec$ptr39 = (($10) + 1|0);
    HEAP32[$rpos>>2] = $incdec$ptr39;
    $12 = HEAP8[$10>>0]|0;
    $conv40 = $12&255;
    $cond44 = $conv40;
   } else {
    $call42 = (___shgetc($f)|0);
    $cond44 = $call42;
   }
   $or = $cond44 | 32;
   $cmp45 = ($or|0)==(120);
   if (!($cmp45)) {
    $$base = $cmp25 ? 8 : $base;
    $base$addr$1 = $$base;$c$1 = $cond44;
    label = 32;
    break;
   }
   $13 = HEAP32[$rpos>>2]|0;
   $14 = HEAP32[$shend>>2]|0;
   $cmp50 = ($13>>>0)<($14>>>0);
   if ($cmp50) {
    $incdec$ptr54 = (($13) + 1|0);
    HEAP32[$rpos>>2] = $incdec$ptr54;
    $15 = HEAP8[$13>>0]|0;
    $conv55 = $15&255;
    $cond59 = $conv55;
   } else {
    $call57 = (___shgetc($f)|0);
    $cond59 = $call57;
   }
   $$sum129 = (($cond59) + 1)|0;
   $arrayidx = (9216 + ($$sum129)|0);
   $16 = HEAP8[$arrayidx>>0]|0;
   $cmp61 = ($16&255)>(15);
   if ($cmp61) {
    $17 = HEAP32[$shend>>2]|0;
    $tobool65 = ($17|0)==(0|0);
    if (!($tobool65)) {
     $18 = HEAP32[$rpos>>2]|0;
     $incdec$ptr68 = (($18) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr68;
    }
    $tobool71 = ($pok|0)==(0);
    if ($tobool71) {
     ___shlim($f,0);
     $143 = 0;$144 = 0;
     tempRet0 = $143;
     STACKTOP = sp;return ($144|0);
    }
    if ($tobool65) {
     $143 = 0;$144 = 0;
     tempRet0 = $143;
     STACKTOP = sp;return ($144|0);
    }
    $19 = HEAP32[$rpos>>2]|0;
    $incdec$ptr77 = (($19) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr77;
    $143 = 0;$144 = 0;
    tempRet0 = $143;
    STACKTOP = sp;return ($144|0);
   } else {
    $base$addr$1135 = 16;$c$1136 = $cond59;
    label = 47;
   }
  } else {
   $$base130 = $cmp25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $arrayidx93 = (9216 + ($$sum)|0);
   $20 = HEAP8[$arrayidx93>>0]|0;
   $conv94 = $20&255;
   $cmp95 = ($conv94>>>0)<($$base130>>>0);
   if ($cmp95) {
    $base$addr$1 = $$base130;$c$1 = $c$0;
    label = 32;
   } else {
    $21 = HEAP32[$shend>>2]|0;
    $tobool99 = ($21|0)==(0|0);
    if (!($tobool99)) {
     $22 = HEAP32[$rpos>>2]|0;
     $incdec$ptr102 = (($22) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr102;
    }
    ___shlim($f,0);
    $call105 = (___errno_location()|0);
    HEAP32[$call105>>2] = 22;
    $143 = 0;$144 = 0;
    tempRet0 = $143;
    STACKTOP = sp;return ($144|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $cmp108 = ($base$addr$1|0)==(10);
  if ($cmp108) {
   $sub111183 = (($c$1) + -48)|0;
   $cmp112184 = ($sub111183>>>0)<(10);
   if ($cmp112184) {
    $sub111186 = $sub111183;$x$0185 = 0;
    while(1) {
     $add = (($x$0185) + ($sub111186))|0;
     $23 = HEAP32[$rpos>>2]|0;
     $24 = HEAP32[$shend>>2]|0;
     $cmp119 = ($23>>>0)<($24>>>0);
     if ($cmp119) {
      $incdec$ptr123 = (($23) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr123;
      $25 = HEAP8[$23>>0]|0;
      $conv124 = $25&255;
      $c$2$be = $conv124;
     } else {
      $call126 = (___shgetc($f)|0);
      $c$2$be = $call126;
     }
     $sub111 = (($c$2$be) + -48)|0;
     $cmp112 = ($sub111>>>0)<(10);
     $cmp114 = ($add>>>0)<(429496729);
     $cmp114$ = $cmp112 & $cmp114;
     if (!($cmp114$)) {
      break;
     }
     $phitmp207 = ($add*10)|0;
     $sub111186 = $sub111;$x$0185 = $phitmp207;
    }
    $145 = $add;$146 = 0;$c$2$lcssa = $c$2$be;
   } else {
    $145 = 0;$146 = 0;$c$2$lcssa = $c$1;
   }
   $sub131175 = (($c$2$lcssa) + -48)|0;
   $cmp132176 = ($sub131175>>>0)<(10);
   if ($cmp132176) {
    $26 = $145;$27 = $146;$c$3177 = $c$2$lcssa;$sub131179 = $sub131175;
    while(1) {
     $28 = (___muldi3(($26|0),($27|0),10,0)|0);
     $29 = tempRet0;
     $30 = ($sub131179|0)<(0);
     $31 = $30 << 31 >> 31;
     $32 = $sub131179 ^ -1;
     $33 = $31 ^ -1;
     $34 = ($29>>>0)>($33>>>0);
     $35 = ($29|0)==($33|0);
     $36 = ($28>>>0)>($32>>>0);
     $37 = $35 & $36;
     $38 = $34 | $37;
     if ($38) {
      $147 = $26;$148 = $27;$c$3$lcssa = $c$3177;$sub131$lcssa = $sub131179;
      break;
     }
     $39 = (_i64Add(($28|0),($29|0),($sub131179|0),($31|0))|0);
     $40 = tempRet0;
     $41 = HEAP32[$rpos>>2]|0;
     $42 = HEAP32[$shend>>2]|0;
     $cmp153 = ($41>>>0)<($42>>>0);
     if ($cmp153) {
      $incdec$ptr157 = (($41) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr157;
      $43 = HEAP8[$41>>0]|0;
      $conv158 = $43&255;
      $c$3$be = $conv158;
     } else {
      $call160 = (___shgetc($f)|0);
      $c$3$be = $call160;
     }
     $sub131 = (($c$3$be) + -48)|0;
     $cmp132 = ($sub131>>>0)<(10);
     $44 = ($40>>>0)<(429496729);
     $45 = ($40|0)==(429496729);
     $46 = ($39>>>0)<(2576980378);
     $47 = $45 & $46;
     $48 = $44 | $47;
     $or$cond131 = $cmp132 & $48;
     if ($or$cond131) {
      $26 = $39;$27 = $40;$c$3177 = $c$3$be;$sub131179 = $sub131;
     } else {
      $147 = $39;$148 = $40;$c$3$lcssa = $c$3$be;$sub131$lcssa = $sub131;
      break;
     }
    }
    $cmp165 = ($sub131$lcssa>>>0)>(9);
    if ($cmp165) {
     $120 = $148;$123 = $147;
    } else {
     $149 = $147;$150 = $148;$base$addr$1134 = 10;$c$8 = $c$3$lcssa;
     label = 73;
    }
   } else {
    $120 = $146;$123 = $145;
   }
  } else {
   $base$addr$1135 = $base$addr$1;$c$1136 = $c$1;
   label = 47;
  }
 }
 L70: do {
  if ((label|0) == 47) {
   $sub170 = (($base$addr$1135) + -1)|0;
   $and = $sub170 & $base$addr$1135;
   $tobool171 = ($and|0)==(0);
   if ($tobool171) {
    $mul173 = ($base$addr$1135*23)|0;
    $shr = $mul173 >>> 5;
    $and174 = $shr & 7;
    $arrayidx175 = (9480 + ($and174)|0);
    $50 = HEAP8[$arrayidx175>>0]|0;
    $conv176 = $50 << 24 >> 24;
    $$sum123150 = (($c$1136) + 1)|0;
    $arrayidx178151 = (9216 + ($$sum123150)|0);
    $51 = HEAP8[$arrayidx178151>>0]|0;
    $conv179152 = $51&255;
    $cmp180153 = ($conv179152>>>0)<($base$addr$1135>>>0);
    if ($cmp180153) {
     $conv179155 = $conv179152;$x$1154 = 0;
     while(1) {
      $shl = $x$1154 << $conv176;
      $or189 = $conv179155 | $shl;
      $52 = HEAP32[$rpos>>2]|0;
      $53 = HEAP32[$shend>>2]|0;
      $cmp193 = ($52>>>0)<($53>>>0);
      if ($cmp193) {
       $incdec$ptr197 = (($52) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr197;
       $54 = HEAP8[$52>>0]|0;
       $conv198 = $54&255;
       $c$4$be = $conv198;
      } else {
       $call200 = (___shgetc($f)|0);
       $c$4$be = $call200;
      }
      $$sum123 = (($c$4$be) + 1)|0;
      $arrayidx178 = (9216 + ($$sum123)|0);
      $55 = HEAP8[$arrayidx178>>0]|0;
      $conv179 = $55&255;
      $cmp180 = ($conv179>>>0)<($base$addr$1135>>>0);
      $cmp183 = ($or189>>>0)<(134217728);
      $cmp183$ = $cmp180 & $cmp183;
      if ($cmp183$) {
       $conv179155 = $conv179;$x$1154 = $or189;
      } else {
       break;
      }
     }
     $58 = $55;$60 = 0;$63 = $or189;$c$4$lcssa = $c$4$be;
    } else {
     $58 = $51;$60 = 0;$63 = 0;$c$4$lcssa = $c$1136;
    }
    $56 = (_bitshift64Lshr(-1,-1,($conv176|0))|0);
    $57 = tempRet0;
    $conv207144 = $58&255;
    $cmp208145 = ($conv207144>>>0)>=($base$addr$1135>>>0);
    $59 = ($60>>>0)>($57>>>0);
    $61 = ($60|0)==($57|0);
    $62 = ($63>>>0)>($56>>>0);
    $64 = $61 & $62;
    $65 = $59 | $64;
    $or$cond141147 = $cmp208145 | $65;
    if ($or$cond141147) {
     $149 = $63;$150 = $60;$base$addr$1134 = $base$addr$1135;$c$8 = $c$4$lcssa;
     label = 73;
     break;
    } else {
     $66 = $63;$67 = $60;$71 = $58;
    }
    while(1) {
     $68 = (_bitshift64Shl(($66|0),($67|0),($conv176|0))|0);
     $69 = tempRet0;
     $70 = $71&255;
     $72 = $70 | $68;
     $73 = HEAP32[$rpos>>2]|0;
     $74 = HEAP32[$shend>>2]|0;
     $cmp224 = ($73>>>0)<($74>>>0);
     if ($cmp224) {
      $incdec$ptr228 = (($73) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr228;
      $75 = HEAP8[$73>>0]|0;
      $conv229 = $75&255;
      $c$5$be = $conv229;
     } else {
      $call231 = (___shgetc($f)|0);
      $c$5$be = $call231;
     }
     $$sum124 = (($c$5$be) + 1)|0;
     $arrayidx206 = (9216 + ($$sum124)|0);
     $76 = HEAP8[$arrayidx206>>0]|0;
     $conv207 = $76&255;
     $cmp208 = ($conv207>>>0)>=($base$addr$1135>>>0);
     $77 = ($69>>>0)>($57>>>0);
     $78 = ($69|0)==($57|0);
     $79 = ($72>>>0)>($56>>>0);
     $80 = $78 & $79;
     $81 = $77 | $80;
     $or$cond141 = $cmp208 | $81;
     if ($or$cond141) {
      $149 = $72;$150 = $69;$base$addr$1134 = $base$addr$1135;$c$8 = $c$5$be;
      label = 73;
      break L70;
     } else {
      $66 = $72;$67 = $69;$71 = $76;
     }
    }
   }
   $$sum127167 = (($c$1136) + 1)|0;
   $arrayidx237168 = (9216 + ($$sum127167)|0);
   $49 = HEAP8[$arrayidx237168>>0]|0;
   $conv238169 = $49&255;
   $cmp239170 = ($conv238169>>>0)<($base$addr$1135>>>0);
   if ($cmp239170) {
    $conv238172 = $conv238169;$x$2171 = 0;
    while(1) {
     $mul246 = Math_imul($x$2171, $base$addr$1135)|0;
     $add249 = (($conv238172) + ($mul246))|0;
     $82 = HEAP32[$rpos>>2]|0;
     $83 = HEAP32[$shend>>2]|0;
     $cmp253 = ($82>>>0)<($83>>>0);
     if ($cmp253) {
      $incdec$ptr257 = (($82) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr257;
      $84 = HEAP8[$82>>0]|0;
      $conv258 = $84&255;
      $c$6$be = $conv258;
     } else {
      $call260 = (___shgetc($f)|0);
      $c$6$be = $call260;
     }
     $$sum127 = (($c$6$be) + 1)|0;
     $arrayidx237 = (9216 + ($$sum127)|0);
     $85 = HEAP8[$arrayidx237>>0]|0;
     $conv238 = $85&255;
     $cmp239 = ($conv238>>>0)<($base$addr$1135>>>0);
     $cmp242 = ($add249>>>0)<(119304647);
     $cmp242$ = $cmp239 & $cmp242;
     if ($cmp242$) {
      $conv238172 = $conv238;$x$2171 = $add249;
     } else {
      break;
     }
    }
    $151 = $add249;$152 = 0;$86 = $85;$c$6$lcssa = $c$6$be;
   } else {
    $151 = 0;$152 = 0;$86 = $49;$c$6$lcssa = $c$1136;
   }
   $conv267161 = $86&255;
   $cmp268162 = ($conv267161>>>0)<($base$addr$1135>>>0);
   if ($cmp268162) {
    $87 = (___udivdi3(-1,-1,($base$addr$1135|0),0)|0);
    $88 = tempRet0;
    $90 = $152;$93 = $151;$99 = $86;$c$7163 = $c$6$lcssa;
    while(1) {
     $89 = ($90>>>0)>($88>>>0);
     $91 = ($90|0)==($88|0);
     $92 = ($93>>>0)>($87>>>0);
     $94 = $91 & $92;
     $95 = $89 | $94;
     if ($95) {
      $149 = $93;$150 = $90;$base$addr$1134 = $base$addr$1135;$c$8 = $c$7163;
      label = 73;
      break L70;
     }
     $96 = (___muldi3(($93|0),($90|0),($base$addr$1135|0),0)|0);
     $97 = tempRet0;
     $98 = $99&255;
     $100 = $98 ^ -1;
     $101 = ($97>>>0)>(4294967295);
     $102 = ($97|0)==(-1);
     $103 = ($96>>>0)>($100>>>0);
     $104 = $102 & $103;
     $105 = $101 | $104;
     if ($105) {
      $149 = $93;$150 = $90;$base$addr$1134 = $base$addr$1135;$c$8 = $c$7163;
      label = 73;
      break L70;
     }
     $106 = (_i64Add(($98|0),0,($96|0),($97|0))|0);
     $107 = tempRet0;
     $108 = HEAP32[$rpos>>2]|0;
     $109 = HEAP32[$shend>>2]|0;
     $cmp292 = ($108>>>0)<($109>>>0);
     if ($cmp292) {
      $incdec$ptr296 = (($108) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr296;
      $110 = HEAP8[$108>>0]|0;
      $conv297 = $110&255;
      $c$7$be = $conv297;
     } else {
      $call299 = (___shgetc($f)|0);
      $c$7$be = $call299;
     }
     $$sum128 = (($c$7$be) + 1)|0;
     $arrayidx266 = (9216 + ($$sum128)|0);
     $111 = HEAP8[$arrayidx266>>0]|0;
     $conv267 = $111&255;
     $cmp268 = ($conv267>>>0)<($base$addr$1135>>>0);
     if ($cmp268) {
      $90 = $107;$93 = $106;$99 = $111;$c$7163 = $c$7$be;
     } else {
      $149 = $106;$150 = $107;$base$addr$1134 = $base$addr$1135;$c$8 = $c$7$be;
      label = 73;
      break;
     }
    }
   } else {
    $149 = $151;$150 = $152;$base$addr$1134 = $base$addr$1135;$c$8 = $c$6$lcssa;
    label = 73;
   }
  }
 } while(0);
 if ((label|0) == 73) {
  $$sum125 = (($c$8) + 1)|0;
  $arrayidx305 = (9216 + ($$sum125)|0);
  $112 = HEAP8[$arrayidx305>>0]|0;
  $conv306 = $112&255;
  $cmp307 = ($conv306>>>0)<($base$addr$1134>>>0);
  if ($cmp307) {
   while(1) {
    $113 = HEAP32[$rpos>>2]|0;
    $114 = HEAP32[$shend>>2]|0;
    $cmp319 = ($113>>>0)<($114>>>0);
    if ($cmp319) {
     $incdec$ptr323 = (($113) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr323;
     $115 = HEAP8[$113>>0]|0;
     $conv324 = $115&255;
     $c$9$be = $conv324;
    } else {
     $call326 = (___shgetc($f)|0);
     $c$9$be = $call326;
    }
    $$sum126 = (($c$9$be) + 1)|0;
    $arrayidx311 = (9216 + ($$sum126)|0);
    $116 = HEAP8[$arrayidx311>>0]|0;
    $conv312 = $116&255;
    $cmp313 = ($conv312>>>0)<($base$addr$1134>>>0);
    if (!($cmp313)) {
     break;
    }
   }
   $call330 = (___errno_location()|0);
   HEAP32[$call330>>2] = 34;
   $120 = $1;$123 = $0;
  } else {
   $120 = $150;$123 = $149;
  }
 }
 $117 = HEAP32[$shend>>2]|0;
 $tobool333 = ($117|0)==(0|0);
 if (!($tobool333)) {
  $118 = HEAP32[$rpos>>2]|0;
  $incdec$ptr336 = (($118) + -1|0);
  HEAP32[$rpos>>2] = $incdec$ptr336;
 }
 $119 = ($120>>>0)<($1>>>0);
 $121 = ($120|0)==($1|0);
 $122 = ($123>>>0)<($0>>>0);
 $124 = $121 & $122;
 $125 = $119 | $124;
 if (!($125)) {
  $126 = $0 & 1;
  $127 = ($126|0)==(0);
  $128 = (0)==(0);
  $129 = $127 & $128;
  $tobool345 = ($neg$0|0)==(0);
  $or$cond132 = $129 & $tobool345;
  if ($or$cond132) {
   $call347 = (___errno_location()|0);
   HEAP32[$call347>>2] = 34;
   $130 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $131 = tempRet0;
   $143 = $131;$144 = $130;
   tempRet0 = $143;
   STACKTOP = sp;return ($144|0);
  }
  $132 = ($120>>>0)>($1>>>0);
  $133 = ($120|0)==($1|0);
  $134 = ($123>>>0)>($0>>>0);
  $135 = $133 & $134;
  $136 = $132 | $135;
  if ($136) {
   $call353 = (___errno_location()|0);
   HEAP32[$call353>>2] = 34;
   $143 = $1;$144 = $0;
   tempRet0 = $143;
   STACKTOP = sp;return ($144|0);
  }
 }
 $137 = ($neg$0|0)<(0);
 $138 = $137 << 31 >> 31;
 $139 = $123 ^ $neg$0;
 $140 = $120 ^ $138;
 $141 = (_i64Subtract(($139|0),($140|0),($neg$0|0),($138|0))|0);
 $142 = tempRet0;
 $143 = $142;$144 = $141;
 tempRet0 = $143;
 STACKTOP = sp;return ($144|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$conv229$i = 0, $$inc66$i = 0, $$pre$i = 0, $$sub482$i = 0, $$y$3$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa376$i = 0, $a$0298$i = 0, $a$1$i = 0, $a$2$ph249$i = 0, $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$4238$i = 0, $a$5$i = 0, $add210115$i = 0;
 var $add214$i = 0, $add252$i = 0, $add256$i = 0.0, $add259$i = 0.0, $add265$i = 0, $add275$i = 0, $add287$i = 0, $add344$i = 0, $add368$i = 0, $add401$i = 0, $add414$i = 0, $add424$i = 0, $add435$i = 0, $add455$1$i = 0, $add460$1$i = 0, $add470$1$i = 0.0, $add476$i = 0, $add499$i = 0.0, $add501$i = 0, $add516$i = 0;
 var $add523$i = 0.0, $add530$i = 0.0, $add536$i = 0, $add543$i = 0.0, $add547$i = 0.0, $add562$i = 0.0, $add59$i = 0, $add73$i = 0, $add80$i = 0.0, $add86$i = 0.0, $and$i = 0, $and$i112 = 0, $and323$us$i = 0, $and323$us282$i = 0, $and346$i = 0, $and351$i = 0, $and354$i = 0, $and369$i = 0, $and411$i = 0, $and425$i = 0;
 var $and436$i = 0, $and445$i = 0, $and456$1$i = 0, $and456$i = 0, $and461$1$i = 0, $and502$i = 0, $and517$i = 0, $and537$i = 0, $and565$i = 0, $arrayidx = 0, $arrayidx186$i = 0, $arrayidx186$promoted$i = 0, $arrayidx219$i = 0, $arrayidx239$i = 0, $arrayidx256$i = 0, $arrayidx261$i = 0, $arrayidx284$i = 0, $arrayidx294$i = 0, $arrayidx306$us$i = 0, $arrayidx306$us266$i = 0;
 var $arrayidx352$i = 0, $arrayidx355$i = 0, $arrayidx358$i = 0, $arrayidx373$i = 0, $arrayidx374$i = 0, $arrayidx408$i = 0, $arrayidx440$i = 0, $arrayidx446$i = 0, $arrayidx463$1$i = 0, $arrayidx463$i = 0, $arrayidx468$1$i = 0, $arrayidx468$i = 0, $arrayidx509$i = 0, $arrayidx64$i = 0, $arrayidx77$i = 0, $arrayidx95 = 0, $bias$0$i = 0.0, $bias$096$i = 0.0, $bits$0$ph = 0, $bits$addr$0$i = 0;
 var $bits$addr$0$i114 = 0, $brmerge = 0, $brmerge176 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$1154 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$3150 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $c$addr$0$i = 0, $c$addr$1$be$i = 0, $c$addr$1$ph$i = 0, $c$addr$2$i = 0, $c$addr$3$be$i = 0;
 var $c$addr$3$lcssa$i = 0, $c$addr$3320$i = 0, $c$addr$3332$i = 0, $call = 0, $call$i = 0, $call$i90 = 0, $call101$i = 0, $call113 = 0, $call13$i = 0, $call133 = 0, $call135$i = 0, $call15$i = 0, $call157 = 0, $call165$i = 0, $call175$i = 0, $call187$i = 0, $call189 = 0, $call197$i = 0, $call215 = 0, $call229 = 0;
 var $call23 = 0, $call240$i = 0.0, $call242$i = 0.0, $call263$i = 0, $call266$i = 0.0, $call27$i = 0, $call32$i = 0, $call43 = 0, $call44$i = 0, $call493$i = 0.0, $call494$i = 0.0, $call496$i = 0.0, $call497$i = 0.0, $call556$i = 0.0, $call570$i = 0.0, $call593$i = 0, $call596$i = 0.0, $call6 = 0, $call91$i = 0, $carry$0300$i = 0;
 var $carry299$0$us$i = 0, $carry299$0$us264$i = 0, $carry299$1$lcssa$lcssa$i = 0, $carry299$1$us$i = 0, $carry299$1$us280$i = 0, $carry362$0241$i = 0, $cmp = 0, $cmp$i = 0, $cmp100$i = 0, $cmp101 = 0, $cmp106 = 0, $cmp121$i = 0, $cmp126 = 0, $cmp136 = 0, $cmp146$i = 0, $cmp149$i = 0, $cmp150 = 0, $cmp152$i = 0, $cmp16 = 0, $cmp161 = 0;
 var $cmp165 = 0, $cmp169 = 0, $cmp172 = 0, $cmp176 = 0, $cmp183304$i = 0, $cmp19$i = 0, $cmp19343$i = 0, $cmp194$i109 = 0, $cmp197$i = 0, $cmp2$i = 0, $cmp20$i = 0, $cmp200$i = 0, $cmp203$i = 0, $cmp203$i110 = 0, $cmp20397$i = 0, $cmp206$i = 0, $cmp211$i = 0, $cmp217 = 0, $cmp222 = 0, $cmp226$i = 0;
 var $cmp230$i = 0, $cmp231$i = 0, $cmp233 = 0, $cmp235$i = 0, $cmp244$i = 0, $cmp246$i = 0, $cmp25$i = 0, $cmp258$i = 0, $cmp258296$i = 0, $cmp26 = 0, $cmp269$i = 0, $cmp289$i = 0, $cmp29 = 0, $cmp292$i = 0, $cmp295$us257$i = 0, $cmp31 = 0, $cmp31$i = 0, $cmp31107$i = 0, $cmp324$us$i = 0, $cmp324$us283$i = 0;
 var $cmp327$us$i = 0, $cmp327$us284$i = 0, $cmp347$i = 0, $cmp36 = 0, $cmp365$i = 0, $cmp37$i = 0, $cmp370$i = 0, $cmp375$i = 0, $cmp38$i = 0, $cmp383$i = 0, $cmp38322$i = 0, $cmp390$i = 0, $cmp393$i = 0, $cmp397$i = 0, $cmp40$i = 0, $cmp403$i = 0, $cmp40323$i = 0, $cmp403236$i = 0, $cmp40334$i = 0, $cmp418$i = 0;
 var $cmp437$i = 0, $cmp457$1$i = 0, $cmp457$i = 0, $cmp478$i = 0, $cmp48$i = 0, $cmp483$i = 0, $cmp488$i = 0, $cmp49$i = 0, $cmp503$i = 0, $cmp51$i = 0, $cmp510$i = 0, $cmp518$i = 0, $cmp52$i = 0, $cmp525$i = 0, $cmp53 = 0, $cmp538$i = 0, $cmp54$i = 0, $cmp553$i = 0, $cmp567$i = 0, $cmp57 = 0;
 var $cmp571$i = 0, $cmp578$i = 0, $cmp586$i = 0, $cmp6$i = 0, $cmp62$i = 0, $cmp67$i = 0, $cmp70 = 0, $cmp8$i = 0, $cmp84$i = 0, $cmp9 = 0, $cmp91 = 0, $cmp94$i = 0, $cmp97 = 0, $cond = 0, $cond$i = 0, $cond135 = 0, $cond159 = 0, $cond231 = 0, $cond254$i = 0, $cond46$i = 0;
 var $conv = 0, $conv$i = 0, $conv$i88 = 0, $conv11$i = 0, $conv111 = 0, $conv12 = 0, $conv13$i = 0, $conv131 = 0, $conv135$i = 0.0, $conv140$i = 0.0, $conv155 = 0, $conv155$i = 0.0, $conv157$i = 0.0, $conv166$i = 0.0, $conv176$i = 0.0, $conv179$i = 0.0, $conv188$i = 0.0, $conv198$i = 0.0, $conv206$i = 0.0, $conv208$i = 0.0;
 var $conv21 = 0, $conv214$i = 0.0, $conv216$i = 0.0, $conv220$i = 0.0, $conv227 = 0, $conv234$i = 0.0, $conv236$i = 0.0, $conv240$i = 0.0, $conv241$i = 0.0, $conv25$i = 0, $conv253$pre$i = 0.0, $conv253$pre$phi$iZ2D = 0.0, $conv254$i = 0.0, $conv28 = 0, $conv30$i = 0, $conv41 = 0, $conv42$i = 0, $conv469$1$i = 0.0, $conv469$i = 0.0, $conv474$i = 0.0;
 var $conv54$lnz$0$i = 0, $conv78$i = 0.0, $conv84 = 0.0, $conv86 = 0.0, $conv89$i = 0, $conv96 = 0, $conv99$i = 0, $d$0$i = 0, $dec = 0, $dec192124 = 0, $dec192124$in = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $div$i = 0.0, $div$i107 = 0, $div221$i = 0.0, $div264$i = 0, $div267$i = 0, $e2$0$ph$i = 0;
 var $e2$0$us$i = 0, $e2$0$us253$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i84 = 0, $gotdig$2$i = 0, $gotdig$2$i94 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3313$i = 0, $gotdig$3328$i = 0;
 var $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i95 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1329$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$0153 = 0, $i$0235$i = 0, $i$1$i = 0, $i$1152 = 0, $i$2149 = 0, $i$3 = 0, $i$4 = 0, $inc = 0, $inc118 = 0;
 var $inc189$i = 0, $inc191$i = 0, $inc204 = 0, $inc251$x$4$i = 0, $inc283$i = 0, $inc388$i = 0, $inc559$i = 0.0, $inc583$i = 0, $inc66$i = 0, $inc70$i = 0, $inc70$k$0$i = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr$i87 = 0, $incdec$ptr10$i = 0, $incdec$ptr110 = 0, $incdec$ptr111$i = 0, $incdec$ptr113$i = 0, $incdec$ptr12$i = 0, $incdec$ptr120$i = 0;
 var $incdec$ptr128$i = 0, $incdec$ptr129$i = 0, $incdec$ptr130 = 0, $incdec$ptr143 = 0, $incdec$ptr154 = 0, $incdec$ptr159$i = 0, $incdec$ptr170$i = 0, $incdec$ptr184 = 0, $incdec$ptr199 = 0, $incdec$ptr20 = 0, $incdec$ptr212 = 0, $incdec$ptr226 = 0, $incdec$ptr24$i = 0, $incdec$ptr242 = 0, $incdec$ptr29$i = 0, $incdec$ptr40 = 0, $incdec$ptr41$i = 0, $incdec$ptr64 = 0, $incdec$ptr77 = 0, $incdec$ptr88$i = 0;
 var $incdec$ptr98$i = 0, $j$0$lcssa$i = 0, $j$0318$i = 0, $j$0331$i = 0, $j$2$i = 0, $j$3305$i = 0, $k$0$lcssa$i = 0, $k$0316$i = 0, $k$0330$i = 0, $k$2$i = 0, $k$3$i = 0, $k$4299$i = 0, $k$5$in$us$i = 0, $k$5$in$us263$i = 0, $k$5$us$i = 0, $k$5$us265$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us288$i = 0, $k$6239$i = 0, $lnz$0$lcssa$i = 0;
 var $lnz$0311$i = 0, $lnz$0327$i = 0, $lnz$2$i = 0, $mul = 0, $mul$i = 0, $mul$i98 = 0, $mul136$i = 0.0, $mul141$i = 0.0, $mul143$i = 0, $mul158$i = 0.0, $mul167$i = 0.0, $mul168$i = 0.0, $mul177$i = 0.0, $mul178$i = 0.0, $mul180$i = 0.0, $mul187$i = 0, $mul187306$i = 0, $mul189$i = 0.0, $mul190$i = 0.0, $mul199$i = 0.0;
 var $mul200$i = 0.0, $mul209$i = 0.0, $mul217$i = 0.0, $mul224$neg$i = 0, $mul237$i = 0.0, $mul241$i = 0.0, $mul255$i = 0.0, $mul258$i = 0.0, $mul268$i = 0, $mul417$i = 0, $mul465$1$i = 0.0, $mul475$i = 0.0, $mul522$i = 0.0, $mul529$i = 0.0, $mul542$i = 0.0, $mul546$i = 0.0, $mul582$i = 0.0, $mul79$i = 0.0, $mul85 = 0.0, $mul85$i = 0.0;
 var $notlhs = 0, $notrhs = 0, $or = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i104 = 0, $or$cond1$i = 0, $or$cond175$not = 0, $or$cond2 = 0, $or$cond2$i = 0, $or$cond223$i = 0, $or$cond224$us$i = 0, $or$cond224$us285$i = 0, $or$cond225$i = 0, $or$cond226$i = 0, $or$cond227$i = 0, $or$cond228$i = 0, $or$cond2324$i = 0, $or$cond81 = 0, $or$cond89$i = 0;
 var $or$cond90$i = 0, $or$i = 0, $or$i99 = 0, $or145$i = 0, $or232 = 0, $or356$i = 0, $or447$i = 0, $or94 = 0, $or99$i = 0, $rem$i = 0, $rem262$i = 0, $rem315$sink$off0$us$i = 0, $rem315$sink$off0$us279$i = 0, $retval$0 = 0.0, $rp$0$lcssa377$i = 0, $rp$0297$i = 0, $rp$1$i113 = 0, $rp$2$ph247$i = 0, $rp$3$i$ph = 0, $rp$3$ph244$i = 0;
 var $rp$4237$i = 0, $rp$5$i = 0, $rpos = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $shend = 0, $shl409$i = 0, $shr$i = 0, $shr230$i = 0, $shr413$i = 0, $shr416$i = 0, $sign$0 = 0, $storemerge$i = 0, $sub$i = 0, $sub1$i = 0, $sub13 = 0, $sub160 = 0, $sub164 = 0, $sub168 = 0;
 var $sub170$i = 0, $sub182$i = 0, $sub192$i = 0, $sub211$i = 0.0, $sub211$pn$i = 0.0, $sub218$i = 0, $sub225$i = 0, $sub238$i = 0, $sub239$i = 0, $sub255$i = 0, $sub260$i = 0.0, $sub276$i = 0, $sub286$i = 0, $sub300$lcssa$i = 0, $sub300$us$i = 0, $sub300$us259$i = 0, $sub301$us$i = 0, $sub301$us260$i = 0, $sub322$us$i = 0, $sub322$us281$i = 0;
 var $sub339$us$i = 0, $sub339$us291$i = 0, $sub345$i = 0, $sub350$i = 0, $sub353$i = 0, $sub37$i = 0, $sub37321$i = 0, $sub37333$i = 0, $sub410$i = 0, $sub427$i = 0, $sub444$i = 0, $sub462$1$i = 0, $sub462$i = 0, $sub477$i = 0, $sub492$i = 0, $sub495$i = 0, $sub498$i = 0.0, $sub51$i = 0, $sub552$i = 0, $sub563$i = 0.0;
 var $sub566$i = 0, $sub60$i = 0, $sub66$i = 0, $sub66$sub$i = 0, $sum$i = 0, $tobool = 0, $tobool$i = 0, $tobool105$i = 0, $tobool108$i = 0, $tobool110$i = 0, $tobool123$i = 0, $tobool125$i = 0, $tobool138$i = 0, $tobool138$i102 = 0, $tobool140 = 0, $tobool156$i = 0, $tobool167$i = 0, $tobool177$i = 0, $tobool180$i = 0, $tobool181 = 0;
 var $tobool193 = 0, $tobool193123 = 0, $tobool209 = 0, $tobool239 = 0, $tobool244$i = 0, $tobool247$i = 0, $tobool249$i = 0, $tobool261$i = 0, $tobool273$i = 0, $tobool281$i = 0, $tobool331$us$i = 0, $tobool331$us287$i = 0, $tobool342$us$i = 0, $tobool342$us295$i = 0, $tobool422$i = 0, $tobool433$i = 0, $tobool513$i = 0, $tobool55 = 0, $tobool557$i = 0, $tobool56$i = 0;
 var $tobool574$i = 0, $tobool589$i = 0, $tobool591$i = 0, $tobool61 = 0, $tobool82$i = 0, $tobool83$i = 0, $tobool88 = 0, $tobool95$i = 0, $tobool98$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$3104$i = 0, $x$4$lcssa$i = 0, $x$498$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$1$i = 0.0, $y$1$i115 = 0.0, $y$2$i = 0.0, $y$2$i116 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$399$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph248$i = 0, $z$1$us$i = 0, $z$1$us254$i = 0, $z$2$us$i = 0, $z$2$us262$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us290$i = 0, $z$4$i = 0, $z$5$ph$i = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $retval$0 = 0.0;
  STACKTOP = sp;return (+$retval$0);
 }
 $rpos = (($f) + 4|0);
 $shend = (($f) + 100|0);
 while(1) {
  $0 = HEAP32[$rpos>>2]|0;
  $1 = HEAP32[$shend>>2]|0;
  $cmp = ($0>>>0)<($1>>>0);
  if ($cmp) {
   $incdec$ptr = (($0) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr;
   $2 = HEAP8[$0>>0]|0;
   $conv = $2&255;
   $cond = $conv;
  } else {
   $call = (___shgetc($f)|0);
   $cond = $call;
  }
  $call6 = (_isspace($cond)|0);
  $tobool = ($call6|0)==(0);
  if ($tobool) {
   break;
  }
 }
 $cmp9 = ($cond|0)==(45);
 do {
  if ((($cond|0) == 43) | (($cond|0) == 45)) {
   $conv12 = $cmp9&1;
   $mul = $conv12 << 1;
   $sub13 = (1 - ($mul))|0;
   $3 = HEAP32[$rpos>>2]|0;
   $4 = HEAP32[$shend>>2]|0;
   $cmp16 = ($3>>>0)<($4>>>0);
   if ($cmp16) {
    $incdec$ptr20 = (($3) + 1|0);
    HEAP32[$rpos>>2] = $incdec$ptr20;
    $5 = HEAP8[$3>>0]|0;
    $conv21 = $5&255;
    $c$0 = $conv21;$sign$0 = $sub13;
    break;
   } else {
    $call23 = (___shgetc($f)|0);
    $c$0 = $call23;$sign$0 = $sub13;
    break;
   }
  } else {
   $c$0 = $cond;$sign$0 = 1;
  }
 } while(0);
 $c$1154 = $c$0;$i$0153 = 0;
 while(1) {
  $or = $c$1154 | 32;
  $arrayidx = (9496 + ($i$0153)|0);
  $6 = HEAP8[$arrayidx>>0]|0;
  $conv28 = $6 << 24 >> 24;
  $cmp29 = ($or|0)==($conv28|0);
  if (!($cmp29)) {
   $c$1$lcssa = $c$1154;$i$0$lcssa = $i$0153;
   break;
  }
  $cmp31 = ($i$0153>>>0)<(7);
  do {
   if ($cmp31) {
    $7 = HEAP32[$rpos>>2]|0;
    $8 = HEAP32[$shend>>2]|0;
    $cmp36 = ($7>>>0)<($8>>>0);
    if ($cmp36) {
     $incdec$ptr40 = (($7) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr40;
     $9 = HEAP8[$7>>0]|0;
     $conv41 = $9&255;
     $c$2 = $conv41;
     break;
    } else {
     $call43 = (___shgetc($f)|0);
     $c$2 = $call43;
     break;
    }
   } else {
    $c$2 = $c$1154;
   }
  } while(0);
  $inc = (($i$0153) + 1)|0;
  $cmp26 = ($inc>>>0)<(8);
  if ($cmp26) {
   $c$1154 = $c$2;$i$0153 = $inc;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $inc;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $cmp53 = ($i$0$lcssa>>>0)<(4);
   $tobool55 = ($pok|0)==(0);
   $or$cond = $cmp53 | $tobool55;
   if (!($or$cond)) {
    $cmp57 = ($i$0$lcssa|0)==(8);
    if ($cmp57) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $tobool88 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($tobool88) {
     $c$3150 = $c$1$lcssa;$i$2149 = 0;
     while(1) {
      $or94 = $c$3150 | 32;
      $arrayidx95 = (9512 + ($i$2149)|0);
      $13 = HEAP8[$arrayidx95>>0]|0;
      $conv96 = $13 << 24 >> 24;
      $cmp97 = ($or94|0)==($conv96|0);
      if (!($cmp97)) {
       $c$5 = $c$3150;$i$3 = $i$2149;
       break L34;
      }
      $cmp101 = ($i$2149>>>0)<(2);
      do {
       if ($cmp101) {
        $14 = HEAP32[$rpos>>2]|0;
        $15 = HEAP32[$shend>>2]|0;
        $cmp106 = ($14>>>0)<($15>>>0);
        if ($cmp106) {
         $incdec$ptr110 = (($14) + 1|0);
         HEAP32[$rpos>>2] = $incdec$ptr110;
         $16 = HEAP8[$14>>0]|0;
         $conv111 = $16&255;
         $c$4 = $conv111;
         break;
        } else {
         $call113 = (___shgetc($f)|0);
         $c$4 = $call113;
         break;
        }
       } else {
        $c$4 = $c$3150;
       }
      } while(0);
      $inc118 = (($i$2149) + 1)|0;
      $cmp91 = ($inc118>>>0)<(3);
      if ($cmp91) {
       $c$3150 = $c$4;$i$2149 = $inc118;
      } else {
       $c$5 = $c$4;$i$3 = $inc118;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 3)) {
    $17 = HEAP32[$rpos>>2]|0;
    $18 = HEAP32[$shend>>2]|0;
    $cmp126 = ($17>>>0)<($18>>>0);
    if ($cmp126) {
     $incdec$ptr130 = (($17) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr130;
     $19 = HEAP8[$17>>0]|0;
     $conv131 = $19&255;
     $cond135 = $conv131;
    } else {
     $call133 = (___shgetc($f)|0);
     $cond135 = $call133;
    }
    $cmp136 = ($cond135|0)==(40);
    if ($cmp136) {
     $i$4 = 1;
    } else {
     $20 = HEAP32[$shend>>2]|0;
     $tobool140 = ($20|0)==(0|0);
     if ($tobool140) {
      $retval$0 = nan;
      STACKTOP = sp;return (+$retval$0);
     }
     $21 = HEAP32[$rpos>>2]|0;
     $incdec$ptr143 = (($21) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr143;
     $retval$0 = nan;
     STACKTOP = sp;return (+$retval$0);
    }
    while(1) {
     $22 = HEAP32[$rpos>>2]|0;
     $23 = HEAP32[$shend>>2]|0;
     $cmp150 = ($22>>>0)<($23>>>0);
     if ($cmp150) {
      $incdec$ptr154 = (($22) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr154;
      $24 = HEAP8[$22>>0]|0;
      $conv155 = $24&255;
      $cond159 = $conv155;
     } else {
      $call157 = (___shgetc($f)|0);
      $cond159 = $call157;
     }
     $sub160 = (($cond159) + -48)|0;
     $cmp161 = ($sub160>>>0)<(10);
     $sub164 = (($cond159) + -65)|0;
     $cmp165 = ($sub164>>>0)<(26);
     $or$cond81 = $cmp161 | $cmp165;
     if (!($or$cond81)) {
      $sub168 = (($cond159) + -97)|0;
      $cmp169 = ($sub168>>>0)<(26);
      $cmp172 = ($cond159|0)==(95);
      $or$cond2 = $cmp169 | $cmp172;
      if (!($or$cond2)) {
       break;
      }
     }
     $inc204 = (($i$4) + 1)|0;
     $i$4 = $inc204;
    }
    $cmp176 = ($cond159|0)==(41);
    if ($cmp176) {
     $retval$0 = nan;
     STACKTOP = sp;return (+$retval$0);
    }
    $25 = HEAP32[$shend>>2]|0;
    $tobool181 = ($25|0)==(0|0);
    if (!($tobool181)) {
     $26 = HEAP32[$rpos>>2]|0;
     $incdec$ptr184 = (($26) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr184;
    }
    if ($tobool55) {
     $call189 = (___errno_location()|0);
     HEAP32[$call189>>2] = 22;
     ___shlim($f,0);
     $retval$0 = 0.0;
     STACKTOP = sp;return (+$retval$0);
    }
    $tobool193123 = ($i$4|0)==(0);
    $brmerge176 = $tobool193123 | $tobool181;
    if ($brmerge176) {
     $retval$0 = nan;
     STACKTOP = sp;return (+$retval$0);
    } else {
     $dec192124$in = $i$4;
    }
    while(1) {
     $dec192124 = (($dec192124$in) + -1)|0;
     $27 = HEAP32[$rpos>>2]|0;
     $incdec$ptr199 = (($27) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr199;
     $tobool193 = ($dec192124|0)==(0);
     if ($tobool193) {
      $retval$0 = nan;
      break;
     } else {
      $dec192124$in = $dec192124;
     }
    }
    STACKTOP = sp;return (+$retval$0);
   } else if ((($i$3|0) == 0)) {
    $cmp217 = ($c$5|0)==(48);
    do {
     if ($cmp217) {
      $30 = HEAP32[$rpos>>2]|0;
      $31 = HEAP32[$shend>>2]|0;
      $cmp222 = ($30>>>0)<($31>>>0);
      if ($cmp222) {
       $incdec$ptr226 = (($30) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr226;
       $32 = HEAP8[$30>>0]|0;
       $conv227 = $32&255;
       $cond231 = $conv227;
      } else {
       $call229 = (___shgetc($f)|0);
       $cond231 = $call229;
      }
      $or232 = $cond231 | 32;
      $cmp233 = ($or232|0)==(120);
      if (!($cmp233)) {
       $134 = HEAP32[$shend>>2]|0;
       $tobool239 = ($134|0)==(0|0);
       if ($tobool239) {
        $c$6 = 48;
        break;
       }
       $135 = HEAP32[$rpos>>2]|0;
       $incdec$ptr242 = (($135) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr242;
       $c$6 = 48;
       break;
      }
      $33 = HEAP32[$rpos>>2]|0;
      $34 = HEAP32[$shend>>2]|0;
      $cmp$i = ($33>>>0)<($34>>>0);
      if ($cmp$i) {
       $incdec$ptr$i = (($33) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr$i;
       $35 = HEAP8[$33>>0]|0;
       $conv$i = $35&255;
       $c$0$i = $conv$i;$gotdig$0$i = 0;
      } else {
       $call$i = (___shgetc($f)|0);
       $c$0$i = $call$i;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $50 = 0;$53 = 0;$70 = 0;$72 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $36 = HEAP32[$rpos>>2]|0;
       $37 = HEAP32[$shend>>2]|0;
       $cmp6$i = ($36>>>0)<($37>>>0);
       if ($cmp6$i) {
        $incdec$ptr10$i = (($36) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr10$i;
        $38 = HEAP8[$36>>0]|0;
        $conv11$i = $38&255;
        $c$0$i = $conv11$i;$gotdig$0$i = 1;
        continue;
       } else {
        $call13$i = (___shgetc($f)|0);
        $c$0$i = $call13$i;$gotdig$0$i = 1;
        continue;
       }
      }
      L107: do {
       if ((label|0) == 70) {
        $39 = HEAP32[$rpos>>2]|0;
        $40 = HEAP32[$shend>>2]|0;
        $cmp20$i = ($39>>>0)<($40>>>0);
        if ($cmp20$i) {
         $incdec$ptr24$i = (($39) + 1|0);
         HEAP32[$rpos>>2] = $incdec$ptr24$i;
         $41 = HEAP8[$39>>0]|0;
         $conv25$i = $41&255;
         $c$1$ph$i = $conv25$i;
        } else {
         $call27$i = (___shgetc($f)|0);
         $c$1$ph$i = $call27$i;
        }
        $cmp31107$i = ($c$1$ph$i|0)==(48);
        if ($cmp31107$i) {
         $45 = -1;$46 = -1;
         while(1) {
          $42 = HEAP32[$rpos>>2]|0;
          $43 = HEAP32[$shend>>2]|0;
          $cmp37$i = ($42>>>0)<($43>>>0);
          if ($cmp37$i) {
           $incdec$ptr41$i = (($42) + 1|0);
           HEAP32[$rpos>>2] = $incdec$ptr41$i;
           $44 = HEAP8[$42>>0]|0;
           $conv42$i = $44&255;
           $cond46$i = $conv42$i;
          } else {
           $call44$i = (___shgetc($f)|0);
           $cond46$i = $call44$i;
          }
          $cmp31$i = ($cond46$i|0)==(48);
          if (!($cmp31$i)) {
           $50 = 0;$53 = 0;$70 = $45;$72 = $46;$c$2$i = $cond46$i;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break L107;
          }
          $47 = (_i64Add(($45|0),($46|0),-1,-1)|0);
          $48 = tempRet0;
          $45 = $47;$46 = $48;
         }
        } else {
         $50 = 0;$53 = 0;$70 = 0;$72 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
      } while(0);
      L120: while(1) {
       $sub$i = (($c$2$i) + -48)|0;
       $cmp49$i = ($sub$i>>>0)<(10);
       do {
        if ($cmp49$i) {
         $d$0$i = $sub$i;
         label = 84;
        } else {
         $or$i = $c$2$i | 32;
         $sub51$i = (($or$i) + -97)|0;
         $cmp52$i = ($sub51$i>>>0)<(6);
         $cmp54$i = ($c$2$i|0)==(46);
         $or$cond$i = $cmp52$i | $cmp54$i;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L120;
         }
         if ($cmp54$i) {
          $tobool$i = ($gotrad$0$i|0)==(0);
          if ($tobool$i) {
           $252 = $53;$253 = $50;$254 = $53;$255 = $50;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L120;
          }
         } else {
          $cmp62$i = ($c$2$i|0)>(57);
          $sub66$i = (($or$i) + -87)|0;
          $sub66$sub$i = $cmp62$i ? $sub66$i : $sub$i;
          $d$0$i = $sub66$sub$i;
          label = 84;
          break;
         }
        }
       } while(0);
       if ((label|0) == 84) {
        label = 0;
        $49 = ($50|0)<(0);
        $51 = ($50|0)==(0);
        $52 = ($53>>>0)<(8);
        $54 = $51 & $52;
        $55 = $49 | $54;
        do {
         if ($55) {
          $mul$i = $x$0$i << 4;
          $add73$i = (($d$0$i) + ($mul$i))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $add73$i;$y$1$i = $y$0$i;
         } else {
          $56 = ($50|0)<(0);
          $57 = ($50|0)==(0);
          $58 = ($53>>>0)<(14);
          $59 = $57 & $58;
          $60 = $56 | $59;
          if ($60) {
           $conv78$i = (+($d$0$i|0));
           $div$i = $scale$0$i * 0.0625;
           $mul79$i = $div$i * $conv78$i;
           $add80$i = $y$0$i + $mul79$i;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $div$i;$x$1$i = $x$0$i;$y$1$i = $add80$i;
           break;
          }
          $tobool82$i = ($d$0$i|0)!=(0);
          $tobool83$i = ($gottail$0$i|0)==(0);
          $or$cond89$i = $tobool82$i & $tobool83$i;
          if ($or$cond89$i) {
           $mul85$i = $scale$0$i * 0.5;
           $add86$i = $y$0$i + $mul85$i;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $add86$i;
          } else {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          }
         }
        } while(0);
        $61 = (_i64Add(($53|0),($50|0),1,0)|0);
        $62 = tempRet0;
        $252 = $70;$253 = $72;$254 = $61;$255 = $62;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $63 = HEAP32[$rpos>>2]|0;
       $64 = HEAP32[$shend>>2]|0;
       $cmp94$i = ($63>>>0)<($64>>>0);
       if ($cmp94$i) {
        $incdec$ptr98$i = (($63) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr98$i;
        $65 = HEAP8[$63>>0]|0;
        $conv99$i = $65&255;
        $50 = $255;$53 = $254;$70 = $252;$72 = $253;$c$2$i = $conv99$i;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $call101$i = (___shgetc($f)|0);
        $50 = $255;$53 = $254;$70 = $252;$72 = $253;$c$2$i = $call101$i;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $tobool105$i = ($gotdig$2$i|0)==(0);
      if ($tobool105$i) {
       $66 = HEAP32[$shend>>2]|0;
       $tobool108$i = ($66|0)==(0|0);
       if (!($tobool108$i)) {
        $67 = HEAP32[$rpos>>2]|0;
        $incdec$ptr111$i = (($67) + -1|0);
        HEAP32[$rpos>>2] = $incdec$ptr111$i;
       }
       if ($tobool55) {
        ___shlim($f,0);
       } else {
        if (!($tobool108$i)) {
         $68 = HEAP32[$rpos>>2]|0;
         $incdec$ptr120$i = (($68) + -1|0);
         HEAP32[$rpos>>2] = $incdec$ptr120$i;
         $tobool123$i = ($gotrad$0$i|0)==(0);
         if (!($tobool123$i)) {
          $incdec$ptr129$i = (($68) + -2|0);
          HEAP32[$rpos>>2] = $incdec$ptr129$i;
         }
        }
       }
       $conv135$i = (+($sign$0|0));
       $mul136$i = $conv135$i * 0.0;
       $retval$0 = $mul136$i;
       STACKTOP = sp;return (+$retval$0);
      }
      $tobool138$i = ($gotrad$0$i|0)==(0);
      $69 = $tobool138$i ? $53 : $70;
      $71 = $tobool138$i ? $50 : $72;
      $73 = ($50|0)<(0);
      $74 = ($50|0)==(0);
      $75 = ($53>>>0)<(8);
      $76 = $74 & $75;
      $77 = $73 | $76;
      if ($77) {
       $78 = $53;$79 = $50;$x$3104$i = $x$0$i;
       while(1) {
        $mul143$i = $x$3104$i << 4;
        $80 = (_i64Add(($78|0),($79|0),1,0)|0);
        $81 = tempRet0;
        $82 = ($81|0)<(0);
        $83 = ($81|0)==(0);
        $84 = ($80>>>0)<(8);
        $85 = $83 & $84;
        $86 = $82 | $85;
        if ($86) {
         $78 = $80;$79 = $81;$x$3104$i = $mul143$i;
        } else {
         $x$3$lcssa$i = $mul143$i;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $or145$i = $c$2$lcssa$i | 32;
      $cmp146$i = ($or145$i|0)==(112);
      do {
       if ($cmp146$i) {
        $87 = (_scanexp($f,$pok)|0);
        $88 = tempRet0;
        $89 = ($87|0)==(0);
        $90 = ($88|0)==(-2147483648);
        $91 = $89 & $90;
        if ($91) {
         if ($tobool55) {
          ___shlim($f,0);
          $retval$0 = 0.0;
          STACKTOP = sp;return (+$retval$0);
         } else {
          $92 = HEAP32[$shend>>2]|0;
          $tobool156$i = ($92|0)==(0|0);
          if ($tobool156$i) {
           $100 = 0;$101 = 0;
           break;
          }
          $93 = HEAP32[$rpos>>2]|0;
          $incdec$ptr159$i = (($93) + -1|0);
          HEAP32[$rpos>>2] = $incdec$ptr159$i;
          $100 = 0;$101 = 0;
          break;
         }
        } else {
         $100 = $87;$101 = $88;
        }
       } else {
        $94 = HEAP32[$shend>>2]|0;
        $tobool167$i = ($94|0)==(0|0);
        if ($tobool167$i) {
         $100 = 0;$101 = 0;
        } else {
         $95 = HEAP32[$rpos>>2]|0;
         $incdec$ptr170$i = (($95) + -1|0);
         HEAP32[$rpos>>2] = $incdec$ptr170$i;
         $100 = 0;$101 = 0;
        }
       }
      } while(0);
      $96 = (_bitshift64Shl(($69|0),($71|0),2)|0);
      $97 = tempRet0;
      $98 = (_i64Add(($96|0),($97|0),-32,-1)|0);
      $99 = tempRet0;
      $102 = (_i64Add(($98|0),($99|0),($100|0),($101|0))|0);
      $103 = tempRet0;
      $tobool177$i = ($x$3$lcssa$i|0)==(0);
      if ($tobool177$i) {
       $conv179$i = (+($sign$0|0));
       $mul180$i = $conv179$i * 0.0;
       $retval$0 = $mul180$i;
       STACKTOP = sp;return (+$retval$0);
      }
      $sub182$i = (0 - ($emin$0$ph))|0;
      $104 = ($103|0)>(0);
      $105 = ($103|0)==(0);
      $106 = ($102>>>0)>($sub182$i>>>0);
      $107 = $105 & $106;
      $108 = $104 | $107;
      if ($108) {
       $call187$i = (___errno_location()|0);
       HEAP32[$call187$i>>2] = 34;
       $conv188$i = (+($sign$0|0));
       $mul189$i = $conv188$i * 1.79769313486231570815E+308;
       $mul190$i = $mul189$i * 1.79769313486231570815E+308;
       $retval$0 = $mul190$i;
       STACKTOP = sp;return (+$retval$0);
      }
      $sub192$i = (($emin$0$ph) + -106)|0;
      $109 = ($sub192$i|0)<(0);
      $110 = $109 << 31 >> 31;
      $111 = ($103|0)<($110|0);
      $112 = ($103|0)==($110|0);
      $113 = ($102>>>0)<($sub192$i>>>0);
      $114 = $112 & $113;
      $115 = $111 | $114;
      if ($115) {
       $call197$i = (___errno_location()|0);
       HEAP32[$call197$i>>2] = 34;
       $conv198$i = (+($sign$0|0));
       $mul199$i = $conv198$i * 2.22507385850720138309E-308;
       $mul200$i = $mul199$i * 2.22507385850720138309E-308;
       $retval$0 = $mul200$i;
       STACKTOP = sp;return (+$retval$0);
      }
      $cmp20397$i = ($x$3$lcssa$i|0)>(-1);
      if ($cmp20397$i) {
       $116 = $102;$117 = $103;$x$498$i = $x$3$lcssa$i;$y$399$i = $y$0$i;
       while(1) {
        $cmp206$i = !($y$399$i >= 0.5);
        $add214$i = $x$498$i << 1;
        if ($cmp206$i) {
         $sub211$pn$i = $y$399$i;$x$5$i = $add214$i;
        } else {
         $add210115$i = $add214$i | 1;
         $sub211$i = $y$399$i + -1.0;
         $sub211$pn$i = $sub211$i;$x$5$i = $add210115$i;
        }
        $y$4$i = $y$399$i + $sub211$pn$i;
        $118 = (_i64Add(($116|0),($117|0),-1,-1)|0);
        $119 = tempRet0;
        $cmp203$i = ($x$5$i|0)>(-1);
        if ($cmp203$i) {
         $116 = $118;$117 = $119;$x$498$i = $x$5$i;$y$399$i = $y$4$i;
        } else {
         $124 = $118;$125 = $119;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $124 = $102;$125 = $103;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $120 = ($emin$0$ph|0)<(0);
      $121 = $120 << 31 >> 31;
      $122 = (_i64Subtract(32,0,($emin$0$ph|0),($121|0))|0);
      $123 = tempRet0;
      $126 = (_i64Add(($124|0),($125|0),($122|0),($123|0))|0);
      $127 = tempRet0;
      $128 = (0)>($127|0);
      $129 = (0)==($127|0);
      $130 = ($bits$0$ph>>>0)>($126>>>0);
      $131 = $129 & $130;
      $132 = $128 | $131;
      if ($132) {
       $cmp230$i = ($126|0)<(0);
       $$conv229$i = $cmp230$i ? 0 : $126;
       $bits$addr$0$i = $$conv229$i;
      } else {
       $bits$addr$0$i = $bits$0$ph;
      }
      $cmp235$i = ($bits$addr$0$i|0)<(53);
      do {
       if ($cmp235$i) {
        $sub239$i = (84 - ($bits$addr$0$i))|0;
        $call240$i = (+_scalbn(1.0,$sub239$i));
        $conv241$i = (+($sign$0|0));
        $call242$i = (+_copysignl((+$call240$i),(+$conv241$i)));
        $cmp244$i = ($bits$addr$0$i|0)<(32);
        $tobool247$i = $y$3$lcssa$i != 0.0;
        $or$cond90$i = $cmp244$i & $tobool247$i;
        if (!($or$cond90$i)) {
         $bias$096$i = $call242$i;$conv253$pre$phi$iZ2D = $conv241$i;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
         break;
        }
        $and$i = $x$4$lcssa$i & 1;
        $tobool249$i = ($and$i|0)==(0);
        $133 = $and$i ^ 1;
        $inc251$x$4$i = (($133) + ($x$4$lcssa$i))|0;
        $$y$3$i = $tobool249$i ? 0.0 : $y$3$lcssa$i;
        $bias$096$i = $call242$i;$conv253$pre$phi$iZ2D = $conv241$i;$x$6$i = $inc251$x$4$i;$y$5$i = $$y$3$i;
       } else {
        $conv253$pre$i = (+($sign$0|0));
        $bias$096$i = 0.0;$conv253$pre$phi$iZ2D = $conv253$pre$i;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
       }
      } while(0);
      $conv254$i = (+($x$6$i>>>0));
      $mul255$i = $conv253$pre$phi$iZ2D * $conv254$i;
      $add256$i = $bias$096$i + $mul255$i;
      $mul258$i = $conv253$pre$phi$iZ2D * $y$5$i;
      $add259$i = $mul258$i + $add256$i;
      $sub260$i = $add259$i - $bias$096$i;
      $tobool261$i = $sub260$i != 0.0;
      if (!($tobool261$i)) {
       $call263$i = (___errno_location()|0);
       HEAP32[$call263$i>>2] = 34;
      }
      $call266$i = (+_scalbnl($sub260$i,$124));
      $retval$0 = $call266$i;
      STACKTOP = sp;return (+$retval$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $sub1$i = (0 - ($sum$i))|0;
    $c$addr$0$i = $c$6;$gotdig$0$i84 = 0;
    while(1) {
     if ((($c$addr$0$i|0) == 46)) {
      label = 139;
      break;
     } else if (!((($c$addr$0$i|0) == 48))) {
      $256 = 0;$257 = 0;$c$addr$2$i = $c$addr$0$i;$gotdig$2$i94 = $gotdig$0$i84;$gotrad$0$i95 = 0;
      break;
     }
     $136 = HEAP32[$rpos>>2]|0;
     $137 = HEAP32[$shend>>2]|0;
     $cmp2$i = ($136>>>0)<($137>>>0);
     if ($cmp2$i) {
      $incdec$ptr$i87 = (($136) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr$i87;
      $138 = HEAP8[$136>>0]|0;
      $conv$i88 = $138&255;
      $c$addr$0$i = $conv$i88;$gotdig$0$i84 = 1;
      continue;
     } else {
      $call$i90 = (___shgetc($f)|0);
      $c$addr$0$i = $call$i90;$gotdig$0$i84 = 1;
      continue;
     }
    }
    L209: do {
     if ((label|0) == 139) {
      $139 = HEAP32[$rpos>>2]|0;
      $140 = HEAP32[$shend>>2]|0;
      $cmp8$i = ($139>>>0)<($140>>>0);
      if ($cmp8$i) {
       $incdec$ptr12$i = (($139) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr12$i;
       $141 = HEAP8[$139>>0]|0;
       $conv13$i = $141&255;
       $c$addr$1$ph$i = $conv13$i;
      } else {
       $call15$i = (___shgetc($f)|0);
       $c$addr$1$ph$i = $call15$i;
      }
      $cmp19343$i = ($c$addr$1$ph$i|0)==(48);
      if ($cmp19343$i) {
       $145 = -1;$146 = -1;
       while(1) {
        $142 = HEAP32[$rpos>>2]|0;
        $143 = HEAP32[$shend>>2]|0;
        $cmp25$i = ($142>>>0)<($143>>>0);
        if ($cmp25$i) {
         $incdec$ptr29$i = (($142) + 1|0);
         HEAP32[$rpos>>2] = $incdec$ptr29$i;
         $144 = HEAP8[$142>>0]|0;
         $conv30$i = $144&255;
         $c$addr$1$be$i = $conv30$i;
        } else {
         $call32$i = (___shgetc($f)|0);
         $c$addr$1$be$i = $call32$i;
        }
        $cmp19$i = ($c$addr$1$be$i|0)==(48);
        if (!($cmp19$i)) {
         $256 = $145;$257 = $146;$c$addr$2$i = $c$addr$1$be$i;$gotdig$2$i94 = 1;$gotrad$0$i95 = 1;
         break L209;
        }
        $147 = (_i64Add(($145|0),($146|0),-1,-1)|0);
        $148 = tempRet0;
        $145 = $147;$146 = $148;
       }
      } else {
       $256 = 0;$257 = 0;$c$addr$2$i = $c$addr$1$ph$i;$gotdig$2$i94 = $gotdig$0$i84;$gotrad$0$i95 = 1;
      }
     }
    } while(0);
    HEAP32[$x$i>>2] = 0;
    $sub37321$i = (($c$addr$2$i) + -48)|0;
    $cmp38322$i = ($sub37321$i>>>0)<(10);
    $cmp40323$i = ($c$addr$2$i|0)==(46);
    $or$cond2324$i = $cmp38322$i | $cmp40323$i;
    L223: do {
     if ($or$cond2324$i) {
      $arrayidx77$i = (($x$i) + 496|0);
      $149 = 0;$150 = 0;$258 = $256;$259 = $257;$c$addr$3332$i = $c$addr$2$i;$cmp40334$i = $cmp40323$i;$gotdig$3328$i = $gotdig$2$i94;$gotrad$1329$i = $gotrad$0$i95;$j$0331$i = 0;$k$0330$i = 0;$lnz$0327$i = 0;$sub37333$i = $sub37321$i;
      while(1) {
       do {
        if ($cmp40334$i) {
         $cond$i = ($gotrad$1329$i|0)==(0);
         if ($cond$i) {
          $260 = $149;$261 = $150;$262 = $149;$263 = $150;$gotdig$4$i = $gotdig$3328$i;$gotrad$2$i = 1;$j$2$i = $j$0331$i;$k$2$i = $k$0330$i;$lnz$2$i = $lnz$0327$i;
         } else {
          $173 = $258;$174 = $259;$182 = $149;$185 = $150;$c$addr$3320$i = $c$addr$3332$i;$gotdig$3313$i = $gotdig$3328$i;$j$0318$i = $j$0331$i;$k$0316$i = $k$0330$i;$lnz$0311$i = $lnz$0327$i;
          break L223;
         }
        } else {
         $cmp48$i = ($k$0330$i|0)<(125);
         $151 = (_i64Add(($149|0),($150|0),1,0)|0);
         $152 = tempRet0;
         $cmp51$i = ($c$addr$3332$i|0)!=(48);
         if (!($cmp48$i)) {
          if (!($cmp51$i)) {
           $260 = $258;$261 = $259;$262 = $151;$263 = $152;$gotdig$4$i = $gotdig$3328$i;$gotrad$2$i = $gotrad$1329$i;$j$2$i = $j$0331$i;$k$2$i = $k$0330$i;$lnz$2$i = $lnz$0327$i;
           break;
          }
          $154 = HEAP32[$arrayidx77$i>>2]|0;
          $or$i99 = $154 | 1;
          HEAP32[$arrayidx77$i>>2] = $or$i99;
          $260 = $258;$261 = $259;$262 = $151;$263 = $152;$gotdig$4$i = $gotdig$3328$i;$gotrad$2$i = $gotrad$1329$i;$j$2$i = $j$0331$i;$k$2$i = $k$0330$i;$lnz$2$i = $lnz$0327$i;
          break;
         }
         $conv54$lnz$0$i = $cmp51$i ? $151 : $lnz$0327$i;
         $tobool56$i = ($j$0331$i|0)==(0);
         $arrayidx64$i = (($x$i) + ($k$0330$i<<2)|0);
         if ($tobool56$i) {
          $storemerge$i = $sub37333$i;
         } else {
          $153 = HEAP32[$arrayidx64$i>>2]|0;
          $mul$i98 = ($153*10)|0;
          $add59$i = (($c$addr$3332$i) + -48)|0;
          $sub60$i = (($add59$i) + ($mul$i98))|0;
          $storemerge$i = $sub60$i;
         }
         HEAP32[$arrayidx64$i>>2] = $storemerge$i;
         $inc66$i = (($j$0331$i) + 1)|0;
         $cmp67$i = ($inc66$i|0)==(9);
         $inc70$i = $cmp67$i&1;
         $inc70$k$0$i = (($inc70$i) + ($k$0330$i))|0;
         $$inc66$i = $cmp67$i ? 0 : $inc66$i;
         $260 = $258;$261 = $259;$262 = $151;$263 = $152;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1329$i;$j$2$i = $$inc66$i;$k$2$i = $inc70$k$0$i;$lnz$2$i = $conv54$lnz$0$i;
        }
       } while(0);
       $155 = HEAP32[$rpos>>2]|0;
       $156 = HEAP32[$shend>>2]|0;
       $cmp84$i = ($155>>>0)<($156>>>0);
       if ($cmp84$i) {
        $incdec$ptr88$i = (($155) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr88$i;
        $157 = HEAP8[$155>>0]|0;
        $conv89$i = $157&255;
        $c$addr$3$be$i = $conv89$i;
       } else {
        $call91$i = (___shgetc($f)|0);
        $c$addr$3$be$i = $call91$i;
       }
       $sub37$i = (($c$addr$3$be$i) + -48)|0;
       $cmp38$i = ($sub37$i>>>0)<(10);
       $cmp40$i = ($c$addr$3$be$i|0)==(46);
       $or$cond2$i = $cmp38$i | $cmp40$i;
       if ($or$cond2$i) {
        $149 = $262;$150 = $263;$258 = $260;$259 = $261;$c$addr$3332$i = $c$addr$3$be$i;$cmp40334$i = $cmp40$i;$gotdig$3328$i = $gotdig$4$i;$gotrad$1329$i = $gotrad$2$i;$j$0331$i = $j$2$i;$k$0330$i = $k$2$i;$lnz$0327$i = $lnz$2$i;$sub37333$i = $sub37$i;
       } else {
        $159 = $262;$160 = $260;$162 = $263;$163 = $261;$c$addr$3$lcssa$i = $c$addr$3$be$i;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 162;
        break;
       }
      }
     } else {
      $159 = 0;$160 = $256;$162 = 0;$163 = $257;$c$addr$3$lcssa$i = $c$addr$2$i;$gotdig$3$lcssa$i = $gotdig$2$i94;$gotrad$1$lcssa$i = $gotrad$0$i95;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 162;
     }
    } while(0);
    if ((label|0) == 162) {
     $tobool95$i = ($gotrad$1$lcssa$i|0)==(0);
     $158 = $tobool95$i ? $159 : $160;
     $161 = $tobool95$i ? $162 : $163;
     $173 = $158;$174 = $161;$182 = $159;$185 = $162;$c$addr$3320$i = $c$addr$3$lcssa$i;$gotdig$3313$i = $gotdig$3$lcssa$i;$j$0318$i = $j$0$lcssa$i;$k$0316$i = $k$0$lcssa$i;$lnz$0311$i = $lnz$0$lcssa$i;
    }
    $tobool98$i = ($gotdig$3313$i|0)!=(0);
    if ($tobool98$i) {
     $or99$i = $c$addr$3320$i | 32;
     $cmp100$i = ($or99$i|0)==(101);
     if ($cmp100$i) {
      $164 = (_scanexp($f,$pok)|0);
      $165 = tempRet0;
      $166 = ($164|0)==(0);
      $167 = ($165|0)==(-2147483648);
      $168 = $166 & $167;
      do {
       if ($168) {
        if ($tobool55) {
         ___shlim($f,0);
         $retval$0 = 0.0;
         STACKTOP = sp;return (+$retval$0);
        } else {
         $169 = HEAP32[$shend>>2]|0;
         $tobool110$i = ($169|0)==(0|0);
         if ($tobool110$i) {
          $171 = 0;$172 = 0;
          break;
         }
         $170 = HEAP32[$rpos>>2]|0;
         $incdec$ptr113$i = (($170) + -1|0);
         HEAP32[$rpos>>2] = $incdec$ptr113$i;
         $171 = 0;$172 = 0;
         break;
        }
       } else {
        $171 = $164;$172 = $165;
       }
      } while(0);
      $175 = (_i64Add(($171|0),($172|0),($173|0),($174|0))|0);
      $176 = tempRet0;
      $181 = $175;$184 = $176;
     } else {
      label = 171;
     }
    } else {
     label = 171;
    }
    if ((label|0) == 171) {
     $cmp121$i = ($c$addr$3320$i|0)>(-1);
     if ($cmp121$i) {
      $177 = HEAP32[$shend>>2]|0;
      $tobool125$i = ($177|0)==(0|0);
      if ($tobool125$i) {
       $181 = $173;$184 = $174;
      } else {
       $178 = HEAP32[$rpos>>2]|0;
       $incdec$ptr128$i = (($178) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr128$i;
       $181 = $173;$184 = $174;
      }
     } else {
      $181 = $173;$184 = $174;
     }
    }
    if (!($tobool98$i)) {
     $call135$i = (___errno_location()|0);
     HEAP32[$call135$i>>2] = 22;
     ___shlim($f,0);
     $retval$0 = 0.0;
     STACKTOP = sp;return (+$retval$0);
    }
    $179 = HEAP32[$x$i>>2]|0;
    $tobool138$i102 = ($179|0)==(0);
    if ($tobool138$i102) {
     $conv140$i = (+($sign$0|0));
     $mul141$i = $conv140$i * 0.0;
     $retval$0 = $mul141$i;
     STACKTOP = sp;return (+$retval$0);
    }
    $180 = ($181|0)==($182|0);
    $183 = ($184|0)==($185|0);
    $186 = $180 & $183;
    $187 = ($185|0)<(0);
    $188 = ($185|0)==(0);
    $189 = ($182>>>0)<(10);
    $190 = $188 & $189;
    $191 = $187 | $190;
    $or$cond$i104 = $186 & $191;
    do {
     if ($or$cond$i104) {
      $cmp149$i = ($bits$0$ph>>>0)>(30);
      if (!($cmp149$i)) {
       $shr$i = $179 >>> $bits$0$ph;
       $cmp152$i = ($shr$i|0)==(0);
       if (!($cmp152$i)) {
        break;
       }
      }
      $conv155$i = (+($sign$0|0));
      $conv157$i = (+($179>>>0));
      $mul158$i = $conv155$i * $conv157$i;
      $retval$0 = $mul158$i;
      STACKTOP = sp;return (+$retval$0);
     }
    } while(0);
    $div$i107 = (($emin$0$ph|0) / -2)&-1;
    $192 = ($div$i107|0)<(0);
    $193 = $192 << 31 >> 31;
    $194 = ($184|0)>($193|0);
    $195 = ($184|0)==($193|0);
    $196 = ($181>>>0)>($div$i107>>>0);
    $197 = $195 & $196;
    $198 = $194 | $197;
    if ($198) {
     $call165$i = (___errno_location()|0);
     HEAP32[$call165$i>>2] = 34;
     $conv166$i = (+($sign$0|0));
     $mul167$i = $conv166$i * 1.79769313486231570815E+308;
     $mul168$i = $mul167$i * 1.79769313486231570815E+308;
     $retval$0 = $mul168$i;
     STACKTOP = sp;return (+$retval$0);
    }
    $sub170$i = (($emin$0$ph) + -106)|0;
    $199 = ($sub170$i|0)<(0);
    $200 = $199 << 31 >> 31;
    $201 = ($184|0)<($200|0);
    $202 = ($184|0)==($200|0);
    $203 = ($181>>>0)<($sub170$i>>>0);
    $204 = $202 & $203;
    $205 = $201 | $204;
    if ($205) {
     $call175$i = (___errno_location()|0);
     HEAP32[$call175$i>>2] = 34;
     $conv176$i = (+($sign$0|0));
     $mul177$i = $conv176$i * 2.22507385850720138309E-308;
     $mul178$i = $mul177$i * 2.22507385850720138309E-308;
     $retval$0 = $mul178$i;
     STACKTOP = sp;return (+$retval$0);
    }
    $tobool180$i = ($j$0318$i|0)==(0);
    if ($tobool180$i) {
     $k$3$i = $k$0316$i;
    } else {
     $cmp183304$i = ($j$0318$i|0)<(9);
     if ($cmp183304$i) {
      $arrayidx186$i = (($x$i) + ($k$0316$i<<2)|0);
      $arrayidx186$promoted$i = HEAP32[$arrayidx186$i>>2]|0;
      $j$3305$i = $j$0318$i;$mul187306$i = $arrayidx186$promoted$i;
      while(1) {
       $mul187$i = ($mul187306$i*10)|0;
       $inc189$i = (($j$3305$i) + 1)|0;
       $exitcond$i = ($inc189$i|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $j$3305$i = $inc189$i;$mul187306$i = $mul187$i;
       }
      }
      HEAP32[$arrayidx186$i>>2] = $mul187$i;
     }
     $inc191$i = (($k$0316$i) + 1)|0;
     $k$3$i = $inc191$i;
    }
    $cmp194$i109 = ($lnz$0311$i|0)<(9);
    do {
     if ($cmp194$i109) {
      $cmp197$i = ($lnz$0311$i|0)<=($181|0);
      $cmp200$i = ($181|0)<(18);
      $or$cond1$i = $cmp197$i & $cmp200$i;
      if ($or$cond1$i) {
       $cmp203$i110 = ($181|0)==(9);
       if ($cmp203$i110) {
        $conv206$i = (+($sign$0|0));
        $206 = HEAP32[$x$i>>2]|0;
        $conv208$i = (+($206>>>0));
        $mul209$i = $conv206$i * $conv208$i;
        $retval$0 = $mul209$i;
        STACKTOP = sp;return (+$retval$0);
       }
       $cmp211$i = ($181|0)<(9);
       if ($cmp211$i) {
        $conv214$i = (+($sign$0|0));
        $207 = HEAP32[$x$i>>2]|0;
        $conv216$i = (+($207>>>0));
        $mul217$i = $conv214$i * $conv216$i;
        $sub218$i = (8 - ($181))|0;
        $arrayidx219$i = (9528 + ($sub218$i<<2)|0);
        $208 = HEAP32[$arrayidx219$i>>2]|0;
        $conv220$i = (+($208|0));
        $div221$i = $mul217$i / $conv220$i;
        $retval$0 = $div221$i;
        STACKTOP = sp;return (+$retval$0);
       }
       $209 = Math_imul($181, -3)|0;
       $mul224$neg$i = (($bits$0$ph) + 27)|0;
       $sub225$i = (($mul224$neg$i) + ($209))|0;
       $cmp226$i = ($sub225$i|0)>(30);
       $$pre$i = HEAP32[$x$i>>2]|0;
       if (!($cmp226$i)) {
        $shr230$i = $$pre$i >>> $sub225$i;
        $cmp231$i = ($shr230$i|0)==(0);
        if (!($cmp231$i)) {
         break;
        }
       }
       $conv234$i = (+($sign$0|0));
       $conv236$i = (+($$pre$i>>>0));
       $mul237$i = $conv234$i * $conv236$i;
       $sub238$i = (($181) + -10)|0;
       $arrayidx239$i = (9528 + ($sub238$i<<2)|0);
       $210 = HEAP32[$arrayidx239$i>>2]|0;
       $conv240$i = (+($210|0));
       $mul241$i = $mul237$i * $conv240$i;
       $retval$0 = $mul241$i;
       STACKTOP = sp;return (+$retval$0);
      }
     }
    } while(0);
    $rem$i = (($181|0) % 9)&-1;
    $tobool244$i = ($rem$i|0)==(0);
    if ($tobool244$i) {
     $a$2$ph249$i = 0;$e2$0$ph$i = 0;$rp$2$ph247$i = $181;$z$1$ph248$i = $k$3$i;
    } else {
     $cmp246$i = ($181|0)>(-1);
     $add252$i = (($rem$i) + 9)|0;
     $cond254$i = $cmp246$i ? $rem$i : $add252$i;
     $sub255$i = (8 - ($cond254$i))|0;
     $arrayidx256$i = (9528 + ($sub255$i<<2)|0);
     $211 = HEAP32[$arrayidx256$i>>2]|0;
     $cmp258296$i = ($k$3$i|0)==(0);
     if ($cmp258296$i) {
      $a$0$lcssa376$i = 0;$rp$0$lcssa377$i = $181;$z$0$i = 0;
     } else {
      $div267$i = (1000000000 / ($211|0))&-1;
      $a$0298$i = 0;$carry$0300$i = 0;$k$4299$i = 0;$rp$0297$i = $181;
      while(1) {
       $arrayidx261$i = (($x$i) + ($k$4299$i<<2)|0);
       $212 = HEAP32[$arrayidx261$i>>2]|0;
       $rem262$i = (($212>>>0) % ($211>>>0))&-1;
       $div264$i = (($212>>>0) / ($211>>>0))&-1;
       $add265$i = (($div264$i) + ($carry$0300$i))|0;
       HEAP32[$arrayidx261$i>>2] = $add265$i;
       $mul268$i = Math_imul($rem262$i, $div267$i)|0;
       $cmp269$i = ($k$4299$i|0)==($a$0298$i|0);
       $tobool273$i = ($add265$i|0)==(0);
       $or$cond223$i = $cmp269$i & $tobool273$i;
       $add275$i = (($k$4299$i) + 1)|0;
       if ($or$cond223$i) {
        $and$i112 = $add275$i & 127;
        $sub276$i = (($rp$0297$i) + -9)|0;
        $a$1$i = $and$i112;$rp$1$i113 = $sub276$i;
       } else {
        $a$1$i = $a$0298$i;$rp$1$i113 = $rp$0297$i;
       }
       $cmp258$i = ($add275$i|0)==($k$3$i|0);
       if ($cmp258$i) {
        break;
       } else {
        $a$0298$i = $a$1$i;$carry$0300$i = $mul268$i;$k$4299$i = $add275$i;$rp$0297$i = $rp$1$i113;
       }
      }
      $tobool281$i = ($mul268$i|0)==(0);
      if ($tobool281$i) {
       $a$0$lcssa376$i = $a$1$i;$rp$0$lcssa377$i = $rp$1$i113;$z$0$i = $k$3$i;
      } else {
       $inc283$i = (($k$3$i) + 1)|0;
       $arrayidx284$i = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$arrayidx284$i>>2] = $mul268$i;
       $a$0$lcssa376$i = $a$1$i;$rp$0$lcssa377$i = $rp$1$i113;$z$0$i = $inc283$i;
      }
     }
     $sub286$i = (9 - ($cond254$i))|0;
     $add287$i = (($sub286$i) + ($rp$0$lcssa377$i))|0;
     $a$2$ph249$i = $a$0$lcssa376$i;$e2$0$ph$i = 0;$rp$2$ph247$i = $add287$i;$z$1$ph248$i = $z$0$i;
    }
    L321: while(1) {
     $cmp289$i = ($rp$2$ph247$i|0)<(18);
     $arrayidx294$i = (($x$i) + ($a$2$ph249$i<<2)|0);
     if ($cmp289$i) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph248$i;
      while(1) {
       $sub301$us$i = (($z$1$us$i) + 127)|0;
       $carry299$0$us$i = 0;$k$5$in$us$i = $sub301$us$i;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $arrayidx306$us$i = (($x$i) + ($k$5$us$i<<2)|0);
        $213 = HEAP32[$arrayidx306$us$i>>2]|0;
        $214 = (_bitshift64Shl(($213|0),0,29)|0);
        $215 = tempRet0;
        $216 = (_i64Add(($214|0),($215|0),($carry299$0$us$i|0),0)|0);
        $217 = tempRet0;
        $218 = ($217>>>0)>(0);
        $219 = ($217|0)==(0);
        $220 = ($216>>>0)>(1000000000);
        $221 = $219 & $220;
        $222 = $218 | $221;
        if ($222) {
         $223 = (___udivdi3(($216|0),($217|0),1000000000,0)|0);
         $224 = tempRet0;
         $225 = (___uremdi3(($216|0),($217|0),1000000000,0)|0);
         $226 = tempRet0;
         $carry299$1$us$i = $223;$rem315$sink$off0$us$i = $225;
        } else {
         $carry299$1$us$i = 0;$rem315$sink$off0$us$i = $216;
        }
        HEAP32[$arrayidx306$us$i>>2] = $rem315$sink$off0$us$i;
        $sub322$us$i = (($z$2$us$i) + 127)|0;
        $and323$us$i = $sub322$us$i & 127;
        $cmp324$us$i = ($k$5$us$i|0)!=($and323$us$i|0);
        $cmp327$us$i = ($k$5$us$i|0)==($a$2$ph249$i|0);
        $or$cond224$us$i = $cmp324$us$i | $cmp327$us$i;
        if ($or$cond224$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $tobool331$us$i = ($rem315$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $tobool331$us$i ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $sub339$us$i = (($k$5$us$i) + -1)|0;
        if ($cmp327$us$i) {
         break;
        } else {
         $carry299$0$us$i = $carry299$1$us$i;$k$5$in$us$i = $sub339$us$i;$z$2$us$i = $z$3$us$i;
        }
       }
       $sub300$us$i = (($e2$0$us$i) + -29)|0;
       $tobool342$us$i = ($carry299$1$us$i|0)==(0);
       if ($tobool342$us$i) {
        $e2$0$us$i = $sub300$us$i;$z$1$us$i = $z$3$us$i;
       } else {
        $carry299$1$lcssa$lcssa$i = $carry299$1$us$i;$sub300$lcssa$i = $sub300$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $cmp292$i = ($rp$2$ph247$i|0)==(18);
      if ($cmp292$i) {
       $e2$0$us253$i = $e2$0$ph$i;$z$1$us254$i = $z$1$ph248$i;
      } else {
       $a$3$ph$i = $a$2$ph249$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph244$i = $rp$2$ph247$i;$z$5$ph$i = $z$1$ph248$i;
       break;
      }
      while(1) {
       $227 = HEAP32[$arrayidx294$i>>2]|0;
       $cmp295$us257$i = ($227>>>0)<(9007199);
       if (!($cmp295$us257$i)) {
        $a$3$ph$i = $a$2$ph249$i;$e2$1$ph$i = $e2$0$us253$i;$rp$3$ph244$i = 18;$z$5$ph$i = $z$1$us254$i;
        break L321;
       }
       $sub301$us260$i = (($z$1$us254$i) + 127)|0;
       $carry299$0$us264$i = 0;$k$5$in$us263$i = $sub301$us260$i;$z$2$us262$i = $z$1$us254$i;
       while(1) {
        $k$5$us265$i = $k$5$in$us263$i & 127;
        $arrayidx306$us266$i = (($x$i) + ($k$5$us265$i<<2)|0);
        $228 = HEAP32[$arrayidx306$us266$i>>2]|0;
        $229 = (_bitshift64Shl(($228|0),0,29)|0);
        $230 = tempRet0;
        $231 = (_i64Add(($229|0),($230|0),($carry299$0$us264$i|0),0)|0);
        $232 = tempRet0;
        $233 = ($232>>>0)>(0);
        $234 = ($232|0)==(0);
        $235 = ($231>>>0)>(1000000000);
        $236 = $234 & $235;
        $237 = $233 | $236;
        if ($237) {
         $238 = (___udivdi3(($231|0),($232|0),1000000000,0)|0);
         $239 = tempRet0;
         $240 = (___uremdi3(($231|0),($232|0),1000000000,0)|0);
         $241 = tempRet0;
         $carry299$1$us280$i = $238;$rem315$sink$off0$us279$i = $240;
        } else {
         $carry299$1$us280$i = 0;$rem315$sink$off0$us279$i = $231;
        }
        HEAP32[$arrayidx306$us266$i>>2] = $rem315$sink$off0$us279$i;
        $sub322$us281$i = (($z$2$us262$i) + 127)|0;
        $and323$us282$i = $sub322$us281$i & 127;
        $cmp324$us283$i = ($k$5$us265$i|0)!=($and323$us282$i|0);
        $cmp327$us284$i = ($k$5$us265$i|0)==($a$2$ph249$i|0);
        $or$cond224$us285$i = $cmp324$us283$i | $cmp327$us284$i;
        if ($or$cond224$us285$i) {
         $z$3$us290$i = $z$2$us262$i;
        } else {
         $tobool331$us287$i = ($rem315$sink$off0$us279$i|0)==(0);
         $k$5$z$2$us288$i = $tobool331$us287$i ? $k$5$us265$i : $z$2$us262$i;
         $z$3$us290$i = $k$5$z$2$us288$i;
        }
        $sub339$us291$i = (($k$5$us265$i) + -1)|0;
        if ($cmp327$us284$i) {
         break;
        } else {
         $carry299$0$us264$i = $carry299$1$us280$i;$k$5$in$us263$i = $sub339$us291$i;$z$2$us262$i = $z$3$us290$i;
        }
       }
       $sub300$us259$i = (($e2$0$us253$i) + -29)|0;
       $tobool342$us295$i = ($carry299$1$us280$i|0)==(0);
       if ($tobool342$us295$i) {
        $e2$0$us253$i = $sub300$us259$i;$z$1$us254$i = $z$3$us290$i;
       } else {
        $carry299$1$lcssa$lcssa$i = $carry299$1$us280$i;$sub300$lcssa$i = $sub300$us259$i;$z$3$lcssa$lcssa$i = $z$3$us290$i;
        break;
       }
      }
     }
     $add344$i = (($rp$2$ph247$i) + 9)|0;
     $sub345$i = (($a$2$ph249$i) + 127)|0;
     $and346$i = $sub345$i & 127;
     $cmp347$i = ($and346$i|0)==($z$3$lcssa$lcssa$i|0);
     if ($cmp347$i) {
      $sub350$i = (($z$3$lcssa$lcssa$i) + 127)|0;
      $and351$i = $sub350$i & 127;
      $arrayidx352$i = (($x$i) + ($and351$i<<2)|0);
      $242 = HEAP32[$arrayidx352$i>>2]|0;
      $sub353$i = (($z$3$lcssa$lcssa$i) + 126)|0;
      $and354$i = $sub353$i & 127;
      $arrayidx355$i = (($x$i) + ($and354$i<<2)|0);
      $243 = HEAP32[$arrayidx355$i>>2]|0;
      $or356$i = $243 | $242;
      HEAP32[$arrayidx355$i>>2] = $or356$i;
      $z$4$i = $and351$i;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $arrayidx358$i = (($x$i) + ($and346$i<<2)|0);
     HEAP32[$arrayidx358$i>>2] = $carry299$1$lcssa$lcssa$i;
     $a$2$ph249$i = $and346$i;$e2$0$ph$i = $sub300$lcssa$i;$rp$2$ph247$i = $add344$i;$z$1$ph248$i = $z$4$i;
    }
    L352: while(1) {
     $add435$i = (($z$5$ph$i) + 1)|0;
     $and436$i = $add435$i & 127;
     $sub444$i = (($z$5$ph$i) + 127)|0;
     $and445$i = $sub444$i & 127;
     $arrayidx446$i = (($x$i) + ($and445$i<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph244$i;
     while(1) {
      $cmp393$i = ($rp$3$i$ph|0)==(18);
      $cmp397$i = ($rp$3$i$ph|0)>(27);
      $$$i = $cmp397$i ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$0235$i = 0;
       while(1) {
        $add368$i = (($i$0235$i) + ($a$3$i))|0;
        $and369$i = $add368$i & 127;
        $cmp370$i = ($and369$i|0)==($z$5$ph$i|0);
        if ($cmp370$i) {
         $i$1$i = 2;
         break;
        }
        $arrayidx373$i = (($x$i) + ($and369$i<<2)|0);
        $244 = HEAP32[$arrayidx373$i>>2]|0;
        $arrayidx374$i = (9520 + ($i$0235$i<<2)|0);
        $245 = HEAP32[$arrayidx374$i>>2]|0;
        $cmp375$i = ($244>>>0)<($245>>>0);
        if ($cmp375$i) {
         $i$1$i = 2;
         break;
        }
        $cmp383$i = ($244>>>0)>($245>>>0);
        $inc388$i = (($i$0235$i) + 1)|0;
        if ($cmp383$i) {
         $i$1$i = $i$0235$i;
         break;
        }
        $cmp365$i = ($inc388$i|0)<(2);
        if ($cmp365$i) {
         $i$0235$i = $inc388$i;
        } else {
         $i$1$i = $inc388$i;
         break;
        }
       }
       $cmp390$i = ($i$1$i|0)==(2);
       $or$cond225$i = $cmp390$i & $cmp393$i;
       if ($or$cond225$i) {
        break L352;
       }
       $add401$i = (($$$i) + ($e2$1$i))|0;
       $cmp403236$i = ($a$3$i|0)==($z$5$ph$i|0);
       if ($cmp403236$i) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $add401$i;
       } else {
        break;
       }
      }
      $shl409$i = 1 << $$$i;
      $sub410$i = (($shl409$i) + -1)|0;
      $shr416$i = 1000000000 >>> $$$i;
      $a$4238$i = $a$3$i;$carry362$0241$i = 0;$k$6239$i = $a$3$i;$rp$4237$i = $rp$3$i$ph;
      while(1) {
       $arrayidx408$i = (($x$i) + ($k$6239$i<<2)|0);
       $246 = HEAP32[$arrayidx408$i>>2]|0;
       $and411$i = $246 & $sub410$i;
       $shr413$i = $246 >>> $$$i;
       $add414$i = (($shr413$i) + ($carry362$0241$i))|0;
       HEAP32[$arrayidx408$i>>2] = $add414$i;
       $mul417$i = Math_imul($and411$i, $shr416$i)|0;
       $cmp418$i = ($k$6239$i|0)==($a$4238$i|0);
       $tobool422$i = ($add414$i|0)==(0);
       $or$cond226$i = $cmp418$i & $tobool422$i;
       $add424$i = (($k$6239$i) + 1)|0;
       $and425$i = $add424$i & 127;
       $sub427$i = (($rp$4237$i) + -9)|0;
       $rp$5$i = $or$cond226$i ? $sub427$i : $rp$4237$i;
       $a$5$i = $or$cond226$i ? $and425$i : $a$4238$i;
       $cmp403$i = ($and425$i|0)==($z$5$ph$i|0);
       if ($cmp403$i) {
        break;
       } else {
        $a$4238$i = $a$5$i;$carry362$0241$i = $mul417$i;$k$6239$i = $and425$i;$rp$4237$i = $rp$5$i;
       }
      }
      $tobool433$i = ($mul417$i|0)==(0);
      if ($tobool433$i) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $add401$i;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $cmp437$i = ($and436$i|0)==($a$5$i|0);
      if (!($cmp437$i)) {
       break;
      }
      $247 = HEAP32[$arrayidx446$i>>2]|0;
      $or447$i = $247 | 1;
      HEAP32[$arrayidx446$i>>2] = $or447$i;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $add401$i;$rp$3$i$ph = $rp$5$i;
     }
     $arrayidx440$i = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$arrayidx440$i>>2] = $mul417$i;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $add401$i;$rp$3$ph244$i = $rp$5$i;$z$5$ph$i = $and436$i;
    }
    $and456$i = $a$3$i & 127;
    $cmp457$i = ($and456$i|0)==($z$5$ph$i|0);
    if ($cmp457$i) {
     $sub462$i = (($and436$i) + -1)|0;
     $arrayidx463$i = (($x$i) + ($sub462$i<<2)|0);
     HEAP32[$arrayidx463$i>>2] = 0;
     $z$7$i = $and436$i;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $arrayidx468$i = (($x$i) + ($and456$i<<2)|0);
    $248 = HEAP32[$arrayidx468$i>>2]|0;
    $conv469$i = (+($248>>>0));
    $add455$1$i = (($a$3$i) + 1)|0;
    $and456$1$i = $add455$1$i & 127;
    $cmp457$1$i = ($and456$1$i|0)==($z$7$i|0);
    if ($cmp457$1$i) {
     $add460$1$i = (($z$7$i) + 1)|0;
     $and461$1$i = $add460$1$i & 127;
     $sub462$1$i = (($and461$1$i) + -1)|0;
     $arrayidx463$1$i = (($x$i) + ($sub462$1$i<<2)|0);
     HEAP32[$arrayidx463$1$i>>2] = 0;
     $z$7$1$i = $and461$1$i;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $mul465$1$i = $conv469$i * 1.0E+9;
    $arrayidx468$1$i = (($x$i) + ($and456$1$i<<2)|0);
    $251 = HEAP32[$arrayidx468$1$i>>2]|0;
    $conv469$1$i = (+($251>>>0));
    $add470$1$i = $mul465$1$i + $conv469$1$i;
    $conv474$i = (+($sign$0|0));
    $mul475$i = $conv474$i * $add470$1$i;
    $add476$i = (($e2$1$i) + 53)|0;
    $sub477$i = (($add476$i) - ($emin$0$ph))|0;
    $cmp478$i = ($sub477$i|0)<($bits$0$ph|0);
    if ($cmp478$i) {
     $cmp483$i = ($sub477$i|0)<(0);
     $$sub482$i = $cmp483$i ? 0 : $sub477$i;
     $bits$addr$0$i114 = $$sub482$i;$denormal$0$i = 1;
    } else {
     $bits$addr$0$i114 = $bits$0$ph;$denormal$0$i = 0;
    }
    $cmp488$i = ($bits$addr$0$i114|0)<(53);
    if ($cmp488$i) {
     $sub492$i = (105 - ($bits$addr$0$i114))|0;
     $call493$i = (+_scalbn(1.0,$sub492$i));
     $call494$i = (+_copysignl((+$call493$i),(+$mul475$i)));
     $sub495$i = (53 - ($bits$addr$0$i114))|0;
     $call496$i = (+_scalbn(1.0,$sub495$i));
     $call497$i = (+_fmodl((+$mul475$i),(+$call496$i)));
     $sub498$i = $mul475$i - $call497$i;
     $add499$i = $call494$i + $sub498$i;
     $bias$0$i = $call494$i;$frac$0$i = $call497$i;$y$1$i115 = $add499$i;
    } else {
     $bias$0$i = 0.0;$frac$0$i = 0.0;$y$1$i115 = $mul475$i;
    }
    $add501$i = (($a$3$i) + 2)|0;
    $and502$i = $add501$i & 127;
    $cmp503$i = ($and502$i|0)==($z$7$1$i|0);
    do {
     if ($cmp503$i) {
      $frac$2$i = $frac$0$i;
     } else {
      $arrayidx509$i = (($x$i) + ($and502$i<<2)|0);
      $249 = HEAP32[$arrayidx509$i>>2]|0;
      $cmp510$i = ($249>>>0)<(500000000);
      do {
       if ($cmp510$i) {
        $tobool513$i = ($249|0)==(0);
        if ($tobool513$i) {
         $add516$i = (($a$3$i) + 3)|0;
         $and517$i = $add516$i & 127;
         $cmp518$i = ($and517$i|0)==($z$7$1$i|0);
         if ($cmp518$i) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $mul522$i = $conv474$i * 0.25;
        $add523$i = $mul522$i + $frac$0$i;
        $frac$1$i = $add523$i;
       } else {
        $cmp525$i = ($249>>>0)>(500000000);
        if ($cmp525$i) {
         $mul529$i = $conv474$i * 0.75;
         $add530$i = $mul529$i + $frac$0$i;
         $frac$1$i = $add530$i;
         break;
        }
        $add536$i = (($a$3$i) + 3)|0;
        $and537$i = $add536$i & 127;
        $cmp538$i = ($and537$i|0)==($z$7$1$i|0);
        if ($cmp538$i) {
         $mul542$i = $conv474$i * 0.5;
         $add543$i = $mul542$i + $frac$0$i;
         $frac$1$i = $add543$i;
         break;
        } else {
         $mul546$i = $conv474$i * 0.75;
         $add547$i = $mul546$i + $frac$0$i;
         $frac$1$i = $add547$i;
         break;
        }
       }
      } while(0);
      $sub552$i = (53 - ($bits$addr$0$i114))|0;
      $cmp553$i = ($sub552$i|0)>(1);
      if (!($cmp553$i)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $call556$i = (+_fmodl((+$frac$1$i),1.0));
      $tobool557$i = $call556$i != 0.0;
      if ($tobool557$i) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $inc559$i = $frac$1$i + 1.0;
      $frac$2$i = $inc559$i;
     }
    } while(0);
    $add562$i = $y$1$i115 + $frac$2$i;
    $sub563$i = $add562$i - $bias$0$i;
    $and565$i = $add476$i & 2147483647;
    $sub566$i = (-2 - ($sum$i))|0;
    $cmp567$i = ($and565$i|0)>($sub566$i|0);
    do {
     if ($cmp567$i) {
      $call570$i = (+Math_abs((+$sub563$i)));
      $cmp571$i = !($call570$i >= 9007199254740992.0);
      if ($cmp571$i) {
       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i116 = $sub563$i;
      } else {
       $tobool574$i = ($denormal$0$i|0)!=(0);
       $cmp578$i = ($bits$addr$0$i114|0)==($sub477$i|0);
       $or$cond227$i = $tobool574$i & $cmp578$i;
       $denormal$1$i = $or$cond227$i ? 0 : $denormal$0$i;
       $mul582$i = $sub563$i * 0.5;
       $inc583$i = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $inc583$i;$y$2$i116 = $mul582$i;
      }
      $250 = (($e2$2$i) + 50)|0;
      $cmp586$i = ($250|0)>($sub1$i|0);
      if (!($cmp586$i)) {
       $tobool589$i = ($denormal$2$i|0)!=(0);
       $tobool591$i = $frac$2$i != 0.0;
       $or$cond228$i = $tobool589$i & $tobool591$i;
       if (!($or$cond228$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i116;
        break;
       }
      }
      $call593$i = (___errno_location()|0);
      HEAP32[$call593$i>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i116;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $sub563$i;
     }
    } while(0);
    $call596$i = (+_scalbnl($y$3$i,$e2$3$i));
    $retval$0 = $call596$i;
    STACKTOP = sp;return (+$retval$0);
   } else {
    $28 = HEAP32[$shend>>2]|0;
    $tobool209 = ($28|0)==(0|0);
    if (!($tobool209)) {
     $29 = HEAP32[$rpos>>2]|0;
     $incdec$ptr212 = (($29) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr212;
    }
    $call215 = (___errno_location()|0);
    HEAP32[$call215>>2] = 22;
    ___shlim($f,0);
    $retval$0 = 0.0;
    STACKTOP = sp;return (+$retval$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $10 = HEAP32[$shend>>2]|0;
  $tobool61 = ($10|0)==(0|0);
  if (!($tobool61)) {
   $11 = HEAP32[$rpos>>2]|0;
   $incdec$ptr64 = (($11) + -1|0);
   HEAP32[$rpos>>2] = $incdec$ptr64;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond175$not = $notrhs | $notlhs;
  $brmerge = $or$cond175$not | $tobool61;
  if (!($brmerge)) {
   $i$1152 = $i$0$lcssa;
   while(1) {
    $12 = HEAP32[$rpos>>2]|0;
    $incdec$ptr77 = (($12) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr77;
    $dec = (($i$1152) + -1)|0;
    $cmp70 = ($dec>>>0)>(3);
    if ($cmp70) {
     $i$1152 = $dec;
    } else {
     break;
    }
   }
  }
 }
 $conv84 = (+($sign$0|0));
 $mul85 = $conv84 * inf;
 $conv86 = $mul85;
 $retval$0 = $conv86;
 STACKTOP = sp;return (+$retval$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $c$0 = 0, $c$1$be = 0, $c$142 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$237 = 0, $c$3$be = 0, $call = 0, $call104 = 0, $call17 = 0, $call58 = 0, $call85 = 0, $cmp = 0;
 var $cmp10 = 0, $cmp20 = 0, $cmp32 = 0, $cmp4 = 0, $cmp44 = 0, $cmp46 = 0, $cmp46$ = 0, $cmp51 = 0, $cmp64 = 0, $cmp6436 = 0, $cmp78 = 0, $cmp91 = 0, $cmp9134 = 0, $cmp97 = 0, $cond = 0, $cond19 = 0, $conv = 0, $conv102 = 0, $conv15 = 0, $conv56 = 0;
 var $conv7 = 0, $conv83 = 0, $incdec$ptr = 0, $incdec$ptr101 = 0, $incdec$ptr112 = 0, $incdec$ptr14 = 0, $incdec$ptr27 = 0, $incdec$ptr39 = 0, $incdec$ptr55 = 0, $incdec$ptr82 = 0, $neg$0 = 0, $or$cond = 0, $or$cond32 = 0, $phitmp47 = 0, $rpos = 0, $shend = 0, $sub = 0, $sub31 = 0, $sub43 = 0, $sub48 = 0;
 var $sub63 = 0, $sub6335 = 0, $sub90 = 0, $sub9033 = 0, $tobool = 0, $tobool109 = 0, $tobool115 = 0, $tobool24 = 0, $tobool36 = 0, $x$043 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rpos = (($f) + 4|0);
 $0 = HEAP32[$rpos>>2]|0;
 $shend = (($f) + 100|0);
 $1 = HEAP32[$shend>>2]|0;
 $cmp = ($0>>>0)<($1>>>0);
 if ($cmp) {
  $incdec$ptr = (($0) + 1|0);
  HEAP32[$rpos>>2] = $incdec$ptr;
  $2 = HEAP8[$0>>0]|0;
  $conv = $2&255;
  $cond = $conv;
 } else {
  $call = (___shgetc($f)|0);
  $cond = $call;
 }
 $cmp4 = ($cond|0)==(45);
 if ((($cond|0) == 43) | (($cond|0) == 45)) {
  $conv7 = $cmp4&1;
  $3 = HEAP32[$rpos>>2]|0;
  $4 = HEAP32[$shend>>2]|0;
  $cmp10 = ($3>>>0)<($4>>>0);
  if ($cmp10) {
   $incdec$ptr14 = (($3) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr14;
   $5 = HEAP8[$3>>0]|0;
   $conv15 = $5&255;
   $cond19 = $conv15;
  } else {
   $call17 = (___shgetc($f)|0);
   $cond19 = $call17;
  }
  $sub = (($cond19) + -48)|0;
  $cmp20 = ($sub>>>0)<(10);
  $tobool = ($pok|0)==(0);
  $or$cond = $cmp20 | $tobool;
  if ($or$cond) {
   $c$0 = $cond19;$neg$0 = $conv7;
  } else {
   $6 = HEAP32[$shend>>2]|0;
   $tobool24 = ($6|0)==(0|0);
   if ($tobool24) {
    $c$0 = $cond19;$neg$0 = $conv7;
   } else {
    $7 = HEAP32[$rpos>>2]|0;
    $incdec$ptr27 = (($7) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr27;
    $c$0 = $cond19;$neg$0 = $conv7;
   }
  }
 } else {
  $c$0 = $cond;$neg$0 = 0;
 }
 $sub31 = (($c$0) + -48)|0;
 $cmp32 = ($sub31>>>0)>(9);
 if ($cmp32) {
  $8 = HEAP32[$shend>>2]|0;
  $tobool36 = ($8|0)==(0|0);
  if ($tobool36) {
   $44 = -2147483648;$45 = 0;
   tempRet0 = $44;
   STACKTOP = sp;return ($45|0);
  }
  $9 = HEAP32[$rpos>>2]|0;
  $incdec$ptr39 = (($9) + -1|0);
  HEAP32[$rpos>>2] = $incdec$ptr39;
  $44 = -2147483648;$45 = 0;
  tempRet0 = $44;
  STACKTOP = sp;return ($45|0);
 } else {
  $c$142 = $c$0;$x$043 = 0;
 }
 while(1) {
  $add = (($c$142) + -48)|0;
  $sub48 = (($add) + ($x$043))|0;
  $10 = HEAP32[$rpos>>2]|0;
  $11 = HEAP32[$shend>>2]|0;
  $cmp51 = ($10>>>0)<($11>>>0);
  if ($cmp51) {
   $incdec$ptr55 = (($10) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr55;
   $12 = HEAP8[$10>>0]|0;
   $conv56 = $12&255;
   $c$1$be = $conv56;
  } else {
   $call58 = (___shgetc($f)|0);
   $c$1$be = $call58;
  }
  $sub43 = (($c$1$be) + -48)|0;
  $cmp44 = ($sub43>>>0)<(10);
  $cmp46 = ($sub48|0)<(214748364);
  $cmp46$ = $cmp44 & $cmp46;
  if (!($cmp46$)) {
   break;
  }
  $phitmp47 = ($sub48*10)|0;
  $c$142 = $c$1$be;$x$043 = $phitmp47;
 }
 $13 = ($sub48|0)<(0);
 $14 = $13 << 31 >> 31;
 $sub6335 = (($c$1$be) + -48)|0;
 $cmp6436 = ($sub6335>>>0)<(10);
 if ($cmp6436) {
  $15 = $sub48;$16 = $14;$c$237 = $c$1$be;
  while(1) {
   $17 = (___muldi3(($15|0),($16|0),10,0)|0);
   $18 = tempRet0;
   $19 = ($c$237|0)<(0);
   $20 = $19 << 31 >> 31;
   $21 = (_i64Add(($c$237|0),($20|0),-48,-1)|0);
   $22 = tempRet0;
   $23 = (_i64Add(($21|0),($22|0),($17|0),($18|0))|0);
   $24 = tempRet0;
   $25 = HEAP32[$rpos>>2]|0;
   $26 = HEAP32[$shend>>2]|0;
   $cmp78 = ($25>>>0)<($26>>>0);
   if ($cmp78) {
    $incdec$ptr82 = (($25) + 1|0);
    HEAP32[$rpos>>2] = $incdec$ptr82;
    $27 = HEAP8[$25>>0]|0;
    $conv83 = $27&255;
    $c$2$be = $conv83;
   } else {
    $call85 = (___shgetc($f)|0);
    $c$2$be = $call85;
   }
   $sub63 = (($c$2$be) + -48)|0;
   $cmp64 = ($sub63>>>0)<(10);
   $28 = ($24|0)<(21474836);
   $29 = ($24|0)==(21474836);
   $30 = ($23>>>0)<(2061584302);
   $31 = $29 & $30;
   $32 = $28 | $31;
   $or$cond32 = $cmp64 & $32;
   if ($or$cond32) {
    $15 = $23;$16 = $24;$c$237 = $c$2$be;
   } else {
    $38 = $23;$39 = $24;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $38 = $sub48;$39 = $14;$c$2$lcssa = $c$1$be;
 }
 $sub9033 = (($c$2$lcssa) + -48)|0;
 $cmp9134 = ($sub9033>>>0)<(10);
 if ($cmp9134) {
  while(1) {
   $33 = HEAP32[$rpos>>2]|0;
   $34 = HEAP32[$shend>>2]|0;
   $cmp97 = ($33>>>0)<($34>>>0);
   if ($cmp97) {
    $incdec$ptr101 = (($33) + 1|0);
    HEAP32[$rpos>>2] = $incdec$ptr101;
    $35 = HEAP8[$33>>0]|0;
    $conv102 = $35&255;
    $c$3$be = $conv102;
   } else {
    $call104 = (___shgetc($f)|0);
    $c$3$be = $call104;
   }
   $sub90 = (($c$3$be) + -48)|0;
   $cmp91 = ($sub90>>>0)<(10);
   if (!($cmp91)) {
    break;
   }
  }
 }
 $36 = HEAP32[$shend>>2]|0;
 $tobool109 = ($36|0)==(0|0);
 if (!($tobool109)) {
  $37 = HEAP32[$rpos>>2]|0;
  $incdec$ptr112 = (($37) + -1|0);
  HEAP32[$rpos>>2] = $incdec$ptr112;
 }
 $tobool115 = ($neg$0|0)!=(0);
 $40 = (_i64Subtract(0,0,($38|0),($39|0))|0);
 $41 = tempRet0;
 $42 = $tobool115 ? $40 : $38;
 $43 = $tobool115 ? $41 : $39;
 $44 = $43;$45 = $42;
 tempRet0 = $44;
 STACKTOP = sp;return ($45|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $cmp = 0, $or$cond = 0, $rend = 0, $rpos = 0, $shcnt = 0, $shend = 0, $shend4 = 0, $shlim = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $shlim = (($f) + 104|0);
 HEAP32[$shlim>>2] = $lim;
 $rend = (($f) + 8|0);
 $0 = HEAP32[$rend>>2]|0;
 $rpos = (($f) + 4|0);
 $1 = HEAP32[$rpos>>2]|0;
 $sub$ptr$lhs$cast = $0;
 $sub$ptr$rhs$cast = $1;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $shcnt = (($f) + 108|0);
 HEAP32[$shcnt>>2] = $sub$ptr$sub;
 $tobool = ($lim|0)!=(0);
 $cmp = ($sub$ptr$sub|0)>($lim|0);
 $or$cond = $tobool & $cmp;
 if ($or$cond) {
  $add$ptr = (($1) + ($lim)|0);
  $shend = (($f) + 100|0);
  HEAP32[$shend>>2] = $add$ptr;
  STACKTOP = sp;return;
 } else {
  $shend4 = (($f) + 100|0);
  HEAP32[$shend4>>2] = $0;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$pre = 0, $$pre24 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $add$ptr = 0, $add29 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp2 = 0, $cmp32 = 0, $cmp9 = 0, $conv = 0, $conv35 = 0;
 var $rend17$phi$trans$insert = 0, $retval$0 = 0, $rpos = 0, $rpos31$phi$trans$insert = 0, $shcnt = 0, $shcnt28 = 0, $shcnt7 = 0, $shend = 0, $shend16 = 0, $shend18 = 0, $shlim = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast25 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast26 = 0, $sub$ptr$sub = 0, $sub$ptr$sub27 = 0, $sub8 = 0, $tobool = 0;
 var $tobool21 = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $shlim = (($f) + 104|0);
 $0 = HEAP32[$shlim>>2]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  label = 3;
 } else {
  $shcnt = (($f) + 108|0);
  $1 = HEAP32[$shcnt>>2]|0;
  $cmp = ($1|0)<($0|0);
  if ($cmp) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $call = (___uflow($f)|0);
  $cmp2 = ($call|0)<(0);
  if (!($cmp2)) {
   $2 = HEAP32[$shlim>>2]|0;
   $tobool4 = ($2|0)==(0);
   $rend17$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$rend17$phi$trans$insert>>2]|0;
   if ($tobool4) {
    label = 8;
   } else {
    $rpos = (($f) + 4|0);
    $3 = HEAP32[$rpos>>2]|0;
    $sub$ptr$lhs$cast = $$pre;
    $sub$ptr$rhs$cast = $3;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $shcnt7 = (($f) + 108|0);
    $4 = HEAP32[$shcnt7>>2]|0;
    $sub = (($2) - ($4))|0;
    $sub8 = (($sub) + -1)|0;
    $cmp9 = ($sub$ptr$sub|0)>($sub8|0);
    if ($cmp9) {
     $add$ptr = (($3) + ($sub8)|0);
     $shend16 = (($f) + 100|0);
     HEAP32[$shend16>>2] = $add$ptr;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $shend18 = (($f) + 100|0);
    HEAP32[$shend18>>2] = $$pre;
   }
   $tobool21 = ($$pre|0)==(0|0);
   $rpos31$phi$trans$insert = (($f) + 4|0);
   $$pre24 = HEAP32[$rpos31$phi$trans$insert>>2]|0;
   if (!($tobool21)) {
    $sub$ptr$lhs$cast25 = $$pre;
    $sub$ptr$rhs$cast26 = $$pre24;
    $shcnt28 = (($f) + 108|0);
    $5 = HEAP32[$shcnt28>>2]|0;
    $sub$ptr$sub27 = (($sub$ptr$lhs$cast25) + 1)|0;
    $add = (($sub$ptr$sub27) - ($sub$ptr$rhs$cast26))|0;
    $add29 = (($add) + ($5))|0;
    HEAP32[$shcnt28>>2] = $add29;
   }
   $arrayidx = (($$pre24) + -1|0);
   $6 = HEAP8[$arrayidx>>0]|0;
   $conv = $6&255;
   $cmp32 = ($conv|0)==($call|0);
   if ($cmp32) {
    $retval$0 = $call;
    STACKTOP = sp;return ($retval$0|0);
   }
   $conv35 = $call&255;
   HEAP8[$arrayidx>>0] = $conv35;
   $retval$0 = $call;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $shend = (($f) + 100|0);
 HEAP32[$shend>>2] = 0;
 $retval$0 = -1;
 STACKTOP = sp;return ($retval$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $call = 0.0, $conv = 0, $mul = 0.0, $retval$0 = 0.0, $storemerge = 0, $sub = 0, $sub8 = 0, $tobool1 = 0, $x$addr$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $conv = $2 & 2047;
 if ((($conv|0) == 2047)) {
  $retval$0 = $x;
  STACKTOP = sp;return (+$retval$0);
 } else if ((($conv|0) == 0)) {
  $tobool1 = $x != 0.0;
  if ($tobool1) {
   $mul = $x * 18446744073709551616.0;
   $call = (+_frexp($mul,$e));
   $4 = HEAP32[$e>>2]|0;
   $sub = (($4) + -64)|0;
   $storemerge = $sub;$x$addr$0 = $call;
  } else {
   $storemerge = 0;$x$addr$0 = $x;
  }
  HEAP32[$e>>2] = $storemerge;
  $retval$0 = $x$addr$0;
  STACKTOP = sp;return (+$retval$0);
 } else {
  $sub8 = (($conv) + -1022)|0;
  HEAP32[$e>>2] = $sub8;
  $5 = $1 & -2146435073;
  $6 = $5 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
  $retval$0 = $7;
  STACKTOP = sp;return (+$retval$0);
 }
 return +0;
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_frexp($x,$e));
 STACKTOP = sp;return (+$call);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$add14 = 0, $$sub4 = 0, $0 = 0, $1 = 0, $2 = 0.0, $add = 0, $add14 = 0, $add21 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp15 = 0, $cmp5 = 0, $cmp8 = 0, $mul = 0.0, $mul10 = 0.0, $mul13 = 0.0, $mul22 = 0.0, $mul3 = 0.0, $n$addr$0 = 0;
 var $sub = 0, $sub4 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($n|0)>(1023);
 if ($cmp) {
  $mul = $x * 8.98846567431157953864E+307;
  $sub = (($n) + -1023)|0;
  $cmp1 = ($sub|0)>(1023);
  if ($cmp1) {
   $mul3 = $mul * 8.98846567431157953864E+307;
   $sub4 = (($n) + -2046)|0;
   $cmp5 = ($sub4|0)>(1023);
   $$sub4 = $cmp5 ? 1023 : $sub4;
   $n$addr$0 = $$sub4;$y$0 = $mul3;
  } else {
   $n$addr$0 = $sub;$y$0 = $mul;
  }
 } else {
  $cmp8 = ($n|0)<(-1022);
  if ($cmp8) {
   $mul10 = $x * 2.22507385850720138309E-308;
   $add = (($n) + 1022)|0;
   $cmp11 = ($add|0)<(-1022);
   if ($cmp11) {
    $mul13 = $mul10 * 2.22507385850720138309E-308;
    $add14 = (($n) + 2044)|0;
    $cmp15 = ($add14|0)<(-1022);
    $$add14 = $cmp15 ? -1022 : $add14;
    $n$addr$0 = $$add14;$y$0 = $mul13;
   } else {
    $n$addr$0 = $add;$y$0 = $mul10;
   }
  } else {
   $n$addr$0 = $n;$y$0 = $x;
  }
 }
 $add21 = (($n$addr$0) + 1023)|0;
 $0 = (_bitshift64Shl(($add21|0),0,52)|0);
 $1 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $1;$2 = +HEAPF64[tempDoublePtr>>3];
 $mul22 = $y$0 * $2;
 STACKTOP = sp;return (+$mul22);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$call);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call = (_wcrtomb($s,$wc,0)|0);
  $retval$0 = $call;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $and = 0, $and19 = 0, $and23 = 0, $and36 = 0, $and41 = 0, $and45 = 0, $call = 0, $cmp = 0, $cmp11 = 0, $cmp2 = 0, $cmp28 = 0, $cmp9 = 0, $conv = 0, $conv16 = 0, $conv21 = 0, $conv25 = 0, $conv33 = 0, $conv38 = 0, $conv43 = 0, $conv47 = 0;
 var $conv5 = 0, $conv7 = 0, $incdec$ptr = 0, $incdec$ptr17 = 0, $incdec$ptr22 = 0, $incdec$ptr34 = 0, $incdec$ptr39 = 0, $incdec$ptr44 = 0, $or = 0, $or$cond = 0, $or15 = 0, $or20 = 0, $or24 = 0, $or32 = 0, $or37 = 0, $or42 = 0, $or46 = 0, $or6 = 0, $retval$0 = 0, $shr1426 = 0;
 var $shr1827 = 0, $shr28 = 0, $shr3123 = 0, $shr3524 = 0, $shr4025 = 0, $sub = 0, $sub27 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 if ($tobool) {
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $cmp = ($wc>>>0)<(128);
 if ($cmp) {
  $conv = $wc&255;
  HEAP8[$s>>0] = $conv;
  $retval$0 = 1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $cmp2 = ($wc>>>0)<(2048);
 if ($cmp2) {
  $shr28 = $wc >>> 6;
  $or = $shr28 | 192;
  $conv5 = $or&255;
  $incdec$ptr = (($s) + 1|0);
  HEAP8[$s>>0] = $conv5;
  $and = $wc & 63;
  $or6 = $and | 128;
  $conv7 = $or6&255;
  HEAP8[$incdec$ptr>>0] = $conv7;
  $retval$0 = 2;
  STACKTOP = sp;return ($retval$0|0);
 }
 $cmp9 = ($wc>>>0)<(55296);
 $sub = (($wc) + -57344)|0;
 $cmp11 = ($sub>>>0)<(8192);
 $or$cond = $cmp9 | $cmp11;
 if ($or$cond) {
  $shr1426 = $wc >>> 12;
  $or15 = $shr1426 | 224;
  $conv16 = $or15&255;
  $incdec$ptr17 = (($s) + 1|0);
  HEAP8[$s>>0] = $conv16;
  $shr1827 = $wc >>> 6;
  $and19 = $shr1827 & 63;
  $or20 = $and19 | 128;
  $conv21 = $or20&255;
  $incdec$ptr22 = (($s) + 2|0);
  HEAP8[$incdec$ptr17>>0] = $conv21;
  $and23 = $wc & 63;
  $or24 = $and23 | 128;
  $conv25 = $or24&255;
  HEAP8[$incdec$ptr22>>0] = $conv25;
  $retval$0 = 3;
  STACKTOP = sp;return ($retval$0|0);
 }
 $sub27 = (($wc) + -65536)|0;
 $cmp28 = ($sub27>>>0)<(1048576);
 if ($cmp28) {
  $shr3123 = $wc >>> 18;
  $or32 = $shr3123 | 240;
  $conv33 = $or32&255;
  $incdec$ptr34 = (($s) + 1|0);
  HEAP8[$s>>0] = $conv33;
  $shr3524 = $wc >>> 12;
  $and36 = $shr3524 & 63;
  $or37 = $and36 | 128;
  $conv38 = $or37&255;
  $incdec$ptr39 = (($s) + 2|0);
  HEAP8[$incdec$ptr34>>0] = $conv38;
  $shr4025 = $wc >>> 6;
  $and41 = $shr4025 & 63;
  $or42 = $and41 | 128;
  $conv43 = $or42&255;
  $incdec$ptr44 = (($s) + 3|0);
  HEAP8[$incdec$ptr39>>0] = $conv43;
  $and45 = $wc & 63;
  $or46 = $and45 | 128;
  $conv47 = $or46&255;
  HEAP8[$incdec$ptr44>>0] = $conv47;
  $retval$0 = 4;
  STACKTOP = sp;return ($retval$0|0);
 } else {
  $call = (___errno_location()|0);
  HEAP32[$call>>2] = 84;
  $retval$0 = -1;
  STACKTOP = sp;return ($retval$0|0);
 }
 return 0|0;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 9560;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 9560;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 STACKTOP = sp;return ($14|0);
}
function ___toread($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $and = 0, $and8 = 0, $buf = 0, $cmp = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or12 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $tobool = 0;
 var $tobool9 = 0, $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = (($f) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $wpos = (($f) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $buf = (($f) + 44|0);
 $2 = HEAP32[$buf>>2]|0;
 $cmp = ($1>>>0)>($2>>>0);
 if ($cmp) {
  $write = (($f) + 36|0);
  $3 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$3 & 1]($f,0,0)|0);
 }
 $wend = (($f) + 16|0);
 HEAP32[$wend>>2] = 0;
 $wbase = (($f) + 28|0);
 HEAP32[$wbase>>2] = 0;
 HEAP32[$wpos>>2] = 0;
 $4 = HEAP32[$f>>2]|0;
 $and = $4 & 20;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $5 = HEAP32[$buf>>2]|0;
  $rend = (($f) + 8|0);
  HEAP32[$rend>>2] = $5;
  $rpos = (($f) + 4|0);
  HEAP32[$rpos>>2] = $5;
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $and8 = $4 & 4;
 $tobool9 = ($and8|0)==(0);
 if ($tobool9) {
  $retval$0 = -1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $or12 = $4 | 32;
 HEAP32[$f>>2] = $or12;
 $retval$0 = -1;
 STACKTOP = sp;return ($retval$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $tobool = 0, $wbase = 0, $wend = 0;
 var $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = (($f) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 8;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $rend = (($f) + 8|0);
  HEAP32[$rend>>2] = 0;
  $rpos = (($f) + 4|0);
  HEAP32[$rpos>>2] = 0;
  $buf = (($f) + 44|0);
  $2 = HEAP32[$buf>>2]|0;
  $wbase = (($f) + 28|0);
  HEAP32[$wbase>>2] = $2;
  $wpos = (($f) + 20|0);
  HEAP32[$wpos>>2] = $2;
  $buf_size = (($f) + 48|0);
  $3 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($2) + ($3)|0);
  $wend = (($f) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 } else {
  $or5 = $1 | 32;
  HEAP32[$f>>2] = $or5;
  $retval$0 = -1;
  STACKTOP = sp;return ($retval$0|0);
 }
 return 0|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $c = 0, $call = 0, $call2 = 0, $cmp = 0, $conv = 0, $read = 0, $rend = 0, $retval$0 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $rend = (($f) + 8|0);
 $0 = HEAP32[$rend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___toread($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   label = 3;
  } else {
   $retval$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $read = (($f) + 32|0);
  $1 = HEAP32[$read>>2]|0;
  $call2 = (FUNCTION_TABLE_iiii[$1 & 1]($f,$c,1)|0);
  $cmp = ($call2|0)==(1);
  if ($cmp) {
   $2 = HEAP8[$c>>0]|0;
   $conv = $2&255;
   $retval$0 = $conv;
  } else {
   $retval$0 = -1;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$pre = 0, $$pre30 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $add$ptr = 0, $add$ptr26 = 0, $arrayidx = 0, $call = 0, $call16 = 0, $call4 = 0, $cmp = 0, $cmp11 = 0;
 var $cmp17 = 0, $cmp6 = 0, $i$0 = 0, $i$1 = 0, $l$addr$0 = 0, $lbf = 0, $retval$0 = 0, $s$addr$0 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub21 = 0, $tobool = 0, $tobool1 = 0, $tobool9 = 0, $wend = 0, $wpos = 0, $write = 0, $write15 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $wend = (($f) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 do {
  if ($tobool) {
   $call = (___towrite($f)|0);
   $tobool1 = ($call|0)==(0);
   if ($tobool1) {
    $$pre30 = HEAP32[$wend>>2]|0;
    $2 = $$pre30;
    break;
   } else {
    $retval$0 = 0;
    STACKTOP = sp;return ($retval$0|0);
   }
  } else {
   $2 = $0;
  }
 } while(0);
 $wpos = (($f) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$lhs$cast = $2;
 $sub$ptr$rhs$cast = $1;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub>>>0)<($l>>>0);
 if ($cmp) {
  $write = (($f) + 36|0);
  $3 = HEAP32[$write>>2]|0;
  $call4 = (FUNCTION_TABLE_iiii[$3 & 1]($f,$s,$l)|0);
  $retval$0 = $call4;
  STACKTOP = sp;return ($retval$0|0);
 }
 $lbf = (($f) + 75|0);
 $4 = HEAP8[$lbf>>0]|0;
 $cmp6 = ($4<<24>>24)>(-1);
 L11: do {
  if ($cmp6) {
   $i$0 = $l;
   while(1) {
    $tobool9 = ($i$0|0)==(0);
    if ($tobool9) {
     $7 = $1;$i$1 = 0;$l$addr$0 = $l;$s$addr$0 = $s;
     break L11;
    }
    $sub = (($i$0) + -1)|0;
    $arrayidx = (($s) + ($sub)|0);
    $5 = HEAP8[$arrayidx>>0]|0;
    $cmp11 = ($5<<24>>24)==(10);
    if ($cmp11) {
     break;
    } else {
     $i$0 = $sub;
    }
   }
   $write15 = (($f) + 36|0);
   $6 = HEAP32[$write15>>2]|0;
   $call16 = (FUNCTION_TABLE_iiii[$6 & 1]($f,$s,$i$0)|0);
   $cmp17 = ($call16>>>0)<($i$0>>>0);
   if ($cmp17) {
    $retval$0 = $i$0;
    STACKTOP = sp;return ($retval$0|0);
   } else {
    $add$ptr = (($s) + ($i$0)|0);
    $sub21 = (($l) - ($i$0))|0;
    $$pre = HEAP32[$wpos>>2]|0;
    $7 = $$pre;$i$1 = $i$0;$l$addr$0 = $sub21;$s$addr$0 = $add$ptr;
    break;
   }
  } else {
   $7 = $1;$i$1 = 0;$l$addr$0 = $l;$s$addr$0 = $s;
  }
 } while(0);
 _memcpy(($7|0),($s$addr$0|0),($l$addr$0|0))|0;
 $8 = HEAP32[$wpos>>2]|0;
 $add$ptr26 = (($8) + ($l$addr$0)|0);
 HEAP32[$wpos>>2] = $add$ptr26;
 $add = (($i$1) + ($l$addr$0))|0;
 $retval$0 = $add;
 STACKTOP = sp;return ($retval$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$call13 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add$ptr = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call = 0, $call13 = 0, $call1318 = 0, $cmp = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $retval$0 = 0, $tobool = 0, $tobool14 = 0;
 var $tobool18 = 0, $vacopy_currentptr = 0, $wbase = 0, $wend = 0, $wpos = 0, $write = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $call = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $cmp = ($call|0)<(0);
 if ($cmp) {
  $retval$0 = -1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $buf_size = (($f) + 48|0);
 $0 = HEAP32[$buf_size>>2]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  $buf = (($f) + 44|0);
  $1 = HEAP32[$buf>>2]|0;
  HEAP32[$buf>>2] = $internal_buf;
  $wbase = (($f) + 28|0);
  HEAP32[$wbase>>2] = $internal_buf;
  $wpos = (($f) + 20|0);
  HEAP32[$wpos>>2] = $internal_buf;
  HEAP32[$buf_size>>2] = 80;
  $add$ptr = (($internal_buf) + 80|0);
  $wend = (($f) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $call13 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $tobool14 = ($1|0)==(0|0);
  if ($tobool14) {
   $ret$1 = $call13;
  } else {
   $write = (($f) + 36|0);
   $2 = HEAP32[$write>>2]|0;
   (FUNCTION_TABLE_iiii[$2 & 1]($f,0,0)|0);
   $3 = HEAP32[$wpos>>2]|0;
   $tobool18 = ($3|0)==(0|0);
   $$call13 = $tobool18 ? -1 : $call13;
   HEAP32[$buf>>2] = $1;
   HEAP32[$buf_size>>2] = 0;
   HEAP32[$wend>>2] = 0;
   HEAP32[$wbase>>2] = 0;
   HEAP32[$wpos>>2] = 0;
   $ret$1 = $$call13;
  }
 } else {
  $call1318 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $call1318;
 }
 $retval$0 = $ret$1;
 STACKTOP = sp;return ($retval$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$172 = 0, $$173 = 0, $$175 = 0, $$365$i = 0.0, $$p$i = 0, $$pr$i = 0, $$pr637$i = 0, $$pre = 0, $$pre$i = 0, $$pre654 = 0, $$pre655 = 0, $$sub264$i = 0, $$sub264$us$i = 0, $$sub514$i = 0, $$sub562$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0, $309$phi = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1735$i = 0;
 var $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3725$i = 0, $a$3725$us$i = 0, $a$5$lcssa$i = 0, $a$5707$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $add = 0, $add$i = 0, $add$i189 = 0, $add$i341 = 0, $add$ptr = 0, $add$ptr139 = 0, $add$ptr205 = 0, $add$ptr213$i = 0, $add$ptr257 = 0, $add$ptr311$i = 0;
 var $add$ptr311$us$i = 0, $add$ptr311$us$z$4$us$i = 0, $add$ptr333 = 0, $add$ptr352 = 0, $add$ptr354$sum$i = 0, $add$ptr358$i = 0, $add$ptr358$sum$i = 0, $add$ptr358$sum361$i = 0, $add$ptr373$i = 0, $add$ptr393$i = 0, $add$ptr43 = 0, $add$ptr442$i = 0, $add$ptr442$z$3$i = 0, $add$ptr466 = 0, $add$ptr65$i = 0, $add$ptr671$i = 0, $add$ptr742$i = 0, $add$ptr88 = 0, $add113$i = 0, $add150$i = 0;
 var $add154$i = 0, $add163$i = 0, $add165$i = 0, $add273$i = 0, $add275$i = 0, $add284$i = 0, $add284$us$i = 0, $add313$i = 0, $add313$us$i = 0, $add315 = 0, $add355$i = 0, $add388 = 0, $add405 = 0, $add410$i = 0.0, $add414$i = 0, $add434 = 0, $add477$neg$i = 0, $add561$i = 0, $add57$i = 0, $add57$i$i = 0;
 var $add57$i509$i = 0, $add57$i563$i = 0, $add57$i580$i = 0, $add57$i611$i = 0, $add608$i = 0, $add612$i = 0, $add620$i = 0, $add653$i = 0, $add67362$i = 0, $add87$i = 0.0, $add90$i = 0.0, $and = 0, $and$i297 = 0, $and$i338 = 0, $and$i352 = 0, $and$i373$i = 0, $and$i415$i = 0, $and$i517$i = 0, $and12$i = 0, $and134$i = 0;
 var $and210 = 0, $and214 = 0, $and214$conv207 = 0, $and216 = 0, $and219 = 0, $and249 = 0, $and254 = 0, $and263 = 0, $and282 = 0, $and282$i = 0, $and282$us$i = 0, $and287 = 0, $and302 = 0, $and302$fl$4 = 0, $and36$i = 0, $and379$i = 0, $and483$i = 0, $and610$i = 0, $and62$i = 0, $and702$i = 0;
 var $and780$i = 0, $arg$sroa$0$sroa$0$0$extract$trunc456 = 0, $arg$sroa$0$sroa$0$0$extract$trunc458 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531552 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531552$phi = 0, $arg$sroa$0$sroa$1$4$extract$trunc531553 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531554 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531555 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531556 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531556568 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531556656 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0;
 var $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0;
 var $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $arraydecay208$add$ptr213$i = 0, $arrayidx$i = 0, $arrayidx$i335 = 0, $arrayidx114 = 0;
 var $arrayidx117$i = 0, $arrayidx117$us$i = 0, $arrayidx117$us$us$i = 0, $arrayidx117$us647$i = 0, $arrayidx119 = 0, $arrayidx124 = 0, $arrayidx132 = 0, $arrayidx16 = 0, $arrayidx173 = 0, $arrayidx192 = 0, $arrayidx251$i = 0, $arrayidx31 = 0, $arrayidx35 = 0, $arrayidx363 = 0, $arrayidx453$i = 0, $arrayidx462 = 0, $arrayidx474 = 0, $arrayidx489$i = 0, $arrayidx68 = 0, $arrayidx73 = 0;
 var $arrayidx81 = 0, $big$i = 0, $brmerge$i = 0, $buf = 0, $buf$i = 0, $call = 0, $call337 = 0, $call338 = 0, $call349 = 0, $call377 = 0, $call404 = 0, $call55$i = 0.0, $carry$0730$i = 0, $carry262$0721$i = 0, $carry262$0721$us$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i198 = 0, $cmp$i247 = 0, $cmp$i299 = 0;
 var $cmp$i354 = 0, $cmp$i375$i = 0, $cmp$i417$i = 0, $cmp$i455$i = 0, $cmp$i519$i = 0, $cmp$i589$i = 0, $cmp$i622$i = 0, $cmp1 = 0, $cmp1$i = 0, $cmp1$i$i = 0, $cmp1$i249 = 0, $cmp1$i283 = 0, $cmp1$i302 = 0, $cmp1$i322 = 0, $cmp1$i357 = 0, $cmp1$i378$i = 0, $cmp1$i398$i = 0, $cmp1$i420$i = 0, $cmp1$i440$i = 0, $cmp1$i456$i = 0;
 var $cmp1$i476$i = 0, $cmp1$i522$i = 0, $cmp1$i542$i = 0, $cmp1$i590$i = 0, $cmp1$i623$i = 0, $cmp103$i = 0, $cmp105 = 0, $cmp111 = 0, $cmp116 = 0, $cmp12$i$i = 0, $cmp12$i489$i = 0, $cmp126 = 0, $cmp127$i = 0, $cmp127$us$i = 0, $cmp127$us$us$i = 0, $cmp127$us657$i = 0, $cmp13 = 0, $cmp131$i = 0, $cmp147$i = 0, $cmp165 = 0;
 var $cmp176 = 0, $cmp18 = 0, $cmp181 = 0, $cmp184 = 0, $cmp196$i = 0, $cmp205$i = 0, $cmp211 = 0, $cmp225$i = 0, $cmp225733$i = 0, $cmp228$i = 0, $cmp235$i = 0, $cmp235729$i = 0, $cmp240 = 0, $cmp249$i = 0, $cmp259$i = 0, $cmp259$us$i = 0, $cmp259723$i = 0, $cmp265$i = 0, $cmp265$us$i = 0, $cmp277$i = 0;
 var $cmp277$us$i = 0, $cmp277719$i = 0, $cmp277719$us$i = 0, $cmp299 = 0, $cmp299$i = 0, $cmp3$i = 0, $cmp3$i$i = 0, $cmp3$i256 = 0, $cmp3$i290 = 0, $cmp3$i309 = 0, $cmp3$i329 = 0, $cmp3$i364 = 0, $cmp3$i385$i = 0, $cmp3$i405$i = 0, $cmp3$i427$i = 0, $cmp3$i447$i = 0, $cmp3$i463$i = 0, $cmp3$i483$i = 0, $cmp3$i529$i = 0, $cmp3$i549$i = 0;
 var $cmp3$i597$i = 0, $cmp3$i630$i = 0, $cmp308$i = 0, $cmp308$us$i = 0, $cmp315$i = 0, $cmp316 = 0, $cmp324$i = 0, $cmp324715$i = 0, $cmp333$i = 0, $cmp338$i = 0, $cmp350$i = 0, $cmp363711$i = 0, $cmp37 = 0, $cmp370 = 0, $cmp370610 = 0, $cmp374$i = 0, $cmp378 = 0, $cmp38$i = 0, $cmp383 = 0, $cmp385$i = 0;
 var $cmp39$i = 0, $cmp39$i$i = 0, $cmp39$i251 = 0, $cmp39$i285 = 0, $cmp39$i304 = 0, $cmp39$i324 = 0, $cmp39$i359 = 0, $cmp39$i380$i = 0, $cmp39$i400$i = 0, $cmp39$i422$i = 0, $cmp39$i442$i = 0, $cmp39$i458$i = 0, $cmp39$i478$i = 0, $cmp39$i524$i = 0, $cmp39$i544$i = 0, $cmp39$i592$i = 0, $cmp39$i625$i = 0, $cmp390 = 0, $cmp390$i = 0, $cmp394$i = 0;
 var $cmp397 = 0, $cmp397616 = 0, $cmp403$i = 0, $cmp406 = 0, $cmp411$i = 0, $cmp416$i = 0, $cmp416705$i = 0, $cmp420$i = 0, $cmp427 = 0, $cmp433$i = 0, $cmp433701$i = 0, $cmp435 = 0, $cmp443$i = 0, $cmp450$i = 0, $cmp450$lcssa$i = 0, $cmp459 = 0, $cmp470$i = 0, $cmp471 = 0, $cmp473$i = 0, $cmp495$i = 0;
 var $cmp495697$i = 0, $cmp50 = 0, $cmp505$i = 0, $cmp50590 = 0, $cmp515$i = 0, $cmp528$i = 0, $cmp563$i = 0, $cmp577$i = 0, $cmp59$i = 0, $cmp614$i = 0, $cmp617$i = 0, $cmp623$i = 0, $cmp636$i = 0, $cmp636692$i = 0, $cmp65 = 0, $cmp660$i = 0, $cmp665$i = 0, $cmp673$i = 0, $cmp678$i = 0, $cmp678677$i = 0;
 var $cmp686$i = 0, $cmp707$i = 0, $cmp707671$i = 0, $cmp710$i = 0, $cmp710672$i = 0, $cmp722$i = 0, $cmp722668$i = 0, $cmp727$i = 0, $cmp745$i = 0, $cmp748$i = 0, $cmp748685$i = 0, $cmp75 = 0, $cmp760$i = 0, $cmp765$i = 0, $cmp770$i = 0, $cmp770681$i = 0, $cmp777$i = 0, $cmp790$i = 0, $cmp82$i = 0, $cmp94$i = 0;
 var $cmp97 = 0, $cnt$0 = 0, $cnt$1 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i250 = 0, $cond$i284 = 0, $cond$i303 = 0, $cond$i323 = 0, $cond$i340 = 0, $cond$i358 = 0, $cond$i379$i = 0, $cond$i399$i = 0, $cond$i421$i = 0, $cond$i441$i = 0, $cond$i457$i = 0, $cond$i477$i = 0, $cond$i523$i = 0, $cond$i543$i = 0, $cond$i591$i = 0;
 var $cond$i624$i = 0, $cond100$i = 0, $cond233$i = 0, $cond245 = 0, $cond419 = 0, $cond43$i = 0, $cond629$i = 0, $cond732$i = 0, $conv$i = 0, $conv$i191 = 0, $conv1$i = 0, $conv111$i = 0, $conv114$i = 0, $conv116$i = 0, $conv116$us$i = 0, $conv116$us$us$i = 0, $conv116$us646$i = 0, $conv118363$i = 0, $conv118363$us$i = 0, $conv118363$us$us$i = 0;
 var $conv118363$us648$i = 0, $conv12$i = 0, $conv12$i215 = 0, $conv120 = 0, $conv121$i = 0, $conv121$us$i = 0, $conv121$us$us$i = 0, $conv121$us650$i = 0, $conv123$i = 0.0, $conv123$us$i = 0.0, $conv123$us$us$i = 0.0, $conv123$us652$i = 0.0, $conv134 = 0, $conv163 = 0, $conv17$mask$i = 0, $conv17$mask$i220 = 0, $conv174 = 0, $conv207 = 0, $conv216$i = 0, $conv218$i = 0.0;
 var $conv22$i = 0, $conv22$i225 = 0, $conv229 = 0, $conv232 = 0, $conv27$mask$i = 0, $conv27$mask$i230 = 0, $conv3$i = 0, $conv3$i182 = 0, $conv32 = 0, $conv332 = 0, $conv4$i = 0, $conv48 = 0, $conv48588 = 0, $conv48593 = 0, $conv58 = 0, $conv6$i = 0, $conv6$i$i = 0, $conv6$i510$i = 0, $conv6$i564$i = 0, $conv6$i581$i = 0;
 var $conv6$i612$i = 0, $conv644$i = 0, $conv646$i = 0, $conv69 = 0, $conv7$i = 0, $conv7$i185 = 0, $conv83 = 0, $d$0$i = 0, $d$0728$i = 0, $d$0731$i = 0, $d$1720$i = 0, $d$1720$us$i = 0, $d$2$lcssa$i = 0, $d$2706$i = 0, $d$3$i = 0, $d$4680$i = 0, $d$5674$i = 0, $d$6687$i = 0, $dec$i = 0, $dec476$i = 0;
 var $dec481$i = 0, $dec78$i = 0, $div274$i = 0, $div356$i = 0, $div378$i = 0, $div384$i = 0, $div9$i = 0, $div9$i$i = 0, $div9$i512$i = 0, $div9$i566$i = 0, $div9$i583$i = 0, $div9$i614$i = 0, $e$0717$i = 0, $e$1$i = 0, $e$2703$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0;
 var $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1693$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0586 = 0, $fl$0592 = 0, $fl$1 = 0, $fl$1$and219 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$06$i = 0, $i$06$i186 = 0, $i$0609 = 0, $i$0612 = 0, $i$0716$i = 0, $i$1$lcssa$i = 0, $i$1617 = 0;
 var $i$1712$i = 0, $i$2577 = 0, $i$2702$i = 0, $i$3575 = 0, $i$3698$i = 0, $i137 = 0, $i86 = 0, $idxprom$i = 0, $inc = 0, $inc$i = 0, $inc425$i = 0, $inc438$i = 0, $inc468$$p$i = 0, $inc468$i = 0, $inc481 = 0, $inc500$i = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i190 = 0;
 var $incdec$ptr$i190557 = 0, $incdec$ptr$i190558 = 0, $incdec$ptr$i190559 = 0, $incdec$ptr$i190562 = 0, $incdec$ptr$i190563 = 0, $incdec$ptr$i190564$lcssa = 0, $incdec$ptr$i190564579 = 0, $incdec$ptr$i242 = 0, $incdec$ptr$i265 = 0, $incdec$ptr$i272 = 0, $incdec$ptr$i496$i = 0, $incdec$ptr106$i = 0, $incdec$ptr112$i = 0, $incdec$ptr115$i = 0, $incdec$ptr122$i = 0, $incdec$ptr122$us$i = 0, $incdec$ptr122$us$us$i = 0, $incdec$ptr122$us651$i = 0, $incdec$ptr137$i = 0, $incdec$ptr137$us$i = 0;
 var $incdec$ptr137$us$us$i = 0, $incdec$ptr137$us661$i = 0, $incdec$ptr169 = 0, $incdec$ptr217$i = 0, $incdec$ptr23 = 0, $incdec$ptr246$i = 0, $incdec$ptr288$i = 0, $incdec$ptr288$us$i = 0, $incdec$ptr292$a$3$i = 0, $incdec$ptr292$a$3$us$i = 0, $incdec$ptr292$a$3$us746$i = 0, $incdec$ptr292$a$3$us748$i = 0, $incdec$ptr292$a$3751$i = 0, $incdec$ptr292$a$3753$i = 0, $incdec$ptr292$i = 0, $incdec$ptr292$us$i = 0, $incdec$ptr292$us745$i = 0, $incdec$ptr292750$i = 0, $incdec$ptr296$i = 0, $incdec$ptr296$us$i = 0;
 var $incdec$ptr376 = 0, $incdec$ptr403 = 0, $incdec$ptr419$i = 0, $incdec$ptr423$i = 0, $incdec$ptr62 = 0, $incdec$ptr639$i = 0, $incdec$ptr645$i = 0, $incdec$ptr647$i = 0, $incdec$ptr681$i = 0, $incdec$ptr689$i = 0, $incdec$ptr698$i = 0, $incdec$ptr7$i = 0, $incdec$ptr7$i$i = 0, $incdec$ptr7$i511$i = 0, $incdec$ptr7$i565$i = 0, $incdec$ptr7$i582$i = 0, $incdec$ptr7$i613$i = 0, $incdec$ptr725$i = 0, $incdec$ptr734$i = 0, $incdec$ptr773$i = 0;
 var $incdec$ptr776$i = 0, $incdec$ptr808$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i193 = 0, $isdigit168 = 0, $isdigit170 = 0, $isdigit5$i = 0, $isdigit5$i184 = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i192 = 0, $isdigittmp167 = 0, $isdigittmp169 = 0, $isdigittmp4$i = 0, $isdigittmp4$i183 = 0, $j$0$i = 0, $j$0710$i = 0, $j$0713$i = 0, $j$1699$i = 0;
 var $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1$lcssa = 0, $l$1611 = 0, $l$addr$0$lcssa$i = 0, $l$addr$0$lcssa$i$i = 0, $l$addr$0$lcssa$i258 = 0, $l$addr$0$lcssa$i292 = 0, $l$addr$0$lcssa$i311 = 0, $l$addr$0$lcssa$i331 = 0, $l$addr$0$lcssa$i366 = 0, $l$addr$0$lcssa$i387$i = 0, $l$addr$0$lcssa$i407$i = 0, $l$addr$0$lcssa$i429$i = 0, $l$addr$0$lcssa$i449$i = 0, $l$addr$0$lcssa$i465$i = 0, $l$addr$0$lcssa$i485$i = 0, $l$addr$0$lcssa$i531$i = 0;
 var $l$addr$0$lcssa$i551$i = 0, $l$addr$0$lcssa$i599$i = 0, $l$addr$0$lcssa$i632$i = 0, $l$addr$010$i = 0, $l$addr$010$i$i = 0, $l$addr$010$i253 = 0, $l$addr$010$i287 = 0, $l$addr$010$i306 = 0, $l$addr$010$i326 = 0, $l$addr$010$i361 = 0, $l$addr$010$i382$i = 0, $l$addr$010$i402$i = 0, $l$addr$010$i424$i = 0, $l$addr$010$i444$i = 0, $l$addr$010$i460$i = 0, $l$addr$010$i480$i = 0, $l$addr$010$i526$i = 0, $l$addr$010$i546$i = 0, $l$addr$010$i594$i = 0, $l$addr$010$i627$i = 0;
 var $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $land$ext$neg$i = 0, $lnot$ext = 0, $lnot$i = 0, $lnot455$i = 0, $lnot476 = 0, $lor$ext$i = 0, $mb = 0, $mul$i = 0, $mul$i187 = 0, $mul$i343 = 0.0, $mul125$i = 0.0, $mul125$us$i = 0.0, $mul125$us$us$i = 0.0, $mul125$us654$i = 0.0, $mul202$i = 0.0;
 var $mul220$i = 0.0, $mul286$i = 0, $mul286$us$i = 0, $mul322$i = 0, $mul328$i = 0, $mul335$i = 0, $mul349$i = 0, $mul367$i = 0, $mul406$i = 0.0, $mul407$i = 0.0, $mul431$i = 0, $mul437$i = 0, $mul499$i = 0, $mul513$i = 0, $mul80$i = 0.0, $or = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i281 = 0;
 var $or$cond$i300 = 0, $or$cond$i320 = 0, $or$cond$i346 = 0, $or$cond$i355 = 0, $or$cond$i376$i = 0, $or$cond$i396$i = 0, $or$cond$i418$i = 0, $or$cond$i438$i = 0, $or$cond$i474$i = 0, $or$cond$i520$i = 0, $or$cond$i540$i = 0, $or$cond1$i = 0, $or$cond368$i = 0, $or$cond368673$i = 0, $or$cond369$i = 0, $or$i = 0, $or$i344 = 0, $or100 = 0, $or120$i = 0, $or120$us$i = 0;
 var $or120$us$us$i = 0, $or120$us649$i = 0, $or246 = 0, $or504$i = 0, $or613$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$add315 = 0, $p$4658 = 0, $p$5 = 0, $p$addr$2$$sub514$i = 0, $p$addr$2$$sub562$i = 0, $p$addr$2$i = 0, $p$addr$3$i = 0, $p$addr$4$lcssa$i = 0, $p$addr$4675$i = 0, $p$addr$5688$i = 0, $pad$i = 0, $pl$0 = 0;
 var $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$add$ptr65$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1667$i = 0, $rem360$i = 0, $rem370$i = 0, $rem4$i = 0, $rem4$i$i = 0, $rem4$i508$i = 0, $rem4$i562$i = 0, $rem4$i579$i = 0, $rem4$i610$i = 0;
 var $rem494$i = 0, $rem494696$i = 0, $retval$0 = 0, $round$0666$i = 0.0, $round377$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us644$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us663$i = 0, $s$addr$0$lcssa$i$i = 0, $s$addr$0$lcssa$i269 = 0, $s$addr$0$lcssa$i275 = 0, $s$addr$0$lcssa$i502$i = 0, $s$addr$014$i = 0, $s$addr$014$i$i = 0;
 var $s$addr$014$i491$i = 0, $s$addr$06$i = 0, $s$addr$07$i = 0, $s$addr$1$lcssa$i$i = 0, $s$addr$1$lcssa$i568$i = 0, $s$addr$110$i = 0, $s$addr$110$i$i = 0, $s$addr$110$i507$i = 0, $s$addr$110$i561$i = 0, $s$addr$110$i578$i = 0, $s$addr$110$i609$i = 0, $s35$0$i = 0, $s668$0678$i = 0, $s668$1$i = 0, $s715$0$lcssa$i = 0, $s715$0669$i = 0, $s753$0$i = 0, $s753$1682$i = 0, $s753$2$i = 0, $sext = 0;
 var $sext573 = 0, $shl = 0, $shl280$i = 0, $shl280$us$i = 0, $shl60 = 0, $shr = 0, $shr283$i = 0, $shr283$us$i = 0, $shr285$i = 0, $shr285$us$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge166584 = 0, $storemerge166591 = 0, $storemerge171 = 0, $sub = 0, $sub$i = 0, $sub$i$i = 0;
 var $sub$i179 = 0, $sub$i188 = 0, $sub$i248 = 0, $sub$i282 = 0, $sub$i301 = 0, $sub$i321 = 0, $sub$i337 = 0.0, $sub$i356 = 0, $sub$i377$i = 0, $sub$i397$i = 0, $sub$i419$i = 0, $sub$i439$i = 0, $sub$i475$i = 0, $sub$i521$i = 0, $sub$i541$i = 0, $sub$ptr$div$i = 0, $sub$ptr$div$us$i = 0, $sub$ptr$div321$i = 0, $sub$ptr$div347$i = 0, $sub$ptr$div430$i = 0;
 var $sub$ptr$div511$i = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$us$i = 0, $sub$ptr$lhs$cast$us$us$i = 0, $sub$ptr$lhs$cast$us655$i = 0, $sub$ptr$lhs$cast157$pre$i = 0, $sub$ptr$lhs$cast160$i = 0, $sub$ptr$lhs$cast305$i = 0, $sub$ptr$lhs$cast305$us$i = 0, $sub$ptr$lhs$cast310 = 0, $sub$ptr$lhs$cast318$i = 0, $sub$ptr$lhs$cast344$i = 0, $sub$ptr$lhs$cast354 = 0, $sub$ptr$lhs$cast424 = 0, $sub$ptr$lhs$cast508$i = 0, $sub$ptr$lhs$cast694$i = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast152$i = 0;
 var $sub$ptr$rhs$cast161$i = 0, $sub$ptr$rhs$cast174$i = 0, $sub$ptr$rhs$cast306$i = 0, $sub$ptr$rhs$cast306$us$i = 0, $sub$ptr$rhs$cast311 = 0, $sub$ptr$rhs$cast319$i = 0, $sub$ptr$rhs$cast355 = 0, $sub$ptr$rhs$cast425 = 0, $sub$ptr$rhs$cast428$i = 0, $sub$ptr$rhs$cast634$i = 0, $sub$ptr$rhs$cast634690$i = 0, $sub$ptr$rhs$cast649$i = 0, $sub$ptr$rhs$cast695$i = 0, $sub$ptr$rhs$cast788$i = 0, $sub$ptr$rhs$cast812$i = 0, $sub$ptr$sub = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$us$i = 0, $sub$ptr$sub$us$us$i = 0, $sub$ptr$sub$us656$i = 0;
 var $sub$ptr$sub145$i = 0, $sub$ptr$sub153$i = 0, $sub$ptr$sub159$i = 0, $sub$ptr$sub162$i = 0, $sub$ptr$sub172$i = 0, $sub$ptr$sub175$i = 0, $sub$ptr$sub307$i = 0, $sub$ptr$sub307$us$i = 0, $sub$ptr$sub312 = 0, $sub$ptr$sub320$i = 0, $sub$ptr$sub346$i = 0, $sub$ptr$sub356 = 0, $sub$ptr$sub426 = 0, $sub$ptr$sub426$p$5 = 0, $sub$ptr$sub429$i = 0, $sub$ptr$sub510$i = 0, $sub$ptr$sub635$i = 0, $sub$ptr$sub635691$i = 0, $sub$ptr$sub650$i = 0, $sub$ptr$sub650$pn$i = 0;
 var $sub$ptr$sub696$i = 0, $sub$ptr$sub789$i = 0, $sub$ptr$sub789$p$addr$5$i = 0, $sub$ptr$sub813$i = 0, $sub101 = 0, $sub124$i = 0.0, $sub124$us$i = 0.0, $sub124$us$us$i = 0.0, $sub124$us653$i = 0.0, $sub135 = 0, $sub146$i = 0, $sub164 = 0, $sub175 = 0, $sub176$i = 0, $sub181$i = 0, $sub203$i = 0, $sub219$i = 0.0, $sub256$i = 0, $sub264$i = 0, $sub264$us$i = 0;
 var $sub281$i = 0, $sub281$us$i = 0, $sub336$i = 0, $sub343$i = 0, $sub382 = 0, $sub409$i = 0, $sub478$i = 0, $sub480$i = 0, $sub49 = 0, $sub49589 = 0, $sub5$i = 0, $sub5$i$i = 0, $sub5$i255 = 0, $sub5$i289 = 0, $sub5$i308 = 0, $sub5$i328 = 0, $sub5$i363 = 0, $sub5$i384$i = 0, $sub5$i404$i = 0, $sub5$i426$i = 0;
 var $sub5$i446$i = 0, $sub5$i462$i = 0, $sub5$i482$i = 0, $sub5$i528$i = 0, $sub5$i548$i = 0, $sub5$i596$i = 0, $sub5$i629$i = 0, $sub514$i = 0, $sub54 = 0, $sub562$i = 0, $sub59 = 0, $sub626$i = 0, $sub735$i = 0, $sub74$i = 0, $sub806$i = 0, $sub84 = 0, $sub85$i = 0.0, $sub86$i = 0.0, $sub88$i = 0.0, $sub91$i = 0.0;
 var $sub97$i = 0, $t$0 = 0, $t$1 = 0, $t$addr$0$i = 0, $t$addr$1$i = 0, $tobool = 0, $tobool$i = 0, $tobool$i$i = 0, $tobool$i279 = 0, $tobool$i298 = 0, $tobool$i318 = 0, $tobool$i353 = 0, $tobool$i374$i = 0, $tobool$i394$i = 0, $tobool$i416$i = 0, $tobool$i436$i = 0, $tobool$i472$i = 0, $tobool$i518$i = 0, $tobool$i538$i = 0, $tobool129$us$i = 0;
 var $tobool13$i = 0, $tobool135$i = 0, $tobool139$i = 0, $tobool139$us$i = 0, $tobool139$us$us$i = 0, $tobool140$i = 0, $tobool141 = 0, $tobool178 = 0, $tobool208 = 0, $tobool217 = 0, $tobool222$i = 0, $tobool244$i = 0, $tobool25 = 0, $tobool255 = 0, $tobool264 = 0, $tobool28 = 0, $tobool283 = 0, $tobool288 = 0, $tobool290$i = 0, $tobool290$us$i = 0;
 var $tobool290$us744$i = 0, $tobool290749$i = 0, $tobool294$i = 0, $tobool294$us$i = 0, $tobool307 = 0, $tobool341$$i = 0, $tobool341$i = 0, $tobool342 = 0, $tobool350 = 0, $tobool37$i = 0, $tobool371$i = 0, $tobool373 = 0, $tobool380$i = 0, $tobool400 = 0, $tobool400$i = 0, $tobool452 = 0, $tobool455 = 0, $tobool463 = 0, $tobool466$i = 0, $tobool484$i = 0;
 var $tobool490$i = 0, $tobool55 = 0, $tobool56$i = 0, $tobool609$i = 0, $tobool611$i = 0, $tobool63$i = 0, $tobool703$i = 0, $tobool76$i = 0, $tobool781$not$i = 0, $tobool79$i = 0, $tobool9$i = 0, $tobool9$i$i = 0, $tobool9$i339 = 0, $tobool9$i504$i = 0, $tobool9$i558$i = 0, $tobool9$i575$i = 0, $tobool9$i606$i = 0, $tobool90 = 0, $w$0 = 0, $w$1 = 0;
 var $w$2 = 0, $w$add$i = 0, $w$add165$i = 0, $w$add653$i = 0, $wc = 0, $ws$0613 = 0, $ws$1618 = 0, $x$addr$0$lcssa$off0$i = 0, $x$addr$0$lcssa$off0$i$i = 0, $x$addr$0$lcssa$off0$i503$i = 0, $xor$i = 0, $y$011$i = 0, $y$011$i$i = 0, $y$011$i506$i = 0, $y$011$i560$i = 0, $y$011$i577$i = 0, $y$011$i608$i = 0, $y$addr$0$i = 0.0, $y$addr$1$i = 0.0, $y$addr$2$i = 0.0;
 var $y$addr$2$us$i = 0.0, $y$addr$2$us$us$i = 0.0, $y$addr$2$us645$i = 0.0, $y$addr$3$i = 0.0, $y$addr$4$i = 0.0, $z$0$i = 0, $z$0$lcssa = 0, $z$0580 = 0, $z$1$lcssa$i = 0, $z$1734$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3724$i = 0, $z$3724$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$add$ptr742$i = 0, $z$6$i = 0;
 var $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 560|0;
 $sub$ptr$rhs$cast$i = $buf$i;
 $ebuf0$i = sp + 840|0;
 $pad$i = sp + 584|0;
 $buf = sp + 520|0;
 $wc = sp;
 $mb = sp + 852|0;
 $tobool25 = ($f|0)!=(0|0);
 $add$ptr205 = (($buf) + 40|0);
 $sub$ptr$lhs$cast310 = $add$ptr205;
 $add$ptr333 = (($buf) + 39|0);
 $arrayidx363 = (($wc) + 4|0);
 $arrayidx$i335 = (($ebuf0$i) + 12|0);
 $incdec$ptr106$i = (($ebuf0$i) + 11|0);
 $sub$ptr$lhs$cast160$i = $arrayidx$i335;
 $sub$ptr$sub162$i = (($sub$ptr$lhs$cast160$i) - ($sub$ptr$rhs$cast$i))|0;
 $sub$ptr$sub145$i = (-2 - ($sub$ptr$rhs$cast$i))|0;
 $sub$ptr$sub153$i = (($sub$ptr$lhs$cast160$i) + 2)|0;
 $add$ptr213$i = (($big$i) + 288|0);
 $add$ptr671$i = (($buf$i) + 9|0);
 $sub$ptr$lhs$cast694$i = $add$ptr671$i;
 $incdec$ptr689$i = (($buf$i) + 8|0);
 $309 = 0;$arg$sroa$0$sroa$1$4$extract$trunc531552 = 0;$cnt$0 = 0;$incdec$ptr$i190563 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $cmp = ($cnt$0|0)>(-1);
  do {
   if ($cmp) {
    $sub = (2147483647 - ($cnt$0))|0;
    $cmp1 = ($l$0|0)>($sub|0);
    if ($cmp1) {
     $call = (___errno_location()|0);
     HEAP32[$call>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $add = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $add;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $0 = HEAP8[$incdec$ptr$i190563>>0]|0;
  $tobool = ($0<<24>>24)==(0);
  if ($tobool) {
   label = 344;
   break;
  } else {
   $310 = $0;$incdec$ptr$i190562 = $incdec$ptr$i190563;
  }
  while(1) {
   if ((($310<<24>>24) == 37)) {
    $incdec$ptr$i190564579 = $incdec$ptr$i190562;$z$0580 = $incdec$ptr$i190562;
    label = 9;
    break;
   } else if ((($310<<24>>24) == 0)) {
    $incdec$ptr$i190564$lcssa = $incdec$ptr$i190562;$z$0$lcssa = $incdec$ptr$i190562;
    break;
   }
   $incdec$ptr = (($incdec$ptr$i190562) + 1|0);
   $$pre = HEAP8[$incdec$ptr>>0]|0;
   $310 = $$pre;$incdec$ptr$i190562 = $incdec$ptr;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $arrayidx16 = (($incdec$ptr$i190564579) + 1|0);
     $1 = HEAP8[$arrayidx16>>0]|0;
     $cmp18 = ($1<<24>>24)==(37);
     if (!($cmp18)) {
      $incdec$ptr$i190564$lcssa = $incdec$ptr$i190564579;$z$0$lcssa = $z$0580;
      break L12;
     }
     $incdec$ptr23 = (($z$0580) + 1|0);
     $add$ptr = (($incdec$ptr$i190564579) + 2|0);
     $2 = HEAP8[$add$ptr>>0]|0;
     $cmp13 = ($2<<24>>24)==(37);
     if ($cmp13) {
      $incdec$ptr$i190564579 = $add$ptr;$z$0580 = $incdec$ptr23;
      label = 9;
     } else {
      $incdec$ptr$i190564$lcssa = $add$ptr;$z$0$lcssa = $incdec$ptr23;
      break;
     }
    }
   }
  } while(0);
  $sub$ptr$lhs$cast = $z$0$lcssa;
  $sub$ptr$rhs$cast = $incdec$ptr$i190563;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  if ($tobool25) {
   (___fwritex($incdec$ptr$i190563,$sub$ptr$sub,$f)|0);
  }
  $tobool28 = ($z$0$lcssa|0)==($incdec$ptr$i190563|0);
  if (!($tobool28)) {
   $l10n$0$phi = $l10n$0;$arg$sroa$0$sroa$1$4$extract$trunc531552$phi = $arg$sroa$0$sroa$1$4$extract$trunc531552;$309$phi = $309;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr$i190564$lcssa;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$0$phi;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531552$phi;$309 = $309$phi;
   continue;
  }
  $arrayidx31 = (($incdec$ptr$i190564$lcssa) + 1|0);
  $3 = HEAP8[$arrayidx31>>0]|0;
  $conv32 = $3 << 24 >> 24;
  $isdigittmp = (($conv32) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $arrayidx35 = (($incdec$ptr$i190564$lcssa) + 2|0);
   $4 = HEAP8[$arrayidx35>>0]|0;
   $cmp37 = ($4<<24>>24)==(36);
   if ($cmp37) {
    $add$ptr43 = (($incdec$ptr$i190564$lcssa) + 3|0);
    $$pre654 = HEAP8[$add$ptr43>>0]|0;
    $5 = $$pre654;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $add$ptr43;
   } else {
    $5 = $3;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $arrayidx31;
   }
  } else {
   $5 = $3;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $arrayidx31;
  }
  $conv48588 = $5 << 24 >> 24;
  $sub49589 = (($conv48588) + -32)|0;
  $cmp50590 = ($sub49589>>>0)<(32);
  L25: do {
   if ($cmp50590) {
    $6 = $5;$conv48593 = $conv48588;$fl$0592 = 0;$storemerge166591 = $storemerge;
    while(1) {
     $sub54 = (($conv48593) + -32)|0;
     $shl = 1 << $sub54;
     $and = $shl & 75913;
     $tobool55 = ($and|0)==(0);
     if ($tobool55) {
      $8 = $6;$fl$0586 = $fl$0592;$storemerge166584 = $storemerge166591;
      break L25;
     }
     $conv58 = $6 << 24 >> 24;
     $sub59 = (($conv58) + -32)|0;
     $shl60 = 1 << $sub59;
     $or = $shl60 | $fl$0592;
     $incdec$ptr62 = (($storemerge166591) + 1|0);
     $7 = HEAP8[$incdec$ptr62>>0]|0;
     $conv48 = $7 << 24 >> 24;
     $sub49 = (($conv48) + -32)|0;
     $cmp50 = ($sub49>>>0)<(32);
     if ($cmp50) {
      $6 = $7;$conv48593 = $conv48;$fl$0592 = $or;$storemerge166591 = $incdec$ptr62;
     } else {
      $8 = $7;$fl$0586 = $or;$storemerge166584 = $incdec$ptr62;
      break;
     }
    }
   } else {
    $8 = $5;$fl$0586 = 0;$storemerge166584 = $storemerge;
   }
  } while(0);
  $cmp65 = ($8<<24>>24)==(42);
  do {
   if ($cmp65) {
    $arrayidx68 = (($storemerge166584) + 1|0);
    $9 = HEAP8[$arrayidx68>>0]|0;
    $conv69 = $9 << 24 >> 24;
    $isdigittmp169 = (($conv69) + -48)|0;
    $isdigit170 = ($isdigittmp169>>>0)<(10);
    if ($isdigit170) {
     $arrayidx73 = (($storemerge166584) + 2|0);
     $10 = HEAP8[$arrayidx73>>0]|0;
     $cmp75 = ($10<<24>>24)==(36);
     if ($cmp75) {
      $arrayidx81 = (($nl_type) + ($isdigittmp169<<2)|0);
      HEAP32[$arrayidx81>>2] = 10;
      $11 = HEAP8[$arrayidx68>>0]|0;
      $conv83 = $11 << 24 >> 24;
      $sub84 = (($conv83) + -48)|0;
      $i86 = (($nl_arg) + ($sub84<<3)|0);
      $12 = $i86;
      $13 = $12;
      $14 = HEAP32[$13>>2]|0;
      $15 = (($12) + 4)|0;
      $16 = $15;
      $17 = HEAP32[$16>>2]|0;
      $add$ptr88 = (($storemerge166584) + 3|0);
      $l10n$2 = 1;$storemerge171 = $add$ptr88;$w$0 = $14;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $tobool90 = ($l10n$1|0)==(0);
     if (!($tobool90)) {
      $retval$0 = -1;
      label = 362;
      break L1;
     }
     if (!($tobool25)) {
      $fl$1 = $fl$0586;$incdec$ptr$i190559 = $arrayidx68;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $18 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge171 = $arrayidx68;$w$0 = $18;
    }
    $cmp97 = ($w$0|0)<(0);
    if ($cmp97) {
     $or100 = $fl$0586 | 8192;
     $sub101 = (0 - ($w$0))|0;
     $fl$1 = $or100;$incdec$ptr$i190559 = $storemerge171;$l10n$3 = $l10n$2;$w$1 = $sub101;
    } else {
     $fl$1 = $fl$0586;$incdec$ptr$i190559 = $storemerge171;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $conv3$i = $8 << 24 >> 24;
    $isdigittmp4$i = (($conv3$i) + -48)|0;
    $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
    if ($isdigit5$i) {
     $19 = $storemerge166584;$conv7$i = $conv3$i;$i$06$i = 0;
     while(1) {
      $mul$i = ($i$06$i*10)|0;
      $sub$i = (($conv7$i) + -48)|0;
      $add$i = (($sub$i) + ($mul$i))|0;
      $incdec$ptr$i = (($19) + 1|0);
      $20 = HEAP8[$incdec$ptr$i>>0]|0;
      $conv$i = $20 << 24 >> 24;
      $isdigittmp$i = (($conv$i) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $19 = $incdec$ptr$i;$conv7$i = $conv$i;$i$06$i = $add$i;
      } else {
       break;
      }
     }
     $cmp105 = ($add$i|0)<(0);
     if ($cmp105) {
      $retval$0 = -1;
      label = 362;
      break L1;
     } else {
      $fl$1 = $fl$0586;$incdec$ptr$i190559 = $incdec$ptr$i;$l10n$3 = $l10n$1;$w$1 = $add$i;
     }
    } else {
     $fl$1 = $fl$0586;$incdec$ptr$i190559 = $storemerge166584;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $21 = HEAP8[$incdec$ptr$i190559>>0]|0;
  $cmp111 = ($21<<24>>24)==(46);
  L46: do {
   if ($cmp111) {
    $arrayidx114 = (($incdec$ptr$i190559) + 1|0);
    $22 = HEAP8[$arrayidx114>>0]|0;
    $cmp116 = ($22<<24>>24)==(42);
    if (!($cmp116)) {
     $conv3$i182 = $22 << 24 >> 24;
     $isdigittmp4$i183 = (($conv3$i182) + -48)|0;
     $isdigit5$i184 = ($isdigittmp4$i183>>>0)<(10);
     if ($isdigit5$i184) {
      $33 = $arrayidx114;$conv7$i185 = $conv3$i182;$i$06$i186 = 0;
     } else {
      $incdec$ptr$i190558 = $arrayidx114;$p$0 = 0;
      break;
     }
     while(1) {
      $mul$i187 = ($i$06$i186*10)|0;
      $sub$i188 = (($conv7$i185) + -48)|0;
      $add$i189 = (($sub$i188) + ($mul$i187))|0;
      $incdec$ptr$i190 = (($33) + 1|0);
      $34 = HEAP8[$incdec$ptr$i190>>0]|0;
      $conv$i191 = $34 << 24 >> 24;
      $isdigittmp$i192 = (($conv$i191) + -48)|0;
      $isdigit$i193 = ($isdigittmp$i192>>>0)<(10);
      if ($isdigit$i193) {
       $33 = $incdec$ptr$i190;$conv7$i185 = $conv$i191;$i$06$i186 = $add$i189;
      } else {
       $incdec$ptr$i190558 = $incdec$ptr$i190;$p$0 = $add$i189;
       break L46;
      }
     }
    }
    $arrayidx119 = (($incdec$ptr$i190559) + 2|0);
    $23 = HEAP8[$arrayidx119>>0]|0;
    $conv120 = $23 << 24 >> 24;
    $isdigittmp167 = (($conv120) + -48)|0;
    $isdigit168 = ($isdigittmp167>>>0)<(10);
    if ($isdigit168) {
     $arrayidx124 = (($incdec$ptr$i190559) + 3|0);
     $24 = HEAP8[$arrayidx124>>0]|0;
     $cmp126 = ($24<<24>>24)==(36);
     if ($cmp126) {
      $arrayidx132 = (($nl_type) + ($isdigittmp167<<2)|0);
      HEAP32[$arrayidx132>>2] = 10;
      $25 = HEAP8[$arrayidx119>>0]|0;
      $conv134 = $25 << 24 >> 24;
      $sub135 = (($conv134) + -48)|0;
      $i137 = (($nl_arg) + ($sub135<<3)|0);
      $26 = $i137;
      $27 = $26;
      $28 = HEAP32[$27>>2]|0;
      $29 = (($26) + 4)|0;
      $30 = $29;
      $31 = HEAP32[$30>>2]|0;
      $add$ptr139 = (($incdec$ptr$i190559) + 4|0);
      $incdec$ptr$i190558 = $add$ptr139;$p$0 = $28;
      break;
     }
    }
    $tobool141 = ($l10n$3|0)==(0);
    if (!($tobool141)) {
     $retval$0 = -1;
     label = 362;
     break L1;
    }
    if ($tobool25) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $32 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $incdec$ptr$i190558 = $arrayidx119;$p$0 = $32;
    } else {
     $incdec$ptr$i190558 = $arrayidx119;$p$0 = 0;
    }
   } else {
    $incdec$ptr$i190558 = $incdec$ptr$i190559;$p$0 = -1;
   }
  } while(0);
  $incdec$ptr$i190557 = $incdec$ptr$i190558;$st$0 = 0;
  while(1) {
   $35 = HEAP8[$incdec$ptr$i190557>>0]|0;
   $conv163 = $35 << 24 >> 24;
   $sub164 = (($conv163) + -65)|0;
   $cmp165 = ($sub164>>>0)>(57);
   if ($cmp165) {
    $retval$0 = -1;
    label = 362;
    break L1;
   }
   $incdec$ptr169 = (($incdec$ptr$i190557) + 1|0);
   $arrayidx173 = ((9568 + (($st$0*58)|0)|0) + ($sub164)|0);
   $36 = HEAP8[$arrayidx173>>0]|0;
   $conv174 = $36&255;
   $sub175 = (($conv174) + -1)|0;
   $cmp176 = ($sub175>>>0)<(8);
   if ($cmp176) {
    $incdec$ptr$i190557 = $incdec$ptr169;$st$0 = $conv174;
   } else {
    break;
   }
  }
  $tobool178 = ($36<<24>>24)==(0);
  if ($tobool178) {
   $retval$0 = -1;
   label = 362;
   break;
  }
  $cmp181 = ($36<<24>>24)==(19);
  $cmp184 = ($argpos$0|0)>(-1);
  L65: do {
   if ($cmp181) {
    if ($cmp184) {
     $retval$0 = -1;
     label = 362;
     break L1;
    } else {
     $311 = $309;$arg$sroa$0$sroa$1$4$extract$trunc531556 = $arg$sroa$0$sroa$1$4$extract$trunc531552;
     label = 63;
    }
   } else {
    if ($cmp184) {
     $arrayidx192 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$arrayidx192>>2] = $conv174;
     $37 = (($nl_arg) + ($argpos$0<<3)|0);
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = $40;
     $311 = $44;$arg$sroa$0$sroa$1$4$extract$trunc531556 = $43;
     label = 63;
     break;
    }
    if (!($tobool25)) {
     $retval$0 = 0;
     label = 362;
     break L1;
    }
    $cmp$i198 = ($36&255)>(20);
    if ($cmp$i198) {
     $81 = $35;$82 = $309;$arg$sroa$0$sroa$1$4$extract$trunc531556568 = $arg$sroa$0$sroa$1$4$extract$trunc531552;
    } else {
     do {
      switch ($conv174|0) {
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$73 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $73;$74 = HEAP32[tempDoublePtr>>2]|0;
       $75 = HEAP32[tempDoublePtr+4>>2]|0;
       $76 = $74;
       $312 = $76;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $75;
       label = 64;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $52 = $arglist_current14;
       $53 = $52;
       $54 = HEAP32[$53>>2]|0;
       $55 = (($52) + 4)|0;
       $56 = $55;
       $57 = HEAP32[$56>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $58 = $54;
       $312 = $58;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $57;
       label = 64;
       break L65;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $59 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $conv12$i215 = $59&65535;
       $60 = $conv12$i215 << 16 >> 16;
       $61 = ($60|0)<(0);
       $62 = $61 << 31 >> 31;
       $sext573 = $59 << 16;
       $arg$sroa$0$sroa$0$0$extract$trunc458 = $sext573 >> 16;
       $63 = $arg$sroa$0$sroa$0$0$extract$trunc458;
       $312 = $63;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $62;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $45 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $312 = $45;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $arg$sroa$0$sroa$1$4$extract$trunc531552;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $71 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $conv27$mask$i230 = $71 & 255;
       $72 = $conv27$mask$i230;
       $312 = $72;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = 0;
       label = 64;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $46 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $47 = ($46|0)<(0);
       $48 = $47 << 31 >> 31;
       $49 = $46;
       $312 = $49;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $48;
       label = 64;
       break L65;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $50 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $51 = $50;
       $312 = $51;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = 0;
       label = 64;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $66 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $conv22$i225 = $66&255;
       $67 = $conv22$i225 << 24 >> 24;
       $68 = ($67|0)<(0);
       $69 = $68 << 31 >> 31;
       $sext = $66 << 24;
       $arg$sroa$0$sroa$0$0$extract$trunc456 = $sext >> 24;
       $70 = $arg$sroa$0$sroa$0$0$extract$trunc456;
       $312 = $70;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $69;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$77 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $77;$78 = HEAP32[tempDoublePtr>>2]|0;
       $79 = HEAP32[tempDoublePtr+4>>2]|0;
       $80 = $78;
       $311 = $80;$arg$sroa$0$sroa$1$4$extract$trunc531556 = $79;
       label = 63;
       break L65;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $64 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $conv17$mask$i220 = $64 & 65535;
       $65 = $conv17$mask$i220;
       $312 = $65;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = 0;
       label = 64;
       break L65;
       break;
      }
      default: {
       $312 = $309;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $arg$sroa$0$sroa$1$4$extract$trunc531552;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($tobool25) {
    $312 = $311;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $arg$sroa$0$sroa$1$4$extract$trunc531556;
    label = 64;
   } else {
    $309 = $311;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre655 = HEAP8[$incdec$ptr$i190557>>0]|0;
   $81 = $$pre655;$82 = $312;$arg$sroa$0$sroa$1$4$extract$trunc531556568 = $arg$sroa$0$sroa$1$4$extract$trunc531556656;
  }
  $conv207 = $81 << 24 >> 24;
  $tobool208 = ($st$0|0)==(0);
  if ($tobool208) {
   $t$0 = $conv207;
  } else {
   $and210 = $conv207 & 15;
   $cmp211 = ($and210|0)==(3);
   $and214 = $conv207 & -33;
   $and214$conv207 = $cmp211 ? $and214 : $conv207;
   $t$0 = $and214$conv207;
  }
  $and216 = $fl$1 & 8192;
  $tobool217 = ($and216|0)==(0);
  $and219 = $fl$1 & -65537;
  $fl$1$and219 = $tobool217 ? $fl$1 : $and219;
  L92: do {
   switch ($t$0|0) {
   case 105: case 100:  {
    $122 = $82;
    $123 = ($arg$sroa$0$sroa$1$4$extract$trunc531556568|0)<(0);
    if ($123) {
     $124 = (_i64Subtract(0,0,($122|0),($arg$sroa$0$sroa$1$4$extract$trunc531556568|0))|0);
     $125 = tempRet0;
     $126 = $124;
     $128 = $126;$arg$sroa$0$sroa$1$4$extract$trunc531554 = $125;$pl$0 = 1;$prefix$0 = 10032;
     label = 89;
     break L92;
    }
    $and282 = $fl$1$and219 & 2048;
    $tobool283 = ($and282|0)==(0);
    if ($tobool283) {
     $and287 = $fl$1$and219 & 1;
     $tobool288 = ($and287|0)==(0);
     $$173 = $tobool288 ? 10032 : ((10032 + 2|0));
     $128 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531554 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$pl$0 = $and287;$prefix$0 = $$173;
     label = 89;
    } else {
     $128 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531554 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$pl$0 = 1;$prefix$0 = ((10032 + 1|0));
     label = 89;
    }
    break;
   }
   case 109:  {
    $call337 = (___errno_location()|0);
    $154 = HEAP32[$call337>>2]|0;
    $call338 = (_strerror(($154|0))|0);
    $a$1 = $call338;
    label = 99;
    break;
   }
   case 99:  {
    $153 = $82;
    $conv332 = $153&255;
    HEAP8[$add$ptr333>>0] = $conv332;
    $313 = $82;$a$2 = $add$ptr333;$arg$sroa$0$sroa$1$4$extract$trunc531555 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$6 = $and219;$p$5 = 1;$pl$2 = 0;$prefix$2 = 10032;$z$2 = $add$ptr205;
    break;
   }
   case 111:  {
    $107 = $82;
    $108 = ($107|0)==(0);
    $109 = ($arg$sroa$0$sroa$1$4$extract$trunc531556568|0)==(0);
    $110 = $108 & $109;
    if ($110) {
     $s$addr$0$lcssa$i269 = $add$ptr205;
    } else {
     $112 = $107;$115 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$s$addr$07$i = $add$ptr205;
     while(1) {
      $111 = $112 & 7;
      $113 = $111 | 48;
      $114 = $113&255;
      $incdec$ptr$i265 = (($s$addr$07$i) + -1|0);
      HEAP8[$incdec$ptr$i265>>0] = $114;
      $116 = (_bitshift64Lshr(($112|0),($115|0),3)|0);
      $117 = tempRet0;
      $118 = ($116|0)==(0);
      $119 = ($117|0)==(0);
      $120 = $118 & $119;
      if ($120) {
       $s$addr$0$lcssa$i269 = $incdec$ptr$i265;
       break;
      } else {
       $112 = $116;$115 = $117;$s$addr$07$i = $incdec$ptr$i265;
      }
     }
    }
    $and263 = $fl$1$and219 & 8;
    $tobool264 = ($and263|0)==(0);
    if ($tobool264) {
     $149 = $82;$a$0 = $s$addr$0$lcssa$i269;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$4 = $fl$1$and219;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 10032;
     label = 94;
    } else {
     $$ = $110 ? 10032 : ((10032 + 5|0));
     $121 = $110&1;
     $$172 = $121 ^ 1;
     $149 = $82;$a$0 = $s$addr$0$lcssa$i269;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$4 = $fl$1$and219;$p$2 = $p$0;$pl$1 = $$172;$prefix$1 = $$;
     label = 94;
    }
    break;
   }
   case 112:  {
    $cmp240 = ($p$0>>>0)>(8);
    $cond245 = $cmp240 ? $p$0 : 8;
    $or246 = $fl$1$and219 | 8;
    $fl$3 = $or246;$p$1 = $cond245;$t$1 = 120;
    label = 77;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$and219;$p$1 = $p$0;$t$1 = $t$0;
    label = 77;
    break;
   }
   case 115:  {
    $tobool342 = ($82|0)==(0|0);
    $$175 = $tobool342 ? 10048 : $82;
    $a$1 = $$175;
    label = 99;
    break;
   }
   case 117:  {
    $128 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531554 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$pl$0 = 0;$prefix$0 = 10032;
    label = 89;
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 2:  {
     $83 = ($cnt$1|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $82;
     $86 = $85;
     HEAP32[$86>>2] = $cnt$1;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $conv229 = $cnt$1&65535;
     HEAP16[$82>>1] = $conv229;
     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $89 = ($cnt$1|0)<(0);
     $90 = $89 << 31 >> 31;
     $91 = $82;
     $92 = $91;
     HEAP32[$92>>2] = $cnt$1;
     $93 = (($91) + 4)|0;
     $94 = $93;
     HEAP32[$94>>2] = $90;
     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     HEAP32[$82>>2] = $cnt$1;
     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     HEAP32[$82>>2] = $cnt$1;
     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $conv232 = $cnt$1&255;
     HEAP8[$82>>0] = $conv232;
     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     HEAP32[$82>>2] = $cnt$1;
     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $158 = $82;
    HEAP32[tempDoublePtr>>2] = $158;HEAP32[tempDoublePtr+4>>2] = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$159 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $160 = ($arg$sroa$0$sroa$1$4$extract$trunc531556568|0)<(0);
    if ($160) {
     $sub$i337 = -$159;
     $pl$0$i = 1;$prefix$0$i = 10056;$y$addr$0$i = $sub$i337;
    } else {
     $and$i338 = $fl$1$and219 & 2048;
     $tobool9$i339 = ($and$i338|0)==(0);
     if ($tobool9$i339) {
      $and12$i = $fl$1$and219 & 1;
      $tobool13$i = ($and12$i|0)==(0);
      $$$i = $tobool13$i ? ((10056 + 1|0)) : ((10056 + 6|0));
      $pl$0$i = $and12$i;$prefix$0$i = $$$i;$y$addr$0$i = $159;
     } else {
      $pl$0$i = 1;$prefix$0$i = ((10056 + 3|0));$y$addr$0$i = $159;
     }
    }
    HEAPF64[tempDoublePtr>>3] = $y$addr$0$i;$161 = HEAP32[tempDoublePtr>>2]|0;
    $162 = HEAP32[tempDoublePtr+4>>2]|0;
    $163 = $162 & 2146435072;
    $164 = ($163>>>0)<(2146435072);
    $165 = ($163|0)==(2146435072);
    $166 = (0)<(0);
    $167 = $165 & $166;
    $168 = $164 | $167;
    if (!($168)) {
     $and36$i = $t$0 & 32;
     $tobool37$i = ($and36$i|0)!=(0);
     $cond$i340 = $tobool37$i ? 10080 : 10088;
     $cmp38$i = ($y$addr$0$i != $y$addr$0$i) | (0.0 != 0.0);
     if ($cmp38$i) {
      $cond43$i = $tobool37$i ? 10096 : 10104;
      $pl$1$i = 0;$s35$0$i = $cond43$i;
     } else {
      $pl$1$i = $pl$0$i;$s35$0$i = $cond$i340;
     }
     $add$i341 = (($pl$1$i) + 3)|0;
     $and$i373$i = $fl$1$and219 & 8192;
     $tobool$i374$i = ($and$i373$i|0)==(0);
     $cmp$i375$i = ($add$i341|0)<($w$1|0);
     $or$cond$i376$i = $tobool$i374$i & $cmp$i375$i;
     if ($or$cond$i376$i) {
      $sub$i377$i = (($w$1) - ($add$i341))|0;
      $cmp1$i378$i = ($sub$i377$i>>>0)>(256);
      $cond$i379$i = $cmp1$i378$i ? 256 : $sub$i377$i;
      _memset(($pad$i|0),32,($cond$i379$i|0))|0;
      $cmp39$i380$i = ($sub$i377$i>>>0)>(255);
      if ($cmp39$i380$i) {
       $l$addr$010$i382$i = $sub$i377$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $sub5$i384$i = (($l$addr$010$i382$i) + -256)|0;
        $cmp3$i385$i = ($sub5$i384$i>>>0)>(255);
        if ($cmp3$i385$i) {
         $l$addr$010$i382$i = $sub5$i384$i;
        } else {
         $l$addr$0$lcssa$i387$i = $sub5$i384$i;
         break;
        }
       }
      } else {
       $l$addr$0$lcssa$i387$i = $sub$i377$i;
      }
      (___fwritex($pad$i,$l$addr$0$lcssa$i387$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s35$0$i,3,$f)|0);
     $xor$i = $fl$1$and219 & 73728;
     $tobool$i394$i = ($xor$i|0)==(8192);
     $or$cond$i396$i = $tobool$i394$i & $cmp$i375$i;
     if ($or$cond$i396$i) {
      $sub$i397$i = (($w$1) - ($add$i341))|0;
      $cmp1$i398$i = ($sub$i397$i>>>0)>(256);
      $cond$i399$i = $cmp1$i398$i ? 256 : $sub$i397$i;
      _memset(($pad$i|0),32,($cond$i399$i|0))|0;
      $cmp39$i400$i = ($sub$i397$i>>>0)>(255);
      if ($cmp39$i400$i) {
       $l$addr$010$i402$i = $sub$i397$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $sub5$i404$i = (($l$addr$010$i402$i) + -256)|0;
        $cmp3$i405$i = ($sub5$i404$i>>>0)>(255);
        if ($cmp3$i405$i) {
         $l$addr$010$i402$i = $sub5$i404$i;
        } else {
         $l$addr$0$lcssa$i407$i = $sub5$i404$i;
         break;
        }
       }
      } else {
       $l$addr$0$lcssa$i407$i = $sub$i397$i;
      }
      (___fwritex($pad$i,$l$addr$0$lcssa$i407$i,$f)|0);
     }
     $w$add$i = $cmp$i375$i ? $w$1 : $add$i341;
     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $w$add$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $call55$i = (+_frexpl($y$addr$0$i,$e2$i));
    $mul$i343 = $call55$i * 2.0;
    $tobool56$i = $mul$i343 != 0.0;
    if ($tobool56$i) {
     $169 = HEAP32[$e2$i>>2]|0;
     $dec$i = (($169) + -1)|0;
     HEAP32[$e2$i>>2] = $dec$i;
    }
    $or$i344 = $t$0 | 32;
    $cmp59$i = ($or$i344|0)==(97);
    if ($cmp59$i) {
     $and62$i = $t$0 & 32;
     $tobool63$i = ($and62$i|0)==(0);
     $add$ptr65$i = (($prefix$0$i) + 9|0);
     $prefix$0$add$ptr65$i = $tobool63$i ? $prefix$0$i : $add$ptr65$i;
     $add67362$i = $pl$0$i | 2;
     $170 = ($p$0>>>0)>(11);
     $sub74$i = (12 - ($p$0))|0;
     $re$0$i = $170 ? 0 : $sub74$i;
     $tobool76$i = ($re$0$i|0)==(0);
     do {
      if ($tobool76$i) {
       $y$addr$1$i = $mul$i343;
      } else {
       $re$1667$i = $re$0$i;$round$0666$i = 8.0;
       while(1) {
        $dec78$i = (($re$1667$i) + -1)|0;
        $mul80$i = $round$0666$i * 16.0;
        $tobool79$i = ($dec78$i|0)==(0);
        if ($tobool79$i) {
         break;
        } else {
         $re$1667$i = $dec78$i;$round$0666$i = $mul80$i;
        }
       }
       $171 = HEAP8[$prefix$0$add$ptr65$i>>0]|0;
       $cmp82$i = ($171<<24>>24)==(45);
       if ($cmp82$i) {
        $sub85$i = -$mul$i343;
        $sub86$i = $sub85$i - $mul80$i;
        $add87$i = $mul80$i + $sub86$i;
        $sub88$i = -$add87$i;
        $y$addr$1$i = $sub88$i;
        break;
       } else {
        $add90$i = $mul$i343 + $mul80$i;
        $sub91$i = $add90$i - $mul80$i;
        $y$addr$1$i = $sub91$i;
        break;
       }
      }
     } while(0);
     $172 = HEAP32[$e2$i>>2]|0;
     $cmp94$i = ($172|0)<(0);
     $sub97$i = (0 - ($172))|0;
     $cond100$i = $cmp94$i ? $sub97$i : $172;
     $cmp12$i$i = ($cond100$i|0)<(0);
     if ($cmp12$i$i) {
      $173 = ($cond100$i|0)<(0);
      $174 = $173 << 31 >> 31;
      $175 = $cond100$i;$176 = $174;$s$addr$014$i$i = $arrayidx$i335;
      while(1) {
       $177 = (___uremdi3(($175|0),($176|0),10,0)|0);
       $178 = tempRet0;
       $179 = $177 | 48;
       $180 = $179&255;
       $incdec$ptr$i$i = (($s$addr$014$i$i) + -1|0);
       HEAP8[$incdec$ptr$i$i>>0] = $180;
       $181 = (___udivdi3(($175|0),($176|0),10,0)|0);
       $182 = tempRet0;
       $183 = ($176>>>0)>(9);
       $184 = ($176|0)==(9);
       $185 = ($175>>>0)>(4294967295);
       $186 = $184 & $185;
       $187 = $183 | $186;
       if ($187) {
        $175 = $181;$176 = $182;$s$addr$014$i$i = $incdec$ptr$i$i;
       } else {
        break;
       }
      }
      $s$addr$0$lcssa$i$i = $incdec$ptr$i$i;$x$addr$0$lcssa$off0$i$i = $181;
     } else {
      $s$addr$0$lcssa$i$i = $arrayidx$i335;$x$addr$0$lcssa$off0$i$i = $cond100$i;
     }
     $tobool9$i$i = ($x$addr$0$lcssa$off0$i$i|0)==(0);
     if ($tobool9$i$i) {
      $s$addr$1$lcssa$i$i = $s$addr$0$lcssa$i$i;
     } else {
      $s$addr$110$i$i = $s$addr$0$lcssa$i$i;$y$011$i$i = $x$addr$0$lcssa$off0$i$i;
      while(1) {
       $rem4$i$i = (($y$011$i$i>>>0) % 10)&-1;
       $add57$i$i = $rem4$i$i | 48;
       $conv6$i$i = $add57$i$i&255;
       $incdec$ptr7$i$i = (($s$addr$110$i$i) + -1|0);
       HEAP8[$incdec$ptr7$i$i>>0] = $conv6$i$i;
       $div9$i$i = (($y$011$i$i>>>0) / 10)&-1;
       $188 = ($y$011$i$i>>>0)<(10);
       if ($188) {
        $s$addr$1$lcssa$i$i = $incdec$ptr7$i$i;
        break;
       } else {
        $s$addr$110$i$i = $incdec$ptr7$i$i;$y$011$i$i = $div9$i$i;
       }
      }
     }
     $cmp103$i = ($s$addr$1$lcssa$i$i|0)==($arrayidx$i335|0);
     if ($cmp103$i) {
      HEAP8[$incdec$ptr106$i>>0] = 48;
      $estr$0$i = $incdec$ptr106$i;
     } else {
      $estr$0$i = $s$addr$1$lcssa$i$i;
     }
     $189 = HEAP32[$e2$i>>2]|0;
     $190 = $189 >> 31;
     $191 = $190 & 2;
     $192 = (($191) + 43)|0;
     $conv111$i = $192&255;
     $incdec$ptr112$i = (($estr$0$i) + -1|0);
     HEAP8[$incdec$ptr112$i>>0] = $conv111$i;
     $add113$i = (($t$0) + 15)|0;
     $conv114$i = $add113$i&255;
     $incdec$ptr115$i = (($estr$0$i) + -2|0);
     HEAP8[$incdec$ptr115$i>>0] = $conv114$i;
     $cmp131$i = ($p$0|0)>(0);
     $and134$i = $fl$1$and219 & 8;
     $tobool135$i = ($and134$i|0)==(0);
     if ($cmp131$i) {
      if ($tobool135$i) {
       $s$0$us$us$i = $buf$i;$y$addr$2$us$us$i = $y$addr$1$i;
       while(1) {
        $conv116$us$us$i = (~~(($y$addr$2$us$us$i)));
        $arrayidx117$us$us$i = (10112 + ($conv116$us$us$i)|0);
        $193 = HEAP8[$arrayidx117$us$us$i>>0]|0;
        $conv118363$us$us$i = $193&255;
        $or120$us$us$i = $conv118363$us$us$i | $and62$i;
        $conv121$us$us$i = $or120$us$us$i&255;
        $incdec$ptr122$us$us$i = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $conv121$us$us$i;
        $conv123$us$us$i = (+($conv116$us$us$i|0));
        $sub124$us$us$i = $y$addr$2$us$us$i - $conv123$us$us$i;
        $mul125$us$us$i = $sub124$us$us$i * 16.0;
        $sub$ptr$lhs$cast$us$us$i = $incdec$ptr122$us$us$i;
        $sub$ptr$sub$us$us$i = (($sub$ptr$lhs$cast$us$us$i) - ($sub$ptr$rhs$cast$i))|0;
        $cmp127$us$us$i = ($sub$ptr$sub$us$us$i|0)==(1);
        if ($cmp127$us$us$i) {
         $incdec$ptr137$us$us$i = (($s$0$us$us$i) + 2|0);
         HEAP8[$incdec$ptr122$us$us$i>>0] = 46;
         $s$1$us$us$i = $incdec$ptr137$us$us$i;
        } else {
         $s$1$us$us$i = $incdec$ptr122$us$us$i;
        }
        $tobool139$us$us$i = $mul125$us$us$i != 0.0;
        if ($tobool139$us$us$i) {
         $s$0$us$us$i = $s$1$us$us$i;$y$addr$2$us$us$i = $mul125$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $s$0$us$i = $buf$i;$y$addr$2$us$i = $y$addr$1$i;
       while(1) {
        $conv116$us$i = (~~(($y$addr$2$us$i)));
        $arrayidx117$us$i = (10112 + ($conv116$us$i)|0);
        $194 = HEAP8[$arrayidx117$us$i>>0]|0;
        $conv118363$us$i = $194&255;
        $or120$us$i = $conv118363$us$i | $and62$i;
        $conv121$us$i = $or120$us$i&255;
        $incdec$ptr122$us$i = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $conv121$us$i;
        $conv123$us$i = (+($conv116$us$i|0));
        $sub124$us$i = $y$addr$2$us$i - $conv123$us$i;
        $mul125$us$i = $sub124$us$i * 16.0;
        $sub$ptr$lhs$cast$us$i = $incdec$ptr122$us$i;
        $sub$ptr$sub$us$i = (($sub$ptr$lhs$cast$us$i) - ($sub$ptr$rhs$cast$i))|0;
        $cmp127$us$i = ($sub$ptr$sub$us$i|0)==(1);
        if ($cmp127$us$i) {
         $incdec$ptr137$us$i = (($s$0$us$i) + 2|0);
         HEAP8[$incdec$ptr122$us$i>>0] = 46;
         $s$1$us$i = $incdec$ptr137$us$i;
        } else {
         $s$1$us$i = $incdec$ptr122$us$i;
        }
        $tobool139$us$i = $mul125$us$i != 0.0;
        if ($tobool139$us$i) {
         $s$0$us$i = $s$1$us$i;$y$addr$2$us$i = $mul125$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      if ($tobool135$i) {
       $s$0$us644$i = $buf$i;$y$addr$2$us645$i = $y$addr$1$i;
       while(1) {
        $conv116$us646$i = (~~(($y$addr$2$us645$i)));
        $arrayidx117$us647$i = (10112 + ($conv116$us646$i)|0);
        $195 = HEAP8[$arrayidx117$us647$i>>0]|0;
        $conv118363$us648$i = $195&255;
        $or120$us649$i = $conv118363$us648$i | $and62$i;
        $conv121$us650$i = $or120$us649$i&255;
        $incdec$ptr122$us651$i = (($s$0$us644$i) + 1|0);
        HEAP8[$s$0$us644$i>>0] = $conv121$us650$i;
        $conv123$us652$i = (+($conv116$us646$i|0));
        $sub124$us653$i = $y$addr$2$us645$i - $conv123$us652$i;
        $mul125$us654$i = $sub124$us653$i * 16.0;
        $sub$ptr$lhs$cast$us655$i = $incdec$ptr122$us651$i;
        $sub$ptr$sub$us656$i = (($sub$ptr$lhs$cast$us655$i) - ($sub$ptr$rhs$cast$i))|0;
        $cmp127$us657$i = ($sub$ptr$sub$us656$i|0)==(1);
        $tobool129$us$i = $mul125$us654$i != 0.0;
        $or$cond$i346 = $cmp127$us657$i & $tobool129$us$i;
        if ($or$cond$i346) {
         $incdec$ptr137$us661$i = (($s$0$us644$i) + 2|0);
         HEAP8[$incdec$ptr122$us651$i>>0] = 46;
         $s$1$us663$i = $incdec$ptr137$us661$i;
        } else {
         $s$1$us663$i = $incdec$ptr122$us651$i;
        }
        if ($tobool129$us$i) {
         $s$0$us644$i = $s$1$us663$i;$y$addr$2$us645$i = $mul125$us654$i;
        } else {
         $s$1$lcssa$i = $s$1$us663$i;
         break;
        }
       }
      } else {
       $s$0$i = $buf$i;$y$addr$2$i = $y$addr$1$i;
       while(1) {
        $conv116$i = (~~(($y$addr$2$i)));
        $arrayidx117$i = (10112 + ($conv116$i)|0);
        $196 = HEAP8[$arrayidx117$i>>0]|0;
        $conv118363$i = $196&255;
        $or120$i = $conv118363$i | $and62$i;
        $conv121$i = $or120$i&255;
        $incdec$ptr122$i = (($s$0$i) + 1|0);
        HEAP8[$s$0$i>>0] = $conv121$i;
        $conv123$i = (+($conv116$i|0));
        $sub124$i = $y$addr$2$i - $conv123$i;
        $mul125$i = $sub124$i * 16.0;
        $sub$ptr$lhs$cast$i = $incdec$ptr122$i;
        $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
        $cmp127$i = ($sub$ptr$sub$i|0)==(1);
        if ($cmp127$i) {
         $incdec$ptr137$i = (($s$0$i) + 2|0);
         HEAP8[$incdec$ptr122$i>>0] = 46;
         $s$1$i = $incdec$ptr137$i;
        } else {
         $s$1$i = $incdec$ptr122$i;
        }
        $tobool139$i = $mul125$i != 0.0;
        if ($tobool139$i) {
         $s$0$i = $s$1$i;$y$addr$2$i = $mul125$i;
        } else {
         $s$1$lcssa$i = $s$1$i;
         break;
        }
       }
      }
     }
     $tobool140$i = ($p$0|0)==(0);
     $sub$ptr$lhs$cast157$pre$i = $s$1$lcssa$i;
     do {
      if ($tobool140$i) {
       label = 173;
      } else {
       $sub146$i = (($sub$ptr$sub145$i) + ($sub$ptr$lhs$cast157$pre$i))|0;
       $cmp147$i = ($sub146$i|0)<($p$0|0);
       if (!($cmp147$i)) {
        label = 173;
        break;
       }
       $sub$ptr$rhs$cast152$i = $incdec$ptr115$i;
       $add150$i = (($sub$ptr$sub153$i) + ($p$0))|0;
       $add154$i = (($add150$i) - ($sub$ptr$rhs$cast152$i))|0;
       $l$0$i = $add154$i;
      }
     } while(0);
     if ((label|0) == 173) {
      label = 0;
      $sub$ptr$rhs$cast161$i = $incdec$ptr115$i;
      $sub$ptr$sub159$i = (($sub$ptr$sub162$i) - ($sub$ptr$rhs$cast161$i))|0;
      $add163$i = (($sub$ptr$sub159$i) + ($sub$ptr$lhs$cast157$pre$i))|0;
      $l$0$i = $add163$i;
     }
     $add165$i = (($l$0$i) + ($add67362$i))|0;
     $and$i415$i = $fl$1$and219 & 73728;
     $tobool$i416$i = ($and$i415$i|0)==(0);
     $cmp$i417$i = ($add165$i|0)<($w$1|0);
     $or$cond$i418$i = $tobool$i416$i & $cmp$i417$i;
     if ($or$cond$i418$i) {
      $sub$i419$i = (($w$1) - ($add165$i))|0;
      $cmp1$i420$i = ($sub$i419$i>>>0)>(256);
      $cond$i421$i = $cmp1$i420$i ? 256 : $sub$i419$i;
      _memset(($pad$i|0),32,($cond$i421$i|0))|0;
      $cmp39$i422$i = ($sub$i419$i>>>0)>(255);
      if ($cmp39$i422$i) {
       $l$addr$010$i424$i = $sub$i419$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $sub5$i426$i = (($l$addr$010$i424$i) + -256)|0;
        $cmp3$i427$i = ($sub5$i426$i>>>0)>(255);
        if ($cmp3$i427$i) {
         $l$addr$010$i424$i = $sub5$i426$i;
        } else {
         $l$addr$0$lcssa$i429$i = $sub5$i426$i;
         break;
        }
       }
      } else {
       $l$addr$0$lcssa$i429$i = $sub$i419$i;
      }
      (___fwritex($pad$i,$l$addr$0$lcssa$i429$i,$f)|0);
     }
     (___fwritex($prefix$0$add$ptr65$i,$add67362$i,$f)|0);
     $tobool$i436$i = ($and$i415$i|0)==(65536);
     $or$cond$i438$i = $tobool$i436$i & $cmp$i417$i;
     if ($or$cond$i438$i) {
      $sub$i439$i = (($w$1) - ($add165$i))|0;
      $cmp1$i440$i = ($sub$i439$i>>>0)>(256);
      $cond$i441$i = $cmp1$i440$i ? 256 : $sub$i439$i;
      _memset(($pad$i|0),48,($cond$i441$i|0))|0;
      $cmp39$i442$i = ($sub$i439$i>>>0)>(255);
      if ($cmp39$i442$i) {
       $l$addr$010$i444$i = $sub$i439$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $sub5$i446$i = (($l$addr$010$i444$i) + -256)|0;
        $cmp3$i447$i = ($sub5$i446$i>>>0)>(255);
        if ($cmp3$i447$i) {
         $l$addr$010$i444$i = $sub5$i446$i;
        } else {
         $l$addr$0$lcssa$i449$i = $sub5$i446$i;
         break;
        }
       }
      } else {
       $l$addr$0$lcssa$i449$i = $sub$i439$i;
      }
      (___fwritex($pad$i,$l$addr$0$lcssa$i449$i,$f)|0);
     }
     $sub$ptr$sub172$i = (($sub$ptr$lhs$cast157$pre$i) - ($sub$ptr$rhs$cast$i))|0;
     (___fwritex($buf$i,$sub$ptr$sub172$i,$f)|0);
     $sub$ptr$rhs$cast174$i = $incdec$ptr115$i;
     $sub$ptr$sub175$i = (($sub$ptr$lhs$cast160$i) - ($sub$ptr$rhs$cast174$i))|0;
     $sub176$i = (($l$0$i) - ($sub$ptr$sub175$i))|0;
     $sub181$i = (($sub176$i) - ($sub$ptr$sub172$i))|0;
     $cmp$i455$i = ($sub181$i|0)>(0);
     if ($cmp$i455$i) {
      $cmp1$i456$i = ($sub181$i>>>0)>(256);
      $cond$i457$i = $cmp1$i456$i ? 256 : $sub181$i;
      _memset(($pad$i|0),48,($cond$i457$i|0))|0;
      $cmp39$i458$i = ($sub181$i>>>0)>(255);
      if ($cmp39$i458$i) {
       $l$addr$010$i460$i = $sub181$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $sub5$i462$i = (($l$addr$010$i460$i) + -256)|0;
        $cmp3$i463$i = ($sub5$i462$i>>>0)>(255);
        if ($cmp3$i463$i) {
         $l$addr$010$i460$i = $sub5$i462$i;
        } else {
         $l$addr$0$lcssa$i465$i = $sub5$i462$i;
         break;
        }
       }
      } else {
       $l$addr$0$lcssa$i465$i = $sub181$i;
      }
      (___fwritex($pad$i,$l$addr$0$lcssa$i465$i,$f)|0);
     }
     (___fwritex($incdec$ptr115$i,$sub$ptr$sub175$i,$f)|0);
     $tobool$i472$i = ($and$i415$i|0)==(8192);
     $or$cond$i474$i = $tobool$i472$i & $cmp$i417$i;
     if ($or$cond$i474$i) {
      $sub$i475$i = (($w$1) - ($add165$i))|0;
      $cmp1$i476$i = ($sub$i475$i>>>0)>(256);
      $cond$i477$i = $cmp1$i476$i ? 256 : $sub$i475$i;
      _memset(($pad$i|0),32,($cond$i477$i|0))|0;
      $cmp39$i478$i = ($sub$i475$i>>>0)>(255);
      if ($cmp39$i478$i) {
       $l$addr$010$i480$i = $sub$i475$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $sub5$i482$i = (($l$addr$010$i480$i) + -256)|0;
        $cmp3$i483$i = ($sub5$i482$i>>>0)>(255);
        if ($cmp3$i483$i) {
         $l$addr$010$i480$i = $sub5$i482$i;
        } else {
         $l$addr$0$lcssa$i485$i = $sub5$i482$i;
         break;
        }
       }
      } else {
       $l$addr$0$lcssa$i485$i = $sub$i475$i;
      }
      (___fwritex($pad$i,$l$addr$0$lcssa$i485$i,$f)|0);
     }
     $w$add165$i = $cmp$i417$i ? $w$1 : $add165$i;
     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $w$add165$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $cmp196$i = ($p$0|0)<(0);
    $$p$i = $cmp196$i ? 6 : $p$0;
    if ($tobool56$i) {
     $mul202$i = $mul$i343 * 268435456.0;
     $197 = HEAP32[$e2$i>>2]|0;
     $sub203$i = (($197) + -28)|0;
     HEAP32[$e2$i>>2] = $sub203$i;
     $198 = $sub203$i;$y$addr$3$i = $mul202$i;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $198 = $$pre$i;$y$addr$3$i = $mul$i343;
    }
    $cmp205$i = ($198|0)<(0);
    $arraydecay208$add$ptr213$i = $cmp205$i ? $big$i : $add$ptr213$i;
    $y$addr$4$i = $y$addr$3$i;$z$0$i = $arraydecay208$add$ptr213$i;
    while(1) {
     $conv216$i = (~~(($y$addr$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $conv216$i;
     $incdec$ptr217$i = (($z$0$i) + 4|0);
     $conv218$i = (+($conv216$i>>>0));
     $sub219$i = $y$addr$4$i - $conv218$i;
     $mul220$i = $sub219$i * 1.0E+9;
     $tobool222$i = $mul220$i != 0.0;
     if ($tobool222$i) {
      $y$addr$4$i = $mul220$i;$z$0$i = $incdec$ptr217$i;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $cmp225733$i = ($$pr$i|0)>(0);
    if ($cmp225733$i) {
     $199 = $$pr$i;$a$1735$i = $arraydecay208$add$ptr213$i;$z$1734$i = $incdec$ptr217$i;
     while(1) {
      $cmp228$i = ($199|0)>(29);
      $cond233$i = $cmp228$i ? 29 : $199;
      $d$0728$i = (($z$1734$i) + -4|0);
      $cmp235729$i = ($d$0728$i>>>0)<($a$1735$i>>>0);
      do {
       if ($cmp235729$i) {
        $a$2$ph$i = $a$1735$i;
       } else {
        $carry$0730$i = 0;$d$0731$i = $d$0728$i;
        while(1) {
         $200 = HEAP32[$d$0731$i>>2]|0;
         $201 = (_bitshift64Shl(($200|0),0,($cond233$i|0))|0);
         $202 = tempRet0;
         $203 = (_i64Add(($201|0),($202|0),($carry$0730$i|0),0)|0);
         $204 = tempRet0;
         $205 = (___uremdi3(($203|0),($204|0),1000000000,0)|0);
         $206 = tempRet0;
         HEAP32[$d$0731$i>>2] = $205;
         $207 = (___udivdi3(($203|0),($204|0),1000000000,0)|0);
         $208 = tempRet0;
         $d$0$i = (($d$0731$i) + -4|0);
         $cmp235$i = ($d$0$i>>>0)<($a$1735$i>>>0);
         if ($cmp235$i) {
          break;
         } else {
          $carry$0730$i = $207;$d$0731$i = $d$0$i;
         }
        }
        $tobool244$i = ($207|0)==(0);
        if ($tobool244$i) {
         $a$2$ph$i = $a$1735$i;
         break;
        }
        $incdec$ptr246$i = (($a$1735$i) + -4|0);
        HEAP32[$incdec$ptr246$i>>2] = $207;
        $a$2$ph$i = $incdec$ptr246$i;
       }
      } while(0);
      $z$2$i = $z$1734$i;
      while(1) {
       $cmp249$i = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($cmp249$i)) {
        break;
       }
       $arrayidx251$i = (($z$2$i) + -4|0);
       $209 = HEAP32[$arrayidx251$i>>2]|0;
       $lnot$i = ($209|0)==(0);
       if ($lnot$i) {
        $z$2$i = $arrayidx251$i;
       } else {
        break;
       }
      }
      $210 = HEAP32[$e2$i>>2]|0;
      $sub256$i = (($210) - ($cond233$i))|0;
      HEAP32[$e2$i>>2] = $sub256$i;
      $cmp225$i = ($sub256$i|0)>(0);
      if ($cmp225$i) {
       $199 = $sub256$i;$a$1735$i = $a$2$ph$i;$z$1734$i = $z$2$i;
      } else {
       $$pr637$i = $sub256$i;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr637$i = $$pr$i;$a$1$lcssa$i = $arraydecay208$add$ptr213$i;$z$1$lcssa$i = $incdec$ptr217$i;
    }
    $cmp259723$i = ($$pr637$i|0)<(0);
    L252: do {
     if ($cmp259723$i) {
      $add273$i = (($$p$i) + 25)|0;
      $div274$i = (($add273$i|0) / 9)&-1;
      $add275$i = (($div274$i) + 1)|0;
      $cmp299$i = ($or$i344|0)==(102);
      if ($cmp299$i) {
       $sub$ptr$rhs$cast306$us$i = $arraydecay208$add$ptr213$i;
       $add$ptr311$us$i = (($arraydecay208$add$ptr213$i) + ($add275$i<<2)|0);
       $211 = $$pr637$i;$a$3725$us$i = $a$1$lcssa$i;$z$3724$us$i = $z$1$lcssa$i;
       while(1) {
        $sub264$us$i = (0 - ($211))|0;
        $cmp265$us$i = ($sub264$us$i|0)>(9);
        $$sub264$us$i = $cmp265$us$i ? 9 : $sub264$us$i;
        $cmp277719$us$i = ($a$3725$us$i>>>0)<($z$3724$us$i>>>0);
        do {
         if ($cmp277719$us$i) {
          $shl280$us$i = 1 << $$sub264$us$i;
          $sub281$us$i = (($shl280$us$i) + -1)|0;
          $shr285$us$i = 1000000000 >>> $$sub264$us$i;
          $carry262$0721$us$i = 0;$d$1720$us$i = $a$3725$us$i;
          while(1) {
           $215 = HEAP32[$d$1720$us$i>>2]|0;
           $and282$us$i = $215 & $sub281$us$i;
           $shr283$us$i = $215 >>> $$sub264$us$i;
           $add284$us$i = (($shr283$us$i) + ($carry262$0721$us$i))|0;
           HEAP32[$d$1720$us$i>>2] = $add284$us$i;
           $mul286$us$i = Math_imul($and282$us$i, $shr285$us$i)|0;
           $incdec$ptr288$us$i = (($d$1720$us$i) + 4|0);
           $cmp277$us$i = ($incdec$ptr288$us$i>>>0)<($z$3724$us$i>>>0);
           if ($cmp277$us$i) {
            $carry262$0721$us$i = $mul286$us$i;$d$1720$us$i = $incdec$ptr288$us$i;
           } else {
            break;
           }
          }
          $213 = HEAP32[$a$3725$us$i>>2]|0;
          $tobool290$us$i = ($213|0)==(0);
          $incdec$ptr292$us$i = (($a$3725$us$i) + 4|0);
          $incdec$ptr292$a$3$us$i = $tobool290$us$i ? $incdec$ptr292$us$i : $a$3725$us$i;
          $tobool294$us$i = ($mul286$us$i|0)==(0);
          if ($tobool294$us$i) {
           $incdec$ptr292$a$3$us748$i = $incdec$ptr292$a$3$us$i;$z$4$us$i = $z$3724$us$i;
           break;
          }
          $incdec$ptr296$us$i = (($z$3724$us$i) + 4|0);
          HEAP32[$z$3724$us$i>>2] = $mul286$us$i;
          $incdec$ptr292$a$3$us748$i = $incdec$ptr292$a$3$us$i;$z$4$us$i = $incdec$ptr296$us$i;
         } else {
          $212 = HEAP32[$a$3725$us$i>>2]|0;
          $tobool290$us744$i = ($212|0)==(0);
          $incdec$ptr292$us745$i = (($a$3725$us$i) + 4|0);
          $incdec$ptr292$a$3$us746$i = $tobool290$us744$i ? $incdec$ptr292$us745$i : $a$3725$us$i;
          $incdec$ptr292$a$3$us748$i = $incdec$ptr292$a$3$us746$i;$z$4$us$i = $z$3724$us$i;
         }
        } while(0);
        $sub$ptr$lhs$cast305$us$i = $z$4$us$i;
        $sub$ptr$sub307$us$i = (($sub$ptr$lhs$cast305$us$i) - ($sub$ptr$rhs$cast306$us$i))|0;
        $sub$ptr$div$us$i = $sub$ptr$sub307$us$i >> 2;
        $cmp308$us$i = ($sub$ptr$div$us$i|0)>($add275$i|0);
        $add$ptr311$us$z$4$us$i = $cmp308$us$i ? $add$ptr311$us$i : $z$4$us$i;
        $214 = HEAP32[$e2$i>>2]|0;
        $add313$us$i = (($214) + ($$sub264$us$i))|0;
        HEAP32[$e2$i>>2] = $add313$us$i;
        $cmp259$us$i = ($add313$us$i|0)<(0);
        if ($cmp259$us$i) {
         $211 = $add313$us$i;$a$3725$us$i = $incdec$ptr292$a$3$us748$i;$z$3724$us$i = $add$ptr311$us$z$4$us$i;
        } else {
         $a$3$lcssa$i = $incdec$ptr292$a$3$us748$i;$z$3$lcssa$i = $add$ptr311$us$z$4$us$i;
         break L252;
        }
       }
      } else {
       $216 = $$pr637$i;$a$3725$i = $a$1$lcssa$i;$z$3724$i = $z$1$lcssa$i;
      }
      while(1) {
       $sub264$i = (0 - ($216))|0;
       $cmp265$i = ($sub264$i|0)>(9);
       $$sub264$i = $cmp265$i ? 9 : $sub264$i;
       $cmp277719$i = ($a$3725$i>>>0)<($z$3724$i>>>0);
       do {
        if ($cmp277719$i) {
         $shl280$i = 1 << $$sub264$i;
         $sub281$i = (($shl280$i) + -1)|0;
         $shr285$i = 1000000000 >>> $$sub264$i;
         $carry262$0721$i = 0;$d$1720$i = $a$3725$i;
         while(1) {
          $218 = HEAP32[$d$1720$i>>2]|0;
          $and282$i = $218 & $sub281$i;
          $shr283$i = $218 >>> $$sub264$i;
          $add284$i = (($shr283$i) + ($carry262$0721$i))|0;
          HEAP32[$d$1720$i>>2] = $add284$i;
          $mul286$i = Math_imul($and282$i, $shr285$i)|0;
          $incdec$ptr288$i = (($d$1720$i) + 4|0);
          $cmp277$i = ($incdec$ptr288$i>>>0)<($z$3724$i>>>0);
          if ($cmp277$i) {
           $carry262$0721$i = $mul286$i;$d$1720$i = $incdec$ptr288$i;
          } else {
           break;
          }
         }
         $219 = HEAP32[$a$3725$i>>2]|0;
         $tobool290$i = ($219|0)==(0);
         $incdec$ptr292$i = (($a$3725$i) + 4|0);
         $incdec$ptr292$a$3$i = $tobool290$i ? $incdec$ptr292$i : $a$3725$i;
         $tobool294$i = ($mul286$i|0)==(0);
         if ($tobool294$i) {
          $incdec$ptr292$a$3753$i = $incdec$ptr292$a$3$i;$z$4$i = $z$3724$i;
          break;
         }
         $incdec$ptr296$i = (($z$3724$i) + 4|0);
         HEAP32[$z$3724$i>>2] = $mul286$i;
         $incdec$ptr292$a$3753$i = $incdec$ptr292$a$3$i;$z$4$i = $incdec$ptr296$i;
        } else {
         $217 = HEAP32[$a$3725$i>>2]|0;
         $tobool290749$i = ($217|0)==(0);
         $incdec$ptr292750$i = (($a$3725$i) + 4|0);
         $incdec$ptr292$a$3751$i = $tobool290749$i ? $incdec$ptr292750$i : $a$3725$i;
         $incdec$ptr292$a$3753$i = $incdec$ptr292$a$3751$i;$z$4$i = $z$3724$i;
        }
       } while(0);
       $sub$ptr$lhs$cast305$i = $z$4$i;
       $sub$ptr$rhs$cast306$i = $incdec$ptr292$a$3753$i;
       $sub$ptr$sub307$i = (($sub$ptr$lhs$cast305$i) - ($sub$ptr$rhs$cast306$i))|0;
       $sub$ptr$div$i = $sub$ptr$sub307$i >> 2;
       $cmp308$i = ($sub$ptr$div$i|0)>($add275$i|0);
       if ($cmp308$i) {
        $add$ptr311$i = (($incdec$ptr292$a$3753$i) + ($add275$i<<2)|0);
        $z$5$i = $add$ptr311$i;
       } else {
        $z$5$i = $z$4$i;
       }
       $220 = HEAP32[$e2$i>>2]|0;
       $add313$i = (($220) + ($$sub264$i))|0;
       HEAP32[$e2$i>>2] = $add313$i;
       $cmp259$i = ($add313$i|0)<(0);
       if ($cmp259$i) {
        $216 = $add313$i;$a$3725$i = $incdec$ptr292$a$3753$i;$z$3724$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $incdec$ptr292$a$3753$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $cmp315$i = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    $sub$ptr$lhs$cast318$i = $arraydecay208$add$ptr213$i;
    do {
     if ($cmp315$i) {
      $sub$ptr$rhs$cast319$i = $a$3$lcssa$i;
      $sub$ptr$sub320$i = (($sub$ptr$lhs$cast318$i) - ($sub$ptr$rhs$cast319$i))|0;
      $sub$ptr$div321$i = $sub$ptr$sub320$i >> 2;
      $mul322$i = ($sub$ptr$div321$i*9)|0;
      $221 = HEAP32[$a$3$lcssa$i>>2]|0;
      $cmp324715$i = ($221>>>0)<(10);
      if ($cmp324715$i) {
       $e$1$i = $mul322$i;
       break;
      } else {
       $e$0717$i = $mul322$i;$i$0716$i = 10;
      }
      while(1) {
       $mul328$i = ($i$0716$i*10)|0;
       $inc$i = (($e$0717$i) + 1)|0;
       $cmp324$i = ($221>>>0)<($mul328$i>>>0);
       if ($cmp324$i) {
        $e$1$i = $inc$i;
        break;
       } else {
        $e$0717$i = $inc$i;$i$0716$i = $mul328$i;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $cmp333$i = ($or$i344|0)!=(102);
    $mul335$i = $cmp333$i ? $e$1$i : 0;
    $sub336$i = (($$p$i) - ($mul335$i))|0;
    $cmp338$i = ($or$i344|0)==(103);
    $tobool341$i = ($$p$i|0)!=(0);
    $tobool341$$i = $cmp338$i & $tobool341$i;
    $land$ext$neg$i = $tobool341$$i << 31 >> 31;
    $sub343$i = (($sub336$i) + ($land$ext$neg$i))|0;
    $sub$ptr$lhs$cast344$i = $z$3$lcssa$i;
    $sub$ptr$sub346$i = (($sub$ptr$lhs$cast344$i) - ($sub$ptr$lhs$cast318$i))|0;
    $sub$ptr$div347$i = $sub$ptr$sub346$i >> 2;
    $222 = ($sub$ptr$div347$i*9)|0;
    $mul349$i = (($222) + -9)|0;
    $cmp350$i = ($sub343$i|0)<($mul349$i|0);
    if ($cmp350$i) {
     $add355$i = (($sub343$i) + 9216)|0;
     $div356$i = (($add355$i|0) / 9)&-1;
     $add$ptr354$sum$i = (($div356$i) + -1023)|0;
     $add$ptr358$i = (($arraydecay208$add$ptr213$i) + ($add$ptr354$sum$i<<2)|0);
     $rem360$i = (($add355$i|0) % 9)&-1;
     $j$0710$i = (($rem360$i) + 1)|0;
     $cmp363711$i = ($j$0710$i|0)<(9);
     if ($cmp363711$i) {
      $i$1712$i = 10;$j$0713$i = $j$0710$i;
      while(1) {
       $mul367$i = ($i$1712$i*10)|0;
       $j$0$i = (($j$0713$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $mul367$i;
        break;
       } else {
        $i$1712$i = $mul367$i;$j$0713$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $223 = HEAP32[$add$ptr358$i>>2]|0;
     $rem370$i = (($223>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $tobool371$i = ($rem370$i|0)==(0);
     if ($tobool371$i) {
      $add$ptr358$sum$i = (($div356$i) + -1022)|0;
      $add$ptr373$i = (($arraydecay208$add$ptr213$i) + ($add$ptr358$sum$i<<2)|0);
      $cmp374$i = ($add$ptr373$i|0)==($z$3$lcssa$i|0);
      if ($cmp374$i) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $add$ptr358$i;$e$3$i = $e$1$i;
      } else {
       label = 233;
      }
     } else {
      label = 233;
     }
     do {
      if ((label|0) == 233) {
       label = 0;
       $div378$i = (($223>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $and379$i = $div378$i & 1;
       $tobool380$i = ($and379$i|0)==(0);
       $$365$i = $tobool380$i ? 9007199254740992.0 : 9007199254740994.0;
       $div384$i = (($i$1$lcssa$i|0) / 2)&-1;
       $cmp385$i = ($rem370$i>>>0)<($div384$i>>>0);
       do {
        if ($cmp385$i) {
         $small$0$i = 0.5;
        } else {
         $cmp390$i = ($rem370$i|0)==($div384$i|0);
         if ($cmp390$i) {
          $add$ptr358$sum361$i = (($div356$i) + -1022)|0;
          $add$ptr393$i = (($arraydecay208$add$ptr213$i) + ($add$ptr358$sum361$i<<2)|0);
          $cmp394$i = ($add$ptr393$i|0)==($z$3$lcssa$i|0);
          if ($cmp394$i) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $tobool400$i = ($pl$0$i|0)==(0);
       do {
        if ($tobool400$i) {
         $round377$1$i = $$365$i;$small$1$i = $small$0$i;
        } else {
         $224 = HEAP8[$prefix$0$i>>0]|0;
         $cmp403$i = ($224<<24>>24)==(45);
         if (!($cmp403$i)) {
          $round377$1$i = $$365$i;$small$1$i = $small$0$i;
          break;
         }
         $mul406$i = $$365$i * -1.0;
         $mul407$i = $small$0$i * -1.0;
         $round377$1$i = $mul406$i;$small$1$i = $mul407$i;
        }
       } while(0);
       $sub409$i = (($223) - ($rem370$i))|0;
       HEAP32[$add$ptr358$i>>2] = $sub409$i;
       $add410$i = $round377$1$i + $small$1$i;
       $cmp411$i = $add410$i != $round377$1$i;
       if (!($cmp411$i)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $add$ptr358$i;$e$3$i = $e$1$i;
        break;
       }
       $add414$i = (($sub409$i) + ($i$1$lcssa$i))|0;
       HEAP32[$add$ptr358$i>>2] = $add414$i;
       $cmp416705$i = ($add414$i>>>0)>(999999999);
       if ($cmp416705$i) {
        $a$5707$i = $a$3$lcssa$i;$d$2706$i = $add$ptr358$i;
        while(1) {
         $incdec$ptr419$i = (($d$2706$i) + -4|0);
         HEAP32[$d$2706$i>>2] = 0;
         $cmp420$i = ($incdec$ptr419$i>>>0)<($a$5707$i>>>0);
         if ($cmp420$i) {
          $incdec$ptr423$i = (($a$5707$i) + -4|0);
          HEAP32[$incdec$ptr423$i>>2] = 0;
          $a$6$i = $incdec$ptr423$i;
         } else {
          $a$6$i = $a$5707$i;
         }
         $225 = HEAP32[$incdec$ptr419$i>>2]|0;
         $inc425$i = (($225) + 1)|0;
         HEAP32[$incdec$ptr419$i>>2] = $inc425$i;
         $cmp416$i = ($inc425$i>>>0)>(999999999);
         if ($cmp416$i) {
          $a$5707$i = $a$6$i;$d$2706$i = $incdec$ptr419$i;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $incdec$ptr419$i;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $add$ptr358$i;
       }
       $sub$ptr$rhs$cast428$i = $a$5$lcssa$i;
       $sub$ptr$sub429$i = (($sub$ptr$lhs$cast318$i) - ($sub$ptr$rhs$cast428$i))|0;
       $sub$ptr$div430$i = $sub$ptr$sub429$i >> 2;
       $mul431$i = ($sub$ptr$div430$i*9)|0;
       $226 = HEAP32[$a$5$lcssa$i>>2]|0;
       $cmp433701$i = ($226>>>0)<(10);
       if ($cmp433701$i) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $mul431$i;
        break;
       } else {
        $e$2703$i = $mul431$i;$i$2702$i = 10;
       }
       while(1) {
        $mul437$i = ($i$2702$i*10)|0;
        $inc438$i = (($e$2703$i) + 1)|0;
        $cmp433$i = ($226>>>0)<($mul437$i>>>0);
        if ($cmp433$i) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $inc438$i;
         break;
        } else {
         $e$2703$i = $inc438$i;$i$2702$i = $mul437$i;
        }
       }
      }
     } while(0);
     $add$ptr442$i = (($d$3$i) + 4|0);
     $cmp443$i = ($z$3$lcssa$i>>>0)>($add$ptr442$i>>>0);
     $add$ptr442$z$3$i = $cmp443$i ? $add$ptr442$i : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $add$ptr442$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $sub626$i = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $cmp450$i = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($cmp450$i)) {
      $cmp450$lcssa$i = 0;
      break;
     }
     $arrayidx453$i = (($z$6$i) + -4|0);
     $227 = HEAP32[$arrayidx453$i>>2]|0;
     $lnot455$i = ($227|0)==(0);
     if ($lnot455$i) {
      $z$6$i = $arrayidx453$i;
     } else {
      $cmp450$lcssa$i = 1;
      break;
     }
    }
    do {
     if ($cmp338$i) {
      $tobool466$i = ($$p$i|0)==(0);
      $inc468$i = $tobool466$i&1;
      $inc468$$p$i = (($inc468$i) + ($$p$i))|0;
      $cmp470$i = ($inc468$$p$i|0)>($e$4$ph$i|0);
      $cmp473$i = ($e$4$ph$i|0)>(-5);
      $or$cond1$i = $cmp470$i & $cmp473$i;
      if ($or$cond1$i) {
       $dec476$i = (($t$0) + -1)|0;
       $add477$neg$i = (($inc468$$p$i) + -1)|0;
       $sub478$i = (($add477$neg$i) - ($e$4$ph$i))|0;
       $p$addr$2$i = $sub478$i;$t$addr$0$i = $dec476$i;
      } else {
       $sub480$i = (($t$0) + -2)|0;
       $dec481$i = (($inc468$$p$i) + -1)|0;
       $p$addr$2$i = $dec481$i;$t$addr$0$i = $sub480$i;
      }
      $and483$i = $fl$1$and219 & 8;
      $tobool484$i = ($and483$i|0)==(0);
      if (!($tobool484$i)) {
       $p$addr$3$i = $p$addr$2$i;$t$addr$1$i = $t$addr$0$i;
       break;
      }
      do {
       if ($cmp450$lcssa$i) {
        $arrayidx489$i = (($z$6$i) + -4|0);
        $228 = HEAP32[$arrayidx489$i>>2]|0;
        $tobool490$i = ($228|0)==(0);
        if ($tobool490$i) {
         $j$2$i = 9;
         break;
        }
        $rem494696$i = (($228>>>0) % 10)&-1;
        $cmp495697$i = ($rem494696$i|0)==(0);
        if ($cmp495697$i) {
         $i$3698$i = 10;$j$1699$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $mul499$i = ($i$3698$i*10)|0;
         $inc500$i = (($j$1699$i) + 1)|0;
         $rem494$i = (($228>>>0) % ($mul499$i>>>0))&-1;
         $cmp495$i = ($rem494$i|0)==(0);
         if ($cmp495$i) {
          $i$3698$i = $mul499$i;$j$1699$i = $inc500$i;
         } else {
          $j$2$i = $inc500$i;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $or504$i = $t$addr$0$i | 32;
      $cmp505$i = ($or504$i|0)==(102);
      $sub$ptr$lhs$cast508$i = $z$6$i;
      $sub$ptr$sub510$i = (($sub$ptr$lhs$cast508$i) - ($sub$ptr$lhs$cast318$i))|0;
      $sub$ptr$div511$i = $sub$ptr$sub510$i >> 2;
      $229 = ($sub$ptr$div511$i*9)|0;
      $mul513$i = (($229) + -9)|0;
      if ($cmp505$i) {
       $sub514$i = (($mul513$i) - ($j$2$i))|0;
       $cmp515$i = ($sub514$i|0)<(0);
       $$sub514$i = $cmp515$i ? 0 : $sub514$i;
       $cmp528$i = ($p$addr$2$i|0)<($$sub514$i|0);
       $p$addr$2$$sub514$i = $cmp528$i ? $p$addr$2$i : $$sub514$i;
       $p$addr$3$i = $p$addr$2$$sub514$i;$t$addr$1$i = $t$addr$0$i;
       break;
      } else {
       $add561$i = (($mul513$i) + ($e$4$ph$i))|0;
       $sub562$i = (($add561$i) - ($j$2$i))|0;
       $cmp563$i = ($sub562$i|0)<(0);
       $$sub562$i = $cmp563$i ? 0 : $sub562$i;
       $cmp577$i = ($p$addr$2$i|0)<($$sub562$i|0);
       $p$addr$2$$sub562$i = $cmp577$i ? $p$addr$2$i : $$sub562$i;
       $p$addr$3$i = $p$addr$2$$sub562$i;$t$addr$1$i = $t$addr$0$i;
       break;
      }
     } else {
      $p$addr$3$i = $$p$i;$t$addr$1$i = $t$0;
     }
    } while(0);
    $tobool609$i = ($p$addr$3$i|0)!=(0);
    if ($tobool609$i) {
     $230 = 1;
    } else {
     $and610$i = $fl$1$and219 & 8;
     $tobool611$i = ($and610$i|0)!=(0);
     $230 = $tobool611$i;
    }
    $lor$ext$i = $230&1;
    $or613$i = $t$addr$1$i | 32;
    $cmp614$i = ($or613$i|0)==(102);
    if ($cmp614$i) {
     $cmp617$i = ($e$4$ph$i|0)>(0);
     $add620$i = $cmp617$i ? $e$4$ph$i : 0;
     $estr$2$i = 0;$sub$ptr$sub650$pn$i = $add620$i;
    } else {
     $cmp623$i = ($e$4$ph$i|0)<(0);
     $cond629$i = $cmp623$i ? $sub626$i : $e$4$ph$i;
     $cmp12$i489$i = ($cond629$i|0)<(0);
     if ($cmp12$i489$i) {
      $231 = ($cond629$i|0)<(0);
      $232 = $231 << 31 >> 31;
      $233 = $cond629$i;$234 = $232;$s$addr$014$i491$i = $arrayidx$i335;
      while(1) {
       $235 = (___uremdi3(($233|0),($234|0),10,0)|0);
       $236 = tempRet0;
       $237 = $235 | 48;
       $238 = $237&255;
       $incdec$ptr$i496$i = (($s$addr$014$i491$i) + -1|0);
       HEAP8[$incdec$ptr$i496$i>>0] = $238;
       $239 = (___udivdi3(($233|0),($234|0),10,0)|0);
       $240 = tempRet0;
       $241 = ($234>>>0)>(9);
       $242 = ($234|0)==(9);
       $243 = ($233>>>0)>(4294967295);
       $244 = $242 & $243;
       $245 = $241 | $244;
       if ($245) {
        $233 = $239;$234 = $240;$s$addr$014$i491$i = $incdec$ptr$i496$i;
       } else {
        break;
       }
      }
      $s$addr$0$lcssa$i502$i = $incdec$ptr$i496$i;$x$addr$0$lcssa$off0$i503$i = $239;
     } else {
      $s$addr$0$lcssa$i502$i = $arrayidx$i335;$x$addr$0$lcssa$off0$i503$i = $cond629$i;
     }
     $tobool9$i504$i = ($x$addr$0$lcssa$off0$i503$i|0)==(0);
     if ($tobool9$i504$i) {
      $estr$1$ph$i = $s$addr$0$lcssa$i502$i;
     } else {
      $s$addr$110$i507$i = $s$addr$0$lcssa$i502$i;$y$011$i506$i = $x$addr$0$lcssa$off0$i503$i;
      while(1) {
       $rem4$i508$i = (($y$011$i506$i>>>0) % 10)&-1;
       $add57$i509$i = $rem4$i508$i | 48;
       $conv6$i510$i = $add57$i509$i&255;
       $incdec$ptr7$i511$i = (($s$addr$110$i507$i) + -1|0);
       HEAP8[$incdec$ptr7$i511$i>>0] = $conv6$i510$i;
       $div9$i512$i = (($y$011$i506$i>>>0) / 10)&-1;
       $246 = ($y$011$i506$i>>>0)<(10);
       if ($246) {
        $estr$1$ph$i = $incdec$ptr7$i511$i;
        break;
       } else {
        $s$addr$110$i507$i = $incdec$ptr7$i511$i;$y$011$i506$i = $div9$i512$i;
       }
      }
     }
     $sub$ptr$rhs$cast634690$i = $estr$1$ph$i;
     $sub$ptr$sub635691$i = (($sub$ptr$lhs$cast160$i) - ($sub$ptr$rhs$cast634690$i))|0;
     $cmp636692$i = ($sub$ptr$sub635691$i|0)<(2);
     if ($cmp636692$i) {
      $estr$1693$i = $estr$1$ph$i;
      while(1) {
       $incdec$ptr639$i = (($estr$1693$i) + -1|0);
       HEAP8[$incdec$ptr639$i>>0] = 48;
       $sub$ptr$rhs$cast634$i = $incdec$ptr639$i;
       $sub$ptr$sub635$i = (($sub$ptr$lhs$cast160$i) - ($sub$ptr$rhs$cast634$i))|0;
       $cmp636$i = ($sub$ptr$sub635$i|0)<(2);
       if ($cmp636$i) {
        $estr$1693$i = $incdec$ptr639$i;
       } else {
        $estr$1$lcssa$i = $incdec$ptr639$i;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $247 = $e$4$ph$i >> 31;
     $248 = $247 & 2;
     $249 = (($248) + 43)|0;
     $conv644$i = $249&255;
     $incdec$ptr645$i = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$incdec$ptr645$i>>0] = $conv644$i;
     $conv646$i = $t$addr$1$i&255;
     $incdec$ptr647$i = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$incdec$ptr647$i>>0] = $conv646$i;
     $sub$ptr$rhs$cast649$i = $incdec$ptr647$i;
     $sub$ptr$sub650$i = (($sub$ptr$lhs$cast160$i) - ($sub$ptr$rhs$cast649$i))|0;
     $estr$2$i = $incdec$ptr647$i;$sub$ptr$sub650$pn$i = $sub$ptr$sub650$i;
    }
    $add608$i = (($pl$0$i) + 1)|0;
    $add612$i = (($add608$i) + ($p$addr$3$i))|0;
    $l$1$i = (($add612$i) + ($lor$ext$i))|0;
    $add653$i = (($l$1$i) + ($sub$ptr$sub650$pn$i))|0;
    $and$i517$i = $fl$1$and219 & 73728;
    $tobool$i518$i = ($and$i517$i|0)==(0);
    $cmp$i519$i = ($add653$i|0)<($w$1|0);
    $or$cond$i520$i = $tobool$i518$i & $cmp$i519$i;
    if ($or$cond$i520$i) {
     $sub$i521$i = (($w$1) - ($add653$i))|0;
     $cmp1$i522$i = ($sub$i521$i>>>0)>(256);
     $cond$i523$i = $cmp1$i522$i ? 256 : $sub$i521$i;
     _memset(($pad$i|0),32,($cond$i523$i|0))|0;
     $cmp39$i524$i = ($sub$i521$i>>>0)>(255);
     if ($cmp39$i524$i) {
      $l$addr$010$i526$i = $sub$i521$i;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $sub5$i528$i = (($l$addr$010$i526$i) + -256)|0;
       $cmp3$i529$i = ($sub5$i528$i>>>0)>(255);
       if ($cmp3$i529$i) {
        $l$addr$010$i526$i = $sub5$i528$i;
       } else {
        $l$addr$0$lcssa$i531$i = $sub5$i528$i;
        break;
       }
      }
     } else {
      $l$addr$0$lcssa$i531$i = $sub$i521$i;
     }
     (___fwritex($pad$i,$l$addr$0$lcssa$i531$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $tobool$i538$i = ($and$i517$i|0)==(65536);
    $or$cond$i540$i = $tobool$i538$i & $cmp$i519$i;
    if ($or$cond$i540$i) {
     $sub$i541$i = (($w$1) - ($add653$i))|0;
     $cmp1$i542$i = ($sub$i541$i>>>0)>(256);
     $cond$i543$i = $cmp1$i542$i ? 256 : $sub$i541$i;
     _memset(($pad$i|0),48,($cond$i543$i|0))|0;
     $cmp39$i544$i = ($sub$i541$i>>>0)>(255);
     if ($cmp39$i544$i) {
      $l$addr$010$i546$i = $sub$i541$i;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $sub5$i548$i = (($l$addr$010$i546$i) + -256)|0;
       $cmp3$i549$i = ($sub5$i548$i>>>0)>(255);
       if ($cmp3$i549$i) {
        $l$addr$010$i546$i = $sub5$i548$i;
       } else {
        $l$addr$0$lcssa$i551$i = $sub5$i548$i;
        break;
       }
      }
     } else {
      $l$addr$0$lcssa$i551$i = $sub$i541$i;
     }
     (___fwritex($pad$i,$l$addr$0$lcssa$i551$i,$f)|0);
    }
    do {
     if ($cmp614$i) {
      $cmp660$i = ($a$8$ph$i>>>0)>($arraydecay208$add$ptr213$i>>>0);
      $r$0$a$8$i = $cmp660$i ? $arraydecay208$add$ptr213$i : $a$8$ph$i;
      $d$4680$i = $r$0$a$8$i;
      while(1) {
       $250 = HEAP32[$d$4680$i>>2]|0;
       $tobool9$i558$i = ($250|0)==(0);
       if ($tobool9$i558$i) {
        $s$addr$1$lcssa$i568$i = $add$ptr671$i;
       } else {
        $s$addr$110$i561$i = $add$ptr671$i;$y$011$i560$i = $250;
        while(1) {
         $rem4$i562$i = (($y$011$i560$i>>>0) % 10)&-1;
         $add57$i563$i = $rem4$i562$i | 48;
         $conv6$i564$i = $add57$i563$i&255;
         $incdec$ptr7$i565$i = (($s$addr$110$i561$i) + -1|0);
         HEAP8[$incdec$ptr7$i565$i>>0] = $conv6$i564$i;
         $div9$i566$i = (($y$011$i560$i>>>0) / 10)&-1;
         $251 = ($y$011$i560$i>>>0)<(10);
         if ($251) {
          $s$addr$1$lcssa$i568$i = $incdec$ptr7$i565$i;
          break;
         } else {
          $s$addr$110$i561$i = $incdec$ptr7$i565$i;$y$011$i560$i = $div9$i566$i;
         }
        }
       }
       $cmp673$i = ($d$4680$i|0)==($r$0$a$8$i|0);
       do {
        if ($cmp673$i) {
         $cmp686$i = ($s$addr$1$lcssa$i568$i|0)==($add$ptr671$i|0);
         if (!($cmp686$i)) {
          $s668$1$i = $s$addr$1$lcssa$i568$i;
          break;
         }
         HEAP8[$incdec$ptr689$i>>0] = 48;
         $s668$1$i = $incdec$ptr689$i;
        } else {
         $cmp678677$i = ($s$addr$1$lcssa$i568$i>>>0)>($buf$i>>>0);
         if ($cmp678677$i) {
          $s668$0678$i = $s$addr$1$lcssa$i568$i;
         } else {
          $s668$1$i = $s$addr$1$lcssa$i568$i;
          break;
         }
         while(1) {
          $incdec$ptr681$i = (($s668$0678$i) + -1|0);
          HEAP8[$incdec$ptr681$i>>0] = 48;
          $cmp678$i = ($incdec$ptr681$i>>>0)>($buf$i>>>0);
          if ($cmp678$i) {
           $s668$0678$i = $incdec$ptr681$i;
          } else {
           $s668$1$i = $incdec$ptr681$i;
           break;
          }
         }
        }
       } while(0);
       $sub$ptr$rhs$cast695$i = $s668$1$i;
       $sub$ptr$sub696$i = (($sub$ptr$lhs$cast694$i) - ($sub$ptr$rhs$cast695$i))|0;
       (___fwritex($s668$1$i,$sub$ptr$sub696$i,$f)|0);
       $incdec$ptr698$i = (($d$4680$i) + 4|0);
       $cmp665$i = ($incdec$ptr698$i>>>0)>($arraydecay208$add$ptr213$i>>>0);
       if ($cmp665$i) {
        break;
       } else {
        $d$4680$i = $incdec$ptr698$i;
       }
      }
      if (!($tobool609$i)) {
       $and702$i = $fl$1$and219 & 8;
       $tobool703$i = ($and702$i|0)==(0);
       if ($tobool703$i) {
        break;
       }
      }
      (___fwritex(10128,1,$f)|0);
      $cmp707671$i = ($incdec$ptr698$i>>>0)<($z$6$i>>>0);
      $cmp710672$i = ($p$addr$3$i|0)>(0);
      $or$cond368673$i = $cmp707671$i & $cmp710672$i;
      if ($or$cond368673$i) {
       $d$5674$i = $incdec$ptr698$i;$p$addr$4675$i = $p$addr$3$i;
       while(1) {
        $252 = HEAP32[$d$5674$i>>2]|0;
        $tobool9$i575$i = ($252|0)==(0);
        if ($tobool9$i575$i) {
         $s715$0669$i = $add$ptr671$i;
         label = 300;
        } else {
         $s$addr$110$i578$i = $add$ptr671$i;$y$011$i577$i = $252;
         while(1) {
          $rem4$i579$i = (($y$011$i577$i>>>0) % 10)&-1;
          $add57$i580$i = $rem4$i579$i | 48;
          $conv6$i581$i = $add57$i580$i&255;
          $incdec$ptr7$i582$i = (($s$addr$110$i578$i) + -1|0);
          HEAP8[$incdec$ptr7$i582$i>>0] = $conv6$i581$i;
          $div9$i583$i = (($y$011$i577$i>>>0) / 10)&-1;
          $253 = ($y$011$i577$i>>>0)<(10);
          if ($253) {
           break;
          } else {
           $s$addr$110$i578$i = $incdec$ptr7$i582$i;$y$011$i577$i = $div9$i583$i;
          }
         }
         $cmp722668$i = ($incdec$ptr7$i582$i>>>0)>($buf$i>>>0);
         if ($cmp722668$i) {
          $s715$0669$i = $incdec$ptr7$i582$i;
          label = 300;
         } else {
          $s715$0$lcssa$i = $incdec$ptr7$i582$i;
         }
        }
        if ((label|0) == 300) {
         while(1) {
          label = 0;
          $incdec$ptr725$i = (($s715$0669$i) + -1|0);
          HEAP8[$incdec$ptr725$i>>0] = 48;
          $cmp722$i = ($incdec$ptr725$i>>>0)>($buf$i>>>0);
          if ($cmp722$i) {
           $s715$0669$i = $incdec$ptr725$i;
           label = 300;
          } else {
           $s715$0$lcssa$i = $incdec$ptr725$i;
           break;
          }
         }
        }
        $cmp727$i = ($p$addr$4675$i|0)>(9);
        $cond732$i = $cmp727$i ? 9 : $p$addr$4675$i;
        (___fwritex($s715$0$lcssa$i,$cond732$i,$f)|0);
        $incdec$ptr734$i = (($d$5674$i) + 4|0);
        $sub735$i = (($p$addr$4675$i) + -9)|0;
        $cmp707$i = ($incdec$ptr734$i>>>0)<($z$6$i>>>0);
        $cmp710$i = ($sub735$i|0)>(0);
        $or$cond368$i = $cmp707$i & $cmp710$i;
        if ($or$cond368$i) {
         $d$5674$i = $incdec$ptr734$i;$p$addr$4675$i = $sub735$i;
        } else {
         $p$addr$4$lcssa$i = $sub735$i;
         break;
        }
       }
      } else {
       $p$addr$4$lcssa$i = $p$addr$3$i;
      }
      $cmp$i589$i = ($p$addr$4$lcssa$i|0)>(0);
      if (!($cmp$i589$i)) {
       break;
      }
      $cmp1$i590$i = ($p$addr$4$lcssa$i>>>0)>(256);
      $cond$i591$i = $cmp1$i590$i ? 256 : $p$addr$4$lcssa$i;
      _memset(($pad$i|0),48,($cond$i591$i|0))|0;
      $cmp39$i592$i = ($p$addr$4$lcssa$i>>>0)>(255);
      if ($cmp39$i592$i) {
       $l$addr$010$i594$i = $p$addr$4$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $sub5$i596$i = (($l$addr$010$i594$i) + -256)|0;
        $cmp3$i597$i = ($sub5$i596$i>>>0)>(255);
        if ($cmp3$i597$i) {
         $l$addr$010$i594$i = $sub5$i596$i;
        } else {
         $l$addr$0$lcssa$i599$i = $sub5$i596$i;
         break;
        }
       }
      } else {
       $l$addr$0$lcssa$i599$i = $p$addr$4$lcssa$i;
      }
      (___fwritex($pad$i,$l$addr$0$lcssa$i599$i,$f)|0);
     } else {
      $add$ptr742$i = (($a$8$ph$i) + 4|0);
      $z$6$add$ptr742$i = $cmp450$lcssa$i ? $z$6$i : $add$ptr742$i;
      $cmp748685$i = ($p$addr$3$i|0)>(-1);
      do {
       if ($cmp748685$i) {
        $and780$i = $fl$1$and219 & 8;
        $tobool781$not$i = ($and780$i|0)!=(0);
        $d$6687$i = $a$8$ph$i;$p$addr$5688$i = $p$addr$3$i;
        while(1) {
         $254 = HEAP32[$d$6687$i>>2]|0;
         $tobool9$i606$i = ($254|0)==(0);
         if ($tobool9$i606$i) {
          label = 311;
         } else {
          $s$addr$110$i609$i = $add$ptr671$i;$y$011$i608$i = $254;
          while(1) {
           $rem4$i610$i = (($y$011$i608$i>>>0) % 10)&-1;
           $add57$i611$i = $rem4$i610$i | 48;
           $conv6$i612$i = $add57$i611$i&255;
           $incdec$ptr7$i613$i = (($s$addr$110$i609$i) + -1|0);
           HEAP8[$incdec$ptr7$i613$i>>0] = $conv6$i612$i;
           $div9$i614$i = (($y$011$i608$i>>>0) / 10)&-1;
           $255 = ($y$011$i608$i>>>0)<(10);
           if ($255) {
            break;
           } else {
            $s$addr$110$i609$i = $incdec$ptr7$i613$i;$y$011$i608$i = $div9$i614$i;
           }
          }
          $cmp760$i = ($incdec$ptr7$i613$i|0)==($add$ptr671$i|0);
          if ($cmp760$i) {
           label = 311;
          } else {
           $s753$0$i = $incdec$ptr7$i613$i;
          }
         }
         if ((label|0) == 311) {
          label = 0;
          HEAP8[$incdec$ptr689$i>>0] = 48;
          $s753$0$i = $incdec$ptr689$i;
         }
         $cmp765$i = ($d$6687$i|0)==($a$8$ph$i|0);
         do {
          if ($cmp765$i) {
           $incdec$ptr776$i = (($s753$0$i) + 1|0);
           (___fwritex($s753$0$i,1,$f)|0);
           $cmp777$i = ($p$addr$5688$i|0)>(0);
           $brmerge$i = $cmp777$i | $tobool781$not$i;
           if (!($brmerge$i)) {
            $s753$2$i = $incdec$ptr776$i;
            break;
           }
           (___fwritex(10128,1,$f)|0);
           $s753$2$i = $incdec$ptr776$i;
          } else {
           $cmp770681$i = ($s753$0$i>>>0)>($buf$i>>>0);
           if ($cmp770681$i) {
            $s753$1682$i = $s753$0$i;
           } else {
            $s753$2$i = $s753$0$i;
            break;
           }
           while(1) {
            $incdec$ptr773$i = (($s753$1682$i) + -1|0);
            HEAP8[$incdec$ptr773$i>>0] = 48;
            $cmp770$i = ($incdec$ptr773$i>>>0)>($buf$i>>>0);
            if ($cmp770$i) {
             $s753$1682$i = $incdec$ptr773$i;
            } else {
             $s753$2$i = $incdec$ptr773$i;
             break;
            }
           }
          }
         } while(0);
         $sub$ptr$rhs$cast788$i = $s753$2$i;
         $sub$ptr$sub789$i = (($sub$ptr$lhs$cast694$i) - ($sub$ptr$rhs$cast788$i))|0;
         $cmp790$i = ($sub$ptr$sub789$i|0)<($p$addr$5688$i|0);
         $sub$ptr$sub789$p$addr$5$i = $cmp790$i ? $sub$ptr$sub789$i : $p$addr$5688$i;
         (___fwritex($s753$2$i,$sub$ptr$sub789$p$addr$5$i,$f)|0);
         $sub806$i = (($p$addr$5688$i) - ($sub$ptr$sub789$i))|0;
         $incdec$ptr808$i = (($d$6687$i) + 4|0);
         $cmp745$i = ($incdec$ptr808$i>>>0)<($z$6$add$ptr742$i>>>0);
         $cmp748$i = ($sub806$i|0)>(-1);
         $or$cond369$i = $cmp745$i & $cmp748$i;
         if ($or$cond369$i) {
          $d$6687$i = $incdec$ptr808$i;$p$addr$5688$i = $sub806$i;
         } else {
          break;
         }
        }
        $cmp$i622$i = ($sub806$i|0)>(0);
        if (!($cmp$i622$i)) {
         break;
        }
        $cmp1$i623$i = ($sub806$i>>>0)>(256);
        $cond$i624$i = $cmp1$i623$i ? 256 : $sub806$i;
        _memset(($pad$i|0),48,($cond$i624$i|0))|0;
        $cmp39$i625$i = ($sub806$i>>>0)>(255);
        if ($cmp39$i625$i) {
         $l$addr$010$i627$i = $sub806$i;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $sub5$i629$i = (($l$addr$010$i627$i) + -256)|0;
          $cmp3$i630$i = ($sub5$i629$i>>>0)>(255);
          if ($cmp3$i630$i) {
           $l$addr$010$i627$i = $sub5$i629$i;
          } else {
           $l$addr$0$lcssa$i632$i = $sub5$i629$i;
           break;
          }
         }
        } else {
         $l$addr$0$lcssa$i632$i = $sub806$i;
        }
        (___fwritex($pad$i,$l$addr$0$lcssa$i632$i,$f)|0);
       }
      } while(0);
      $sub$ptr$rhs$cast812$i = $estr$2$i;
      $sub$ptr$sub813$i = (($sub$ptr$lhs$cast160$i) - ($sub$ptr$rhs$cast812$i))|0;
      (___fwritex($estr$2$i,$sub$ptr$sub813$i,$f)|0);
     }
    } while(0);
    $tobool$i$i = ($and$i517$i|0)==(8192);
    $or$cond$i$i = $tobool$i$i & $cmp$i519$i;
    if ($or$cond$i$i) {
     $sub$i$i = (($w$1) - ($add653$i))|0;
     $cmp1$i$i = ($sub$i$i>>>0)>(256);
     $cond$i$i = $cmp1$i$i ? 256 : $sub$i$i;
     _memset(($pad$i|0),32,($cond$i$i|0))|0;
     $cmp39$i$i = ($sub$i$i>>>0)>(255);
     if ($cmp39$i$i) {
      $l$addr$010$i$i = $sub$i$i;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $sub5$i$i = (($l$addr$010$i$i) + -256)|0;
       $cmp3$i$i = ($sub5$i$i>>>0)>(255);
       if ($cmp3$i$i) {
        $l$addr$010$i$i = $sub5$i$i;
       } else {
        $l$addr$0$lcssa$i$i = $sub5$i$i;
        break;
       }
      }
     } else {
      $l$addr$0$lcssa$i$i = $sub$i$i;
     }
     (___fwritex($pad$i,$l$addr$0$lcssa$i$i,$f)|0);
    }
    $w$add653$i = $cmp$i519$i ? $w$1 : $add653$i;
    $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $w$add653$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 67:  {
    $155 = $82;
    HEAP32[$wc>>2] = $155;
    HEAP32[$arrayidx363>>2] = 0;
    $314 = $wc;$315 = $wc;$p$4658 = -1;
    label = 104;
    break;
   }
   case 83:  {
    $cmp370610 = ($p$0|0)==(0);
    if ($cmp370610) {
     $316 = $82;$317 = $82;$i$0609 = 0;
     label = 110;
    } else {
     $314 = $82;$315 = $82;$p$4658 = $p$0;
     label = 104;
    }
    break;
   }
   default: {
    $313 = $82;$a$2 = $incdec$ptr$i190563;$arg$sroa$0$sroa$1$4$extract$trunc531555 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$6 = $fl$1$and219;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 10032;$z$2 = $add$ptr205;
   }
   }
  } while(0);
  L445: do {
   if ((label|0) == 77) {
    label = 0;
    $95 = $82;
    $and249 = $t$1 & 32;
    $96 = ($95|0)==(0);
    $97 = ($arg$sroa$0$sroa$1$4$extract$trunc531556568|0)==(0);
    $98 = $96 & $97;
    if ($98) {
     $149 = $82;$a$0 = $add$ptr205;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 10032;
     label = 94;
    } else {
     $101 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$99 = $95;$s$addr$06$i = $add$ptr205;
     while(1) {
      $idxprom$i = $99 & 15;
      $arrayidx$i = (10112 + ($idxprom$i)|0);
      $100 = HEAP8[$arrayidx$i>>0]|0;
      $conv4$i = $100&255;
      $or$i = $conv4$i | $and249;
      $conv1$i = $or$i&255;
      $incdec$ptr$i242 = (($s$addr$06$i) + -1|0);
      HEAP8[$incdec$ptr$i242>>0] = $conv1$i;
      $102 = (_bitshift64Lshr(($99|0),($101|0),4)|0);
      $103 = tempRet0;
      $104 = ($102|0)==(0);
      $105 = ($103|0)==(0);
      $106 = $104 & $105;
      if ($106) {
       break;
      } else {
       $101 = $103;$99 = $102;$s$addr$06$i = $incdec$ptr$i242;
      }
     }
     $and254 = $fl$3 & 8;
     $tobool255 = ($and254|0)==(0);
     if ($tobool255) {
      $149 = $82;$a$0 = $incdec$ptr$i242;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 10032;
      label = 94;
     } else {
      $shr = $t$1 >> 4;
      $add$ptr257 = (10032 + ($shr)|0);
      $149 = $82;$a$0 = $incdec$ptr$i242;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $add$ptr257;
      label = 94;
     }
    }
   }
   else if ((label|0) == 89) {
    label = 0;
    $127 = $128;
    $129 = ($arg$sroa$0$sroa$1$4$extract$trunc531554>>>0)>(0);
    $130 = ($arg$sroa$0$sroa$1$4$extract$trunc531554|0)==(0);
    $131 = ($127>>>0)>(4294967295);
    $132 = $130 & $131;
    $133 = $129 | $132;
    if ($133) {
     $134 = $127;$135 = $arg$sroa$0$sroa$1$4$extract$trunc531554;$s$addr$014$i = $add$ptr205;
     while(1) {
      $136 = (___uremdi3(($134|0),($135|0),10,0)|0);
      $137 = tempRet0;
      $138 = $136 | 48;
      $139 = $138&255;
      $incdec$ptr$i272 = (($s$addr$014$i) + -1|0);
      HEAP8[$incdec$ptr$i272>>0] = $139;
      $140 = (___udivdi3(($134|0),($135|0),10,0)|0);
      $141 = tempRet0;
      $142 = ($135>>>0)>(9);
      $143 = ($135|0)==(9);
      $144 = ($134>>>0)>(4294967295);
      $145 = $143 & $144;
      $146 = $142 | $145;
      if ($146) {
       $134 = $140;$135 = $141;$s$addr$014$i = $incdec$ptr$i272;
      } else {
       break;
      }
     }
     $s$addr$0$lcssa$i275 = $incdec$ptr$i272;$x$addr$0$lcssa$off0$i = $140;
    } else {
     $s$addr$0$lcssa$i275 = $add$ptr205;$x$addr$0$lcssa$off0$i = $127;
    }
    $tobool9$i = ($x$addr$0$lcssa$off0$i|0)==(0);
    if ($tobool9$i) {
     $149 = $128;$a$0 = $s$addr$0$lcssa$i275;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531554;$fl$4 = $fl$1$and219;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 94;
    } else {
     $s$addr$110$i = $s$addr$0$lcssa$i275;$y$011$i = $x$addr$0$lcssa$off0$i;
     while(1) {
      $rem4$i = (($y$011$i>>>0) % 10)&-1;
      $add57$i = $rem4$i | 48;
      $conv6$i = $add57$i&255;
      $incdec$ptr7$i = (($s$addr$110$i) + -1|0);
      HEAP8[$incdec$ptr7$i>>0] = $conv6$i;
      $div9$i = (($y$011$i>>>0) / 10)&-1;
      $147 = ($y$011$i>>>0)<(10);
      if ($147) {
       $149 = $128;$a$0 = $incdec$ptr7$i;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531554;$fl$4 = $fl$1$and219;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 94;
       break;
      } else {
       $s$addr$110$i = $incdec$ptr7$i;$y$011$i = $div9$i;
      }
     }
    }
   }
   else if ((label|0) == 99) {
    label = 0;
    $call349 = (_memchr($a$1,0,$p$0)|0);
    $tobool350 = ($call349|0)==(0|0);
    if ($tobool350) {
     $add$ptr352 = (($a$1) + ($p$0)|0);
     $313 = $82;$a$2 = $a$1;$arg$sroa$0$sroa$1$4$extract$trunc531555 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$6 = $and219;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 10032;$z$2 = $add$ptr352;
     break;
    } else {
     $sub$ptr$lhs$cast354 = $call349;
     $sub$ptr$rhs$cast355 = $a$1;
     $sub$ptr$sub356 = (($sub$ptr$lhs$cast354) - ($sub$ptr$rhs$cast355))|0;
     $313 = $82;$a$2 = $a$1;$arg$sroa$0$sroa$1$4$extract$trunc531555 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$6 = $and219;$p$5 = $sub$ptr$sub356;$pl$2 = 0;$prefix$2 = 10032;$z$2 = $call349;
     break;
    }
   }
   else if ((label|0) == 104) {
    label = 0;
    $i$0612 = 0;$l$1611 = 0;$ws$0613 = $314;
    while(1) {
     $156 = HEAP32[$ws$0613>>2]|0;
     $tobool373 = ($156|0)==(0);
     if ($tobool373) {
      $i$0$lcssa = $i$0612;$l$1$lcssa = $l$1611;
      break;
     }
     $call377 = (_wctomb($mb,$156)|0);
     $cmp378 = ($call377|0)>(-1);
     if (!($cmp378)) {
      $retval$0 = -1;
      label = 362;
      break L1;
     }
     $sub382 = (($p$4658) - ($i$0612))|0;
     $cmp383 = ($call377>>>0)>($sub382>>>0);
     $add388 = (($call377) + ($i$0612))|0;
     if ($cmp383) {
      $316 = $314;$317 = $315;$i$0609 = $i$0612;
      label = 110;
      break L445;
     }
     $incdec$ptr376 = (($ws$0613) + 4|0);
     $cmp370 = ($add388>>>0)<($p$4658>>>0);
     if ($cmp370) {
      $i$0612 = $add388;$l$1611 = $call377;$ws$0613 = $incdec$ptr376;
     } else {
      $i$0$lcssa = $add388;$l$1$lcssa = $call377;
      break;
     }
    }
    $cmp390 = ($l$1$lcssa|0)<(0);
    if ($cmp390) {
     $retval$0 = -1;
     label = 362;
     break L1;
    } else {
     $316 = $314;$317 = $315;$i$0609 = $i$0$lcssa;
     label = 110;
    }
   }
  } while(0);
  if ((label|0) == 94) {
   label = 0;
   $cmp299 = ($p$2|0)>(-1);
   $and302 = $fl$4 & -65537;
   $and302$fl$4 = $cmp299 ? $and302 : $fl$4;
   $148 = $149;
   $150 = ($148|0)==(0);
   $151 = ($arg$sroa$0$sroa$1$4$extract$trunc531553|0)==(0);
   $152 = $150 & $151;
   $tobool307 = ($p$2|0)==(0);
   $or$cond = $152 & $tobool307;
   if ($or$cond) {
    $313 = $149;$a$2 = $add$ptr205;$arg$sroa$0$sroa$1$4$extract$trunc531555 = $arg$sroa$0$sroa$1$4$extract$trunc531553;$fl$6 = $and302$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $add$ptr205;
   } else {
    $sub$ptr$rhs$cast311 = $a$0;
    $sub$ptr$sub312 = (($sub$ptr$lhs$cast310) - ($sub$ptr$rhs$cast311))|0;
    $lnot$ext = $152&1;
    $add315 = (($lnot$ext) + ($sub$ptr$sub312))|0;
    $cmp316 = ($p$2|0)>($add315|0);
    $p$2$add315 = $cmp316 ? $p$2 : $add315;
    $313 = $149;$a$2 = $a$0;$arg$sroa$0$sroa$1$4$extract$trunc531555 = $arg$sroa$0$sroa$1$4$extract$trunc531553;$fl$6 = $and302$fl$4;$p$5 = $p$2$add315;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $add$ptr205;
   }
  }
  else if ((label|0) == 110) {
   label = 0;
   $and$i297 = $fl$1$and219 & 73728;
   $tobool$i298 = ($and$i297|0)==(0);
   $cmp$i299 = ($i$0609|0)<($w$1|0);
   $or$cond$i300 = $tobool$i298 & $cmp$i299;
   if ($or$cond$i300) {
    $sub$i301 = (($w$1) - ($i$0609))|0;
    $cmp1$i302 = ($sub$i301>>>0)>(256);
    $cond$i303 = $cmp1$i302 ? 256 : $sub$i301;
    _memset(($pad$i|0),32,($cond$i303|0))|0;
    $cmp39$i304 = ($sub$i301>>>0)>(255);
    if ($cmp39$i304) {
     $l$addr$010$i306 = $sub$i301;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $sub5$i308 = (($l$addr$010$i306) + -256)|0;
      $cmp3$i309 = ($sub5$i308>>>0)>(255);
      if ($cmp3$i309) {
       $l$addr$010$i306 = $sub5$i308;
      } else {
       $l$addr$0$lcssa$i311 = $sub5$i308;
       break;
      }
     }
    } else {
     $l$addr$0$lcssa$i311 = $sub$i301;
    }
    (___fwritex($pad$i,$l$addr$0$lcssa$i311,$f)|0);
   }
   $cmp397616 = ($i$0609|0)==(0);
   L481: do {
    if (!($cmp397616)) {
     $i$1617 = 0;$ws$1618 = $316;
     while(1) {
      $157 = HEAP32[$ws$1618>>2]|0;
      $tobool400 = ($157|0)==(0);
      if ($tobool400) {
       break L481;
      }
      $call404 = (_wctomb($mb,$157)|0);
      $add405 = (($call404) + ($i$1617))|0;
      $cmp406 = ($add405|0)>($i$0609|0);
      if ($cmp406) {
       break L481;
      }
      $incdec$ptr403 = (($ws$1618) + 4|0);
      (___fwritex($mb,$call404,$f)|0);
      $cmp397 = ($add405>>>0)<($i$0609>>>0);
      if ($cmp397) {
       $i$1617 = $add405;$ws$1618 = $incdec$ptr403;
      } else {
       break;
      }
     }
    }
   } while(0);
   $tobool$i318 = ($and$i297|0)==(8192);
   $or$cond$i320 = $tobool$i318 & $cmp$i299;
   if ($or$cond$i320) {
    $sub$i321 = (($w$1) - ($i$0609))|0;
    $cmp1$i322 = ($sub$i321>>>0)>(256);
    $cond$i323 = $cmp1$i322 ? 256 : $sub$i321;
    _memset(($pad$i|0),32,($cond$i323|0))|0;
    $cmp39$i324 = ($sub$i321>>>0)>(255);
    if ($cmp39$i324) {
     $l$addr$010$i326 = $sub$i321;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $sub5$i328 = (($l$addr$010$i326) + -256)|0;
      $cmp3$i329 = ($sub5$i328>>>0)>(255);
      if ($cmp3$i329) {
       $l$addr$010$i326 = $sub5$i328;
      } else {
       $l$addr$0$lcssa$i331 = $sub5$i328;
       break;
      }
     }
    } else {
     $l$addr$0$lcssa$i331 = $sub$i321;
    }
    (___fwritex($pad$i,$l$addr$0$lcssa$i331,$f)|0);
   }
   $cond419 = $cmp$i299 ? $w$1 : $i$0609;
   $309 = $317;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $cond419;$l10n$0 = $l10n$3;
   continue;
  }
  $sub$ptr$lhs$cast424 = $z$2;
  $sub$ptr$rhs$cast425 = $a$2;
  $sub$ptr$sub426 = (($sub$ptr$lhs$cast424) - ($sub$ptr$rhs$cast425))|0;
  $cmp427 = ($p$5|0)<($sub$ptr$sub426|0);
  $sub$ptr$sub426$p$5 = $cmp427 ? $sub$ptr$sub426 : $p$5;
  $add434 = (($pl$2) + ($sub$ptr$sub426$p$5))|0;
  $cmp435 = ($w$1|0)<($add434|0);
  $w$2 = $cmp435 ? $add434 : $w$1;
  $and$i352 = $fl$6 & 73728;
  $tobool$i353 = ($and$i352|0)==(0);
  $cmp$i354 = ($add434|0)<($w$2|0);
  $or$cond$i355 = $tobool$i353 & $cmp$i354;
  if ($or$cond$i355) {
   $sub$i356 = (($w$2) - ($add434))|0;
   $cmp1$i357 = ($sub$i356>>>0)>(256);
   $cond$i358 = $cmp1$i357 ? 256 : $sub$i356;
   _memset(($pad$i|0),32,($cond$i358|0))|0;
   $cmp39$i359 = ($sub$i356>>>0)>(255);
   if ($cmp39$i359) {
    $l$addr$010$i361 = $sub$i356;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $sub5$i363 = (($l$addr$010$i361) + -256)|0;
     $cmp3$i364 = ($sub5$i363>>>0)>(255);
     if ($cmp3$i364) {
      $l$addr$010$i361 = $sub5$i363;
     } else {
      $l$addr$0$lcssa$i366 = $sub5$i363;
      break;
     }
    }
   } else {
    $l$addr$0$lcssa$i366 = $sub$i356;
   }
   (___fwritex($pad$i,$l$addr$0$lcssa$i366,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $tobool$i279 = ($and$i352|0)==(65536);
  $or$cond$i281 = $tobool$i279 & $cmp$i354;
  if ($or$cond$i281) {
   $sub$i282 = (($w$2) - ($add434))|0;
   $cmp1$i283 = ($sub$i282>>>0)>(256);
   $cond$i284 = $cmp1$i283 ? 256 : $sub$i282;
   _memset(($pad$i|0),48,($cond$i284|0))|0;
   $cmp39$i285 = ($sub$i282>>>0)>(255);
   if ($cmp39$i285) {
    $l$addr$010$i287 = $sub$i282;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $sub5$i289 = (($l$addr$010$i287) + -256)|0;
     $cmp3$i290 = ($sub5$i289>>>0)>(255);
     if ($cmp3$i290) {
      $l$addr$010$i287 = $sub5$i289;
     } else {
      $l$addr$0$lcssa$i292 = $sub5$i289;
      break;
     }
    }
   } else {
    $l$addr$0$lcssa$i292 = $sub$i282;
   }
   (___fwritex($pad$i,$l$addr$0$lcssa$i292,$f)|0);
  }
  $cmp$i247 = ($sub$ptr$sub426|0)<($sub$ptr$sub426$p$5|0);
  if ($cmp$i247) {
   $sub$i248 = (($sub$ptr$sub426$p$5) - ($sub$ptr$sub426))|0;
   $cmp1$i249 = ($sub$i248>>>0)>(256);
   $cond$i250 = $cmp1$i249 ? 256 : $sub$i248;
   _memset(($pad$i|0),48,($cond$i250|0))|0;
   $cmp39$i251 = ($sub$i248>>>0)>(255);
   if ($cmp39$i251) {
    $l$addr$010$i253 = $sub$i248;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $sub5$i255 = (($l$addr$010$i253) + -256)|0;
     $cmp3$i256 = ($sub5$i255>>>0)>(255);
     if ($cmp3$i256) {
      $l$addr$010$i253 = $sub5$i255;
     } else {
      $l$addr$0$lcssa$i258 = $sub5$i255;
      break;
     }
    }
   } else {
    $l$addr$0$lcssa$i258 = $sub$i248;
   }
   (___fwritex($pad$i,$l$addr$0$lcssa$i258,$f)|0);
  }
  (___fwritex($a$2,$sub$ptr$sub426,$f)|0);
  $tobool$i = ($and$i352|0)==(8192);
  $or$cond$i = $tobool$i & $cmp$i354;
  if (!($or$cond$i)) {
   $309 = $313;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531555;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $sub$i179 = (($w$2) - ($add434))|0;
  $cmp1$i = ($sub$i179>>>0)>(256);
  $cond$i = $cmp1$i ? 256 : $sub$i179;
  _memset(($pad$i|0),32,($cond$i|0))|0;
  $cmp39$i = ($sub$i179>>>0)>(255);
  if ($cmp39$i) {
   $l$addr$010$i = $sub$i179;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $sub5$i = (($l$addr$010$i) + -256)|0;
    $cmp3$i = ($sub5$i>>>0)>(255);
    if ($cmp3$i) {
     $l$addr$010$i = $sub5$i;
    } else {
     $l$addr$0$lcssa$i = $sub5$i;
     break;
    }
   }
  } else {
   $l$addr$0$lcssa$i = $sub$i179;
  }
  (___fwritex($pad$i,$l$addr$0$lcssa$i,$f)|0);
  $309 = $313;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531555;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $tobool452 = ($f|0)==(0|0);
  if (!($tobool452)) {
   $retval$0 = $cnt$1;
   STACKTOP = sp;return ($retval$0|0);
  }
  $tobool455 = ($l10n$0|0)==(0);
  if ($tobool455) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  } else {
   $i$2577 = 1;
  }
  while(1) {
   $arrayidx462 = (($nl_type) + ($i$2577<<2)|0);
   $256 = HEAP32[$arrayidx462>>2]|0;
   $tobool463 = ($256|0)==(0);
   if ($tobool463) {
    $i$3575 = $i$2577;
    break;
   }
   $add$ptr466 = (($nl_arg) + ($i$2577<<3)|0);
   $cmp$i = ($256>>>0)>(20);
   L540: do {
    if (!($cmp$i)) {
     do {
      switch ($256|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $257 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$add$ptr466>>2] = $257;
       break L540;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $258 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $259 = ($258|0)<(0);
       $260 = $259 << 31 >> 31;
       $261 = $add$ptr466;
       $262 = $261;
       HEAP32[$262>>2] = $258;
       $263 = (($261) + 4)|0;
       $264 = $263;
       HEAP32[$264>>2] = $260;
       break L540;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $265 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $266 = $add$ptr466;
       $267 = $266;
       HEAP32[$267>>2] = $265;
       $268 = (($266) + 4)|0;
       $269 = $268;
       HEAP32[$269>>2] = 0;
       break L540;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $270 = $arglist_current44;
       $271 = $270;
       $272 = HEAP32[$271>>2]|0;
       $273 = (($270) + 4)|0;
       $274 = $273;
       $275 = HEAP32[$274>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $276 = $add$ptr466;
       $277 = $276;
       HEAP32[$277>>2] = $272;
       $278 = (($276) + 4)|0;
       $279 = $278;
       HEAP32[$279>>2] = $275;
       break L540;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $280 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $conv12$i = $280&65535;
       $281 = $conv12$i << 16 >> 16;
       $282 = ($281|0)<(0);
       $283 = $282 << 31 >> 31;
       $284 = $add$ptr466;
       $285 = $284;
       HEAP32[$285>>2] = $281;
       $286 = (($284) + 4)|0;
       $287 = $286;
       HEAP32[$287>>2] = $283;
       break L540;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $288 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $conv17$mask$i = $288 & 65535;
       $289 = $add$ptr466;
       $290 = $289;
       HEAP32[$290>>2] = $conv17$mask$i;
       $291 = (($289) + 4)|0;
       $292 = $291;
       HEAP32[$292>>2] = 0;
       break L540;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $293 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $conv22$i = $293&255;
       $294 = $conv22$i << 24 >> 24;
       $295 = ($294|0)<(0);
       $296 = $295 << 31 >> 31;
       $297 = $add$ptr466;
       $298 = $297;
       HEAP32[$298>>2] = $294;
       $299 = (($297) + 4)|0;
       $300 = $299;
       HEAP32[$300>>2] = $296;
       break L540;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $301 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $conv27$mask$i = $301 & 255;
       $302 = $add$ptr466;
       $303 = $302;
       HEAP32[$303>>2] = $conv27$mask$i;
       $304 = (($302) + 4)|0;
       $305 = $304;
       HEAP32[$305>>2] = 0;
       break L540;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$306 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$add$ptr466>>3] = $306;
       break L540;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$307 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$add$ptr466>>3] = $307;
       break L540;
       break;
      }
      default: {
       break L540;
      }
      }
     } while(0);
    }
   } while(0);
   $inc = (($i$2577) + 1)|0;
   $cmp459 = ($inc|0)<(10);
   if ($cmp459) {
    $i$2577 = $inc;
   } else {
    $retval$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($retval$0|0);
  }
  while(1) {
   $arrayidx474 = (($nl_type) + ($i$3575<<2)|0);
   $308 = HEAP32[$arrayidx474>>2]|0;
   $lnot476 = ($308|0)==(0);
   $inc481 = (($i$3575) + 1)|0;
   if (!($lnot476)) {
    $retval$0 = -1;
    label = 362;
    break;
   }
   $cmp471 = ($inc481|0)<(10);
   if ($cmp471) {
    $i$3575 = $inc481;
   } else {
    $retval$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 else if ((label|0) == 362) {
  STACKTOP = sp;return ($retval$0|0);
 }
 return 0|0;
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $arrayidx = 0, $b = 0, $buf = 0, $buf_size = 0, $call = 0, $call10 = 0, $cmp = 0, $cmp15 = 0, $cmp4 = 0, $f = 0, $n$addr$0 = 0, $retval$0 = 0, $s$addr$0 = 0, $sub = 0, $sub$ptr$rhs$cast = 0, $sub16 = 0, $sub3 = 0;
 var $sub3$n$addr$0 = 0, $tobool = 0, $tobool11 = 0, $wbase = 0, $wend = 0, $wpos = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=10136+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $sub = (($n) + -1)|0;
 $cmp = ($sub>>>0)>(2147483646);
 if ($cmp) {
  $tobool = ($n|0)==(0);
  if ($tobool) {
   $n$addr$0 = 1;$s$addr$0 = $b;
  } else {
   $call = (___errno_location()|0);
   HEAP32[$call>>2] = 75;
   $retval$0 = -1;
   STACKTOP = sp;return ($retval$0|0);
  }
 } else {
  $n$addr$0 = $n;$s$addr$0 = $s;
 }
 $sub$ptr$rhs$cast = $s$addr$0;
 $sub3 = (-2 - ($sub$ptr$rhs$cast))|0;
 $cmp4 = ($n$addr$0>>>0)>($sub3>>>0);
 $sub3$n$addr$0 = $cmp4 ? $sub3 : $n$addr$0;
 $buf_size = (($f) + 48|0);
 HEAP32[$buf_size>>2] = $sub3$n$addr$0;
 $wpos = (($f) + 20|0);
 HEAP32[$wpos>>2] = $s$addr$0;
 $buf = (($f) + 44|0);
 HEAP32[$buf>>2] = $s$addr$0;
 $add$ptr = (($s$addr$0) + ($sub3$n$addr$0)|0);
 $wend = (($f) + 16|0);
 HEAP32[$wend>>2] = $add$ptr;
 $wbase = (($f) + 28|0);
 HEAP32[$wbase>>2] = $add$ptr;
 $call10 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $tobool11 = ($sub3$n$addr$0|0)==(0);
 if ($tobool11) {
  $retval$0 = $call10;
  STACKTOP = sp;return ($retval$0|0);
 }
 $0 = HEAP32[$wpos>>2]|0;
 $1 = HEAP32[$wend>>2]|0;
 $cmp15 = ($0|0)==($1|0);
 $sub16 = $cmp15 << 31 >> 31;
 $arrayidx = (($0) + ($sub16)|0);
 HEAP8[$arrayidx>>0] = 0;
 $retval$0 = $call10;
 STACKTOP = sp;return ($retval$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $cmp = 0, $l$sub$ptr$sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = (($f) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $wpos = (($f) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$lhs$cast = $0;
 $sub$ptr$rhs$cast = $1;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub>>>0)>($l>>>0);
 $l$sub$ptr$sub = $cmp ? $l : $sub$ptr$sub;
 _memcpy(($1|0),($s|0),($l$sub$ptr$sub|0))|0;
 $2 = HEAP32[$wpos>>2]|0;
 $add$ptr = (($2) + ($l$sub$ptr$sub)|0);
 HEAP32[$wpos>>2] = $add$ptr;
 STACKTOP = sp;return ($l|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _atof($s) {
 $s = $s|0;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_strtod($s,0));
 STACKTOP = sp;return (+$call);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $add$i = 0, $add$ptr$i = 0, $buf$i = 0, $call$i = 0.0, $cond$i = 0, $f$i = 0, $lock$i = 0, $rend$i = 0, $rpos$i = 0, $shcnt$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $tobool$i = 0, $tobool3$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $rpos$i = (($f$i) + 4|0);
 HEAP32[$rpos$i>>2] = $s;
 $rend$i = (($f$i) + 8|0);
 HEAP32[$rend$i>>2] = (-1);
 $buf$i = (($f$i) + 44|0);
 HEAP32[$buf$i>>2] = $s;
 $lock$i = (($f$i) + 76|0);
 HEAP32[$lock$i>>2] = -1;
 ___shlim($f$i,0);
 $call$i = (+___floatscan($f$i,1,1));
 $shcnt$i = (($f$i) + 108|0);
 $0 = HEAP32[$shcnt$i>>2]|0;
 $1 = HEAP32[$rpos$i>>2]|0;
 $2 = HEAP32[$rend$i>>2]|0;
 $sub$ptr$lhs$cast$i = $1;
 $sub$ptr$rhs$cast$i = $2;
 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
 $add$i = (($sub$ptr$sub$i) + ($0))|0;
 $tobool$i = ($p|0)==(0|0);
 if ($tobool$i) {
  STACKTOP = sp;return (+$call$i);
 }
 $tobool3$i = ($add$i|0)==(0);
 if ($tobool3$i) {
  $cond$i = $s;
 } else {
  $add$ptr$i = (($s) + ($add$i)|0);
  $cond$i = $add$ptr$i;
 }
 HEAP32[$p>>2] = $cond$i;
 STACKTOP = sp;return (+$call$i);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr5$i = 0, $buf$i = 0, $cmp$i = 0, $f$i = 0, $lock$i = 0, $rend$i = 0, $rend1$i = 0, $rend4$i = 0, $rpos$i = 0, $shcnt$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0;
 var $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $rpos$i = (($f$i) + 4|0);
 HEAP32[$rpos$i>>2] = $s;
 $buf$i = (($f$i) + 44|0);
 HEAP32[$buf$i>>2] = $s;
 $cmp$i = ($s|0)<(0|0);
 if ($cmp$i) {
  $rend$i = (($f$i) + 8|0);
  HEAP32[$rend$i>>2] = (-1);
 } else {
  $add$ptr$i = (($s) + 2147483647|0);
  $rend1$i = (($f$i) + 8|0);
  HEAP32[$rend1$i>>2] = $add$ptr$i;
 }
 $lock$i = (($f$i) + 76|0);
 HEAP32[$lock$i>>2] = -1;
 ___shlim($f$i,0);
 $0 = (___intscan($f$i,$base,1,-1,-1)|0);
 $1 = tempRet0;
 $tobool$i = ($p|0)==(0|0);
 if ($tobool$i) {
  tempRet0 = $1;
  STACKTOP = sp;return ($0|0);
 }
 $shcnt$i = (($f$i) + 108|0);
 $2 = HEAP32[$shcnt$i>>2]|0;
 $3 = HEAP32[$rpos$i>>2]|0;
 $rend4$i = (($f$i) + 8|0);
 $4 = HEAP32[$rend4$i>>2]|0;
 $sub$ptr$lhs$cast$i = $3;
 $sub$ptr$rhs$cast$i = $4;
 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) + ($2))|0;
 $add$i = (($sub$ptr$sub$i) - ($sub$ptr$rhs$cast$i))|0;
 $add$ptr5$i = (($s) + ($add$i)|0);
 HEAP32[$p>>2] = $add$ptr5$i;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _strtol($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr5$i = 0, $buf$i = 0, $cmp$i = 0, $f$i = 0, $lock$i = 0, $rend$i = 0, $rend1$i = 0, $rend4$i = 0, $rpos$i = 0, $shcnt$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0;
 var $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $rpos$i = (($f$i) + 4|0);
 HEAP32[$rpos$i>>2] = $s;
 $buf$i = (($f$i) + 44|0);
 HEAP32[$buf$i>>2] = $s;
 $cmp$i = ($s|0)<(0|0);
 if ($cmp$i) {
  $rend$i = (($f$i) + 8|0);
  HEAP32[$rend$i>>2] = (-1);
 } else {
  $add$ptr$i = (($s) + 2147483647|0);
  $rend1$i = (($f$i) + 8|0);
  HEAP32[$rend1$i>>2] = $add$ptr$i;
 }
 $lock$i = (($f$i) + 76|0);
 HEAP32[$lock$i>>2] = -1;
 ___shlim($f$i,0);
 $0 = (___intscan($f$i,$base,1,-2147483648,0)|0);
 $1 = tempRet0;
 $tobool$i = ($p|0)==(0|0);
 if ($tobool$i) {
  STACKTOP = sp;return ($0|0);
 }
 $shcnt$i = (($f$i) + 108|0);
 $2 = HEAP32[$shcnt$i>>2]|0;
 $3 = HEAP32[$rpos$i>>2]|0;
 $rend4$i = (($f$i) + 8|0);
 $4 = HEAP32[$rend4$i>>2]|0;
 $sub$ptr$lhs$cast$i = $3;
 $sub$ptr$rhs$cast$i = $4;
 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) + ($2))|0;
 $add$i = (($sub$ptr$sub$i) - ($sub$ptr$rhs$cast$i))|0;
 $add$ptr5$i = (($s) + ($add$i)|0);
 HEAP32[$p>>2] = $add$ptr5$i;
 STACKTOP = sp;return ($0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $and = 0, $and15 = 0, $and16 = 0, $and33 = 0, $cmp = 0, $cmp11 = 0, $cmp1128 = 0, $cmp28 = 0, $cmp8 = 0, $cond = 0, $conv1 = 0, $dec = 0;
 var $dec34 = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $lnot = 0, $mul = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa52 = 0, $n$addr$037 = 0, $n$addr$1$lcssa = 0, $n$addr$129 = 0, $n$addr$225 = 0, $n$addr$3 = 0, $neg = 0, $or$cond = 0, $or$cond36 = 0, $s$0$lcssa = 0, $s$0$lcssa51 = 0, $s$038 = 0, $s$126 = 0;
 var $s$2 = 0, $sub = 0, $sub22 = 0, $tobool = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool235 = 0, $tobool25 = 0, $tobool2524 = 0, $tobool34 = 0, $tobool36 = 0, $w$0$lcssa = 0, $w$030 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $0 = $src;
 $and33 = $0 & 3;
 $tobool34 = ($and33|0)==(0);
 $tobool235 = ($n|0)==(0);
 $or$cond36 = $tobool34 | $tobool235;
 L1: do {
  if ($or$cond36) {
   $n$addr$0$lcssa = $n;$s$0$lcssa = $src;$tobool2$lcssa = $tobool235;
   label = 5;
  } else {
   $1 = $c&255;
   $n$addr$037 = $n;$s$038 = $src;
   while(1) {
    $2 = HEAP8[$s$038>>0]|0;
    $cmp = ($2<<24>>24)==($1<<24>>24);
    if ($cmp) {
     $n$addr$0$lcssa52 = $n$addr$037;$s$0$lcssa51 = $s$038;
     label = 6;
     break L1;
    }
    $incdec$ptr = (($s$038) + 1|0);
    $dec = (($n$addr$037) + -1)|0;
    $3 = $incdec$ptr;
    $and = $3 & 3;
    $tobool = ($and|0)==(0);
    $tobool2 = ($dec|0)==(0);
    $or$cond = $tobool | $tobool2;
    if ($or$cond) {
     $n$addr$0$lcssa = $dec;$s$0$lcssa = $incdec$ptr;$tobool2$lcssa = $tobool2;
     label = 5;
     break;
    } else {
     $n$addr$037 = $dec;$s$038 = $incdec$ptr;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  if ($tobool2$lcssa) {
   $n$addr$3 = 0;$s$2 = $s$0$lcssa;
  } else {
   $n$addr$0$lcssa52 = $n$addr$0$lcssa;$s$0$lcssa51 = $s$0$lcssa;
   label = 6;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $4 = HEAP8[$s$0$lcssa51>>0]|0;
   $5 = $c&255;
   $cmp8 = ($4<<24>>24)==($5<<24>>24);
   if ($cmp8) {
    $n$addr$3 = $n$addr$0$lcssa52;$s$2 = $s$0$lcssa51;
   } else {
    $mul = Math_imul($conv1, 16843009)|0;
    $cmp1128 = ($n$addr$0$lcssa52>>>0)>(3);
    L11: do {
     if ($cmp1128) {
      $n$addr$129 = $n$addr$0$lcssa52;$w$030 = $s$0$lcssa51;
      while(1) {
       $6 = HEAP32[$w$030>>2]|0;
       $xor = $6 ^ $mul;
       $sub = (($xor) + -16843009)|0;
       $neg = $xor & -2139062144;
       $and15 = $neg ^ -2139062144;
       $and16 = $and15 & $sub;
       $lnot = ($and16|0)==(0);
       if (!($lnot)) {
        $n$addr$1$lcssa = $n$addr$129;$w$0$lcssa = $w$030;
        break L11;
       }
       $incdec$ptr21 = (($w$030) + 4|0);
       $sub22 = (($n$addr$129) + -4)|0;
       $cmp11 = ($sub22>>>0)>(3);
       if ($cmp11) {
        $n$addr$129 = $sub22;$w$030 = $incdec$ptr21;
       } else {
        $n$addr$1$lcssa = $sub22;$w$0$lcssa = $incdec$ptr21;
        break;
       }
      }
     } else {
      $n$addr$1$lcssa = $n$addr$0$lcssa52;$w$0$lcssa = $s$0$lcssa51;
     }
    } while(0);
    $tobool2524 = ($n$addr$1$lcssa|0)==(0);
    if ($tobool2524) {
     $n$addr$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $n$addr$225 = $n$addr$1$lcssa;$s$126 = $w$0$lcssa;
     while(1) {
      $7 = HEAP8[$s$126>>0]|0;
      $cmp28 = ($7<<24>>24)==($5<<24>>24);
      if ($cmp28) {
       $n$addr$3 = $n$addr$225;$s$2 = $s$126;
       break L8;
      }
      $incdec$ptr33 = (($s$126) + 1|0);
      $dec34 = (($n$addr$225) + -1)|0;
      $tobool25 = ($dec34|0)==(0);
      if ($tobool25) {
       $n$addr$3 = 0;$s$2 = $incdec$ptr33;
       break;
      } else {
       $n$addr$225 = $dec34;$s$126 = $incdec$ptr33;
      }
     }
    }
   }
  }
 } while(0);
 $tobool36 = ($n$addr$3|0)!=(0);
 $cond = $tobool36 ? $s$2 : 0;
 STACKTOP = sp;return ($cond|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $cmp = 0, $cond = 0, $conv5 = 0, $conv6 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr3 = 0, $l$010 = 0, $n$addr$09 = 0, $r$011 = 0, $sub = 0, $tobool = 0, $tobool8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool8 = ($n|0)==(0);
 if ($tobool8) {
  $cond = 0;
  STACKTOP = sp;return ($cond|0);
 } else {
  $l$010 = $vl;$n$addr$09 = $n;$r$011 = $vr;
 }
 while(1) {
  $0 = HEAP8[$l$010>>0]|0;
  $1 = HEAP8[$r$011>>0]|0;
  $cmp = ($0<<24>>24)==($1<<24>>24);
  if (!($cmp)) {
   break;
  }
  $dec = (($n$addr$09) + -1)|0;
  $incdec$ptr = (($l$010) + 1|0);
  $incdec$ptr3 = (($r$011) + 1|0);
  $tobool = ($dec|0)==(0);
  if ($tobool) {
   $cond = 0;
   label = 5;
   break;
  } else {
   $l$010 = $incdec$ptr;$n$addr$09 = $dec;$r$011 = $incdec$ptr3;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($cond|0);
 }
 $conv5 = $0&255;
 $conv6 = $1&255;
 $sub = (($conv5) - ($conv6))|0;
 $cond = $sub;
 STACKTOP = sp;return ($cond|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp7 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $l$addr$010 = 0, $or$cond = 0, $or$cond9 = 0, $r$addr$011 = 0, $sub = 0, $tobool = 0, $tobool8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $cmp7 = ($0<<24>>24)!=($1<<24>>24);
 $tobool8 = ($0<<24>>24)==(0);
 $or$cond9 = $cmp7 | $tobool8;
 if ($or$cond9) {
  $$lcssa = $0;$$lcssa6 = $1;
 } else {
  $l$addr$010 = $l;$r$addr$011 = $r;
  while(1) {
   $incdec$ptr = (($l$addr$010) + 1|0);
   $incdec$ptr4 = (($r$addr$011) + 1|0);
   $2 = HEAP8[$incdec$ptr>>0]|0;
   $3 = HEAP8[$incdec$ptr4>>0]|0;
   $cmp = ($2<<24>>24)!=($3<<24>>24);
   $tobool = ($2<<24>>24)==(0);
   $or$cond = $cmp | $tobool;
   if ($or$cond) {
    $$lcssa = $2;$$lcssa6 = $3;
    break;
   } else {
    $l$addr$010 = $incdec$ptr;$r$addr$011 = $incdec$ptr4;
   }
  }
 }
 $conv5 = $$lcssa&255;
 $conv6 = $$lcssa6&255;
 $sub = (($conv5) - ($conv6))|0;
 STACKTOP = sp;return ($sub|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strcat(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    var pdestEnd = 0;
    pdestEnd = (pdest + (_strlen(pdest)|0))|0;
    do {
      HEAP8[((pdestEnd+i)>>0)]=HEAP8[((psrc+i)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

    
    function dynCall_iiii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      return FUNCTION_TABLE_iiii[index&1](a1|0,a2|0,a3|0)|0;
    }
  

    function dynCall_iii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      return FUNCTION_TABLE_iii[index&127](a1|0,a2|0)|0;
    }
  
function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
  function b1(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(1);return 0; }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,_sn_write];
  var FUNCTION_TABLE_iii = [b1,b1,_builtin_cons,_builtin_car,_builtin_cdr,_builtin_add,_builtin_sub,_builtin_mul,_builtin_div,_builtin_vector,_builtin_vector_with_unchangable_length,_builtin_vector_length,_builtin_vector_push,_builtin_vector_pop,_builtin_num_equal,_builtin_num_lt,_builtin_num_le,_builtin_eq,_builtin_exit,_builtin_gt,_builtin_ge,_builtin_parse,_builtin_random,_builtin_strcmp,_builtin_string_slice,_builtin_string_length,_builtin_string_append,_builtin_make_table,_builtin_table_keys
  ,_builtin_table_delete,_builtin_file_read,_builtin_file_write,_builtin_int_to_string,_builtin_float_to_string,_builtin_input,_builtin_display_string,_builtin_string_to_int,_builtin_string_to_float,_builtin_null_type,_builtin_numer,_builtin_denom,_builtin_gensym,_builtin_table_add_proto,_builtin_table_proto,_builtin_typeof,_builtin_cos,_builtin_sin,_builtin_tan,_builtin_acos,_builtin_asin,_builtin_atan,_builtin_cosh,_builtin_sinh,_builtin_tanh,_builtin_log,_builtin_exp,_builtin_log10,_builtin_pow,_builtin_sqrt
  ,_builtin_ceil,_builtin_floor,_builtin_string_find,_builtin_string_replace,_builtin_vector_slice,_builtin_set_car,_builtin_set_cdr,_builtin_system,_builtin_left_shift,_builtin_right_shift,_builtin_unsigned_right_shift,_builtin_bitwise_and,_builtin_bitwise_or,_builtin_abs_path,_builtin_float_to_int64,_builtin_table_length,_builtin_string_char_code_at,_builtin_string_from_char_code,_builtin_os_fork,_builtin_os_getpid,_builtin_os_getppid,_builtin_os_waitpid,_builtin_os_getenv,_builtin_sleep,_builtin_modulo,_builtin_int,_builtin_float,_builtin_File,_builtin_file_close,_builtin_file_readlines
  ,_builtin_file_seek,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1];

    return { _i64Subtract: _i64Subtract, _strcat: _strcat, _free: _free, _realloc: _realloc, _i64Add: _i64Add, _bitshift64Ashr: _bitshift64Ashr, _strlen: _strlen, _Walley_init: _Walley_init, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _Walley_RunStringAndReturnString: _Walley_RunStringAndReturnString, _bitshift64Lshr: _bitshift64Lshr, _strcpy: _strcpy, _calloc: _calloc, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_iii: dynCall_iii };
  })
  // EMSCRIPTEN_END_ASM
  ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "min": Math_min, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iii": nullFunc_iii, "invoke_iiii": invoke_iiii, "invoke_iii": invoke_iii, "_fabs": _fabs, "_sin": _sin, "_exp": _exp, "_fork": _fork, "_llvm_pow_f64": _llvm_pow_f64, "_acos": _acos, "_cosh": _cosh, "_fread": _fread, "_fmod": _fmod, "_lseek": _lseek, "__reallyNegative": __reallyNegative, "_sleep": _sleep, "_realpath": _realpath, "_usleep": _usleep, "_asin": _asin, "_fsync": _fsync, "_floor": _floor, "_system": _system, "_fflush": _fflush, "_cos": _cos, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_wait": _wait, "_open": _open, "_getpid": _getpid, "_sbrk": _sbrk, "_send": _send, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_sinh": _sinh, "_fprintf": _fprintf, "_sysconf": _sysconf, "___setErrNo": ___setErrNo, "_rewind": _rewind, "___buildEnvironment": ___buildEnvironment, "_atan": _atan, "_fseek": _fseek, "_getline": _getline, "_tanh": _tanh, "_pread": _pread, "_getenv": _getenv, "_fclose": _fclose, "_getppid": _getppid, "_log": _log, "_write": _write, "_ftell": _ftell, "___errno_location": ___errno_location, "_recv": _recv, "_tan": _tan, "_copysign": _copysign, "_printf": _printf, "__exit": __exit, "_read": _read, "_copysignl": _copysignl, "_fmodl": _fmodl, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_mkport": _mkport, "_strerror": _strerror, "_ceil": _ceil, "__formatString": __formatString, "_log10": _log10, "_sqrt": _sqrt, "_fopen": _fopen, "_exit": _exit, "_close": _close, "_fputs": _fputs, "_waitpid": _waitpid, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_stdin": _stdin }, buffer);
  var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__strcat = asm["_strcat"]; asm["_strcat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strcat.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Ashr.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strlen.apply(null, arguments);
};

var real__Walley_init = asm["_Walley_init"]; asm["_Walley_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__Walley_init.apply(null, arguments);
};

var real__Walley_RunStringAndReturnString = asm["_Walley_RunStringAndReturnString"]; asm["_Walley_RunStringAndReturnString"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__Walley_RunStringAndReturnString.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strcpy.apply(null, arguments);
};

var real__calloc = asm["_calloc"]; asm["_calloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__calloc.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_runPostSets.apply(null, arguments);
};
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _free = Module["_free"] = asm["_free"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _Walley_init = Module["_Walley_init"] = asm["_Walley_init"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _Walley_RunStringAndReturnString = Module["_Walley_RunStringAndReturnString"] = asm["_Walley_RunStringAndReturnString"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
  
  Runtime.stackAlloc = asm['stackAlloc'];
  Runtime.stackSave = asm['stackSave'];
  Runtime.stackRestore = asm['stackRestore'];
  Runtime.setTempRet0 = asm['setTempRet0'];
  Runtime.getTempRet0 = asm['getTempRet0'];
  

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



var Walley_init = Module.cwrap('Walley_init', '', []);
var Walley_RunStringAndReturnString = Module.cwrap('Walley_RunStringAndReturnString', 'string', ['string']);
var walley = {init: Walley_init, runStr: Walley_RunStringAndReturnString}
walley.init();
console.log(walley.runStr("(/ 12 15 16)"))